
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8d4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800eba4  0800eba4  0001eba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee9c  0800ee9c  0001ee9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800eea4  0800eea4  0001eea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800eeac  0800eeac  0001eeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000238  24000000  0800eeb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a54  24000238  0800f0e8  00020238  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001c8c  0800f0e8  00021c8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 10 .debug_info   000214de  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003707  00000000  00000000  00041744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  00044e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001398  00000000  00000000  000462f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003516a  00000000  00000000  00047690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b796  00000000  00000000  0007c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001536a9  00000000  00000000  00097f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eb639  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c40  00000000  00000000  001eb68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000238 	.word	0x24000238
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800eb8c 	.word	0x0800eb8c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400023c 	.word	0x2400023c
 800030c:	0800eb8c 	.word	0x0800eb8c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[1]},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[2]},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, cD[3]}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	b6ae7d56 	.word	0xb6ae7d56
 800098c:	3fb97f62 	.word	0x3fb97f62
 8000990:	cccccccd 	.word	0xcccccccd
 8000994:	40e4cccc 	.word	0x40e4cccc
 8000998:	00000000 	.word	0x00000000
 800099c:	408f4000 	.word	0x408f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40b06800 	.word	0x40b06800
 80009a8:	24000000 	.word	0x24000000
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f004 fa0e 	bl	8004dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f862 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fc68 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fc3e 	bl	8001244 <MX_DMA_Init>
  MX_USART10_UART_Init();
 80009c8:	f000 fbf0 	bl	80011ac <MX_USART10_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f91a 	bl	8000c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d0:	f000 f96e 	bl	8000cb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009d4:	f000 f9c2 	bl	8000d5c <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d8:	f000 fa0e 	bl	8000df8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80009dc:	f000 faa8 	bl	8000f30 <MX_TIM15_Init>
  MX_TIM23_Init();
 80009e0:	f000 fb38 	bl	8001054 <MX_TIM23_Init>
  MX_TIM24_Init();
 80009e4:	f000 fb8c 	bl	8001100 <MX_TIM24_Init>
  MX_TIM2_Init();
 80009e8:	f000 f8be 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xb0>)
 80009ee:	f00a f987 	bl	800ad00 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0xb4>)
 80009f4:	f00a f984 	bl	800ad00 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <main+0xb8>)
 80009fc:	f00a fa5e 	bl	800aebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a00:	210c      	movs	r1, #12
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xb8>)
 8000a04:	f00a fa5a 	bl	800aebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <main+0xbc>)
 8000a0c:	f00a fa56 	bl	800aebc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4817      	ldr	r0, [pc, #92]	; (8000a70 <main+0xbc>)
 8000a14:	f00a fa52 	bl	800aebc <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0xc0>)
 8000a1c:	f00a fc10 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0xc0>)
 8000a24:	f00a fc0c 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <main+0xc4>)
 8000a2c:	f00a fc08 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <main+0xc4>)
 8000a34:	f00a fc04 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0xc8>)
 8000a3c:	f00a fc00 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc8>)
 8000a44:	f00a fbfc 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <main+0xcc>)
 8000a4c:	f00a fbf8 	bl	800b240 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xcc>)
 8000a54:	f00a fbf4 	bl	800b240 <HAL_TIM_Encoder_Start>


    setup();
 8000a58:	f002 fbea 	bl	8003230 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a5c:	f002 fc0c 	bl	8003278 <loop>
 8000a60:	e7fc      	b.n	8000a5c <main+0xa8>
 8000a62:	bf00      	nop
 8000a64:	24000338 	.word	0x24000338
 8000a68:	24000254 	.word	0x24000254
 8000a6c:	24000384 	.word	0x24000384
 8000a70:	240003d0 	.word	0x240003d0
 8000a74:	24000468 	.word	0x24000468
 8000a78:	240002a0 	.word	0x240002a0
 8000a7c:	240002ec 	.word	0x240002ec
 8000a80:	2400041c 	.word	0x2400041c

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00d fef0 	bl	800e878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00d feea 	bl	800e878 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f007 fe43 	bl	8008730 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aca:	bf00      	nop
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad8:	d1f8      	bne.n	8000acc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000af2:	2315      	movs	r3, #21
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fe46 	bl	80087a4 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fc79 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b30:	2308      	movs	r3, #8
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 f9d8 	bl	8008f00 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b56:	f000 fc5d 	bl	8001414 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3770      	adds	r7, #112	; 0x70
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024800 	.word	0x58024800

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	2253      	movs	r2, #83	; 0x53
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000b9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bb0:	f00a f84e 	bl	800ac50 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bba:	f000 fc2b 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000bcc:	f00a fdfa 	bl	800b7c4 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fc1d 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM2_Init+0x98>)
 8000be8:	f00b fb4c 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bf2:	f000 fc0f 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000254 	.word	0x24000254

08000c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	; 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00d fe30 	bl	800e878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa8>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c74:	f00a fa3e 	bl	800b0f4 <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c7e:	f000 fbc9 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM3_Init+0xa4>)
 8000c90:	f00b faf8 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9a:	f000 fbbb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240002a0 	.word	0x240002a0
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00d fdda 	bl	800e878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_TIM4_Init+0xa8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d20:	f00a f9e8 	bl	800b0f4 <HAL_TIM_Encoder_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2a:	f000 fb73 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_TIM4_Init+0xa4>)
 8000d3c:	f00b faa2 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d46:	f000 fb65 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	240002ec 	.word	0x240002ec
 8000d58:	40000800 	.word	0x40000800

08000d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <MX_TIM5_Init+0x98>)
 8000d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d82:	2253      	movs	r2, #83	; 0x53
 8000d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000da2:	f009 ff55 	bl	800ac50 <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dac:	f000 fb32 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dbe:	f00a fd01 	bl	800b7c4 <HAL_TIM_ConfigClockSource>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000dc8:	f000 fb24 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_TIM5_Init+0x94>)
 8000dda:	f00b fa53 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fb16 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000338 	.word	0x24000338
 8000df4:	40000c00 	.word	0x40000c00

08000df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b098      	sub	sp, #96	; 0x60
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00d fd27 	bl	800e878 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x134>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4199;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e58:	f009 ffd8 	bl	800ae0c <HAL_TIM_PWM_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fad7 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000e7a:	f00b fa03 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 fac6 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000eae:	f00a fb75 	bl	800b59c <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000eb8:	f000 faac 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000ec6:	f00a fb69 	bl	800b59c <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ed0:	f000 faa0 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f0a:	f00b fa57 	bl	800c3bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f14:	f000 fa7e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x130>)
 8000f1a:	f003 fa61 	bl	80043e0 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3760      	adds	r7, #96	; 0x60
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000384 	.word	0x24000384
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	; 0x60
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2234      	movs	r2, #52	; 0x34
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00d fc8b 	bl	800e878 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f64:	4a3a      	ldr	r2, [pc, #232]	; (8001050 <MX_TIM15_Init+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <MX_TIM15_Init+0x11c>)
 8000f90:	f009 ff3c 	bl	800ae0c <HAL_TIM_PWM_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa3b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4827      	ldr	r0, [pc, #156]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fae:	f00b f969 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa2c 	bl	8001414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <MX_TIM15_Init+0x11c>)
 8000fe2:	f00a fadb 	bl	800b59c <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fa12 	bl	8001414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM15_Init+0x11c>)
 8000ffa:	f00a facf 	bl	800b59c <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001004:	f000 fa06 	bl	8001414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM15_Init+0x11c>)
 8001030:	f00b f9c4 	bl	800c3bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103a:	f000 f9eb 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM15_Init+0x11c>)
 8001040:	f003 f9ce 	bl	80043e0 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	240003d0 	.word	0x240003d0
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00d fc08 	bl	800e878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_TIM23_Init+0xa8>)
 8001076:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM23_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM23_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001098:	2303      	movs	r3, #3
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010c4:	f00a f816 	bl	800b0f4 <HAL_TIM_Encoder_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80010ce:	f000 f9a1 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_TIM23_Init+0xa4>)
 80010e0:	f00b f8d0 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f993 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3730      	adds	r7, #48	; 0x30
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2400041c 	.word	0x2400041c
 80010fc:	4000e000 	.word	0x4000e000

08001100 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00d fbb2 	bl	800e878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_TIM24_Init+0xa8>)
 8001122:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001144:	2303      	movs	r3, #3
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM24_Init+0xa4>)
 8001170:	f009 ffc0 	bl	800b0f4 <HAL_TIM_Encoder_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f94b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM24_Init+0xa4>)
 800118c:	f00b f87a 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001196:	f000 f93d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000468 	.word	0x24000468
 80011a8:	4000e400 	.word	0x4000e400

080011ac <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_USART10_UART_Init+0x94>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011b8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011bc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_USART10_UART_Init+0x90>)
 80011f6:	f00b f99f 	bl	800c538 <HAL_UART_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f908 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_USART10_UART_Init+0x90>)
 8001208:	f00d fa18 	bl	800e63c <HAL_UARTEx_SetTxFifoThreshold>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 f8ff 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_USART10_UART_Init+0x90>)
 800121a:	f00d fa4d 	bl	800e6b8 <HAL_UARTEx_SetRxFifoThreshold>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001224:	f000 f8f6 	bl	8001414 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART10_UART_Init+0x90>)
 800122a:	f00d f9ce 	bl	800e5ca <HAL_UARTEx_DisableFifoMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f8ee 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	240004b4 	.word	0x240004b4
 8001240:	40011c00 	.word	0x40011c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_DMA_Init+0x4c>)
 800124c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_DMA_Init+0x4c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_DMA_Init+0x4c>)
 800125c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	200b      	movs	r0, #11
 800126e:	f003 ff44 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001272:	200b      	movs	r0, #11
 8001274:	f003 ff5b 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	200c      	movs	r0, #12
 800127e:	f003 ff3c 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001282:	200c      	movs	r0, #12
 8001284:	f003 ff53 	bl	800512e <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58024400 	.word	0x58024400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x170>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <MX_GPIO_Init+0x170>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <MX_GPIO_Init+0x170>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <MX_GPIO_Init+0x170>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <MX_GPIO_Init+0x170>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_GPIO_Init+0x170>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_GPIO_Init+0x170>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a36      	ldr	r2, [pc, #216]	; (8001404 <MX_GPIO_Init+0x170>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <MX_GPIO_Init+0x170>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <MX_GPIO_Init+0x170>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <MX_GPIO_Init+0x170>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_GPIO_Init+0x170>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0x170>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <MX_GPIO_Init+0x170>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_GPIO_Init+0x170>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800137c:	2200      	movs	r2, #0
 800137e:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <MX_GPIO_Init+0x174>)
 8001384:	f007 f996 	bl	80086b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_GPIO_Init+0x178>)
 8001390:	f007 f990 	bl	80086b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001394:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0x174>)
 80013ae:	f006 fed7 	bl	8008160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x17c>)
 80013ca:	f006 fec9 	bl	8008160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_GPIO_Init+0x178>)
 80013e8:	f006 feba 	bl	8008160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f003 fe82 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f6:	2028      	movs	r0, #40	; 0x28
 80013f8:	f003 fe99 	bl	800512e <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>

0800141e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <_ZN3ros3MsgC1Ev+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0800ee4c 	.word	0x0800ee4c

08001460 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
      data()
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffe8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffcf 	bl	800141e <_ZN3ros4TimeC1Ev>
    {
    }
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800ee34 	.word	0x0800ee34

08001490 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0a19      	lsrs	r1, r3, #8
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0c19      	lsrs	r1, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3302      	adds	r3, #2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	b2ca      	uxtb	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0e19      	lsrs	r1, r3, #24
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3303      	adds	r3, #3
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	0a19      	lsrs	r1, r3, #8
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	b2ca      	uxtb	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	0c19      	lsrs	r1, r3, #16
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3302      	adds	r3, #2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0e19      	lsrs	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3303      	adds	r3, #3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3304      	adds	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
      return offset;
 8001532:	68fb      	ldr	r3, [r7, #12]
    }
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3302      	adds	r3, #2
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3303      	adds	r3, #3
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3302      	adds	r3, #2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3303      	adds	r3, #3
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80015fa:	68fb      	ldr	r3, [r7, #12]
    }
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	0800eba4 	.word	0x0800eba4

08001624 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0800ebb8 	.word	0x0800ebb8

08001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef8 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	809a      	strh	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    {
    }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0800ee1c 	.word	0x0800ee1c
 8001684:	0800ebdc 	.word	0x0800ebdc

08001688 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8899      	ldrh	r1, [r3, #4]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b299      	uxth	r1, r3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3302      	adds	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe24 	bl	8000310 <strlen>
 80016c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	69b9      	ldr	r1, [r7, #24]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fdda 	bl	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3304      	adds	r3, #4
 80016dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	18d0      	adds	r0, r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f00d f8b6 	bl	800e85c <memcpy>
      offset += length_topic_name;
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strlen>
 8001702:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fdbd 	bl	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	18d0      	adds	r0, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4619      	mov	r1, r3
 8001726:	f00d f899 	bl	800e85c <memcpy>
      offset += length_message_type;
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fdea 	bl	8000310 <strlen>
 800173c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fda0 	bl	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4619      	mov	r1, r3
 8001760:	f00d f87c 	bl	800e85c <memcpy>
      offset += length_md5sum;
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0a19      	lsrs	r1, r3, #8
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0e19      	lsrs	r1, r3, #24
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3303      	adds	r3, #3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80017b4:	69fb      	ldr	r3, [r7, #28]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b08a      	sub	sp, #40	; 0x28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	b21a      	sxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	440b      	add	r3, r1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	441a      	add	r2, r3
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fd5c 	bl	80032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	441a      	add	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	e7ec      	b.n	800181a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3b01      	subs	r3, #1
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	441a      	add	r2, r3
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fd29 	bl	80032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3304      	adds	r3, #4
 800187a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d20c      	bcs.n	80018a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	441a      	add	r2, r3
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	440b      	add	r3, r1
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	3301      	adds	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e7ec      	b.n	8001880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	3b01      	subs	r3, #1
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	441a      	add	r2, r3
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fcf6 	bl	80032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	441a      	add	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	440b      	add	r3, r1
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e7ec      	b.n	80018e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	3b01      	subs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	3b01      	subs	r3, #1
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440a      	add	r2, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	440b      	add	r3, r1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3302      	adds	r3, #2
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3304      	adds	r3, #4
 8001982:	61bb      	str	r3, [r7, #24]
     return offset;
 8001984:	69bb      	ldr	r3, [r7, #24]
    }
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800ebe0 	.word	0x0800ebe0

080019ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800ebfc 	.word	0x0800ebfc

080019c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd34 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80019e8:	609a      	str	r2, [r3, #8]
    {
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800ee04 	.word	0x0800ee04
 80019f8:	0800ebdc 	.word	0x0800ebdc

080019fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	7912      	ldrb	r2, [r2, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fc75 	bl	8000310 <strlen>
 8001a26:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fc2b 	bl	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	18d0      	adds	r0, r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f00c ff07 	bl	800e85c <memcpy>
      offset += length_msg;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
    }
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	441a      	add	r2, r3
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc1b 	bl	80032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	3304      	adds	r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d20c      	bcs.n	8001ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e7ec      	b.n	8001a9c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
     return offset;
 8001ae6:	693b      	ldr	r3, [r7, #16]
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	0800ec20 	.word	0x0800ec20

08001b0c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	0800ec34 	.word	0x0800ec34

08001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc84 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0800edec 	.word	0x0800edec

08001b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0a19      	lsrs	r1, r3, #8
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c19      	lsrs	r1, r3, #16
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0e19      	lsrs	r1, r3, #24
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3303      	adds	r3, #3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d22b      	bcs.n	8001c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	0a19      	lsrs	r1, r3, #8
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2ca      	uxtb	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	0c19      	lsrs	r1, r3, #16
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3302      	adds	r3, #2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	e7ce      	b.n	8001bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	0a19      	lsrs	r1, r3, #8
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	0c19      	lsrs	r1, r3, #16
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3302      	adds	r3, #2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2ca      	uxtb	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0e19      	lsrs	r1, r3, #24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3303      	adds	r3, #3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3304      	adds	r3, #4
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d22b      	bcs.n	8001cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	0a19      	lsrs	r1, r3, #8
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0c19      	lsrs	r1, r3, #16
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e7ce      	b.n	8001c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3304      	adds	r3, #4
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d228      	bcs.n	8001d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fae4 	bl	8000310 <strlen>
 8001d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fa9a 	bl	800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	18d0      	adds	r0, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f00c fd72 	bl	800e85c <memcpy>
      offset += length_stringsi;
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e7d1      	b.n	8001d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b08e      	sub	sp, #56	; 0x38
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	3301      	adds	r3, #1
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	3304      	adds	r3, #4
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	6a3a      	ldr	r2, [r7, #32]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d90a      	bls.n	8001e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f00c fd44 	bl	800e888 <realloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d236      	bcs.n	8001e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440a      	add	r2, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	3301      	adds	r3, #1
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	440b      	add	r3, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	3302      	adds	r3, #2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	3303      	adds	r3, #3
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	e7c3      	b.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	3301      	adds	r3, #1
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	3303      	adds	r3, #3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	3304      	adds	r3, #4
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d90a      	bls.n	8001eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f00c fcd0 	bl	800e888 <realloc>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d236      	bcs.n	8001f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0a:	6839      	ldr	r1, [r7, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	3301      	adds	r3, #1
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	041b      	lsls	r3, r3, #16
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	3214      	adds	r2, #20
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e7c3      	b.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d90a      	bls.n	8001fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f00c fc5c 	bl	800e888 <realloc>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d23f      	bcs.n	800206a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	441a      	add	r2, r3
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f966 	bl	80032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	3304      	adds	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	440b      	add	r3, r1
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e7ec      	b.n	8002006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3b01      	subs	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3220      	adds	r2, #32
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	3301      	adds	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
 8002068:	e7ba      	b.n	8001fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800206c:	4618      	mov	r0, r3
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	0800ed40 	.word	0x0800ed40

08002090 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0800ec58 	.word	0x0800ec58

080020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6891      	ldr	r1, [r2, #8]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
  };
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
  }
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a42      	ldr	r2, [pc, #264]	; (8002238 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d068      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d061      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d05a      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d053      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04c      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	; (800224c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03e      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d037      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d029      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01b      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d014      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d006      	beq.n	8002204 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	e008      	b.n	800222a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8

08002278 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	60d3      	str	r3, [r2, #12]
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	240004b4 	.word	0x240004b4

080022b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f804 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e2:	4619      	mov	r1, r3
 80022e4:	f00a fa46 	bl	800c774 <HAL_UART_Receive_DMA>
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff09 	bl	800211c <_ZN13STM32Hardware10getRdmaIndEv>
 800230a:	4603      	mov	r3, r0
 800230c:	429c      	cmp	r4, r3
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002320:	1c59      	adds	r1, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002340:	68fb      	ldr	r3, [r7, #12]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
	...

0800234c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	2b20      	cmp	r3, #32
 800235e:	d108      	bne.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 8002360:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0x26>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <_ZN13STM32Hardware5flushEv+0x28>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d049      	beq.n	800240c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d039      	beq.n	8002406 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d20c      	bcs.n	80023c0 <_ZN13STM32Hardware5flushEv+0x74>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	e007      	b.n	80023d0 <_ZN13STM32Hardware5flushEv+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f00a f931 	bl	800c650 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
      }
    }
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	24000634 	.word	0x24000634

08002418 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
      int n = length;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242e:	bfa8      	it	ge
 8002430:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002434:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4293      	cmp	r3, r2
 8002446:	bf28      	it	cs
 8002448:	4613      	movcs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f00c f9fb 	bl	800e85c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	d00b      	beq.n	800249e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	18d1      	adds	r1, r2, r3
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f00c f9df 	bl	800e85c <memcpy>
      }

      flush();
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff54 	bl	800234c <_ZN13STM32Hardware5flushEv>
    }
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	f002 fd16 	bl	8004ee4 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ffb6 	bl	8001440 <_ZN3ros3MsgC1Ev>
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	0800eda8 	.word	0x0800eda8

08002514 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800252c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	4401      	add	r1, r0
 8002536:	b2d3      	uxtb	r3, r2
 8002538:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800253a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	0a02      	lsrs	r2, r0, #8
 8002548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800254c:	0a0b      	lsrs	r3, r1, #8
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3101      	adds	r1, #1
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c02      	lsrs	r2, r0, #16
 8002568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800256c:	0c0b      	lsrs	r3, r1, #16
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	3102      	adds	r1, #2
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	4401      	add	r1, r0
 8002576:	b2d3      	uxtb	r3, r2
 8002578:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800257a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0e02      	lsrs	r2, r0, #24
 8002588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258c:	0e0b      	lsrs	r3, r1, #24
 800258e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002590:	3103      	adds	r1, #3
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	4401      	add	r1, r0
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	000a      	movs	r2, r1
 80025a8:	2300      	movs	r3, #0
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	3104      	adds	r1, #4
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	4401      	add	r1, r0
 80025b2:	b2d3      	uxtb	r3, r2
 80025b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	0a0a      	lsrs	r2, r1, #8
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	3105      	adds	r1, #5
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	4401      	add	r1, r0
 80025ce:	b2d3      	uxtb	r3, r2
 80025d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	0c0a      	lsrs	r2, r1, #16
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	3106      	adds	r1, #6
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	4401      	add	r1, r0
 80025ea:	b2d3      	uxtb	r3, r2
 80025ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0e0a      	lsrs	r2, r1, #24
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	3107      	adds	r1, #7
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4401      	add	r1, r0
 8002606:	b2d3      	uxtb	r3, r2
 8002608:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3308      	adds	r3, #8
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002616:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800261a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800261e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002620:	6838      	ldr	r0, [r7, #0]
 8002622:	4401      	add	r1, r0
 8002624:	b2d3      	uxtb	r3, r2
 8002626:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002628:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	0a02      	lsrs	r2, r0, #8
 8002636:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263a:	0a0b      	lsrs	r3, r1, #8
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3101      	adds	r1, #1
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c02      	lsrs	r2, r0, #16
 8002656:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	3102      	adds	r1, #2
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	4401      	add	r1, r0
 8002664:	b2d3      	uxtb	r3, r2
 8002666:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002668:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	0e02      	lsrs	r2, r0, #24
 8002676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800267a:	0e0b      	lsrs	r3, r1, #24
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	3103      	adds	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4401      	add	r1, r0
 8002684:	b2d3      	uxtb	r3, r2
 8002686:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	000a      	movs	r2, r1
 8002696:	2300      	movs	r3, #0
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	3104      	adds	r1, #4
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	b2d3      	uxtb	r3, r2
 80026a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	0a0a      	lsrs	r2, r1, #8
 80026b2:	2300      	movs	r3, #0
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	3105      	adds	r1, #5
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	4401      	add	r1, r0
 80026bc:	b2d3      	uxtb	r3, r2
 80026be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	0c0a      	lsrs	r2, r1, #16
 80026ce:	2300      	movs	r3, #0
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	3106      	adds	r1, #6
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4401      	add	r1, r0
 80026d8:	b2d3      	uxtb	r3, r2
 80026da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80026dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	0e0a      	lsrs	r2, r1, #24
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	3107      	adds	r1, #7
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	4401      	add	r1, r0
 80026f4:	b2d3      	uxtb	r3, r2
 80026f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3308      	adds	r3, #8
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002704:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	0a02      	lsrs	r2, r0, #8
 8002724:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002728:	0a0b      	lsrs	r3, r1, #8
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3101      	adds	r1, #1
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c02      	lsrs	r2, r0, #16
 8002744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	3102      	adds	r1, #2
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	4401      	add	r1, r0
 8002752:	b2d3      	uxtb	r3, r2
 8002754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	0e02      	lsrs	r2, r0, #24
 8002764:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002768:	0e0b      	lsrs	r3, r1, #24
 800276a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276c:	3103      	adds	r1, #3
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	4401      	add	r1, r0
 8002772:	b2d3      	uxtb	r3, r2
 8002774:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	000a      	movs	r2, r1
 8002784:	2300      	movs	r3, #0
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	3104      	adds	r1, #4
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	4401      	add	r1, r0
 800278e:	b2d3      	uxtb	r3, r2
 8002790:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	0a0a      	lsrs	r2, r1, #8
 80027a0:	2300      	movs	r3, #0
 80027a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a4:	3105      	adds	r1, #5
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	4401      	add	r1, r0
 80027aa:	b2d3      	uxtb	r3, r2
 80027ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	0c0a      	lsrs	r2, r1, #16
 80027bc:	2300      	movs	r3, #0
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	3106      	adds	r1, #6
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	4401      	add	r1, r0
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	0e0a      	lsrs	r2, r1, #24
 80027d8:	2300      	movs	r3, #0
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	3107      	adds	r1, #7
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	4401      	add	r1, r0
 80027e2:	b2d3      	uxtb	r3, r2
 80027e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3308      	adds	r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	372c      	adds	r7, #44	; 0x2c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027fe:	b0eb      	sub	sp, #428	; 0x1ac
 8002800:	af00      	add	r7, sp, #0
 8002802:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002806:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800281c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002820:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	461c      	mov	r4, r3
 8002832:	4615      	mov	r5, r2
 8002834:	ea40 0804 	orr.w	r8, r0, r4
 8002838:	ea41 0905 	orr.w	r9, r1, r5
 800283c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	469a      	mov	sl, r3
 8002858:	4693      	mov	fp, r2
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002866:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800286a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800286e:	ea40 0402 	orr.w	r4, r0, r2
 8002872:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800287c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800289e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028ca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028ce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028da:	1cda      	adds	r2, r3, #3
 80028dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028e0:	4413      	add	r3, r2
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80028ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80028f0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80028f4:	4623      	mov	r3, r4
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80028fc:	4623      	mov	r3, r4
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002904:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002908:	4623      	mov	r3, r4
 800290a:	4303      	orrs	r3, r0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002910:	462b      	mov	r3, r5
 8002912:	430b      	orrs	r3, r1
 8002914:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002918:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800291c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800293a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800294a:	0023      	movs	r3, r4
 800294c:	2200      	movs	r2, #0
 800294e:	ea40 0402 	orr.w	r4, r0, r2
 8002952:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800295c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1d5a      	adds	r2, r3, #5
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800297e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800298e:	0223      	lsls	r3, r4, #8
 8002990:	2200      	movs	r2, #0
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029a0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1d9a      	adds	r2, r3, #6
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029c2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029d2:	0423      	lsls	r3, r4, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	ea40 0402 	orr.w	r4, r0, r2
 80029da:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80029e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f4:	1dda      	adds	r2, r3, #7
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a16:	0623      	lsls	r3, r4, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	ea40 0402 	orr.w	r4, r0, r2
 8002a1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a22:	430b      	orrs	r3, r1
 8002a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a72:	4623      	mov	r3, r4
 8002a74:	4303      	orrs	r3, r0
 8002a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ab4:	464c      	mov	r4, r9
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	4644      	mov	r4, r8
 8002aba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abe:	4644      	mov	r4, r8
 8002ac0:	0222      	lsls	r2, r4, #8
 8002ac2:	ea40 0402 	orr.w	r4, r0, r2
 8002ac6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ad0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b02:	464c      	mov	r4, r9
 8002b04:	0423      	lsls	r3, r4, #16
 8002b06:	4644      	mov	r4, r8
 8002b08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0422      	lsls	r2, r4, #16
 8002b10:	ea40 0402 	orr.w	r4, r0, r2
 8002b14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b2e:	1cda      	adds	r2, r3, #3
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b48:	4623      	mov	r3, r4
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b50:	4623      	mov	r3, r4
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b64:	462b      	mov	r3, r5
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1d1a      	adds	r2, r3, #4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1d5a      	adds	r2, r3, #5
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002be2:	0223      	lsls	r3, r4, #8
 8002be4:	2200      	movs	r2, #0
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1d9a      	adds	r2, r3, #6
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c26:	0423      	lsls	r3, r4, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	ea40 0402 	orr.w	r4, r0, r2
 8002c2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c48:	1dda      	adds	r2, r3, #7
 8002c4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c6a:	0623      	lsls	r3, r4, #24
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	ea40 0402 	orr.w	r4, r0, r2
 8002c72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ca6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002caa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	4303      	orrs	r3, r0
 8002cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ccc:	462b      	mov	r3, r5
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002cd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d00:	464c      	mov	r4, r9
 8002d02:	0223      	lsls	r3, r4, #8
 8002d04:	4644      	mov	r4, r8
 8002d06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d0a:	4644      	mov	r4, r8
 8002d0c:	0222      	lsls	r2, r4, #8
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d14:	430b      	orrs	r3, r1
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d18:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d20:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	667a      	str	r2, [r7, #100]	; 0x64
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d46:	464c      	mov	r4, r9
 8002d48:	0423      	lsls	r3, r4, #16
 8002d4a:	4644      	mov	r4, r8
 8002d4c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d50:	4644      	mov	r4, r8
 8002d52:	0422      	lsls	r2, r4, #16
 8002d54:	ea40 0402 	orr.w	r4, r0, r2
 8002d58:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	1cda      	adds	r2, r3, #3
 8002d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
 8002d80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d84:	4623      	mov	r3, r4
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d94:	4623      	mov	r3, r4
 8002d96:	4303      	orrs	r3, r0
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002da4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002da8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db0:	1d1a      	adds	r2, r3, #4
 8002db2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002dcc:	0023      	movs	r3, r4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	ea40 0402 	orr.w	r4, r0, r2
 8002dd4:	633c      	str	r4, [r7, #48]	; 0x30
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dde:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002de2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dea:	1d5a      	adds	r2, r3, #5
 8002dec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e06:	0223      	lsls	r3, r4, #8
 8002e08:	2200      	movs	r2, #0
 8002e0a:	ea40 0402 	orr.w	r4, r0, r2
 8002e0e:	623c      	str	r4, [r7, #32]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
 8002e14:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e24:	3306      	adds	r3, #6
 8002e26:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	69bc      	ldr	r4, [r7, #24]
 8002e40:	0423      	lsls	r3, r4, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	68bc      	ldr	r4, [r7, #8]
 8002e7a:	0623      	lsls	r3, r4, #24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	ea40 0402 	orr.w	r4, r0, r2
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e8c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e90:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0800ec7c 	.word	0x0800ec7c

08002ed4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0800ec94 	.word	0x0800ec94

08002ef0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe faa0 	bl	8001440 <_ZN3ros3MsgC1Ev>
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fada 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3328      	adds	r3, #40	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fad5 	bl	80024c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800ed90 	.word	0x0800ed90

08002f28 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0008 	add.w	r0, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7ff fae6 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fad9 	bl	8002514 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 0008 	add.w	r0, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc33 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7ff fc26 	bl	80027fa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800ecb8 	.word	0x0800ecb8

08002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800eccc 	.word	0x0800eccc

08002ff8 <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);

void callback(const geometry_msgs::Twist &msg)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003006:	490a      	ldr	r1, [pc, #40]	; (8003030 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8003008:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003014:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800301e:	4906      	ldr	r1, [pc, #24]	; (8003038 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	24001b80 	.word	0x24001b80
 8003034:	24001b88 	.word	0x24001b88
 8003038:	24001b90 	.word	0x24001b90

0800303c <interPub>:
void interPub(void){
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <interPub+0x50>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	4912      	ldr	r1, [pc, #72]	; (8003090 <interPub+0x54>)
 8003048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <interPub+0x58>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	490f      	ldr	r1, [pc, #60]	; (8003090 <interPub+0x54>)
 8003054:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <interPub+0x5c>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	490c      	ldr	r1, [pc, #48]	; (8003090 <interPub+0x54>)
 8003060:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <interPub+0x60>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	4a0c      	ldr	r2, [pc, #48]	; (800309c <interPub+0x60>)
 800306c:	6013      	str	r3, [r2, #0]

	if(run_inter0 > 1)
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <interPub+0x60>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	dd03      	ble.n	800307e <interPub+0x42>
		pub.publish(&insVel);
 8003076:	4906      	ldr	r1, [pc, #24]	; (8003090 <interPub+0x54>)
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <interPub+0x64>)
 800307a:	f7ff f82e 	bl	80020da <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <interPub+0x68>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <interPub+0x68>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	24001b98 	.word	0x24001b98
 8003090:	24001bb0 	.word	0x24001bb0
 8003094:	24001ba0 	.word	0x24001ba0
 8003098:	24001ba8 	.word	0x24001ba8
 800309c:	24001b74 	.word	0x24001b74
 80030a0:	24001bf8 	.word	0x24001bf8
 80030a4:	24001b78 	.word	0x24001b78

080030a8 <_Z13Error_Handlerv>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

/* UART Communication */
void Error_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030ac:	b672      	cpsid	i
}
 80030ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <_Z13Error_Handlerv+0x8>
	...

080030b4 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ba:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <_ZL20MX_USART10_UART_Initv+0xbc>)
 80030bc:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c4:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030da:	220c      	movs	r2, #12
 80030dc:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80030fc:	481b      	ldr	r0, [pc, #108]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030fe:	f009 fa1b 	bl	800c538 <HAL_UART_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8003112:	f7ff ffc9 	bl	80030a8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003116:	2100      	movs	r1, #0
 8003118:	4814      	ldr	r0, [pc, #80]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 800311a:	f00b fa8f 	bl	800e63c <HAL_UARTEx_SetTxFifoThreshold>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 800312e:	f7ff ffbb 	bl	80030a8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003132:	2100      	movs	r1, #0
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003136:	f00b fabf 	bl	800e6b8 <HAL_UARTEx_SetRxFifoThreshold>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 800314a:	f7ff ffad 	bl	80030a8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003150:	f00b fa3b 	bl	800e5ca <HAL_UARTEx_DisableFifoMode>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8003164:	f7ff ffa0 	bl	80030a8 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	240004b4 	.word	0x240004b4
 8003170:	40011c00 	.word	0x40011c00

08003174 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_UART_ErrorCallback+0x5c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d120      	bne.n	80031c6 <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003184:	4913      	ldr	r1, [pc, #76]	; (80031d4 <HAL_UART_ErrorCallback+0x60>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003192:	4911      	ldr	r1, [pc, #68]	; (80031d8 <HAL_UART_ErrorCallback+0x64>)
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_UART_ErrorCallback+0x68>)
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 80031ae:	4808      	ldr	r0, [pc, #32]	; (80031d0 <HAL_UART_ErrorCallback+0x5c>)
 80031b0:	f009 fa12 	bl	800c5d8 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 80031b4:	f7ff ff7e 	bl	80030b4 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 80031b8:	4809      	ldr	r0, [pc, #36]	; (80031e0 <HAL_UART_ErrorCallback+0x6c>)
 80031ba:	f000 f989 	bl	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031be:	4603      	mov	r3, r0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f879 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    }
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	240004b4 	.word	0x240004b4
 80031d4:	24001b80 	.word	0x24001b80
 80031d8:	24001b88 	.word	0x24001b88
 80031dc:	24001b90 	.word	0x24001b90
 80031e0:	24000638 	.word	0x24000638

080031e4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_UART_TxCpltCallback+0x20>)
 80031ee:	f000 f96f 	bl	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f8a9 	bl	800234c <_ZN13STM32Hardware5flushEv>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	24000638 	.word	0x24000638

08003208 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003210:	4805      	ldr	r0, [pc, #20]	; (8003228 <HAL_UART_RxCpltCallback+0x20>)
 8003212:	f000 f95d 	bl	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003216:	4603      	mov	r3, r0
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f858 	bl	80022ce <_ZN13STM32Hardware10reset_rbufEv>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	24000638 	.word	0x24000638
 800322c:	00000000 	.word	0x00000000

08003230 <setup>:
void setup(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
    nh.initNode();
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <setup+0x38>)
 8003236:	f000 f957 	bl	80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 800323a:	490c      	ldr	r1, [pc, #48]	; (800326c <setup+0x3c>)
 800323c:	480a      	ldr	r0, [pc, #40]	; (8003268 <setup+0x38>)
 800323e:	f000 f97c 	bl	800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 8003242:	490b      	ldr	r1, [pc, #44]	; (8003270 <setup+0x40>)
 8003244:	4808      	ldr	r0, [pc, #32]	; (8003268 <setup+0x38>)
 8003246:	f000 f9a3 	bl	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    W = PI;
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <setup+0x44>)
 800324c:	a304      	add	r3, pc, #16	; (adr r3, 8003260 <setup+0x30>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	f3af 8000 	nop.w
 8003260:	54cadf99 	.word	0x54cadf99
 8003264:	400921fb 	.word	0x400921fb
 8003268:	24000638 	.word	0x24000638
 800326c:	24001c10 	.word	0x24001c10
 8003270:	24001bf8 	.word	0x24001bf8
 8003274:	24001b90 	.word	0x24001b90

08003278 <loop>:
void loop(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <loop+0x10>)
 800327e:	f000 f9b7 	bl	80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	24000638 	.word	0x24000638

0800328c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d80d      	bhi.n	80032bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	fa22 f103 	lsr.w	r1, r2, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	b2ca      	uxtb	r2, r1
 80032b2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e7ee      	b.n	800329a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d811      	bhi.n	8003306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	440a      	add	r2, r1
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	4611      	mov	r1, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	00d2      	lsls	r2, r2, #3
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3301      	adds	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e7ea      	b.n	80032dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	0800edd8 	.word	0x0800edd8

08003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ffe8 	bl	8003314 <_ZN3ros15NodeHandleBase_C1Ev>
 8003344:	4a47      	ldr	r2, [pc, #284]	; (8003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ff92 	bl	8002278 <_ZN13STM32HardwareC1Ev>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f241 5314 	movw	r3, #5396	; 0x1514
 8003366:	4413      	add	r3, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fbdd 	bl	8001b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b18      	cmp	r3, #24
 8003376:	d80b      	bhi.n	8003390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3301      	adds	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e7f0      	b.n	8003372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b18      	cmp	r3, #24
 8003398:	d80a      	bhi.n	80033b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80033a2:	2100      	movs	r1, #0
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	3301      	adds	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e7f1      	b.n	8003394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ba:	d20b      	bcs.n	80033d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	441a      	add	r2, r3
 80033c2:	f241 0324 	movw	r3, #4132	; 0x1024
 80033c6:	4413      	add	r3, r2
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e7ef      	b.n	80033b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033de:	d20b      	bcs.n	80033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	441a      	add	r2, r3
 80033e6:	f241 2324 	movw	r3, #4644	; 0x1224
 80033ea:	4413      	add	r3, r2
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	e7ef      	b.n	80033d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340c:	461a      	mov	r2, r3
 800340e:	2300      	movs	r3, #0
 8003410:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341a:	461a      	mov	r2, r3
 800341c:	2300      	movs	r3, #0
 800341e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003428:	461a      	mov	r2, r3
 800342a:	2300      	movs	r3, #0
 800342c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003436:	461a      	mov	r2, r3
 8003438:	2300      	movs	r3, #0
 800343a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003444:	461a      	mov	r2, r3
 8003446:	2300      	movs	r3, #0
 8003448:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003452:	461a      	mov	r2, r3
 8003454:	2300      	movs	r3, #0
 8003456:	6213      	str	r3, [r2, #32]
  }
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	0800ed7c 	.word	0x0800ed7c

08003468 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	0800edc0 	.word	0x0800edc0

08003488 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ffe5 	bl	8003468 <_ZN3ros11Subscriber_C1Ev>
 800349e:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3310      	adds	r3, #16
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fd21 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
  };
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	0800ed64 	.word	0x0800ed64

080034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
  }
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fedf 	bl	80022b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350e:	461a      	mov	r2, r3
 8003510:	2300      	movs	r3, #0
 8003512:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351c:	461a      	mov	r2, r3
 800351e:	2300      	movs	r3, #0
 8003520:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352a:	461a      	mov	r2, r3
 800352c:	2300      	movs	r3, #0
 800352e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b18      	cmp	r3, #24
 800354c:	dc19      	bgt.n	8003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]
        return true;
 8003576:	2301      	movs	r3, #1
 8003578:	e004      	b.n	8003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e7e2      	b.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003582:	2300      	movs	r3, #0
  }
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b18      	cmp	r3, #24
 80035a2:	dc1e      	bgt.n	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d111      	bne.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	60da      	str	r2, [r3, #12]
        return true;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e004      	b.n	80035e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e7dd      	b.n	800359e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80035e2:	2300      	movs	r3, #0
  }
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff55 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003602:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003616:	4293      	cmp	r3, r2
 8003618:	d905      	bls.n	8003626 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	429a      	cmp	r2, r3
 8003642:	d906      	bls.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	461a      	mov	r2, r3
 800364c:	2300      	movs	r3, #0
 800364e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff22 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf8c      	ite	hi
 800367a:	2301      	movhi	r3, #1
 800367c:	2300      	movls	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003684:	f06f 0301 	mvn.w	r3, #1
 8003688:	e226      	b.n	8003ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fe2e 	bl	80022f0 <_ZN13STM32Hardware4readEv>
 8003694:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f2c0 81ff 	blt.w	8003a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4413      	add	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b2:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	d12d      	bne.n	8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ca:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80036d6:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	b2d1      	uxtb	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	441a      	add	r2, r3
 80036e2:	f241 0324 	movw	r3, #4132	; 0x1024
 80036e6:	4413      	add	r3, r2
 80036e8:	460a      	mov	r2, r1
 80036ea:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80036f6:	3b01      	subs	r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036fe:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1a0      	bne.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	461a      	mov	r2, r3
 8003718:	2308      	movs	r3, #8
 800371a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800371e:	e798      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003726:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800372a:	2b00      	cmp	r3, #0
 800372c:	d130      	bne.n	8003790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2bff      	cmp	r3, #255	; 0xff
 8003732:	d112      	bne.n	800375a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800373e:	3301      	adds	r3, #1
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003746:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3314      	adds	r3, #20
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003754:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8003758:	e77b      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fea4 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	bf8c      	ite	hi
 8003772:	2301      	movhi	r3, #1
 8003774:	2300      	movls	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f43f af6a 	beq.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800378a:	f06f 0301 	mvn.w	r3, #1
 800378e:	e1a3      	b.n	8003ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003796:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800379a:	2b01      	cmp	r3, #1
 800379c:	d121      	bne.n	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2bfe      	cmp	r3, #254	; 0xfe
 80037a2:	d10b      	bne.n	80037bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037ae:	3301      	adds	r3, #1
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037b6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037ba:	e74a      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c2:	461a      	mov	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af3c 	bne.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f980 	bl	8003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80037e0:	e737      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d120      	bne.n	8003832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003804:	461a      	mov	r2, r3
 8003806:	2300      	movs	r3, #0
 8003808:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003812:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003816:	3301      	adds	r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800381e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003830:	e70f      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800383c:	2b03      	cmp	r3, #3
 800383e:	d118      	bne.n	8003872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	4413      	add	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003856:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003860:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003864:	3301      	adds	r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800386c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003870:	e6ef      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003878:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11f      	bne.n	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800388a:	425a      	negs	r2, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	bf58      	it	pl
 8003892:	4253      	negpl	r3, r2
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d10b      	bne.n	80038b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038aa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038ae:	e6d0      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	461a      	mov	r2, r3
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038be:	e6c8      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d119      	bne.n	8003902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038e6:	3301      	adds	r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038ee:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003900:	e6a7      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800390c:	2b06      	cmp	r3, #6
 800390e:	d123      	bne.n	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003916:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4413      	add	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003926:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003930:	461a      	mov	r2, r3
 8003932:	2307      	movs	r3, #7
 8003934:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f47f ae85 	bne.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394e:	461a      	mov	r2, r3
 8003950:	2308      	movs	r3, #8
 8003952:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003956:	e67c      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003962:	2b08      	cmp	r3, #8
 8003964:	f47f ae75 	bne.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003980:	425a      	negs	r2, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	bf58      	it	pl
 8003988:	4253      	negpl	r3, r2
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	f47f ae61 	bne.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003996:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f89e 	bl	8003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8ba 	bl	8003b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	461a      	mov	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e085      	b.n	8003ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039d6:	2b0a      	cmp	r3, #10
 80039d8:	d108      	bne.n	80039ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	f241 0324 	movw	r3, #4132	; 0x1024
 80039e0:	4413      	add	r3, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f97b 	bl	8003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80039ea:	e632      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d112      	bne.n	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	f241 5314 	movw	r3, #5396	; 0x1514
 8003a00:	4413      	add	r3, r2
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	f241 0224 	movw	r2, #4132	; 0x1024
 8003a08:	440a      	add	r2, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe f9c0 	bl	8001d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003a1e:	e618      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a26:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a2a:	2b0b      	cmp	r3, #11
 8003a2c:	d106      	bne.n	8003a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003a3a:	e60a      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a42:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a46:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f43f adfc 	beq.w	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a64:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003a6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a78:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003a7c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	f241 0324 	movw	r3, #4132	; 0x1024
 8003a94:	440b      	add	r3, r1
 8003a96:	4619      	mov	r1, r3
 8003a98:	4790      	blx	r2
    while (true)
 8003a9a:	e5da      	b.n	8003652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003a9c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d014      	beq.n	8003ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d909      	bls.n	8003ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f80c 	bl	8003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003ad6:	2300      	movs	r3, #0
  }
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fcb7 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f107 020c 	add.w	r2, r7, #12
 8003afc:	210a      	movs	r1, #10
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fcd0 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	615a      	str	r2, [r3, #20]
  }
 8003b16:	bf00      	nop
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003b1e:	b590      	push	{r4, r7, lr}
 8003b20:	b08b      	sub	sp, #44	; 0x2c
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fd88 	bl	8001640 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	2b18      	cmp	r3, #24
 8003b38:	dc63      	bgt.n	8003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d056      	beq.n	8003bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4798      	blx	r3
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	4798      	blx	r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681c      	ldr	r4, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fa8a 	bl	8002102 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e798      	b.n	8003b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b18      	cmp	r3, #24
 8003c0a:	dc5f      	bgt.n	8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d053      	beq.n	8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4798      	blx	r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4608      	mov	r0, r1
 8003c84:	4798      	blx	r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c8e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4798      	blx	r3
 8003cb8:	4601      	mov	r1, r0
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	e79c      	b.n	8003c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003cd8:	bf00      	nop
 8003cda:	372c      	adds	r7, #44	; 0x2c
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}

08003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fbb6 	bl	8001460 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fbd7 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fc14 	bl	8001540 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4915      	ldr	r1, [pc, #84]	; (8003d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	4413      	add	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003d28:	6939      	ldr	r1, [r7, #16]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d38:	fb00 f303 	mul.w	r3, r0, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	440b      	add	r3, r1
 8003d46:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8bf 	bl	8003ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fba6 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d68:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003d6c:	bf00      	nop
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	10624dd3 	.word	0x10624dd3
 8003d78:	000f4240 	.word	0x000f4240

08003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b63      	cmp	r3, #99	; 0x63
 8003d8c:	dd0b      	ble.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e090      	b.n	8003ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	f241 2324 	movw	r3, #4644	; 0x1224
 8003db2:	440b      	add	r3, r1
 8003db4:	3307      	adds	r3, #7
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4790      	blx	r2
 8003dbc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	22fe      	movs	r2, #254	; 0xfe
 8003dd2:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de0:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfe:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e28:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	121b      	asrs	r3, r3, #8
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e44:	2305      	movs	r3, #5
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3306      	adds	r3, #6
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	dc0e      	bgt.n	8003e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	441a      	add	r2, r3
 8003e58:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e7eb      	b.n	8003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3307      	adds	r3, #7
 8003e74:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	425a      	negs	r2, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	bf58      	it	pl
 8003e80:	4253      	negpl	r3, r2
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1c59      	adds	r1, r3, #1
 8003e88:	6179      	str	r1, [r7, #20]
 8003e8a:	43d2      	mvns	r2, r2
 8003e8c:	b2d1      	uxtb	r1, r2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	441a      	add	r2, r3
 8003e92:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e96:	4413      	add	r3, r2
 8003e98:	460a      	mov	r2, r1
 8003e9a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea2:	dc0b      	bgt.n	8003ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1d18      	adds	r0, r3, #4
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	f241 2324 	movw	r3, #4644	; 0x1224
 8003eae:	4413      	add	r3, r2
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7fe fab0 	bl	8002418 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	e005      	b.n	8003ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003ebc:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f84c 	bl	8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	0800ecf0 	.word	0x0800ecf0

08003ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fae2 	bl	80024ac <_ZN13STM32Hardware4timeEv>
 8003ee8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4917      	ldr	r1, [pc, #92]	; (8003f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003ef2:	fba1 1303 	umull	r1, r3, r1, r3
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f02:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003f0c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	1aca      	subs	r2, r1, r3
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003f26:	4413      	add	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f2e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f36:	4413      	add	r3, r2
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	f241 021c 	movw	r2, #4124	; 0x101c
 8003f3e:	440a      	add	r2, r1
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fb6e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	10624dd3 	.word	0x10624dd3
 8003f54:	000f4240 	.word	0x000f4240
 8003f58:	3b9aca00 	.word	0x3b9aca00

08003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	2103      	movs	r1, #3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f804 	bl	8003f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	460b      	mov	r3, r1
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fd1c 	bl	80019c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f107 0214 	add.w	r2, r7, #20
 8003fa2:	2107      	movs	r1, #7
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	4798      	blx	r3
  }
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_Z41__static_initialization_and_destruction_0ii>:
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d116      	bne.n	8003fee <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d111      	bne.n	8003fee <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003fca:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003fcc:	f7ff f9b2 	bl	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8003fd0:	480a      	ldr	r0, [pc, #40]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003fd2:	f7fe ff8d 	bl	8002ef0 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003fda:	4909      	ldr	r1, [pc, #36]	; (8004000 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003fdc:	4809      	ldr	r0, [pc, #36]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003fde:	f7fe f865 	bl	80020ac <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003fe6:	4909      	ldr	r1, [pc, #36]	; (800400c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003fe8:	4809      	ldr	r0, [pc, #36]	; (8004010 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003fea:	f7ff fa4d 	bl	8003488 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	24000638 	.word	0x24000638
 8003ffc:	24001bb0 	.word	0x24001bb0
 8004000:	0800ed2c 	.word	0x0800ed2c
 8004004:	24001bf8 	.word	0x24001bf8
 8004008:	08002ff9 	.word	0x08002ff9
 800400c:	0800ed38 	.word	0x0800ed38
 8004010:	24001c10 	.word	0x24001c10

08004014 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3310      	adds	r3, #16
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe ffa5 	bl	8002f74 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	3210      	adds	r2, #16
 8004032:	4610      	mov	r0, r2
 8004034:	4798      	blx	r3
  }
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3310      	adds	r3, #16
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe ffac 	bl	8002fc0 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004068:	4603      	mov	r3, r0
  }
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3310      	adds	r3, #16
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe ffac 	bl	8002fdc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004084:	4603      	mov	r3, r0
  }
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
    return configured_;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <_GLOBAL__sub_I_nh>:
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7ff ff7b 	bl	8003fb0 <_Z41__static_initialization_and_destruction_0ii>
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_MspInit+0x3c>)
 80040c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040c8:	4a0b      	ldr	r2, [pc, #44]	; (80040f8 <HAL_MspInit+0x3c>)
 80040ca:	f043 0302 	orr.w	r3, r3, #2
 80040ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_MspInit+0x3c>)
 80040d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2100      	movs	r1, #0
 80040e4:	2005      	movs	r0, #5
 80040e6:	f001 f808 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80040ea:	2005      	movs	r0, #5
 80040ec:	f001 f81f 	bl	800512e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	58024400 	.word	0x58024400

080040fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410c:	d117      	bne.n	800413e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 8004110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 8004120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800412c:	2200      	movs	r2, #0
 800412e:	2100      	movs	r1, #0
 8004130:	201c      	movs	r0, #28
 8004132:	f000 ffe2 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004136:	201c      	movs	r0, #28
 8004138:	f000 fff9 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800413c:	e01b      	b.n	8004176 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_TIM_Base_MspInit+0x88>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d116      	bne.n	8004176 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 800414a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800414e:	4a0c      	ldr	r2, [pc, #48]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_TIM_Base_MspInit+0x84>)
 800415a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	2032      	movs	r0, #50	; 0x32
 800416c:	f000 ffc5 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004170:	2032      	movs	r0, #50	; 0x32
 8004172:	f000 ffdc 	bl	800512e <HAL_NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	58024400 	.word	0x58024400
 8004184:	40000c00 	.word	0x40000c00

08004188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b090      	sub	sp, #64	; 0x40
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a69      	ldr	r2, [pc, #420]	; (800434c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d12e      	bne.n	8004208 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041aa:	4b69      	ldr	r3, [pc, #420]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041b0:	4a67      	ldr	r2, [pc, #412]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	4b61      	ldr	r3, [pc, #388]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ce:	4a60      	ldr	r2, [pc, #384]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d8:	4b5d      	ldr	r3, [pc, #372]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041e6:	23c0      	movs	r3, #192	; 0xc0
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ea:	2302      	movs	r3, #2
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f2:	2300      	movs	r3, #0
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041f6:	2302      	movs	r3, #2
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	4854      	ldr	r0, [pc, #336]	; (8004354 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004202:	f003 ffad 	bl	8008160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004206:	e09c      	b.n	8004342 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d12f      	bne.n	8004272 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004212:	4b4f      	ldr	r3, [pc, #316]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004218:	4a4d      	ldr	r2, [pc, #308]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004222:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004230:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004236:	4a46      	ldr	r2, [pc, #280]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800424e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004254:	2302      	movs	r3, #2
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425c:	2300      	movs	r3, #0
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004260:	2302      	movs	r3, #2
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004268:	4619      	mov	r1, r3
 800426a:	483c      	ldr	r0, [pc, #240]	; (800435c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800426c:	f003 ff78 	bl	8008160 <HAL_GPIO_Init>
}
 8004270:	e067      	b.n	8004342 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d12e      	bne.n	80042da <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800427c:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800427e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004282:	4a33      	ldr	r2, [pc, #204]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004288:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800428e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800429c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a0:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042a2:	f043 0320 	orr.w	r3, r3, #32
 80042a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042b8:	2303      	movs	r3, #3
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	2302      	movs	r3, #2
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80042c8:	230d      	movs	r3, #13
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d0:	4619      	mov	r1, r3
 80042d2:	4824      	ldr	r0, [pc, #144]	; (8004364 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80042d4:	f003 ff44 	bl	8008160 <HAL_GPIO_Init>
}
 80042d8:	e033      	b.n	8004342 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d12e      	bne.n	8004342 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042ea:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800430a:	f043 0320 	orr.w	r3, r3, #32
 800430e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004312:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004320:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004326:	2302      	movs	r3, #2
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432e:	2300      	movs	r3, #0
 8004330:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8004332:	230e      	movs	r3, #14
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800433a:	4619      	mov	r1, r3
 800433c:	4809      	ldr	r0, [pc, #36]	; (8004364 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800433e:	f003 ff0f 	bl	8008160 <HAL_GPIO_Init>
}
 8004342:	bf00      	nop
 8004344:	3740      	adds	r7, #64	; 0x40
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40000400 	.word	0x40000400
 8004350:	58024400 	.word	0x58024400
 8004354:	58020000 	.word	0x58020000
 8004358:	40000800 	.word	0x40000800
 800435c:	58020c00 	.word	0x58020c00
 8004360:	4000e000 	.word	0x4000e000
 8004364:	58021400 	.word	0x58021400
 8004368:	4000e400 	.word	0x4000e400

0800436c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_TIM_PWM_MspInit+0x68>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10f      	bne.n	800439e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800439c:	e013      	b.n	80043c6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <HAL_TIM_PWM_MspInit+0x70>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80043ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010400 	.word	0x40010400
 80043d8:	58024400 	.word	0x58024400
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a35      	ldr	r2, [pc, #212]	; (80044d4 <HAL_TIM_MspPostInit+0xf4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d120      	bne.n	8004444 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004408:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 800440a:	f043 0304 	orr.w	r3, r3, #4
 800440e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004420:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004432:	2303      	movs	r3, #3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	4619      	mov	r1, r3
 800443c:	4827      	ldr	r0, [pc, #156]	; (80044dc <HAL_TIM_MspPostInit+0xfc>)
 800443e:	f003 fe8f 	bl	8008160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004442:	e042      	b.n	80044ca <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_TIM_MspPostInit+0x100>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d13d      	bne.n	80044ca <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004454:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004456:	f043 0310 	orr.w	r3, r3, #16
 800445a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 800446e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004472:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_TIM_MspPostInit+0xf8>)
 800447e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800448a:	2320      	movs	r3, #32
 800448c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800449a:	2304      	movs	r3, #4
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800449e:	f107 0314 	add.w	r3, r7, #20
 80044a2:	4619      	mov	r1, r3
 80044a4:	480f      	ldr	r0, [pc, #60]	; (80044e4 <HAL_TIM_MspPostInit+0x104>)
 80044a6:	f003 fe5b 	bl	8008160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044aa:	2308      	movs	r3, #8
 80044ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80044ba:	2304      	movs	r3, #4
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4619      	mov	r1, r3
 80044c4:	4808      	ldr	r0, [pc, #32]	; (80044e8 <HAL_TIM_MspPostInit+0x108>)
 80044c6:	f003 fe4b 	bl	8008160 <HAL_GPIO_Init>
}
 80044ca:	bf00      	nop
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40010400 	.word	0x40010400
 80044d8:	58024400 	.word	0x58024400
 80044dc:	58020800 	.word	0x58020800
 80044e0:	40014000 	.word	0x40014000
 80044e4:	58021000 	.word	0x58021000
 80044e8:	58020000 	.word	0x58020000

080044ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0b6      	sub	sp, #216	; 0xd8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	22b4      	movs	r2, #180	; 0xb4
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f00a f9b3 	bl	800e878 <memset>
  if(huart->Instance==USART10)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a62      	ldr	r2, [pc, #392]	; (80046a0 <HAL_UART_MspInit+0x1b4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	f040 80bc 	bne.w	8004696 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800451e:	2301      	movs	r3, #1
 8004520:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004522:	2300      	movs	r3, #0
 8004524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004528:	f107 0310 	add.w	r3, r7, #16
 800452c:	4618      	mov	r0, r3
 800452e:	f005 f873 	bl	8009618 <HAL_RCCEx_PeriphCLKConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004538:	f7fc ff6c 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 800453e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004542:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800454c:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 800454e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800455a:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 800455c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004560:	4a50      	ldr	r2, [pc, #320]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 8004562:	f043 0310 	orr.w	r3, r3, #16
 8004566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800456a:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_UART_MspInit+0x1b8>)
 800456c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004578:	2304      	movs	r3, #4
 800457a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004590:	2304      	movs	r3, #4
 8004592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004596:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800459a:	4619      	mov	r1, r3
 800459c:	4842      	ldr	r0, [pc, #264]	; (80046a8 <HAL_UART_MspInit+0x1bc>)
 800459e:	f003 fddf 	bl	8008160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045a2:	2308      	movs	r3, #8
 80045a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80045ba:	230b      	movs	r3, #11
 80045bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4838      	ldr	r0, [pc, #224]	; (80046a8 <HAL_UART_MspInit+0x1bc>)
 80045c8:	f003 fdca 	bl	8008160 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 80045cc:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045ce:	4a38      	ldr	r2, [pc, #224]	; (80046b0 <HAL_UART_MspInit+0x1c4>)
 80045d0:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045d4:	2276      	movs	r2, #118	; 0x76
 80045d6:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045d8:	4b34      	ldr	r3, [pc, #208]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045e4:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ea:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 80045f8:	4b2c      	ldr	r3, [pc, #176]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 80045fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045fe:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 8004602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004606:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 800460a:	2200      	movs	r2, #0
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 800460e:	4827      	ldr	r0, [pc, #156]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 8004610:	f000 fdb6 	bl	8005180 <HAL_DMA_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800461a:	f7fc fefb 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a22      	ldr	r2, [pc, #136]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 8004622:	67da      	str	r2, [r3, #124]	; 0x7c
 8004624:	4a21      	ldr	r2, [pc, #132]	; (80046ac <HAL_UART_MspInit+0x1c0>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_UART_MspInit+0x1cc>)
 800462e:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004630:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004632:	2277      	movs	r2, #119	; 0x77
 8004634:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004636:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004638:	2240      	movs	r2, #64	; 0x40
 800463a:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004648:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004656:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004658:	2200      	movs	r2, #0
 800465a:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800465e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004662:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004666:	2200      	movs	r2, #0
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 800466a:	4812      	ldr	r0, [pc, #72]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800466c:	f000 fd88 	bl	8005180 <HAL_DMA_Init>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004676:	f7fc fecd 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 800467e:	679a      	str	r2, [r3, #120]	; 0x78
 8004680:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <HAL_UART_MspInit+0x1c8>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	209c      	movs	r0, #156	; 0x9c
 800468c:	f000 fd35 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004690:	209c      	movs	r0, #156	; 0x9c
 8004692:	f000 fd4c 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004696:	bf00      	nop
 8004698:	37d8      	adds	r7, #216	; 0xd8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40011c00 	.word	0x40011c00
 80046a4:	58024400 	.word	0x58024400
 80046a8:	58021000 	.word	0x58021000
 80046ac:	24000544 	.word	0x24000544
 80046b0:	40020010 	.word	0x40020010
 80046b4:	240005bc 	.word	0x240005bc
 80046b8:	40020028 	.word	0x40020028

080046bc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <HAL_UART_MspDeInit+0x4c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d118      	bne.n	8004700 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_UART_MspDeInit+0x50>)
 80046d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046d4:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_UART_MspDeInit+0x50>)
 80046d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 80046de:	210c      	movs	r1, #12
 80046e0:	480b      	ldr	r0, [pc, #44]	; (8004710 <HAL_UART_MspDeInit+0x54>)
 80046e2:	f003 fee5 	bl	80084b0 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f8a2 	bl	8005834 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f89d 	bl	8005834 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80046fa:	209c      	movs	r0, #156	; 0x9c
 80046fc:	f000 fd25 	bl	800514a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40011c00 	.word	0x40011c00
 800470c:	58024400 	.word	0x58024400
 8004710:	58021000 	.word	0x58021000

08004714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004718:	e7fe      	b.n	8004718 <NMI_Handler+0x4>

0800471a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800471a:	b480      	push	{r7}
 800471c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800471e:	e7fe      	b.n	800471e <HardFault_Handler+0x4>

08004720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004724:	e7fe      	b.n	8004724 <MemManage_Handler+0x4>

08004726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800472a:	e7fe      	b.n	800472a <BusFault_Handler+0x4>

0800472c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004730:	e7fe      	b.n	8004730 <UsageFault_Handler+0x4>

08004732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800474e:	b480      	push	{r7}
 8004750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004760:	f000 fbac 	bl	8004ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}

08004768 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <DMA1_Stream0_IRQHandler+0x10>)
 800477e:	f002 f9dd 	bl	8006b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24000544 	.word	0x24000544

0800478c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA1_Stream1_IRQHandler+0x10>)
 8004792:	f002 f9d3 	bl	8006b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	240005bc 	.word	0x240005bc

080047a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <TIM2_IRQHandler+0x10>)
 80047a6:	f006 fdd9 	bl	800b35c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24000254 	.word	0x24000254

080047b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80047b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047bc:	f003 ff93 	bl	80086e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80047c8:	4802      	ldr	r0, [pc, #8]	; (80047d4 <TIM5_IRQHandler+0x10>)
 80047ca:	f006 fdc7 	bl	800b35c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	24000338 	.word	0x24000338

080047d8 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <USART10_IRQHandler+0x10>)
 80047de:	f008 f81f 	bl	800c820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	240004b4 	.word	0x240004b4

080047ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
	return 1;
 80047f0:	2301      	movs	r3, #1
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <_kill>:

int _kill(int pid, int sig)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004806:	f009 ffff 	bl	800e808 <__errno>
 800480a:	4603      	mov	r3, r0
 800480c:	2216      	movs	r2, #22
 800480e:	601a      	str	r2, [r3, #0]
	return -1;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_exit>:

void _exit (int status)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004824:	f04f 31ff 	mov.w	r1, #4294967295
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ffe7 	bl	80047fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800482e:	e7fe      	b.n	800482e <_exit+0x12>

08004830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <_sbrk+0x5c>)
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <_sbrk+0x60>)
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004844:	4b13      	ldr	r3, [pc, #76]	; (8004894 <_sbrk+0x64>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <_sbrk+0x64>)
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <_sbrk+0x68>)
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <_sbrk+0x64>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	429a      	cmp	r2, r3
 800485e:	d207      	bcs.n	8004870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004860:	f009 ffd2 	bl	800e808 <__errno>
 8004864:	4603      	mov	r3, r0
 8004866:	220c      	movs	r2, #12
 8004868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295
 800486e:	e009      	b.n	8004884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <_sbrk+0x64>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <_sbrk+0x64>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <_sbrk+0x64>)
 8004880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004882:	68fb      	ldr	r3, [r7, #12]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24050000 	.word	0x24050000
 8004890:	00000400 	.word	0x00000400
 8004894:	24001c70 	.word	0x24001c70
 8004898:	24001c90 	.word	0x24001c90

0800489c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048a0:	4b32      	ldr	r3, [pc, #200]	; (800496c <SystemInit+0xd0>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	4a31      	ldr	r2, [pc, #196]	; (800496c <SystemInit+0xd0>)
 80048a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048b0:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <SystemInit+0xd4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d807      	bhi.n	80048cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <SystemInit+0xd4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 030f 	bic.w	r3, r3, #15
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <SystemInit+0xd4>)
 80048c6:	f043 0307 	orr.w	r3, r3, #7
 80048ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <SystemInit+0xd8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <SystemInit+0xd8>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80048d8:	4b26      	ldr	r3, [pc, #152]	; (8004974 <SystemInit+0xd8>)
 80048da:	2200      	movs	r2, #0
 80048dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80048de:	4b25      	ldr	r3, [pc, #148]	; (8004974 <SystemInit+0xd8>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4924      	ldr	r1, [pc, #144]	; (8004974 <SystemInit+0xd8>)
 80048e4:	4b24      	ldr	r3, [pc, #144]	; (8004978 <SystemInit+0xdc>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <SystemInit+0xd4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <SystemInit+0xd4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 030f 	bic.w	r3, r3, #15
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <SystemInit+0xd4>)
 8004900:	f043 0307 	orr.w	r3, r3, #7
 8004904:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <SystemInit+0xd8>)
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <SystemInit+0xd8>)
 800490e:	2200      	movs	r2, #0
 8004910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004912:	4b18      	ldr	r3, [pc, #96]	; (8004974 <SystemInit+0xd8>)
 8004914:	2200      	movs	r2, #0
 8004916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <SystemInit+0xd8>)
 800491a:	4a18      	ldr	r2, [pc, #96]	; (800497c <SystemInit+0xe0>)
 800491c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <SystemInit+0xd8>)
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <SystemInit+0xe4>)
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004924:	4b13      	ldr	r3, [pc, #76]	; (8004974 <SystemInit+0xd8>)
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <SystemInit+0xe8>)
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <SystemInit+0xd8>)
 800492c:	2200      	movs	r2, #0
 800492e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <SystemInit+0xd8>)
 8004932:	4a14      	ldr	r2, [pc, #80]	; (8004984 <SystemInit+0xe8>)
 8004934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <SystemInit+0xd8>)
 8004938:	2200      	movs	r2, #0
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <SystemInit+0xd8>)
 800493e:	4a11      	ldr	r2, [pc, #68]	; (8004984 <SystemInit+0xe8>)
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <SystemInit+0xd8>)
 8004944:	2200      	movs	r2, #0
 8004946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <SystemInit+0xd8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <SystemInit+0xd8>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <SystemInit+0xd8>)
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <SystemInit+0xec>)
 800495c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00
 8004970:	52002000 	.word	0x52002000
 8004974:	58024400 	.word	0x58024400
 8004978:	eaf6ed7f 	.word	0xeaf6ed7f
 800497c:	02020200 	.word	0x02020200
 8004980:	01ff0000 	.word	0x01ff0000
 8004984:	01010280 	.word	0x01010280
 8004988:	52004000 	.word	0x52004000
 800498c:	00000000 	.word	0x00000000

08004990 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

int ccc = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 80049a2:	f7fe fb4b 	bl	800303c <interPub>
	}
	if (htim->Instance == TIM5) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4ab5      	ldr	r2, [pc, #724]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f040 81db 	bne.w	8004d68 <HAL_TIM_PeriodElapsedCallback+0x3d8>

		if (++ccc > 2000)     W = 0;
 80049b2:	4bb4      	ldr	r3, [pc, #720]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	4ab2      	ldr	r2, [pc, #712]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4bb1      	ldr	r3, [pc, #708]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049c4:	bfcc      	ite	gt
 80049c6:	2301      	movgt	r3, #1
 80049c8:	2300      	movle	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <HAL_TIM_PeriodElapsedCallback+0x4e>
 80049d0:	49ad      	ldr	r1, [pc, #692]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9c1 2300 	strd	r2, r3, [r1]
//		Kpid[0].goalVel = Vy + Vx + (W * Kpid[0].cD);
//		Kpid[1].goalVel = Vy - Vx - (W * Kpid[1].cD);
//		Kpid[2].goalVel = Vy + Vx - (W * Kpid[2].cD);
//		Kpid[3].goalVel = Vy - Vx + (W * Kpid[3].cD);

		double coeffab = 0.5 * (width + length);
 80049de:	a3a6      	add	r3, pc, #664	; (adr r3, 8004c78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Kpid[0].goalVel = Vy + Vx + (W * coeffab);
 80049e8:	4ba8      	ldr	r3, [pc, #672]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80049ea:	ed93 6b00 	vldr	d6, [r3]
 80049ee:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80049f0:	ed93 7b00 	vldr	d7, [r3]
 80049f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80049f8:	4ba3      	ldr	r3, [pc, #652]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80049fa:	ed93 5b00 	vldr	d5, [r3]
 80049fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a0a:	4ba2      	ldr	r3, [pc, #648]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004a0c:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * coeffab);
 8004a10:	4b9e      	ldr	r3, [pc, #632]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004a12:	ed93 6b00 	vldr	d6, [r3]
 8004a16:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004a18:	ed93 7b00 	vldr	d7, [r3]
 8004a1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a20:	4b99      	ldr	r3, [pc, #612]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004a22:	ed93 5b00 	vldr	d5, [r3]
 8004a26:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a32:	4b98      	ldr	r3, [pc, #608]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004a34:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vy + Vx - (W * coeffab);
 8004a38:	4b94      	ldr	r3, [pc, #592]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004a3a:	ed93 6b00 	vldr	d6, [r3]
 8004a3e:	4b94      	ldr	r3, [pc, #592]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004a40:	ed93 7b00 	vldr	d7, [r3]
 8004a44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a48:	4b8f      	ldr	r3, [pc, #572]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004a4a:	ed93 5b00 	vldr	d5, [r3]
 8004a4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a5a:	4b8e      	ldr	r3, [pc, #568]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004a5c:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vy - Vx + (W * coeffab);
 8004a60:	4b8a      	ldr	r3, [pc, #552]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004a62:	ed93 6b00 	vldr	d6, [r3]
 8004a66:	4b8a      	ldr	r3, [pc, #552]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004a68:	ed93 7b00 	vldr	d7, [r3]
 8004a6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a70:	4b85      	ldr	r3, [pc, #532]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004a72:	ed93 5b00 	vldr	d5, [r3]
 8004a76:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a82:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004a84:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170


		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8004a88:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	b21a      	sxth	r2, r3
 8004a90:	4b80      	ldr	r3, [pc, #512]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004a92:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8004a94:	4b81      	ldr	r3, [pc, #516]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	b21a      	sxth	r2, r3
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004aa4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8004aa8:	4b7d      	ldr	r3, [pc, #500]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	b21a      	sxth	r2, r3
 8004ab0:	4b78      	ldr	r3, [pc, #480]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004ab2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8004ab6:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	4b75      	ldr	r3, [pc, #468]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004ac0:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim24, 0);
 8004ac4:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8004acc:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004ad4:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004adc:	4b6f      	ldr	r3, [pc, #444]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	dc06      	bgt.n	8004afc <HAL_TIM_PeriodElapsedCallback+0x16c>
			pidCtrl(i);
 8004aee:	6978      	ldr	r0, [r7, #20]
 8004af0:	f7fb fdc6 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3301      	adds	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e7f5      	b.n	8004ae8 <HAL_TIM_PeriodElapsedCallback+0x158>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004afc:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004afe:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004b02:	4b69      	ldr	r3, [pc, #420]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004b0a:	ee17 2a90 	vmov	r2, s15
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004b10:	4b60      	ldr	r3, [pc, #384]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b12:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004b16:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b26:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8004b2a:	4b60      	ldr	r3, [pc, #384]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004b32:	ee17 2a90 	vmov	r2, s15
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004b38:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004b3a:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004b46:	ee17 2a90 	vmov	r2, s15
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b52:	4857      	ldr	r0, [pc, #348]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004b54:	f003 fdae 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b5e:	4854      	ldr	r0, [pc, #336]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004b60:	f003 fda8 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b6a:	4852      	ldr	r0, [pc, #328]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004b6c:	f003 fda2 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2140      	movs	r1, #64	; 0x40
 8004b74:	484f      	ldr	r0, [pc, #316]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004b76:	f003 fd9d 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b80:	484c      	ldr	r0, [pc, #304]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004b82:	f003 fd97 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004b86:	2200      	movs	r2, #0
 8004b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b8c:	4849      	ldr	r0, [pc, #292]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004b8e:	f003 fd91 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004b92:	2200      	movs	r2, #0
 8004b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b98:	4846      	ldr	r0, [pc, #280]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004b9a:	f003 fd8b 	bl	80086b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	4844      	ldr	r0, [pc, #272]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004ba4:	f003 fd86 	bl	80086b4 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004baa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004bae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	dd06      	ble.n	8004bc6 <HAL_TIM_PeriodElapsedCallback+0x236>
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bbe:	483c      	ldr	r0, [pc, #240]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004bc0:	f003 fd78 	bl	80086b4 <HAL_GPIO_WritePin>
 8004bc4:	e00d      	b.n	8004be2 <HAL_TIM_PeriodElapsedCallback+0x252>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004bc6:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004bc8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004bcc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d505      	bpl.n	8004be2 <HAL_TIM_PeriodElapsedCallback+0x252>
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bdc:	4834      	ldr	r0, [pc, #208]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004bde:	f003 fd69 	bl	80086b4 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004be4:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004be8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	dd06      	ble.n	8004c00 <HAL_TIM_PeriodElapsedCallback+0x270>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bf8:	482e      	ldr	r0, [pc, #184]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004bfa:	f003 fd5b 	bl	80086b4 <HAL_GPIO_WritePin>
 8004bfe:	e00c      	b.n	8004c1a <HAL_TIM_PeriodElapsedCallback+0x28a>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c02:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8004c06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	d504      	bpl.n	8004c1a <HAL_TIM_PeriodElapsedCallback+0x28a>
 8004c10:	2201      	movs	r2, #1
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	4827      	ldr	r0, [pc, #156]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c16:	f003 fd4d 	bl	80086b4 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c1c:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004c20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	dd06      	ble.n	8004c38 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c30:	4820      	ldr	r0, [pc, #128]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c32:	f003 fd3f 	bl	80086b4 <HAL_GPIO_WritePin>
 8004c36:	e00d      	b.n	8004c54 <HAL_TIM_PeriodElapsedCallback+0x2c4>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c3a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8004c3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d505      	bpl.n	8004c54 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c4e:	4819      	ldr	r0, [pc, #100]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c50:	f003 fd30 	bl	80086b4 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c56:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004c5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	dd29      	ble.n	8004cb8 <HAL_TIM_PeriodElapsedCallback+0x328>
 8004c64:	2201      	movs	r2, #1
 8004c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c6a:	4812      	ldr	r0, [pc, #72]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004c6c:	f003 fd22 	bl	80086b4 <HAL_GPIO_WritePin>
 8004c70:	e02f      	b.n	8004cd2 <HAL_TIM_PeriodElapsedCallback+0x342>
 8004c72:	bf00      	nop
 8004c74:	f3af 8000 	nop.w
 8004c78:	b851eb86 	.word	0xb851eb86
 8004c7c:	3fcb851e 	.word	0x3fcb851e
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	24001c74 	.word	0x24001c74
 8004c88:	24001b90 	.word	0x24001b90
 8004c8c:	24001b88 	.word	0x24001b88
 8004c90:	24001b80 	.word	0x24001b80
 8004c94:	24000000 	.word	0x24000000
 8004c98:	2400041c 	.word	0x2400041c
 8004c9c:	240002ec 	.word	0x240002ec
 8004ca0:	24000468 	.word	0x24000468
 8004ca4:	240002a0 	.word	0x240002a0
 8004ca8:	24000384 	.word	0x24000384
 8004cac:	240003d0 	.word	0x240003d0
 8004cb0:	58020400 	.word	0x58020400
 8004cb4:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004cba:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8004cbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	d504      	bpl.n	8004cd2 <HAL_TIM_PeriodElapsedCallback+0x342>
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	4829      	ldr	r0, [pc, #164]	; (8004d74 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8004cce:	f003 fcf1 	bl	80086b4 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004cd4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004cda:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004cde:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004ce4:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004ce8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004cee:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004cf2:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004cf6:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004cfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8004d00:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d06:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d0c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004d10:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d16:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004d1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d20:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004d24:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004d28:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8004d32:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d38:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d3e:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004d42:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d48:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
 8004d4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8004d52:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004d56:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004d5a:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8004d64:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	24000000 	.word	0x24000000
 8004d74:	58021000 	.word	0x58021000
 8004d78:	24001ba0 	.word	0x24001ba0
 8004d7c:	24001b98 	.word	0x24001b98
 8004d80:	24001ba8 	.word	0x24001ba8

08004d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004d88:	f7ff fd88 	bl	800489c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d8c:	480c      	ldr	r0, [pc, #48]	; (8004dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d8e:	490d      	ldr	r1, [pc, #52]	; (8004dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d90:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d94:	e002      	b.n	8004d9c <LoopCopyDataInit>

08004d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d9a:	3304      	adds	r3, #4

08004d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004da0:	d3f9      	bcc.n	8004d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004da4:	4c0a      	ldr	r4, [pc, #40]	; (8004dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004da8:	e001      	b.n	8004dae <LoopFillZerobss>

08004daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dac:	3204      	adds	r2, #4

08004dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004db0:	d3fb      	bcc.n	8004daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004db2:	f009 fd2f 	bl	800e814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004db6:	f7fb fdfd 	bl	80009b4 <main>
  bx  lr
 8004dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004dc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004dc4:	24000238 	.word	0x24000238
  ldr r2, =_sidata
 8004dc8:	0800eeb0 	.word	0x0800eeb0
  ldr r2, =_sbss
 8004dcc:	24000238 	.word	0x24000238
  ldr r4, =_ebss
 8004dd0:	24001c8c 	.word	0x24001c8c

08004dd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd4:	e7fe      	b.n	8004dd4 <ADC3_IRQHandler>
	...

08004dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dde:	2003      	movs	r0, #3
 8004de0:	f000 f980 	bl	80050e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004de4:	f004 fa42 	bl	800926c <HAL_RCC_GetSysClockFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <HAL_Init+0x68>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	4913      	ldr	r1, [pc, #76]	; (8004e44 <HAL_Init+0x6c>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_Init+0x68>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <HAL_Init+0x6c>)
 8004e0c:	5cd3      	ldrb	r3, [r2, r3]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	4a0b      	ldr	r2, [pc, #44]	; (8004e48 <HAL_Init+0x70>)
 8004e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <HAL_Init+0x74>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e22:	200f      	movs	r0, #15
 8004e24:	f000 f814 	bl	8004e50 <HAL_InitTick>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e002      	b.n	8004e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e32:	f7ff f943 	bl	80040bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	58024400 	.word	0x58024400
 8004e44:	0800ee5c 	.word	0x0800ee5c
 8004e48:	240001c4 	.word	0x240001c4
 8004e4c:	240001c0 	.word	0x240001c0

08004e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_InitTick+0x60>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e021      	b.n	8004ea8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_InitTick+0x64>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <HAL_InitTick+0x60>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f973 	bl	8005166 <HAL_SYSTICK_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00e      	b.n	8004ea8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d80a      	bhi.n	8004ea6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e90:	2200      	movs	r2, #0
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	f000 f92f 	bl	80050fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e9c:	4a06      	ldr	r2, [pc, #24]	; (8004eb8 <HAL_InitTick+0x68>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	240001cc 	.word	0x240001cc
 8004eb4:	240001c0 	.word	0x240001c0
 8004eb8:	240001c8 	.word	0x240001c8

08004ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_IncTick+0x20>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_IncTick+0x24>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4413      	add	r3, r2
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_IncTick+0x24>)
 8004ece:	6013      	str	r3, [r2, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	240001cc 	.word	0x240001cc
 8004ee0:	24001c78 	.word	0x24001c78

08004ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_GetTick+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	24001c78 	.word	0x24001c78

08004efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <__NVIC_SetPriorityGrouping+0x40>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f18:	4013      	ands	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <__NVIC_SetPriorityGrouping+0x44>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <__NVIC_SetPriorityGrouping+0x40>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	60d3      	str	r3, [r2, #12]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00
 8004f40:	05fa0000 	.word	0x05fa0000

08004f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <__NVIC_GetPriorityGrouping+0x18>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	f003 0307 	and.w	r3, r3, #7
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	db0b      	blt.n	8004f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	f003 021f 	and.w	r2, r3, #31
 8004f78:	4907      	ldr	r1, [pc, #28]	; (8004f98 <__NVIC_EnableIRQ+0x38>)
 8004f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2001      	movs	r0, #1
 8004f82:	fa00 f202 	lsl.w	r2, r0, r2
 8004f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000e100 	.word	0xe000e100

08004f9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db12      	blt.n	8004fd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	490a      	ldr	r1, [pc, #40]	; (8004fe0 <__NVIC_DisableIRQ+0x44>)
 8004fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc2:	3320      	adds	r3, #32
 8004fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc8:	f3bf 8f4f 	dsb	sy
}
 8004fcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fce:	f3bf 8f6f 	isb	sy
}
 8004fd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000e100 	.word	0xe000e100

08004fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	; (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f1c3 0307 	rsb	r3, r3, #7
 8005052:	2b04      	cmp	r3, #4
 8005054:	bf28      	it	cs
 8005056:	2304      	movcs	r3, #4
 8005058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3304      	adds	r3, #4
 800505e:	2b06      	cmp	r3, #6
 8005060:	d902      	bls.n	8005068 <NVIC_EncodePriority+0x30>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3b03      	subs	r3, #3
 8005066:	e000      	b.n	800506a <NVIC_EncodePriority+0x32>
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	401a      	ands	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005080:	f04f 31ff 	mov.w	r1, #4294967295
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	43d9      	mvns	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	4313      	orrs	r3, r2
         );
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b0:	d301      	bcc.n	80050b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00f      	b.n	80050d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b6:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <SysTick_Config+0x40>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050be:	210f      	movs	r1, #15
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	f7ff ff8e 	bl	8004fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <SysTick_Config+0x40>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <SysTick_Config+0x40>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010

080050e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff05 	bl	8004efc <__NVIC_SetPriorityGrouping>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005108:	f7ff ff1c 	bl	8004f44 <__NVIC_GetPriorityGrouping>
 800510c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff ff90 	bl	8005038 <NVIC_EncodePriority>
 8005118:	4602      	mov	r2, r0
 800511a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff5f 	bl	8004fe4 <__NVIC_SetPriority>
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff0f 	bl	8004f60 <__NVIC_EnableIRQ>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff ff1f 	bl	8004f9c <__NVIC_DisableIRQ>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff96 	bl	80050a0 <SysTick_Config>
 8005174:	4603      	mov	r3, r0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff feac 	bl	8004ee4 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e314      	b.n	80057c2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a66      	ldr	r2, [pc, #408]	; (8005338 <HAL_DMA_Init+0x1b8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d04a      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_DMA_Init+0x1bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d045      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a63      	ldr	r2, [pc, #396]	; (8005340 <HAL_DMA_Init+0x1c0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d040      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a62      	ldr	r2, [pc, #392]	; (8005344 <HAL_DMA_Init+0x1c4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03b      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a60      	ldr	r2, [pc, #384]	; (8005348 <HAL_DMA_Init+0x1c8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d036      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a5f      	ldr	r2, [pc, #380]	; (800534c <HAL_DMA_Init+0x1cc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d031      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a5d      	ldr	r2, [pc, #372]	; (8005350 <HAL_DMA_Init+0x1d0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5c      	ldr	r2, [pc, #368]	; (8005354 <HAL_DMA_Init+0x1d4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d027      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5a      	ldr	r2, [pc, #360]	; (8005358 <HAL_DMA_Init+0x1d8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a59      	ldr	r2, [pc, #356]	; (800535c <HAL_DMA_Init+0x1dc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01d      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a57      	ldr	r2, [pc, #348]	; (8005360 <HAL_DMA_Init+0x1e0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a56      	ldr	r2, [pc, #344]	; (8005364 <HAL_DMA_Init+0x1e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a54      	ldr	r2, [pc, #336]	; (8005368 <HAL_DMA_Init+0x1e8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a53      	ldr	r2, [pc, #332]	; (800536c <HAL_DMA_Init+0x1ec>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a51      	ldr	r2, [pc, #324]	; (8005370 <HAL_DMA_Init+0x1f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a50      	ldr	r2, [pc, #320]	; (8005374 <HAL_DMA_Init+0x1f4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_DMA_Init+0xbc>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_DMA_Init+0xbe>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 813c 	beq.w	80054bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a37      	ldr	r2, [pc, #220]	; (8005338 <HAL_DMA_Init+0x1b8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04a      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a36      	ldr	r2, [pc, #216]	; (800533c <HAL_DMA_Init+0x1bc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d045      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a34      	ldr	r2, [pc, #208]	; (8005340 <HAL_DMA_Init+0x1c0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d040      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a33      	ldr	r2, [pc, #204]	; (8005344 <HAL_DMA_Init+0x1c4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d03b      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a31      	ldr	r2, [pc, #196]	; (8005348 <HAL_DMA_Init+0x1c8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d036      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a30      	ldr	r2, [pc, #192]	; (800534c <HAL_DMA_Init+0x1cc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d031      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2e      	ldr	r2, [pc, #184]	; (8005350 <HAL_DMA_Init+0x1d0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02c      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2d      	ldr	r2, [pc, #180]	; (8005354 <HAL_DMA_Init+0x1d4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d027      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <HAL_DMA_Init+0x1d8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2a      	ldr	r2, [pc, #168]	; (800535c <HAL_DMA_Init+0x1dc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a28      	ldr	r2, [pc, #160]	; (8005360 <HAL_DMA_Init+0x1e0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_DMA_Init+0x1e4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HAL_DMA_Init+0x1e8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a24      	ldr	r2, [pc, #144]	; (800536c <HAL_DMA_Init+0x1ec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <HAL_DMA_Init+0x1f0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_DMA_Init+0x1f4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <HAL_DMA_Init+0x186>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e007      	b.n	8005316 <HAL_DMA_Init+0x196>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005316:	e02f      	b.n	8005378 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005318:	f7ff fde4 	bl	8004ee4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b05      	cmp	r3, #5
 8005324:	d928      	bls.n	8005378 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2203      	movs	r2, #3
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e244      	b.n	80057c2 <HAL_DMA_Init+0x642>
 8005338:	40020010 	.word	0x40020010
 800533c:	40020028 	.word	0x40020028
 8005340:	40020040 	.word	0x40020040
 8005344:	40020058 	.word	0x40020058
 8005348:	40020070 	.word	0x40020070
 800534c:	40020088 	.word	0x40020088
 8005350:	400200a0 	.word	0x400200a0
 8005354:	400200b8 	.word	0x400200b8
 8005358:	40020410 	.word	0x40020410
 800535c:	40020428 	.word	0x40020428
 8005360:	40020440 	.word	0x40020440
 8005364:	40020458 	.word	0x40020458
 8005368:	40020470 	.word	0x40020470
 800536c:	40020488 	.word	0x40020488
 8005370:	400204a0 	.word	0x400204a0
 8005374:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c8      	bne.n	8005318 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4b84      	ldr	r3, [pc, #528]	; (80055a4 <HAL_DMA_Init+0x424>)
 8005392:	4013      	ands	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800539e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d107      	bne.n	80053dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	4313      	orrs	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b28      	cmp	r3, #40	; 0x28
 80053e2:	d903      	bls.n	80053ec <HAL_DMA_Init+0x26c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b2e      	cmp	r3, #46	; 0x2e
 80053ea:	d91f      	bls.n	800542c <HAL_DMA_Init+0x2ac>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b3e      	cmp	r3, #62	; 0x3e
 80053f2:	d903      	bls.n	80053fc <HAL_DMA_Init+0x27c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b42      	cmp	r3, #66	; 0x42
 80053fa:	d917      	bls.n	800542c <HAL_DMA_Init+0x2ac>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b46      	cmp	r3, #70	; 0x46
 8005402:	d903      	bls.n	800540c <HAL_DMA_Init+0x28c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b48      	cmp	r3, #72	; 0x48
 800540a:	d90f      	bls.n	800542c <HAL_DMA_Init+0x2ac>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b4e      	cmp	r3, #78	; 0x4e
 8005412:	d903      	bls.n	800541c <HAL_DMA_Init+0x29c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b52      	cmp	r3, #82	; 0x52
 800541a:	d907      	bls.n	800542c <HAL_DMA_Init+0x2ac>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b73      	cmp	r3, #115	; 0x73
 8005422:	d905      	bls.n	8005430 <HAL_DMA_Init+0x2b0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b77      	cmp	r3, #119	; 0x77
 800542a:	d801      	bhi.n	8005430 <HAL_DMA_Init+0x2b0>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_DMA_Init+0x2b2>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b04      	cmp	r3, #4
 8005466:	d117      	bne.n	8005498 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f002 fce6 	bl	8007e4c <DMA_CheckFifoParam>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2240      	movs	r2, #64	; 0x40
 800548a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e194      	b.n	80057c2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f002 fc21 	bl	8007ce8 <DMA_CalcBaseAndBitshift>
 80054a6:	4603      	mov	r3, r0
 80054a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	223f      	movs	r2, #63	; 0x3f
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	e0ca      	b.n	8005652 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a39      	ldr	r2, [pc, #228]	; (80055a8 <HAL_DMA_Init+0x428>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a38      	ldr	r2, [pc, #224]	; (80055ac <HAL_DMA_Init+0x42c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a36      	ldr	r2, [pc, #216]	; (80055b0 <HAL_DMA_Init+0x430>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a35      	ldr	r2, [pc, #212]	; (80055b4 <HAL_DMA_Init+0x434>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a33      	ldr	r2, [pc, #204]	; (80055b8 <HAL_DMA_Init+0x438>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a32      	ldr	r2, [pc, #200]	; (80055bc <HAL_DMA_Init+0x43c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_Init+0x38c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <HAL_DMA_Init+0x440>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Init+0x38c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <HAL_DMA_Init+0x444>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <HAL_DMA_Init+0x390>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_DMA_Init+0x392>
 8005510:	2300      	movs	r3, #0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8094 	beq.w	8005640 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_DMA_Init+0x428>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d021      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <HAL_DMA_Init+0x42c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d01c      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_DMA_Init+0x430>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d017      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <HAL_DMA_Init+0x434>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d012      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_DMA_Init+0x438>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00d      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_DMA_Init+0x43c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d008      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_DMA_Init+0x440>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <HAL_DMA_Init+0x3e6>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_DMA_Init+0x444>)
 8005564:	4293      	cmp	r3, r2
 8005566:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_DMA_Init+0x448>)
 8005584:	4013      	ands	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d01d      	beq.n	80055cc <HAL_DMA_Init+0x44c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b80      	cmp	r3, #128	; 0x80
 8005596:	d102      	bne.n	800559e <HAL_DMA_Init+0x41e>
 8005598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800559c:	e017      	b.n	80055ce <HAL_DMA_Init+0x44e>
 800559e:	2300      	movs	r3, #0
 80055a0:	e015      	b.n	80055ce <HAL_DMA_Init+0x44e>
 80055a2:	bf00      	nop
 80055a4:	fe10803f 	.word	0xfe10803f
 80055a8:	58025408 	.word	0x58025408
 80055ac:	5802541c 	.word	0x5802541c
 80055b0:	58025430 	.word	0x58025430
 80055b4:	58025444 	.word	0x58025444
 80055b8:	58025458 	.word	0x58025458
 80055bc:	5802546c 	.word	0x5802546c
 80055c0:	58025480 	.word	0x58025480
 80055c4:	58025494 	.word	0x58025494
 80055c8:	fffe000f 	.word	0xfffe000f
 80055cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	4b6e      	ldr	r3, [pc, #440]	; (80057cc <HAL_DMA_Init+0x64c>)
 8005614:	4413      	add	r3, r2
 8005616:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_DMA_Init+0x650>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f002 fb5f 	bl	8007ce8 <DMA_CalcBaseAndBitshift>
 800562a:	4603      	mov	r3, r0
 800562c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2201      	movs	r2, #1
 8005638:	409a      	lsls	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	e008      	b.n	8005652 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2203      	movs	r2, #3
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0b7      	b.n	80057c2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5f      	ldr	r2, [pc, #380]	; (80057d4 <HAL_DMA_Init+0x654>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d072      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5d      	ldr	r2, [pc, #372]	; (80057d8 <HAL_DMA_Init+0x658>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d06d      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5c      	ldr	r2, [pc, #368]	; (80057dc <HAL_DMA_Init+0x65c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d068      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a5a      	ldr	r2, [pc, #360]	; (80057e0 <HAL_DMA_Init+0x660>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d063      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a59      	ldr	r2, [pc, #356]	; (80057e4 <HAL_DMA_Init+0x664>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d05e      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a57      	ldr	r2, [pc, #348]	; (80057e8 <HAL_DMA_Init+0x668>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d059      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a56      	ldr	r2, [pc, #344]	; (80057ec <HAL_DMA_Init+0x66c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d054      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a54      	ldr	r2, [pc, #336]	; (80057f0 <HAL_DMA_Init+0x670>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d04f      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a53      	ldr	r2, [pc, #332]	; (80057f4 <HAL_DMA_Init+0x674>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a51      	ldr	r2, [pc, #324]	; (80057f8 <HAL_DMA_Init+0x678>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a50      	ldr	r2, [pc, #320]	; (80057fc <HAL_DMA_Init+0x67c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a4e      	ldr	r2, [pc, #312]	; (8005800 <HAL_DMA_Init+0x680>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a4d      	ldr	r2, [pc, #308]	; (8005804 <HAL_DMA_Init+0x684>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a4b      	ldr	r2, [pc, #300]	; (8005808 <HAL_DMA_Init+0x688>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4a      	ldr	r2, [pc, #296]	; (800580c <HAL_DMA_Init+0x68c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a48      	ldr	r2, [pc, #288]	; (8005810 <HAL_DMA_Init+0x690>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a47      	ldr	r2, [pc, #284]	; (8005814 <HAL_DMA_Init+0x694>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a45      	ldr	r2, [pc, #276]	; (8005818 <HAL_DMA_Init+0x698>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a44      	ldr	r2, [pc, #272]	; (800581c <HAL_DMA_Init+0x69c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a42      	ldr	r2, [pc, #264]	; (8005820 <HAL_DMA_Init+0x6a0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a41      	ldr	r2, [pc, #260]	; (8005824 <HAL_DMA_Init+0x6a4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a3f      	ldr	r2, [pc, #252]	; (8005828 <HAL_DMA_Init+0x6a8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3e      	ldr	r2, [pc, #248]	; (800582c <HAL_DMA_Init+0x6ac>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Init+0x5c2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3c      	ldr	r2, [pc, #240]	; (8005830 <HAL_DMA_Init+0x6b0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Init+0x5c6>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Init+0x5c8>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d032      	beq.n	80057b2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f002 fbf9 	bl	8007f44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d102      	bne.n	8005760 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005774:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_DMA_Init+0x620>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b08      	cmp	r3, #8
 8005784:	d80c      	bhi.n	80057a0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f002 fc76 	bl	8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	e008      	b.n	80057b2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	a7fdabf8 	.word	0xa7fdabf8
 80057d0:	cccccccd 	.word	0xcccccccd
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	40020058 	.word	0x40020058
 80057e4:	40020070 	.word	0x40020070
 80057e8:	40020088 	.word	0x40020088
 80057ec:	400200a0 	.word	0x400200a0
 80057f0:	400200b8 	.word	0x400200b8
 80057f4:	40020410 	.word	0x40020410
 80057f8:	40020428 	.word	0x40020428
 80057fc:	40020440 	.word	0x40020440
 8005800:	40020458 	.word	0x40020458
 8005804:	40020470 	.word	0x40020470
 8005808:	40020488 	.word	0x40020488
 800580c:	400204a0 	.word	0x400204a0
 8005810:	400204b8 	.word	0x400204b8
 8005814:	58025408 	.word	0x58025408
 8005818:	5802541c 	.word	0x5802541c
 800581c:	58025430 	.word	0x58025430
 8005820:	58025444 	.word	0x58025444
 8005824:	58025458 	.word	0x58025458
 8005828:	5802546c 	.word	0x5802546c
 800582c:	58025480 	.word	0x58025480
 8005830:	58025494 	.word	0x58025494

08005834 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e1a8      	b.n	8005b98 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a82      	ldr	r2, [pc, #520]	; (8005a54 <HAL_DMA_DeInit+0x220>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d04a      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a80      	ldr	r2, [pc, #512]	; (8005a58 <HAL_DMA_DeInit+0x224>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d045      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7f      	ldr	r2, [pc, #508]	; (8005a5c <HAL_DMA_DeInit+0x228>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d040      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7d      	ldr	r2, [pc, #500]	; (8005a60 <HAL_DMA_DeInit+0x22c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d03b      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7c      	ldr	r2, [pc, #496]	; (8005a64 <HAL_DMA_DeInit+0x230>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d036      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a7a      	ldr	r2, [pc, #488]	; (8005a68 <HAL_DMA_DeInit+0x234>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d031      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a79      	ldr	r2, [pc, #484]	; (8005a6c <HAL_DMA_DeInit+0x238>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d02c      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a77      	ldr	r2, [pc, #476]	; (8005a70 <HAL_DMA_DeInit+0x23c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d027      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a76      	ldr	r2, [pc, #472]	; (8005a74 <HAL_DMA_DeInit+0x240>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a74      	ldr	r2, [pc, #464]	; (8005a78 <HAL_DMA_DeInit+0x244>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a73      	ldr	r2, [pc, #460]	; (8005a7c <HAL_DMA_DeInit+0x248>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a71      	ldr	r2, [pc, #452]	; (8005a80 <HAL_DMA_DeInit+0x24c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a70      	ldr	r2, [pc, #448]	; (8005a84 <HAL_DMA_DeInit+0x250>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a6e      	ldr	r2, [pc, #440]	; (8005a88 <HAL_DMA_DeInit+0x254>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6d      	ldr	r2, [pc, #436]	; (8005a8c <HAL_DMA_DeInit+0x258>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_DMA_DeInit+0xb2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <HAL_DMA_DeInit+0x25c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <HAL_DMA_DeInit+0xc4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e007      	b.n	8005908 <HAL_DMA_DeInit+0xd4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a51      	ldr	r2, [pc, #324]	; (8005a54 <HAL_DMA_DeInit+0x220>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04a      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a50      	ldr	r2, [pc, #320]	; (8005a58 <HAL_DMA_DeInit+0x224>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d045      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <HAL_DMA_DeInit+0x228>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d040      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a4d      	ldr	r2, [pc, #308]	; (8005a60 <HAL_DMA_DeInit+0x22c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d03b      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a4b      	ldr	r2, [pc, #300]	; (8005a64 <HAL_DMA_DeInit+0x230>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d036      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4a      	ldr	r2, [pc, #296]	; (8005a68 <HAL_DMA_DeInit+0x234>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d031      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a48      	ldr	r2, [pc, #288]	; (8005a6c <HAL_DMA_DeInit+0x238>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02c      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a47      	ldr	r2, [pc, #284]	; (8005a70 <HAL_DMA_DeInit+0x23c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d027      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a45      	ldr	r2, [pc, #276]	; (8005a74 <HAL_DMA_DeInit+0x240>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a44      	ldr	r2, [pc, #272]	; (8005a78 <HAL_DMA_DeInit+0x244>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01d      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a42      	ldr	r2, [pc, #264]	; (8005a7c <HAL_DMA_DeInit+0x248>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <HAL_DMA_DeInit+0x24c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <HAL_DMA_DeInit+0x250>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3e      	ldr	r2, [pc, #248]	; (8005a88 <HAL_DMA_DeInit+0x254>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3c      	ldr	r2, [pc, #240]	; (8005a8c <HAL_DMA_DeInit+0x258>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_DMA_DeInit+0x174>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <HAL_DMA_DeInit+0x25c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d101      	bne.n	80059ac <HAL_DMA_DeInit+0x178>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <HAL_DMA_DeInit+0x17a>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d025      	beq.n	80059fe <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2221      	movs	r2, #33	; 0x21
 80059e0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f002 f980 	bl	8007ce8 <DMA_CalcBaseAndBitshift>
 80059e8:	4603      	mov	r3, r0
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	223f      	movs	r2, #63	; 0x3f
 80059f6:	409a      	lsls	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	e081      	b.n	8005b02 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <HAL_DMA_DeInit+0x260>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d022      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <HAL_DMA_DeInit+0x264>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01d      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <HAL_DMA_DeInit+0x268>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d018      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_DMA_DeInit+0x26c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_DMA_DeInit+0x270>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00e      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_DMA_DeInit+0x274>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_DMA_DeInit+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_DMA_DeInit+0x21a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_DMA_DeInit+0x27c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d132      	bne.n	8005ab4 <HAL_DMA_DeInit+0x280>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e031      	b.n	8005ab6 <HAL_DMA_DeInit+0x282>
 8005a52:	bf00      	nop
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
 8005a94:	58025408 	.word	0x58025408
 8005a98:	5802541c 	.word	0x5802541c
 8005a9c:	58025430 	.word	0x58025430
 8005aa0:	58025444 	.word	0x58025444
 8005aa4:	58025458 	.word	0x58025458
 8005aa8:	5802546c 	.word	0x5802546c
 8005aac:	58025480 	.word	0x58025480
 8005ab0:	58025494 	.word	0x58025494
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f002 f900 	bl	8007ce8 <DMA_CalcBaseAndBitshift>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	e001      	b.n	8005b02 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e04a      	b.n	8005b98 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 fa1e 	bl	8007f44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b20:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <HAL_DMA_DeInit+0x316>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d80b      	bhi.n	8005b4a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f002 faa0 	bl	8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b48:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e226      	b.n	800600a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_DMA_Start_IT+0x2a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e21f      	b.n	800600a <HAL_DMA_Start_IT+0x46a>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	f040 820a 	bne.w	8005ff4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a68      	ldr	r2, [pc, #416]	; (8005d94 <HAL_DMA_Start_IT+0x1f4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d04a      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a66      	ldr	r2, [pc, #408]	; (8005d98 <HAL_DMA_Start_IT+0x1f8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d045      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a65      	ldr	r2, [pc, #404]	; (8005d9c <HAL_DMA_Start_IT+0x1fc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d040      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a63      	ldr	r2, [pc, #396]	; (8005da0 <HAL_DMA_Start_IT+0x200>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d03b      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a62      	ldr	r2, [pc, #392]	; (8005da4 <HAL_DMA_Start_IT+0x204>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d036      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a60      	ldr	r2, [pc, #384]	; (8005da8 <HAL_DMA_Start_IT+0x208>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d031      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5f      	ldr	r2, [pc, #380]	; (8005dac <HAL_DMA_Start_IT+0x20c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d02c      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5d      	ldr	r2, [pc, #372]	; (8005db0 <HAL_DMA_Start_IT+0x210>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d027      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <HAL_DMA_Start_IT+0x214>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d022      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5a      	ldr	r2, [pc, #360]	; (8005db8 <HAL_DMA_Start_IT+0x218>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01d      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a59      	ldr	r2, [pc, #356]	; (8005dbc <HAL_DMA_Start_IT+0x21c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d018      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a57      	ldr	r2, [pc, #348]	; (8005dc0 <HAL_DMA_Start_IT+0x220>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_DMA_Start_IT+0x224>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00e      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a54      	ldr	r2, [pc, #336]	; (8005dc8 <HAL_DMA_Start_IT+0x228>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d009      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a53      	ldr	r2, [pc, #332]	; (8005dcc <HAL_DMA_Start_IT+0x22c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_DMA_Start_IT+0xee>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a51      	ldr	r2, [pc, #324]	; (8005dd0 <HAL_DMA_Start_IT+0x230>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <HAL_DMA_Start_IT+0x100>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e007      	b.n	8005cb0 <HAL_DMA_Start_IT+0x110>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f001 fe6a 	bl	8007990 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a34      	ldr	r2, [pc, #208]	; (8005d94 <HAL_DMA_Start_IT+0x1f4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a33      	ldr	r2, [pc, #204]	; (8005d98 <HAL_DMA_Start_IT+0x1f8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <HAL_DMA_Start_IT+0x1fc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_DMA_Start_IT+0x200>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <HAL_DMA_Start_IT+0x204>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <HAL_DMA_Start_IT+0x208>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <HAL_DMA_Start_IT+0x20c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_DMA_Start_IT+0x210>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_DMA_Start_IT+0x214>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <HAL_DMA_Start_IT+0x218>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_DMA_Start_IT+0x21c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <HAL_DMA_Start_IT+0x220>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <HAL_DMA_Start_IT+0x224>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <HAL_DMA_Start_IT+0x228>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <HAL_DMA_Start_IT+0x22c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_Start_IT+0x1bc>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_DMA_Start_IT+0x230>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_Start_IT+0x1c0>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_Start_IT+0x1c2>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d036      	beq.n	8005dd4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 021e 	bic.w	r2, r3, #30
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0216 	orr.w	r2, r2, #22
 8005d78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d03e      	beq.n	8005e00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0208 	orr.w	r2, r2, #8
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e035      	b.n	8005e00 <HAL_DMA_Start_IT+0x260>
 8005d94:	40020010 	.word	0x40020010
 8005d98:	40020028 	.word	0x40020028
 8005d9c:	40020040 	.word	0x40020040
 8005da0:	40020058 	.word	0x40020058
 8005da4:	40020070 	.word	0x40020070
 8005da8:	40020088 	.word	0x40020088
 8005dac:	400200a0 	.word	0x400200a0
 8005db0:	400200b8 	.word	0x400200b8
 8005db4:	40020410 	.word	0x40020410
 8005db8:	40020428 	.word	0x40020428
 8005dbc:	40020440 	.word	0x40020440
 8005dc0:	40020458 	.word	0x40020458
 8005dc4:	40020470 	.word	0x40020470
 8005dc8:	40020488 	.word	0x40020488
 8005dcc:	400204a0 	.word	0x400204a0
 8005dd0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 020e 	bic.w	r2, r3, #14
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 020a 	orr.w	r2, r2, #10
 8005de6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0204 	orr.w	r2, r2, #4
 8005dfe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a83      	ldr	r2, [pc, #524]	; (8006014 <HAL_DMA_Start_IT+0x474>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d072      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a82      	ldr	r2, [pc, #520]	; (8006018 <HAL_DMA_Start_IT+0x478>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d06d      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a80      	ldr	r2, [pc, #512]	; (800601c <HAL_DMA_Start_IT+0x47c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d068      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7f      	ldr	r2, [pc, #508]	; (8006020 <HAL_DMA_Start_IT+0x480>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d063      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a7d      	ldr	r2, [pc, #500]	; (8006024 <HAL_DMA_Start_IT+0x484>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d05e      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7c      	ldr	r2, [pc, #496]	; (8006028 <HAL_DMA_Start_IT+0x488>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d059      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a7a      	ldr	r2, [pc, #488]	; (800602c <HAL_DMA_Start_IT+0x48c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d054      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a79      	ldr	r2, [pc, #484]	; (8006030 <HAL_DMA_Start_IT+0x490>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04f      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a77      	ldr	r2, [pc, #476]	; (8006034 <HAL_DMA_Start_IT+0x494>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d04a      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a76      	ldr	r2, [pc, #472]	; (8006038 <HAL_DMA_Start_IT+0x498>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d045      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a74      	ldr	r2, [pc, #464]	; (800603c <HAL_DMA_Start_IT+0x49c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d040      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a73      	ldr	r2, [pc, #460]	; (8006040 <HAL_DMA_Start_IT+0x4a0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d03b      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a71      	ldr	r2, [pc, #452]	; (8006044 <HAL_DMA_Start_IT+0x4a4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d036      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a70      	ldr	r2, [pc, #448]	; (8006048 <HAL_DMA_Start_IT+0x4a8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d031      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6e      	ldr	r2, [pc, #440]	; (800604c <HAL_DMA_Start_IT+0x4ac>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02c      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6d      	ldr	r2, [pc, #436]	; (8006050 <HAL_DMA_Start_IT+0x4b0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d027      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6b      	ldr	r2, [pc, #428]	; (8006054 <HAL_DMA_Start_IT+0x4b4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6a      	ldr	r2, [pc, #424]	; (8006058 <HAL_DMA_Start_IT+0x4b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a68      	ldr	r2, [pc, #416]	; (800605c <HAL_DMA_Start_IT+0x4bc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a67      	ldr	r2, [pc, #412]	; (8006060 <HAL_DMA_Start_IT+0x4c0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a65      	ldr	r2, [pc, #404]	; (8006064 <HAL_DMA_Start_IT+0x4c4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a64      	ldr	r2, [pc, #400]	; (8006068 <HAL_DMA_Start_IT+0x4c8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a62      	ldr	r2, [pc, #392]	; (800606c <HAL_DMA_Start_IT+0x4cc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x350>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a61      	ldr	r2, [pc, #388]	; (8006070 <HAL_DMA_Start_IT+0x4d0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d101      	bne.n	8005ef4 <HAL_DMA_Start_IT+0x354>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <HAL_DMA_Start_IT+0x356>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a37      	ldr	r2, [pc, #220]	; (8006014 <HAL_DMA_Start_IT+0x474>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a36      	ldr	r2, [pc, #216]	; (8006018 <HAL_DMA_Start_IT+0x478>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a34      	ldr	r2, [pc, #208]	; (800601c <HAL_DMA_Start_IT+0x47c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a33      	ldr	r2, [pc, #204]	; (8006020 <HAL_DMA_Start_IT+0x480>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a31      	ldr	r2, [pc, #196]	; (8006024 <HAL_DMA_Start_IT+0x484>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a30      	ldr	r2, [pc, #192]	; (8006028 <HAL_DMA_Start_IT+0x488>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2e      	ldr	r2, [pc, #184]	; (800602c <HAL_DMA_Start_IT+0x48c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <HAL_DMA_Start_IT+0x490>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2b      	ldr	r2, [pc, #172]	; (8006034 <HAL_DMA_Start_IT+0x494>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <HAL_DMA_Start_IT+0x498>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a28      	ldr	r2, [pc, #160]	; (800603c <HAL_DMA_Start_IT+0x49c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <HAL_DMA_Start_IT+0x4a0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_DMA_Start_IT+0x4a4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <HAL_DMA_Start_IT+0x4a8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <HAL_DMA_Start_IT+0x4ac>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_DMA_Start_IT+0x430>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <HAL_DMA_Start_IT+0x4b0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d108      	bne.n	8005fe2 <HAL_DMA_Start_IT+0x442>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e012      	b.n	8006008 <HAL_DMA_Start_IT+0x468>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e009      	b.n	8006008 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
 8006054:	58025408 	.word	0x58025408
 8006058:	5802541c 	.word	0x5802541c
 800605c:	58025430 	.word	0x58025430
 8006060:	58025444 	.word	0x58025444
 8006064:	58025458 	.word	0x58025458
 8006068:	5802546c 	.word	0x5802546c
 800606c:	58025480 	.word	0x58025480
 8006070:	58025494 	.word	0x58025494

08006074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800607c:	f7fe ff32 	bl	8004ee4 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e2dc      	b.n	8006646 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d008      	beq.n	80060aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	; 0x80
 800609c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e2cd      	b.n	8006646 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a76      	ldr	r2, [pc, #472]	; (8006288 <HAL_DMA_Abort+0x214>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d04a      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a74      	ldr	r2, [pc, #464]	; (800628c <HAL_DMA_Abort+0x218>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d045      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a73      	ldr	r2, [pc, #460]	; (8006290 <HAL_DMA_Abort+0x21c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d040      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a71      	ldr	r2, [pc, #452]	; (8006294 <HAL_DMA_Abort+0x220>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d03b      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a70      	ldr	r2, [pc, #448]	; (8006298 <HAL_DMA_Abort+0x224>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d036      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a6e      	ldr	r2, [pc, #440]	; (800629c <HAL_DMA_Abort+0x228>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d031      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a6d      	ldr	r2, [pc, #436]	; (80062a0 <HAL_DMA_Abort+0x22c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d02c      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6b      	ldr	r2, [pc, #428]	; (80062a4 <HAL_DMA_Abort+0x230>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d027      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a6a      	ldr	r2, [pc, #424]	; (80062a8 <HAL_DMA_Abort+0x234>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d022      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a68      	ldr	r2, [pc, #416]	; (80062ac <HAL_DMA_Abort+0x238>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01d      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a67      	ldr	r2, [pc, #412]	; (80062b0 <HAL_DMA_Abort+0x23c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d018      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a65      	ldr	r2, [pc, #404]	; (80062b4 <HAL_DMA_Abort+0x240>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d013      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a64      	ldr	r2, [pc, #400]	; (80062b8 <HAL_DMA_Abort+0x244>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a62      	ldr	r2, [pc, #392]	; (80062bc <HAL_DMA_Abort+0x248>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a61      	ldr	r2, [pc, #388]	; (80062c0 <HAL_DMA_Abort+0x24c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_DMA_Abort+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5f      	ldr	r2, [pc, #380]	; (80062c4 <HAL_DMA_Abort+0x250>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_DMA_Abort+0xda>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_DMA_Abort+0xdc>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 021e 	bic.w	r2, r2, #30
 8006162:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006172:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e00a      	b.n	8006192 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 020e 	bic.w	r2, r2, #14
 800618a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <HAL_DMA_Abort+0x214>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d072      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3a      	ldr	r2, [pc, #232]	; (800628c <HAL_DMA_Abort+0x218>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d06d      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a39      	ldr	r2, [pc, #228]	; (8006290 <HAL_DMA_Abort+0x21c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d068      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a37      	ldr	r2, [pc, #220]	; (8006294 <HAL_DMA_Abort+0x220>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d063      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a36      	ldr	r2, [pc, #216]	; (8006298 <HAL_DMA_Abort+0x224>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d05e      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a34      	ldr	r2, [pc, #208]	; (800629c <HAL_DMA_Abort+0x228>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d059      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a33      	ldr	r2, [pc, #204]	; (80062a0 <HAL_DMA_Abort+0x22c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d054      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a31      	ldr	r2, [pc, #196]	; (80062a4 <HAL_DMA_Abort+0x230>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d04f      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a30      	ldr	r2, [pc, #192]	; (80062a8 <HAL_DMA_Abort+0x234>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d04a      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2e      	ldr	r2, [pc, #184]	; (80062ac <HAL_DMA_Abort+0x238>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d045      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2d      	ldr	r2, [pc, #180]	; (80062b0 <HAL_DMA_Abort+0x23c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d040      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <HAL_DMA_Abort+0x240>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d03b      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <HAL_DMA_Abort+0x244>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d036      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a28      	ldr	r2, [pc, #160]	; (80062bc <HAL_DMA_Abort+0x248>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <HAL_DMA_Abort+0x24c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d02c      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a25      	ldr	r2, [pc, #148]	; (80062c4 <HAL_DMA_Abort+0x250>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d027      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a24      	ldr	r2, [pc, #144]	; (80062c8 <HAL_DMA_Abort+0x254>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <HAL_DMA_Abort+0x258>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01d      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <HAL_DMA_Abort+0x25c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_DMA_Abort+0x260>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <HAL_DMA_Abort+0x264>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_DMA_Abort+0x268>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_DMA_Abort+0x26c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_DMA_Abort+0x20e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <HAL_DMA_Abort+0x270>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d132      	bne.n	80062e8 <HAL_DMA_Abort+0x274>
 8006282:	2301      	movs	r3, #1
 8006284:	e031      	b.n	80062ea <HAL_DMA_Abort+0x276>
 8006286:	bf00      	nop
 8006288:	40020010 	.word	0x40020010
 800628c:	40020028 	.word	0x40020028
 8006290:	40020040 	.word	0x40020040
 8006294:	40020058 	.word	0x40020058
 8006298:	40020070 	.word	0x40020070
 800629c:	40020088 	.word	0x40020088
 80062a0:	400200a0 	.word	0x400200a0
 80062a4:	400200b8 	.word	0x400200b8
 80062a8:	40020410 	.word	0x40020410
 80062ac:	40020428 	.word	0x40020428
 80062b0:	40020440 	.word	0x40020440
 80062b4:	40020458 	.word	0x40020458
 80062b8:	40020470 	.word	0x40020470
 80062bc:	40020488 	.word	0x40020488
 80062c0:	400204a0 	.word	0x400204a0
 80062c4:	400204b8 	.word	0x400204b8
 80062c8:	58025408 	.word	0x58025408
 80062cc:	5802541c 	.word	0x5802541c
 80062d0:	58025430 	.word	0x58025430
 80062d4:	58025444 	.word	0x58025444
 80062d8:	58025458 	.word	0x58025458
 80062dc:	5802546c 	.word	0x5802546c
 80062e0:	58025480 	.word	0x58025480
 80062e4:	58025494 	.word	0x58025494
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6d      	ldr	r2, [pc, #436]	; (80064b8 <HAL_DMA_Abort+0x444>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d04a      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a6b      	ldr	r2, [pc, #428]	; (80064bc <HAL_DMA_Abort+0x448>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d045      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a6a      	ldr	r2, [pc, #424]	; (80064c0 <HAL_DMA_Abort+0x44c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d040      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a68      	ldr	r2, [pc, #416]	; (80064c4 <HAL_DMA_Abort+0x450>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d03b      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a67      	ldr	r2, [pc, #412]	; (80064c8 <HAL_DMA_Abort+0x454>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d036      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_DMA_Abort+0x458>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d031      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a64      	ldr	r2, [pc, #400]	; (80064d0 <HAL_DMA_Abort+0x45c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d02c      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a62      	ldr	r2, [pc, #392]	; (80064d4 <HAL_DMA_Abort+0x460>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d027      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a61      	ldr	r2, [pc, #388]	; (80064d8 <HAL_DMA_Abort+0x464>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5f      	ldr	r2, [pc, #380]	; (80064dc <HAL_DMA_Abort+0x468>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a5e      	ldr	r2, [pc, #376]	; (80064e0 <HAL_DMA_Abort+0x46c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a5c      	ldr	r2, [pc, #368]	; (80064e4 <HAL_DMA_Abort+0x470>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5b      	ldr	r2, [pc, #364]	; (80064e8 <HAL_DMA_Abort+0x474>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a59      	ldr	r2, [pc, #356]	; (80064ec <HAL_DMA_Abort+0x478>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a58      	ldr	r2, [pc, #352]	; (80064f0 <HAL_DMA_Abort+0x47c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_DMA_Abort+0x32a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a56      	ldr	r2, [pc, #344]	; (80064f4 <HAL_DMA_Abort+0x480>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d108      	bne.n	80063b0 <HAL_DMA_Abort+0x33c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e007      	b.n	80063c0 <HAL_DMA_Abort+0x34c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063c0:	e013      	b.n	80063ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063c2:	f7fe fd8f 	bl	8004ee4 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b05      	cmp	r3, #5
 80063ce:	d90c      	bls.n	80063ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e12d      	b.n	8006646 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e5      	bne.n	80063c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <HAL_DMA_Abort+0x444>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2d      	ldr	r2, [pc, #180]	; (80064bc <HAL_DMA_Abort+0x448>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2c      	ldr	r2, [pc, #176]	; (80064c0 <HAL_DMA_Abort+0x44c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_DMA_Abort+0x450>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a29      	ldr	r2, [pc, #164]	; (80064c8 <HAL_DMA_Abort+0x454>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_DMA_Abort+0x458>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <HAL_DMA_Abort+0x45c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <HAL_DMA_Abort+0x460>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <HAL_DMA_Abort+0x464>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a21      	ldr	r2, [pc, #132]	; (80064dc <HAL_DMA_Abort+0x468>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <HAL_DMA_Abort+0x46c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_DMA_Abort+0x470>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <HAL_DMA_Abort+0x474>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_DMA_Abort+0x478>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_DMA_Abort+0x47c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_Abort+0x422>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_DMA_Abort+0x480>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_DMA_Abort+0x426>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_DMA_Abort+0x428>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02b      	beq.n	80064f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	223f      	movs	r2, #63	; 0x3f
 80064b0:	409a      	lsls	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	e02a      	b.n	800650e <HAL_DMA_Abort+0x49a>
 80064b8:	40020010 	.word	0x40020010
 80064bc:	40020028 	.word	0x40020028
 80064c0:	40020040 	.word	0x40020040
 80064c4:	40020058 	.word	0x40020058
 80064c8:	40020070 	.word	0x40020070
 80064cc:	40020088 	.word	0x40020088
 80064d0:	400200a0 	.word	0x400200a0
 80064d4:	400200b8 	.word	0x400200b8
 80064d8:	40020410 	.word	0x40020410
 80064dc:	40020428 	.word	0x40020428
 80064e0:	40020440 	.word	0x40020440
 80064e4:	40020458 	.word	0x40020458
 80064e8:	40020470 	.word	0x40020470
 80064ec:	40020488 	.word	0x40020488
 80064f0:	400204a0 	.word	0x400204a0
 80064f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2201      	movs	r2, #1
 8006508:	409a      	lsls	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a4f      	ldr	r2, [pc, #316]	; (8006650 <HAL_DMA_Abort+0x5dc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d072      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a4d      	ldr	r2, [pc, #308]	; (8006654 <HAL_DMA_Abort+0x5e0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d06d      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a4c      	ldr	r2, [pc, #304]	; (8006658 <HAL_DMA_Abort+0x5e4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d068      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4a      	ldr	r2, [pc, #296]	; (800665c <HAL_DMA_Abort+0x5e8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d063      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a49      	ldr	r2, [pc, #292]	; (8006660 <HAL_DMA_Abort+0x5ec>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d05e      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a47      	ldr	r2, [pc, #284]	; (8006664 <HAL_DMA_Abort+0x5f0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d059      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a46      	ldr	r2, [pc, #280]	; (8006668 <HAL_DMA_Abort+0x5f4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d054      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a44      	ldr	r2, [pc, #272]	; (800666c <HAL_DMA_Abort+0x5f8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d04f      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a43      	ldr	r2, [pc, #268]	; (8006670 <HAL_DMA_Abort+0x5fc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d04a      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a41      	ldr	r2, [pc, #260]	; (8006674 <HAL_DMA_Abort+0x600>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d045      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a40      	ldr	r2, [pc, #256]	; (8006678 <HAL_DMA_Abort+0x604>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d040      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a3e      	ldr	r2, [pc, #248]	; (800667c <HAL_DMA_Abort+0x608>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03b      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <HAL_DMA_Abort+0x60c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d036      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a3b      	ldr	r2, [pc, #236]	; (8006684 <HAL_DMA_Abort+0x610>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d031      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a3a      	ldr	r2, [pc, #232]	; (8006688 <HAL_DMA_Abort+0x614>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d02c      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a38      	ldr	r2, [pc, #224]	; (800668c <HAL_DMA_Abort+0x618>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d027      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a37      	ldr	r2, [pc, #220]	; (8006690 <HAL_DMA_Abort+0x61c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a35      	ldr	r2, [pc, #212]	; (8006694 <HAL_DMA_Abort+0x620>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a34      	ldr	r2, [pc, #208]	; (8006698 <HAL_DMA_Abort+0x624>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a32      	ldr	r2, [pc, #200]	; (800669c <HAL_DMA_Abort+0x628>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <HAL_DMA_Abort+0x62c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <HAL_DMA_Abort+0x630>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a2e      	ldr	r2, [pc, #184]	; (80066a8 <HAL_DMA_Abort+0x634>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMA_Abort+0x58a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <HAL_DMA_Abort+0x638>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <HAL_DMA_Abort+0x58e>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_DMA_Abort+0x590>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006610:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006628:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006632:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40020010 	.word	0x40020010
 8006654:	40020028 	.word	0x40020028
 8006658:	40020040 	.word	0x40020040
 800665c:	40020058 	.word	0x40020058
 8006660:	40020070 	.word	0x40020070
 8006664:	40020088 	.word	0x40020088
 8006668:	400200a0 	.word	0x400200a0
 800666c:	400200b8 	.word	0x400200b8
 8006670:	40020410 	.word	0x40020410
 8006674:	40020428 	.word	0x40020428
 8006678:	40020440 	.word	0x40020440
 800667c:	40020458 	.word	0x40020458
 8006680:	40020470 	.word	0x40020470
 8006684:	40020488 	.word	0x40020488
 8006688:	400204a0 	.word	0x400204a0
 800668c:	400204b8 	.word	0x400204b8
 8006690:	58025408 	.word	0x58025408
 8006694:	5802541c 	.word	0x5802541c
 8006698:	58025430 	.word	0x58025430
 800669c:	58025444 	.word	0x58025444
 80066a0:	58025458 	.word	0x58025458
 80066a4:	5802546c 	.word	0x5802546c
 80066a8:	58025480 	.word	0x58025480
 80066ac:	58025494 	.word	0x58025494

080066b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e237      	b.n	8006b32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d004      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e22c      	b.n	8006b32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5c      	ldr	r2, [pc, #368]	; (8006850 <HAL_DMA_Abort_IT+0x1a0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d04a      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a5b      	ldr	r2, [pc, #364]	; (8006854 <HAL_DMA_Abort_IT+0x1a4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d045      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a59      	ldr	r2, [pc, #356]	; (8006858 <HAL_DMA_Abort_IT+0x1a8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d040      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a58      	ldr	r2, [pc, #352]	; (800685c <HAL_DMA_Abort_IT+0x1ac>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d03b      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a56      	ldr	r2, [pc, #344]	; (8006860 <HAL_DMA_Abort_IT+0x1b0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d036      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a55      	ldr	r2, [pc, #340]	; (8006864 <HAL_DMA_Abort_IT+0x1b4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d031      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a53      	ldr	r2, [pc, #332]	; (8006868 <HAL_DMA_Abort_IT+0x1b8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d02c      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a52      	ldr	r2, [pc, #328]	; (800686c <HAL_DMA_Abort_IT+0x1bc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d027      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a50      	ldr	r2, [pc, #320]	; (8006870 <HAL_DMA_Abort_IT+0x1c0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d022      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4f      	ldr	r2, [pc, #316]	; (8006874 <HAL_DMA_Abort_IT+0x1c4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d01d      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a4d      	ldr	r2, [pc, #308]	; (8006878 <HAL_DMA_Abort_IT+0x1c8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d018      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a4c      	ldr	r2, [pc, #304]	; (800687c <HAL_DMA_Abort_IT+0x1cc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a4a      	ldr	r2, [pc, #296]	; (8006880 <HAL_DMA_Abort_IT+0x1d0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a49      	ldr	r2, [pc, #292]	; (8006884 <HAL_DMA_Abort_IT+0x1d4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a47      	ldr	r2, [pc, #284]	; (8006888 <HAL_DMA_Abort_IT+0x1d8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_DMA_Abort_IT+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a46      	ldr	r2, [pc, #280]	; (800688c <HAL_DMA_Abort_IT+0x1dc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d101      	bne.n	800677c <HAL_DMA_Abort_IT+0xcc>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <HAL_DMA_Abort_IT+0xce>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8086 	beq.w	8006890 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2204      	movs	r2, #4
 8006788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <HAL_DMA_Abort_IT+0x1a0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d04a      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2e      	ldr	r2, [pc, #184]	; (8006854 <HAL_DMA_Abort_IT+0x1a4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d045      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2c      	ldr	r2, [pc, #176]	; (8006858 <HAL_DMA_Abort_IT+0x1a8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d040      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2b      	ldr	r2, [pc, #172]	; (800685c <HAL_DMA_Abort_IT+0x1ac>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d03b      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <HAL_DMA_Abort_IT+0x1b0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d036      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a28      	ldr	r2, [pc, #160]	; (8006864 <HAL_DMA_Abort_IT+0x1b4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d031      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <HAL_DMA_Abort_IT+0x1b8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02c      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a25      	ldr	r2, [pc, #148]	; (800686c <HAL_DMA_Abort_IT+0x1bc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d027      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <HAL_DMA_Abort_IT+0x1c0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_DMA_Abort_IT+0x1c4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d01d      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a20      	ldr	r2, [pc, #128]	; (8006878 <HAL_DMA_Abort_IT+0x1c8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1f      	ldr	r2, [pc, #124]	; (800687c <HAL_DMA_Abort_IT+0x1cc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <HAL_DMA_Abort_IT+0x1d0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <HAL_DMA_Abort_IT+0x1d4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1a      	ldr	r2, [pc, #104]	; (8006888 <HAL_DMA_Abort_IT+0x1d8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_DMA_Abort_IT+0x17c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a19      	ldr	r2, [pc, #100]	; (800688c <HAL_DMA_Abort_IT+0x1dc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d108      	bne.n	800683e <HAL_DMA_Abort_IT+0x18e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0201 	bic.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	e178      	b.n	8006b30 <HAL_DMA_Abort_IT+0x480>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e16f      	b.n	8006b30 <HAL_DMA_Abort_IT+0x480>
 8006850:	40020010 	.word	0x40020010
 8006854:	40020028 	.word	0x40020028
 8006858:	40020040 	.word	0x40020040
 800685c:	40020058 	.word	0x40020058
 8006860:	40020070 	.word	0x40020070
 8006864:	40020088 	.word	0x40020088
 8006868:	400200a0 	.word	0x400200a0
 800686c:	400200b8 	.word	0x400200b8
 8006870:	40020410 	.word	0x40020410
 8006874:	40020428 	.word	0x40020428
 8006878:	40020440 	.word	0x40020440
 800687c:	40020458 	.word	0x40020458
 8006880:	40020470 	.word	0x40020470
 8006884:	40020488 	.word	0x40020488
 8006888:	400204a0 	.word	0x400204a0
 800688c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 020e 	bic.w	r2, r2, #14
 800689e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a6c      	ldr	r2, [pc, #432]	; (8006a58 <HAL_DMA_Abort_IT+0x3a8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d04a      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6b      	ldr	r2, [pc, #428]	; (8006a5c <HAL_DMA_Abort_IT+0x3ac>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d045      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a69      	ldr	r2, [pc, #420]	; (8006a60 <HAL_DMA_Abort_IT+0x3b0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d040      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a68      	ldr	r2, [pc, #416]	; (8006a64 <HAL_DMA_Abort_IT+0x3b4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d03b      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a66      	ldr	r2, [pc, #408]	; (8006a68 <HAL_DMA_Abort_IT+0x3b8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d036      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a65      	ldr	r2, [pc, #404]	; (8006a6c <HAL_DMA_Abort_IT+0x3bc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d031      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a63      	ldr	r2, [pc, #396]	; (8006a70 <HAL_DMA_Abort_IT+0x3c0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02c      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a62      	ldr	r2, [pc, #392]	; (8006a74 <HAL_DMA_Abort_IT+0x3c4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d027      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a60      	ldr	r2, [pc, #384]	; (8006a78 <HAL_DMA_Abort_IT+0x3c8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a5f      	ldr	r2, [pc, #380]	; (8006a7c <HAL_DMA_Abort_IT+0x3cc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01d      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5d      	ldr	r2, [pc, #372]	; (8006a80 <HAL_DMA_Abort_IT+0x3d0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a5c      	ldr	r2, [pc, #368]	; (8006a84 <HAL_DMA_Abort_IT+0x3d4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5a      	ldr	r2, [pc, #360]	; (8006a88 <HAL_DMA_Abort_IT+0x3d8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a59      	ldr	r2, [pc, #356]	; (8006a8c <HAL_DMA_Abort_IT+0x3dc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a57      	ldr	r2, [pc, #348]	; (8006a90 <HAL_DMA_Abort_IT+0x3e0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_DMA_Abort_IT+0x290>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a56      	ldr	r2, [pc, #344]	; (8006a94 <HAL_DMA_Abort_IT+0x3e4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d108      	bne.n	8006952 <HAL_DMA_Abort_IT+0x2a2>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e007      	b.n	8006962 <HAL_DMA_Abort_IT+0x2b2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0201 	bic.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a3c      	ldr	r2, [pc, #240]	; (8006a58 <HAL_DMA_Abort_IT+0x3a8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d072      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a3a      	ldr	r2, [pc, #232]	; (8006a5c <HAL_DMA_Abort_IT+0x3ac>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d06d      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a39      	ldr	r2, [pc, #228]	; (8006a60 <HAL_DMA_Abort_IT+0x3b0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d068      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a37      	ldr	r2, [pc, #220]	; (8006a64 <HAL_DMA_Abort_IT+0x3b4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d063      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a36      	ldr	r2, [pc, #216]	; (8006a68 <HAL_DMA_Abort_IT+0x3b8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d05e      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a34      	ldr	r2, [pc, #208]	; (8006a6c <HAL_DMA_Abort_IT+0x3bc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d059      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a33      	ldr	r2, [pc, #204]	; (8006a70 <HAL_DMA_Abort_IT+0x3c0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d054      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <HAL_DMA_Abort_IT+0x3c4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d04f      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a30      	ldr	r2, [pc, #192]	; (8006a78 <HAL_DMA_Abort_IT+0x3c8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d04a      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2e      	ldr	r2, [pc, #184]	; (8006a7c <HAL_DMA_Abort_IT+0x3cc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d045      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2d      	ldr	r2, [pc, #180]	; (8006a80 <HAL_DMA_Abort_IT+0x3d0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d040      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a2b      	ldr	r2, [pc, #172]	; (8006a84 <HAL_DMA_Abort_IT+0x3d4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d03b      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2a      	ldr	r2, [pc, #168]	; (8006a88 <HAL_DMA_Abort_IT+0x3d8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d036      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a28      	ldr	r2, [pc, #160]	; (8006a8c <HAL_DMA_Abort_IT+0x3dc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d031      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <HAL_DMA_Abort_IT+0x3e0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d02c      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a25      	ldr	r2, [pc, #148]	; (8006a94 <HAL_DMA_Abort_IT+0x3e4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d027      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a24      	ldr	r2, [pc, #144]	; (8006a98 <HAL_DMA_Abort_IT+0x3e8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <HAL_DMA_Abort_IT+0x3ec>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01d      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <HAL_DMA_Abort_IT+0x3f0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <HAL_DMA_Abort_IT+0x3f4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_DMA_Abort_IT+0x3f8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <HAL_DMA_Abort_IT+0x3fc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <HAL_DMA_Abort_IT+0x400>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_DMA_Abort_IT+0x3a2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_DMA_Abort_IT+0x404>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d132      	bne.n	8006ab8 <HAL_DMA_Abort_IT+0x408>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e031      	b.n	8006aba <HAL_DMA_Abort_IT+0x40a>
 8006a56:	bf00      	nop
 8006a58:	40020010 	.word	0x40020010
 8006a5c:	40020028 	.word	0x40020028
 8006a60:	40020040 	.word	0x40020040
 8006a64:	40020058 	.word	0x40020058
 8006a68:	40020070 	.word	0x40020070
 8006a6c:	40020088 	.word	0x40020088
 8006a70:	400200a0 	.word	0x400200a0
 8006a74:	400200b8 	.word	0x400200b8
 8006a78:	40020410 	.word	0x40020410
 8006a7c:	40020428 	.word	0x40020428
 8006a80:	40020440 	.word	0x40020440
 8006a84:	40020458 	.word	0x40020458
 8006a88:	40020470 	.word	0x40020470
 8006a8c:	40020488 	.word	0x40020488
 8006a90:	400204a0 	.word	0x400204a0
 8006a94:	400204b8 	.word	0x400204b8
 8006a98:	58025408 	.word	0x58025408
 8006a9c:	5802541c 	.word	0x5802541c
 8006aa0:	58025430 	.word	0x58025430
 8006aa4:	58025444 	.word	0x58025444
 8006aa8:	58025458 	.word	0x58025458
 8006aac:	5802546c 	.word	0x5802546c
 8006ab0:	58025480 	.word	0x58025480
 8006ab4:	58025494 	.word	0x58025494
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d028      	beq.n	8006b10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006acc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2201      	movs	r2, #1
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006aec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b48:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <HAL_DMA_IRQHandler+0x1ac>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a67      	ldr	r2, [pc, #412]	; (8006cec <HAL_DMA_IRQHandler+0x1b0>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	0a9b      	lsrs	r3, r3, #10
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a5f      	ldr	r2, [pc, #380]	; (8006cf0 <HAL_DMA_IRQHandler+0x1b4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5d      	ldr	r2, [pc, #372]	; (8006cf4 <HAL_DMA_IRQHandler+0x1b8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a5c      	ldr	r2, [pc, #368]	; (8006cf8 <HAL_DMA_IRQHandler+0x1bc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5a      	ldr	r2, [pc, #360]	; (8006cfc <HAL_DMA_IRQHandler+0x1c0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a59      	ldr	r2, [pc, #356]	; (8006d00 <HAL_DMA_IRQHandler+0x1c4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a57      	ldr	r2, [pc, #348]	; (8006d04 <HAL_DMA_IRQHandler+0x1c8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a56      	ldr	r2, [pc, #344]	; (8006d08 <HAL_DMA_IRQHandler+0x1cc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a54      	ldr	r2, [pc, #336]	; (8006d0c <HAL_DMA_IRQHandler+0x1d0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a53      	ldr	r2, [pc, #332]	; (8006d10 <HAL_DMA_IRQHandler+0x1d4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a51      	ldr	r2, [pc, #324]	; (8006d14 <HAL_DMA_IRQHandler+0x1d8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a50      	ldr	r2, [pc, #320]	; (8006d18 <HAL_DMA_IRQHandler+0x1dc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4e      	ldr	r2, [pc, #312]	; (8006d1c <HAL_DMA_IRQHandler+0x1e0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4d      	ldr	r2, [pc, #308]	; (8006d20 <HAL_DMA_IRQHandler+0x1e4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4b      	ldr	r2, [pc, #300]	; (8006d24 <HAL_DMA_IRQHandler+0x1e8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4a      	ldr	r2, [pc, #296]	; (8006d28 <HAL_DMA_IRQHandler+0x1ec>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_IRQHandler+0xd2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a48      	ldr	r2, [pc, #288]	; (8006d2c <HAL_DMA_IRQHandler+0x1f0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_DMA_IRQHandler+0xd6>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <HAL_DMA_IRQHandler+0xd8>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 842b 	beq.w	8007470 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	2208      	movs	r2, #8
 8006c24:	409a      	lsls	r2, r3
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 80a2 	beq.w	8006d74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a2e      	ldr	r2, [pc, #184]	; (8006cf0 <HAL_DMA_IRQHandler+0x1b4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d04a      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <HAL_DMA_IRQHandler+0x1b8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d045      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2b      	ldr	r2, [pc, #172]	; (8006cf8 <HAL_DMA_IRQHandler+0x1bc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d040      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <HAL_DMA_IRQHandler+0x1c0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d03b      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <HAL_DMA_IRQHandler+0x1c4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d036      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <HAL_DMA_IRQHandler+0x1c8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d031      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a25      	ldr	r2, [pc, #148]	; (8006d08 <HAL_DMA_IRQHandler+0x1cc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d02c      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a24      	ldr	r2, [pc, #144]	; (8006d0c <HAL_DMA_IRQHandler+0x1d0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d027      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <HAL_DMA_IRQHandler+0x1d4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d022      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_DMA_IRQHandler+0x1d8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d01d      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <HAL_DMA_IRQHandler+0x1dc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d018      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <HAL_DMA_IRQHandler+0x1e0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <HAL_DMA_IRQHandler+0x1e4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00e      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <HAL_DMA_IRQHandler+0x1e8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <HAL_DMA_IRQHandler+0x1ec>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x194>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <HAL_DMA_IRQHandler+0x1f0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d12f      	bne.n	8006d30 <HAL_DMA_IRQHandler+0x1f4>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	e02e      	b.n	8006d44 <HAL_DMA_IRQHandler+0x208>
 8006ce6:	bf00      	nop
 8006ce8:	240001c0 	.word	0x240001c0
 8006cec:	1b4e81b5 	.word	0x1b4e81b5
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	2300      	moveq	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0204 	bic.w	r2, r2, #4
 8006d56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2208      	movs	r2, #8
 8006d62:	409a      	lsls	r2, r3
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6c:	f043 0201 	orr.w	r2, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06e      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a69      	ldr	r2, [pc, #420]	; (8006f34 <HAL_DMA_IRQHandler+0x3f8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a67      	ldr	r2, [pc, #412]	; (8006f38 <HAL_DMA_IRQHandler+0x3fc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a66      	ldr	r2, [pc, #408]	; (8006f3c <HAL_DMA_IRQHandler+0x400>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a64      	ldr	r2, [pc, #400]	; (8006f40 <HAL_DMA_IRQHandler+0x404>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a63      	ldr	r2, [pc, #396]	; (8006f44 <HAL_DMA_IRQHandler+0x408>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a61      	ldr	r2, [pc, #388]	; (8006f48 <HAL_DMA_IRQHandler+0x40c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a60      	ldr	r2, [pc, #384]	; (8006f4c <HAL_DMA_IRQHandler+0x410>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5e      	ldr	r2, [pc, #376]	; (8006f50 <HAL_DMA_IRQHandler+0x414>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5d      	ldr	r2, [pc, #372]	; (8006f54 <HAL_DMA_IRQHandler+0x418>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5b      	ldr	r2, [pc, #364]	; (8006f58 <HAL_DMA_IRQHandler+0x41c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a5a      	ldr	r2, [pc, #360]	; (8006f5c <HAL_DMA_IRQHandler+0x420>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a58      	ldr	r2, [pc, #352]	; (8006f60 <HAL_DMA_IRQHandler+0x424>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a57      	ldr	r2, [pc, #348]	; (8006f64 <HAL_DMA_IRQHandler+0x428>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a55      	ldr	r2, [pc, #340]	; (8006f68 <HAL_DMA_IRQHandler+0x42c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a54      	ldr	r2, [pc, #336]	; (8006f6c <HAL_DMA_IRQHandler+0x430>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x2ee>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a52      	ldr	r2, [pc, #328]	; (8006f70 <HAL_DMA_IRQHandler+0x434>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10a      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x304>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e003      	b.n	8006e48 <HAL_DMA_IRQHandler+0x30c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00d      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2201      	movs	r2, #1
 8006e56:	409a      	lsls	r2, r3
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f043 0202 	orr.w	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	2204      	movs	r2, #4
 8006e72:	409a      	lsls	r2, r3
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 808f 	beq.w	8006f9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2c      	ldr	r2, [pc, #176]	; (8006f34 <HAL_DMA_IRQHandler+0x3f8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d04a      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <HAL_DMA_IRQHandler+0x3fc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d045      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <HAL_DMA_IRQHandler+0x400>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d040      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <HAL_DMA_IRQHandler+0x404>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d03b      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <HAL_DMA_IRQHandler+0x408>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d036      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <HAL_DMA_IRQHandler+0x40c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d031      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <HAL_DMA_IRQHandler+0x410>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d02c      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_DMA_IRQHandler+0x414>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d027      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a20      	ldr	r2, [pc, #128]	; (8006f54 <HAL_DMA_IRQHandler+0x418>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_DMA_IRQHandler+0x41c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01d      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_DMA_IRQHandler+0x420>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_DMA_IRQHandler+0x424>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_DMA_IRQHandler+0x428>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <HAL_DMA_IRQHandler+0x42c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_DMA_IRQHandler+0x430>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x3e2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <HAL_DMA_IRQHandler+0x434>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d12a      	bne.n	8006f74 <HAL_DMA_IRQHandler+0x438>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	e023      	b.n	8006f7c <HAL_DMA_IRQHandler+0x440>
 8006f34:	40020010 	.word	0x40020010
 8006f38:	40020028 	.word	0x40020028
 8006f3c:	40020040 	.word	0x40020040
 8006f40:	40020058 	.word	0x40020058
 8006f44:	40020070 	.word	0x40020070
 8006f48:	40020088 	.word	0x40020088
 8006f4c:	400200a0 	.word	0x400200a0
 8006f50:	400200b8 	.word	0x400200b8
 8006f54:	40020410 	.word	0x40020410
 8006f58:	40020428 	.word	0x40020428
 8006f5c:	40020440 	.word	0x40020440
 8006f60:	40020458 	.word	0x40020458
 8006f64:	40020470 	.word	0x40020470
 8006f68:	40020488 	.word	0x40020488
 8006f6c:	400204a0 	.word	0x400204a0
 8006f70:	400204b8 	.word	0x400204b8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00d      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2204      	movs	r2, #4
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f043 0204 	orr.w	r2, r3, #4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80a6 	beq.w	80070fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a85      	ldr	r2, [pc, #532]	; (80071cc <HAL_DMA_IRQHandler+0x690>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d04a      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a83      	ldr	r2, [pc, #524]	; (80071d0 <HAL_DMA_IRQHandler+0x694>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d045      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a82      	ldr	r2, [pc, #520]	; (80071d4 <HAL_DMA_IRQHandler+0x698>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d040      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a80      	ldr	r2, [pc, #512]	; (80071d8 <HAL_DMA_IRQHandler+0x69c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d03b      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a7f      	ldr	r2, [pc, #508]	; (80071dc <HAL_DMA_IRQHandler+0x6a0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d036      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a7d      	ldr	r2, [pc, #500]	; (80071e0 <HAL_DMA_IRQHandler+0x6a4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d031      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7c      	ldr	r2, [pc, #496]	; (80071e4 <HAL_DMA_IRQHandler+0x6a8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d02c      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a7a      	ldr	r2, [pc, #488]	; (80071e8 <HAL_DMA_IRQHandler+0x6ac>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d027      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a79      	ldr	r2, [pc, #484]	; (80071ec <HAL_DMA_IRQHandler+0x6b0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a77      	ldr	r2, [pc, #476]	; (80071f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a76      	ldr	r2, [pc, #472]	; (80071f4 <HAL_DMA_IRQHandler+0x6b8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a74      	ldr	r2, [pc, #464]	; (80071f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a73      	ldr	r2, [pc, #460]	; (80071fc <HAL_DMA_IRQHandler+0x6c0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a71      	ldr	r2, [pc, #452]	; (8007200 <HAL_DMA_IRQHandler+0x6c4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a70      	ldr	r2, [pc, #448]	; (8007204 <HAL_DMA_IRQHandler+0x6c8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_DMA_IRQHandler+0x516>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a6e      	ldr	r2, [pc, #440]	; (8007208 <HAL_DMA_IRQHandler+0x6cc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10a      	bne.n	8007068 <HAL_DMA_IRQHandler+0x52c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	e009      	b.n	800707c <HAL_DMA_IRQHandler+0x540>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf14      	ite	ne
 8007076:	2301      	movne	r3, #1
 8007078:	2300      	moveq	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d03e      	beq.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2210      	movs	r2, #16
 800708a:	409a      	lsls	r2, r3
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d108      	bne.n	80070be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d024      	beq.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
 80070bc:	e01f      	b.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01b      	beq.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e016      	b.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0208 	bic.w	r2, r2, #8
 80070ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2220      	movs	r2, #32
 8007108:	409a      	lsls	r2, r3
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4013      	ands	r3, r2
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 8110 	beq.w	8007334 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <HAL_DMA_IRQHandler+0x690>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d04a      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <HAL_DMA_IRQHandler+0x694>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d045      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <HAL_DMA_IRQHandler+0x698>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d040      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a28      	ldr	r2, [pc, #160]	; (80071d8 <HAL_DMA_IRQHandler+0x69c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d03b      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a26      	ldr	r2, [pc, #152]	; (80071dc <HAL_DMA_IRQHandler+0x6a0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d036      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <HAL_DMA_IRQHandler+0x6a4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d031      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a23      	ldr	r2, [pc, #140]	; (80071e4 <HAL_DMA_IRQHandler+0x6a8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d02c      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a22      	ldr	r2, [pc, #136]	; (80071e8 <HAL_DMA_IRQHandler+0x6ac>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d027      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a20      	ldr	r2, [pc, #128]	; (80071ec <HAL_DMA_IRQHandler+0x6b0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <HAL_DMA_IRQHandler+0x6b8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1a      	ldr	r2, [pc, #104]	; (80071fc <HAL_DMA_IRQHandler+0x6c0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a19      	ldr	r2, [pc, #100]	; (8007200 <HAL_DMA_IRQHandler+0x6c4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a17      	ldr	r2, [pc, #92]	; (8007204 <HAL_DMA_IRQHandler+0x6c8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x678>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a16      	ldr	r2, [pc, #88]	; (8007208 <HAL_DMA_IRQHandler+0x6cc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d12b      	bne.n	800720c <HAL_DMA_IRQHandler+0x6d0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	e02a      	b.n	8007220 <HAL_DMA_IRQHandler+0x6e4>
 80071ca:	bf00      	nop
 80071cc:	40020010 	.word	0x40020010
 80071d0:	40020028 	.word	0x40020028
 80071d4:	40020040 	.word	0x40020040
 80071d8:	40020058 	.word	0x40020058
 80071dc:	40020070 	.word	0x40020070
 80071e0:	40020088 	.word	0x40020088
 80071e4:	400200a0 	.word	0x400200a0
 80071e8:	400200b8 	.word	0x400200b8
 80071ec:	40020410 	.word	0x40020410
 80071f0:	40020428 	.word	0x40020428
 80071f4:	40020440 	.word	0x40020440
 80071f8:	40020458 	.word	0x40020458
 80071fc:	40020470 	.word	0x40020470
 8007200:	40020488 	.word	0x40020488
 8007204:	400204a0 	.word	0x400204a0
 8007208:	400204b8 	.word	0x400204b8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	bf14      	ite	ne
 800721a:	2301      	movne	r3, #1
 800721c:	2300      	moveq	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8087 	beq.w	8007334 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	2220      	movs	r2, #32
 8007230:	409a      	lsls	r2, r3
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b04      	cmp	r3, #4
 8007240:	d139      	bne.n	80072b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0216 	bic.w	r2, r2, #22
 8007250:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695a      	ldr	r2, [r3, #20]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007260:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <HAL_DMA_IRQHandler+0x736>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0208 	bic.w	r2, r2, #8
 8007280:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	223f      	movs	r2, #63	; 0x3f
 800728c:	409a      	lsls	r2, r3
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 834a 	beq.w	8007940 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
          }
          return;
 80072b4:	e344      	b.n	8007940 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d018      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d108      	bne.n	80072e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d02c      	beq.n	8007334 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
 80072e2:	e027      	b.n	8007334 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d023      	beq.n	8007334 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
 80072f4:	e01e      	b.n	8007334 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10f      	bne.n	8007324 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0210 	bic.w	r2, r2, #16
 8007312:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8306 	beq.w	800794a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8088 	beq.w	800745c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2204      	movs	r2, #4
 8007350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7a      	ldr	r2, [pc, #488]	; (8007544 <HAL_DMA_IRQHandler+0xa08>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d04a      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a79      	ldr	r2, [pc, #484]	; (8007548 <HAL_DMA_IRQHandler+0xa0c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d045      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a77      	ldr	r2, [pc, #476]	; (800754c <HAL_DMA_IRQHandler+0xa10>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d040      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a76      	ldr	r2, [pc, #472]	; (8007550 <HAL_DMA_IRQHandler+0xa14>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d03b      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a74      	ldr	r2, [pc, #464]	; (8007554 <HAL_DMA_IRQHandler+0xa18>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d036      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a73      	ldr	r2, [pc, #460]	; (8007558 <HAL_DMA_IRQHandler+0xa1c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d031      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a71      	ldr	r2, [pc, #452]	; (800755c <HAL_DMA_IRQHandler+0xa20>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d02c      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a70      	ldr	r2, [pc, #448]	; (8007560 <HAL_DMA_IRQHandler+0xa24>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d027      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a6e      	ldr	r2, [pc, #440]	; (8007564 <HAL_DMA_IRQHandler+0xa28>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d022      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a6d      	ldr	r2, [pc, #436]	; (8007568 <HAL_DMA_IRQHandler+0xa2c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d01d      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a6b      	ldr	r2, [pc, #428]	; (800756c <HAL_DMA_IRQHandler+0xa30>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d018      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6a      	ldr	r2, [pc, #424]	; (8007570 <HAL_DMA_IRQHandler+0xa34>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d013      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a68      	ldr	r2, [pc, #416]	; (8007574 <HAL_DMA_IRQHandler+0xa38>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00e      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a67      	ldr	r2, [pc, #412]	; (8007578 <HAL_DMA_IRQHandler+0xa3c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d009      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a65      	ldr	r2, [pc, #404]	; (800757c <HAL_DMA_IRQHandler+0xa40>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d004      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x8b8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a64      	ldr	r2, [pc, #400]	; (8007580 <HAL_DMA_IRQHandler+0xa44>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d108      	bne.n	8007406 <HAL_DMA_IRQHandler+0x8ca>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	e007      	b.n	8007416 <HAL_DMA_IRQHandler+0x8da>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741e:	429a      	cmp	r2, r3
 8007420:	d307      	bcc.n	8007432 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1f2      	bne.n	8007416 <HAL_DMA_IRQHandler+0x8da>
 8007430:	e000      	b.n	8007434 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007432:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2203      	movs	r2, #3
 8007446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800744a:	e003      	b.n	8007454 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8272 	beq.w	800794a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
 800746e:	e26c      	b.n	800794a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a43      	ldr	r2, [pc, #268]	; (8007584 <HAL_DMA_IRQHandler+0xa48>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d022      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a42      	ldr	r2, [pc, #264]	; (8007588 <HAL_DMA_IRQHandler+0xa4c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d01d      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a40      	ldr	r2, [pc, #256]	; (800758c <HAL_DMA_IRQHandler+0xa50>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d018      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3f      	ldr	r2, [pc, #252]	; (8007590 <HAL_DMA_IRQHandler+0xa54>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a3d      	ldr	r2, [pc, #244]	; (8007594 <HAL_DMA_IRQHandler+0xa58>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3c      	ldr	r2, [pc, #240]	; (8007598 <HAL_DMA_IRQHandler+0xa5c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d009      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a3a      	ldr	r2, [pc, #232]	; (800759c <HAL_DMA_IRQHandler+0xa60>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x984>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a39      	ldr	r2, [pc, #228]	; (80075a0 <HAL_DMA_IRQHandler+0xa64>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d101      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x988>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_DMA_IRQHandler+0x98a>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 823f 	beq.w	800794a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	2204      	movs	r2, #4
 80074de:	409a      	lsls	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80cd 	beq.w	8007684 <HAL_DMA_IRQHandler+0xb48>
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80c7 	beq.w	8007684 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	2204      	movs	r2, #4
 8007500:	409a      	lsls	r2, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d049      	beq.n	80075a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8210 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752c:	e20a      	b.n	8007944 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8206 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007540:	e200      	b.n	8007944 <HAL_DMA_IRQHandler+0xe08>
 8007542:	bf00      	nop
 8007544:	40020010 	.word	0x40020010
 8007548:	40020028 	.word	0x40020028
 800754c:	40020040 	.word	0x40020040
 8007550:	40020058 	.word	0x40020058
 8007554:	40020070 	.word	0x40020070
 8007558:	40020088 	.word	0x40020088
 800755c:	400200a0 	.word	0x400200a0
 8007560:	400200b8 	.word	0x400200b8
 8007564:	40020410 	.word	0x40020410
 8007568:	40020428 	.word	0x40020428
 800756c:	40020440 	.word	0x40020440
 8007570:	40020458 	.word	0x40020458
 8007574:	40020470 	.word	0x40020470
 8007578:	40020488 	.word	0x40020488
 800757c:	400204a0 	.word	0x400204a0
 8007580:	400204b8 	.word	0x400204b8
 8007584:	58025408 	.word	0x58025408
 8007588:	5802541c 	.word	0x5802541c
 800758c:	58025430 	.word	0x58025430
 8007590:	58025444 	.word	0x58025444
 8007594:	58025458 	.word	0x58025458
 8007598:	5802546c 	.word	0x5802546c
 800759c:	58025480 	.word	0x58025480
 80075a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d160      	bne.n	8007670 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7f      	ldr	r2, [pc, #508]	; (80077b0 <HAL_DMA_IRQHandler+0xc74>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7d      	ldr	r2, [pc, #500]	; (80077b4 <HAL_DMA_IRQHandler+0xc78>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a7c      	ldr	r2, [pc, #496]	; (80077b8 <HAL_DMA_IRQHandler+0xc7c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7a      	ldr	r2, [pc, #488]	; (80077bc <HAL_DMA_IRQHandler+0xc80>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a79      	ldr	r2, [pc, #484]	; (80077c0 <HAL_DMA_IRQHandler+0xc84>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a77      	ldr	r2, [pc, #476]	; (80077c4 <HAL_DMA_IRQHandler+0xc88>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a76      	ldr	r2, [pc, #472]	; (80077c8 <HAL_DMA_IRQHandler+0xc8c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a74      	ldr	r2, [pc, #464]	; (80077cc <HAL_DMA_IRQHandler+0xc90>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a73      	ldr	r2, [pc, #460]	; (80077d0 <HAL_DMA_IRQHandler+0xc94>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a71      	ldr	r2, [pc, #452]	; (80077d4 <HAL_DMA_IRQHandler+0xc98>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a70      	ldr	r2, [pc, #448]	; (80077d8 <HAL_DMA_IRQHandler+0xc9c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a6e      	ldr	r2, [pc, #440]	; (80077dc <HAL_DMA_IRQHandler+0xca0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6d      	ldr	r2, [pc, #436]	; (80077e0 <HAL_DMA_IRQHandler+0xca4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6b      	ldr	r2, [pc, #428]	; (80077e4 <HAL_DMA_IRQHandler+0xca8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a6a      	ldr	r2, [pc, #424]	; (80077e8 <HAL_DMA_IRQHandler+0xcac>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_DMA_IRQHandler+0xb12>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a68      	ldr	r2, [pc, #416]	; (80077ec <HAL_DMA_IRQHandler+0xcb0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d108      	bne.n	8007660 <HAL_DMA_IRQHandler+0xb24>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0208 	bic.w	r2, r2, #8
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e007      	b.n	8007670 <HAL_DMA_IRQHandler+0xb34>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0204 	bic.w	r2, r2, #4
 800766e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8165 	beq.w	8007944 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007682:	e15f      	b.n	8007944 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2202      	movs	r2, #2
 800768e:	409a      	lsls	r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80c5 	beq.w	8007824 <HAL_DMA_IRQHandler+0xce8>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80bf 	beq.w	8007824 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	2202      	movs	r2, #2
 80076b0:	409a      	lsls	r2, r3
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d018      	beq.n	80076f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 813a 	beq.w	8007948 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076dc:	e134      	b.n	8007948 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 8130 	beq.w	8007948 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076f0:	e12a      	b.n	8007948 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 8089 	bne.w	8007810 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2b      	ldr	r2, [pc, #172]	; (80077b0 <HAL_DMA_IRQHandler+0xc74>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d04a      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <HAL_DMA_IRQHandler+0xc78>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d045      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a28      	ldr	r2, [pc, #160]	; (80077b8 <HAL_DMA_IRQHandler+0xc7c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d040      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a26      	ldr	r2, [pc, #152]	; (80077bc <HAL_DMA_IRQHandler+0xc80>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d03b      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <HAL_DMA_IRQHandler+0xc84>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d036      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <HAL_DMA_IRQHandler+0xc88>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d031      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <HAL_DMA_IRQHandler+0xc8c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d02c      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_DMA_IRQHandler+0xc90>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d027      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <HAL_DMA_IRQHandler+0xc94>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d022      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_DMA_IRQHandler+0xc98>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01d      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_DMA_IRQHandler+0xc9c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d018      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_DMA_IRQHandler+0xca0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_DMA_IRQHandler+0xca4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00e      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a17      	ldr	r2, [pc, #92]	; (80077e4 <HAL_DMA_IRQHandler+0xca8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a16      	ldr	r2, [pc, #88]	; (80077e8 <HAL_DMA_IRQHandler+0xcac>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d004      	beq.n	800779e <HAL_DMA_IRQHandler+0xc62>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <HAL_DMA_IRQHandler+0xcb0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d128      	bne.n	80077f0 <HAL_DMA_IRQHandler+0xcb4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0214 	bic.w	r2, r2, #20
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	e027      	b.n	8007800 <HAL_DMA_IRQHandler+0xcc4>
 80077b0:	40020010 	.word	0x40020010
 80077b4:	40020028 	.word	0x40020028
 80077b8:	40020040 	.word	0x40020040
 80077bc:	40020058 	.word	0x40020058
 80077c0:	40020070 	.word	0x40020070
 80077c4:	40020088 	.word	0x40020088
 80077c8:	400200a0 	.word	0x400200a0
 80077cc:	400200b8 	.word	0x400200b8
 80077d0:	40020410 	.word	0x40020410
 80077d4:	40020428 	.word	0x40020428
 80077d8:	40020440 	.word	0x40020440
 80077dc:	40020458 	.word	0x40020458
 80077e0:	40020470 	.word	0x40020470
 80077e4:	40020488 	.word	0x40020488
 80077e8:	400204a0 	.word	0x400204a0
 80077ec:	400204b8 	.word	0x400204b8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 020a 	bic.w	r2, r2, #10
 80077fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8097 	beq.w	8007948 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007822:	e091      	b.n	8007948 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2208      	movs	r2, #8
 800782e:	409a      	lsls	r2, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8088 	beq.w	800794a <HAL_DMA_IRQHandler+0xe0e>
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8082 	beq.w	800794a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a41      	ldr	r2, [pc, #260]	; (8007950 <HAL_DMA_IRQHandler+0xe14>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d04a      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <HAL_DMA_IRQHandler+0xe18>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d045      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <HAL_DMA_IRQHandler+0xe1c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d040      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3c      	ldr	r2, [pc, #240]	; (800795c <HAL_DMA_IRQHandler+0xe20>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d03b      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a3b      	ldr	r2, [pc, #236]	; (8007960 <HAL_DMA_IRQHandler+0xe24>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d036      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a39      	ldr	r2, [pc, #228]	; (8007964 <HAL_DMA_IRQHandler+0xe28>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d031      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a38      	ldr	r2, [pc, #224]	; (8007968 <HAL_DMA_IRQHandler+0xe2c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d02c      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a36      	ldr	r2, [pc, #216]	; (800796c <HAL_DMA_IRQHandler+0xe30>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d027      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a35      	ldr	r2, [pc, #212]	; (8007970 <HAL_DMA_IRQHandler+0xe34>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d022      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a33      	ldr	r2, [pc, #204]	; (8007974 <HAL_DMA_IRQHandler+0xe38>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01d      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <HAL_DMA_IRQHandler+0xe3c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d018      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a30      	ldr	r2, [pc, #192]	; (800797c <HAL_DMA_IRQHandler+0xe40>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a2f      	ldr	r2, [pc, #188]	; (8007980 <HAL_DMA_IRQHandler+0xe44>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00e      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2d      	ldr	r2, [pc, #180]	; (8007984 <HAL_DMA_IRQHandler+0xe48>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d009      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <HAL_DMA_IRQHandler+0xe4c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d004      	beq.n	80078e6 <HAL_DMA_IRQHandler+0xdaa>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a2a      	ldr	r2, [pc, #168]	; (800798c <HAL_DMA_IRQHandler+0xe50>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d108      	bne.n	80078f8 <HAL_DMA_IRQHandler+0xdbc>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 021c 	bic.w	r2, r2, #28
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e007      	b.n	8007908 <HAL_DMA_IRQHandler+0xdcc>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 020e 	bic.w	r2, r2, #14
 8007906:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2201      	movs	r2, #1
 8007912:	409a      	lsls	r2, r3
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	e004      	b.n	800794a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007940:	bf00      	nop
 8007942:	e002      	b.n	800794a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007948:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800794a:	3728      	adds	r7, #40	; 0x28
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40020010 	.word	0x40020010
 8007954:	40020028 	.word	0x40020028
 8007958:	40020040 	.word	0x40020040
 800795c:	40020058 	.word	0x40020058
 8007960:	40020070 	.word	0x40020070
 8007964:	40020088 	.word	0x40020088
 8007968:	400200a0 	.word	0x400200a0
 800796c:	400200b8 	.word	0x400200b8
 8007970:	40020410 	.word	0x40020410
 8007974:	40020428 	.word	0x40020428
 8007978:	40020440 	.word	0x40020440
 800797c:	40020458 	.word	0x40020458
 8007980:	40020470 	.word	0x40020470
 8007984:	40020488 	.word	0x40020488
 8007988:	400204a0 	.word	0x400204a0
 800798c:	400204b8 	.word	0x400204b8

08007990 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a7f      	ldr	r2, [pc, #508]	; (8007bac <DMA_SetConfig+0x21c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d072      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a7d      	ldr	r2, [pc, #500]	; (8007bb0 <DMA_SetConfig+0x220>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d06d      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a7c      	ldr	r2, [pc, #496]	; (8007bb4 <DMA_SetConfig+0x224>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d068      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a7a      	ldr	r2, [pc, #488]	; (8007bb8 <DMA_SetConfig+0x228>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d063      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a79      	ldr	r2, [pc, #484]	; (8007bbc <DMA_SetConfig+0x22c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d05e      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a77      	ldr	r2, [pc, #476]	; (8007bc0 <DMA_SetConfig+0x230>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d059      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a76      	ldr	r2, [pc, #472]	; (8007bc4 <DMA_SetConfig+0x234>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d054      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a74      	ldr	r2, [pc, #464]	; (8007bc8 <DMA_SetConfig+0x238>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d04f      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a73      	ldr	r2, [pc, #460]	; (8007bcc <DMA_SetConfig+0x23c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d04a      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a71      	ldr	r2, [pc, #452]	; (8007bd0 <DMA_SetConfig+0x240>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d045      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a70      	ldr	r2, [pc, #448]	; (8007bd4 <DMA_SetConfig+0x244>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d040      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a6e      	ldr	r2, [pc, #440]	; (8007bd8 <DMA_SetConfig+0x248>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d03b      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6d      	ldr	r2, [pc, #436]	; (8007bdc <DMA_SetConfig+0x24c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d036      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a6b      	ldr	r2, [pc, #428]	; (8007be0 <DMA_SetConfig+0x250>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d031      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a6a      	ldr	r2, [pc, #424]	; (8007be4 <DMA_SetConfig+0x254>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d02c      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a68      	ldr	r2, [pc, #416]	; (8007be8 <DMA_SetConfig+0x258>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d027      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a67      	ldr	r2, [pc, #412]	; (8007bec <DMA_SetConfig+0x25c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d022      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a65      	ldr	r2, [pc, #404]	; (8007bf0 <DMA_SetConfig+0x260>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01d      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a64      	ldr	r2, [pc, #400]	; (8007bf4 <DMA_SetConfig+0x264>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d018      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a62      	ldr	r2, [pc, #392]	; (8007bf8 <DMA_SetConfig+0x268>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d013      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a61      	ldr	r2, [pc, #388]	; (8007bfc <DMA_SetConfig+0x26c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00e      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5f      	ldr	r2, [pc, #380]	; (8007c00 <DMA_SetConfig+0x270>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d009      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a5e      	ldr	r2, [pc, #376]	; (8007c04 <DMA_SetConfig+0x274>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d004      	beq.n	8007a9a <DMA_SetConfig+0x10a>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a5c      	ldr	r2, [pc, #368]	; (8007c08 <DMA_SetConfig+0x278>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <DMA_SetConfig+0x10e>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <DMA_SetConfig+0x110>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007aac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007abe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a39      	ldr	r2, [pc, #228]	; (8007bac <DMA_SetConfig+0x21c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d04a      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a38      	ldr	r2, [pc, #224]	; (8007bb0 <DMA_SetConfig+0x220>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d045      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a36      	ldr	r2, [pc, #216]	; (8007bb4 <DMA_SetConfig+0x224>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d040      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a35      	ldr	r2, [pc, #212]	; (8007bb8 <DMA_SetConfig+0x228>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d03b      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a33      	ldr	r2, [pc, #204]	; (8007bbc <DMA_SetConfig+0x22c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d036      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a32      	ldr	r2, [pc, #200]	; (8007bc0 <DMA_SetConfig+0x230>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d031      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a30      	ldr	r2, [pc, #192]	; (8007bc4 <DMA_SetConfig+0x234>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d02c      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a2f      	ldr	r2, [pc, #188]	; (8007bc8 <DMA_SetConfig+0x238>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d027      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a2d      	ldr	r2, [pc, #180]	; (8007bcc <DMA_SetConfig+0x23c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d022      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <DMA_SetConfig+0x240>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d01d      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <DMA_SetConfig+0x244>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d018      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <DMA_SetConfig+0x248>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a27      	ldr	r2, [pc, #156]	; (8007bdc <DMA_SetConfig+0x24c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <DMA_SetConfig+0x250>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d009      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a24      	ldr	r2, [pc, #144]	; (8007be4 <DMA_SetConfig+0x254>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <DMA_SetConfig+0x1d0>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <DMA_SetConfig+0x258>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d101      	bne.n	8007b64 <DMA_SetConfig+0x1d4>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <DMA_SetConfig+0x1d6>
 8007b64:	2300      	movs	r3, #0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d059      	beq.n	8007c1e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	223f      	movs	r2, #63	; 0x3f
 8007b74:	409a      	lsls	r2, r3
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b88:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d138      	bne.n	8007c0c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007baa:	e086      	b.n	8007cba <DMA_SetConfig+0x32a>
 8007bac:	40020010 	.word	0x40020010
 8007bb0:	40020028 	.word	0x40020028
 8007bb4:	40020040 	.word	0x40020040
 8007bb8:	40020058 	.word	0x40020058
 8007bbc:	40020070 	.word	0x40020070
 8007bc0:	40020088 	.word	0x40020088
 8007bc4:	400200a0 	.word	0x400200a0
 8007bc8:	400200b8 	.word	0x400200b8
 8007bcc:	40020410 	.word	0x40020410
 8007bd0:	40020428 	.word	0x40020428
 8007bd4:	40020440 	.word	0x40020440
 8007bd8:	40020458 	.word	0x40020458
 8007bdc:	40020470 	.word	0x40020470
 8007be0:	40020488 	.word	0x40020488
 8007be4:	400204a0 	.word	0x400204a0
 8007be8:	400204b8 	.word	0x400204b8
 8007bec:	58025408 	.word	0x58025408
 8007bf0:	5802541c 	.word	0x5802541c
 8007bf4:	58025430 	.word	0x58025430
 8007bf8:	58025444 	.word	0x58025444
 8007bfc:	58025458 	.word	0x58025458
 8007c00:	5802546c 	.word	0x5802546c
 8007c04:	58025480 	.word	0x58025480
 8007c08:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	60da      	str	r2, [r3, #12]
}
 8007c1c:	e04d      	b.n	8007cba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a29      	ldr	r2, [pc, #164]	; (8007cc8 <DMA_SetConfig+0x338>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a27      	ldr	r2, [pc, #156]	; (8007ccc <DMA_SetConfig+0x33c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01d      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a26      	ldr	r2, [pc, #152]	; (8007cd0 <DMA_SetConfig+0x340>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a24      	ldr	r2, [pc, #144]	; (8007cd4 <DMA_SetConfig+0x344>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a23      	ldr	r2, [pc, #140]	; (8007cd8 <DMA_SetConfig+0x348>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a21      	ldr	r2, [pc, #132]	; (8007cdc <DMA_SetConfig+0x34c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a20      	ldr	r2, [pc, #128]	; (8007ce0 <DMA_SetConfig+0x350>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <DMA_SetConfig+0x2de>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a1e      	ldr	r2, [pc, #120]	; (8007ce4 <DMA_SetConfig+0x354>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d101      	bne.n	8007c72 <DMA_SetConfig+0x2e2>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <DMA_SetConfig+0x2e4>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d020      	beq.n	8007cba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	2201      	movs	r2, #1
 8007c82:	409a      	lsls	r2, r3
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	d108      	bne.n	8007caa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	60da      	str	r2, [r3, #12]
}
 8007ca8:	e007      	b.n	8007cba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	60da      	str	r2, [r3, #12]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	58025408 	.word	0x58025408
 8007ccc:	5802541c 	.word	0x5802541c
 8007cd0:	58025430 	.word	0x58025430
 8007cd4:	58025444 	.word	0x58025444
 8007cd8:	58025458 	.word	0x58025458
 8007cdc:	5802546c 	.word	0x5802546c
 8007ce0:	58025480 	.word	0x58025480
 8007ce4:	58025494 	.word	0x58025494

08007ce8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a42      	ldr	r2, [pc, #264]	; (8007e00 <DMA_CalcBaseAndBitshift+0x118>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d04a      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a41      	ldr	r2, [pc, #260]	; (8007e04 <DMA_CalcBaseAndBitshift+0x11c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d045      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <DMA_CalcBaseAndBitshift+0x120>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d040      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a3e      	ldr	r2, [pc, #248]	; (8007e0c <DMA_CalcBaseAndBitshift+0x124>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d03b      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a3c      	ldr	r2, [pc, #240]	; (8007e10 <DMA_CalcBaseAndBitshift+0x128>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d036      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a3b      	ldr	r2, [pc, #236]	; (8007e14 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d031      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a39      	ldr	r2, [pc, #228]	; (8007e18 <DMA_CalcBaseAndBitshift+0x130>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d02c      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a38      	ldr	r2, [pc, #224]	; (8007e1c <DMA_CalcBaseAndBitshift+0x134>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d027      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a36      	ldr	r2, [pc, #216]	; (8007e20 <DMA_CalcBaseAndBitshift+0x138>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a35      	ldr	r2, [pc, #212]	; (8007e24 <DMA_CalcBaseAndBitshift+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01d      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a33      	ldr	r2, [pc, #204]	; (8007e28 <DMA_CalcBaseAndBitshift+0x140>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a32      	ldr	r2, [pc, #200]	; (8007e2c <DMA_CalcBaseAndBitshift+0x144>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a30      	ldr	r2, [pc, #192]	; (8007e30 <DMA_CalcBaseAndBitshift+0x148>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2f      	ldr	r2, [pc, #188]	; (8007e34 <DMA_CalcBaseAndBitshift+0x14c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a2d      	ldr	r2, [pc, #180]	; (8007e38 <DMA_CalcBaseAndBitshift+0x150>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <DMA_CalcBaseAndBitshift+0xa8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2c      	ldr	r2, [pc, #176]	; (8007e3c <DMA_CalcBaseAndBitshift+0x154>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d101      	bne.n	8007d94 <DMA_CalcBaseAndBitshift+0xac>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <DMA_CalcBaseAndBitshift+0xae>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d024      	beq.n	8007de4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	3b10      	subs	r3, #16
 8007da2:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <DMA_CalcBaseAndBitshift+0x158>)
 8007da4:	fba2 2303 	umull	r2, r3, r2, r3
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	4a24      	ldr	r2, [pc, #144]	; (8007e44 <DMA_CalcBaseAndBitshift+0x15c>)
 8007db4:	5cd3      	ldrb	r3, [r2, r3]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d908      	bls.n	8007dd4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4b1f      	ldr	r3, [pc, #124]	; (8007e48 <DMA_CalcBaseAndBitshift+0x160>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	1d1a      	adds	r2, r3, #4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8007dd2:	e00d      	b.n	8007df0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <DMA_CalcBaseAndBitshift+0x160>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6593      	str	r3, [r2, #88]	; 0x58
 8007de2:	e005      	b.n	8007df0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	40020010 	.word	0x40020010
 8007e04:	40020028 	.word	0x40020028
 8007e08:	40020040 	.word	0x40020040
 8007e0c:	40020058 	.word	0x40020058
 8007e10:	40020070 	.word	0x40020070
 8007e14:	40020088 	.word	0x40020088
 8007e18:	400200a0 	.word	0x400200a0
 8007e1c:	400200b8 	.word	0x400200b8
 8007e20:	40020410 	.word	0x40020410
 8007e24:	40020428 	.word	0x40020428
 8007e28:	40020440 	.word	0x40020440
 8007e2c:	40020458 	.word	0x40020458
 8007e30:	40020470 	.word	0x40020470
 8007e34:	40020488 	.word	0x40020488
 8007e38:	400204a0 	.word	0x400204a0
 8007e3c:	400204b8 	.word	0x400204b8
 8007e40:	aaaaaaab 	.word	0xaaaaaaab
 8007e44:	0800ee6c 	.word	0x0800ee6c
 8007e48:	fffffc00 	.word	0xfffffc00

08007e4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d120      	bne.n	8007ea2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d858      	bhi.n	8007f1a <DMA_CheckFifoParam+0xce>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <DMA_CheckFifoParam+0x24>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007e93 	.word	0x08007e93
 8007e78:	08007e81 	.word	0x08007e81
 8007e7c:	08007f1b 	.word	0x08007f1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d048      	beq.n	8007f1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e90:	e045      	b.n	8007f1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e9a:	d142      	bne.n	8007f22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ea0:	e03f      	b.n	8007f22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eaa:	d123      	bne.n	8007ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d838      	bhi.n	8007f26 <DMA_CheckFifoParam+0xda>
 8007eb4:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <DMA_CheckFifoParam+0x70>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007ed3 	.word	0x08007ed3
 8007ec4:	08007ecd 	.word	0x08007ecd
 8007ec8:	08007ee5 	.word	0x08007ee5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
        break;
 8007ed0:	e030      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d025      	beq.n	8007f2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ee2:	e022      	b.n	8007f2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007eec:	d11f      	bne.n	8007f2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ef2:	e01c      	b.n	8007f2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d902      	bls.n	8007f02 <DMA_CheckFifoParam+0xb6>
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d003      	beq.n	8007f08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f00:	e018      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
        break;
 8007f06:	e015      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
    break;
 8007f18:	e00b      	b.n	8007f32 <DMA_CheckFifoParam+0xe6>
        break;
 8007f1a:	bf00      	nop
 8007f1c:	e00a      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e008      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        break;
 8007f22:	bf00      	nop
 8007f24:	e006      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        break;
 8007f26:	bf00      	nop
 8007f28:	e004      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        break;
 8007f2a:	bf00      	nop
 8007f2c:	e002      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
        break;
 8007f2e:	bf00      	nop
 8007f30:	e000      	b.n	8007f34 <DMA_CheckFifoParam+0xe8>
    break;
 8007f32:	bf00      	nop
    }
  }

  return status;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a38      	ldr	r2, [pc, #224]	; (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a36      	ldr	r2, [pc, #216]	; (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a35      	ldr	r2, [pc, #212]	; (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a33      	ldr	r2, [pc, #204]	; (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a32      	ldr	r2, [pc, #200]	; (8008048 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a30      	ldr	r2, [pc, #192]	; (800804c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a2f      	ldr	r2, [pc, #188]	; (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	3b08      	subs	r3, #8
 8007fb4:	4a28      	ldr	r2, [pc, #160]	; (8008058 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fba:	091b      	lsrs	r3, r3, #4
 8007fbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a24      	ldr	r2, [pc, #144]	; (8008060 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007fd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	2201      	movs	r2, #1
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007fe0:	e024      	b.n	800802c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	3b10      	subs	r3, #16
 8007fea:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	091b      	lsrs	r3, r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4a1c      	ldr	r2, [pc, #112]	; (8008068 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d806      	bhi.n	800800a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4a1b      	ldr	r2, [pc, #108]	; (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d902      	bls.n	800800a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3308      	adds	r3, #8
 8008008:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4b18      	ldr	r3, [pc, #96]	; (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a16      	ldr	r2, [pc, #88]	; (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800801c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2201      	movs	r2, #1
 8008026:	409a      	lsls	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800802c:	bf00      	nop
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	58025408 	.word	0x58025408
 800803c:	5802541c 	.word	0x5802541c
 8008040:	58025430 	.word	0x58025430
 8008044:	58025444 	.word	0x58025444
 8008048:	58025458 	.word	0x58025458
 800804c:	5802546c 	.word	0x5802546c
 8008050:	58025480 	.word	0x58025480
 8008054:	58025494 	.word	0x58025494
 8008058:	cccccccd 	.word	0xcccccccd
 800805c:	16009600 	.word	0x16009600
 8008060:	58025880 	.word	0x58025880
 8008064:	aaaaaaab 	.word	0xaaaaaaab
 8008068:	400204b8 	.word	0x400204b8
 800806c:	4002040f 	.word	0x4002040f
 8008070:	10008200 	.word	0x10008200
 8008074:	40020880 	.word	0x40020880

08008078 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d04a      	beq.n	8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d847      	bhi.n	8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a25      	ldr	r2, [pc, #148]	; (8008130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d022      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a24      	ldr	r2, [pc, #144]	; (8008134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d01d      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a22      	ldr	r2, [pc, #136]	; (8008138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d018      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a21      	ldr	r2, [pc, #132]	; (800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d013      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00e      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d009      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1c      	ldr	r2, [pc, #112]	; (8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1b      	ldr	r2, [pc, #108]	; (800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d101      	bne.n	80080e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80080e8:	2300      	movs	r3, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a15      	ldr	r2, [pc, #84]	; (8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008100:	671a      	str	r2, [r3, #112]	; 0x70
 8008102:	e009      	b.n	8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4b14      	ldr	r3, [pc, #80]	; (8008158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a11      	ldr	r2, [pc, #68]	; (800815c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008116:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b01      	subs	r3, #1
 800811c:	2201      	movs	r2, #1
 800811e:	409a      	lsls	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	58025408 	.word	0x58025408
 8008134:	5802541c 	.word	0x5802541c
 8008138:	58025430 	.word	0x58025430
 800813c:	58025444 	.word	0x58025444
 8008140:	58025458 	.word	0x58025458
 8008144:	5802546c 	.word	0x5802546c
 8008148:	58025480 	.word	0x58025480
 800814c:	58025494 	.word	0x58025494
 8008150:	1600963f 	.word	0x1600963f
 8008154:	58025940 	.word	0x58025940
 8008158:	1000823f 	.word	0x1000823f
 800815c:	40020940 	.word	0x40020940

08008160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800816a:	2300      	movs	r3, #0
 800816c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800816e:	4b86      	ldr	r3, [pc, #536]	; (8008388 <HAL_GPIO_Init+0x228>)
 8008170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008172:	e18c      	b.n	800848e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	2101      	movs	r1, #1
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	4013      	ands	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 817e 	beq.w	8008488 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d005      	beq.n	80081a4 <HAL_GPIO_Init+0x44>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d130      	bne.n	8008206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	2203      	movs	r2, #3
 80081b0:	fa02 f303 	lsl.w	r3, r2, r3
 80081b4:	43db      	mvns	r3, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	4013      	ands	r3, r2
 80081ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081da:	2201      	movs	r2, #1
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	43db      	mvns	r3, r3
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	4013      	ands	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	f003 0201 	and.w	r2, r3, #1
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	2b03      	cmp	r3, #3
 8008210:	d017      	beq.n	8008242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	2203      	movs	r2, #3
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	43db      	mvns	r3, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4013      	ands	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4313      	orrs	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d123      	bne.n	8008296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	08da      	lsrs	r2, r3, #3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3208      	adds	r2, #8
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	220f      	movs	r2, #15
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	43db      	mvns	r3, r3
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	4013      	ands	r3, r2
 8008270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	4313      	orrs	r3, r2
 8008286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	08da      	lsrs	r2, r3, #3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3208      	adds	r2, #8
 8008290:	69b9      	ldr	r1, [r7, #24]
 8008292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	2203      	movs	r2, #3
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	43db      	mvns	r3, r3
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	4013      	ands	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f003 0203 	and.w	r2, r3, #3
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 80d8 	beq.w	8008488 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082d8:	4b2c      	ldr	r3, [pc, #176]	; (800838c <HAL_GPIO_Init+0x22c>)
 80082da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082de:	4a2b      	ldr	r2, [pc, #172]	; (800838c <HAL_GPIO_Init+0x22c>)
 80082e0:	f043 0302 	orr.w	r3, r3, #2
 80082e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80082e8:	4b28      	ldr	r3, [pc, #160]	; (800838c <HAL_GPIO_Init+0x22c>)
 80082ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082f6:	4a26      	ldr	r2, [pc, #152]	; (8008390 <HAL_GPIO_Init+0x230>)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	3302      	adds	r3, #2
 80082fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	220f      	movs	r2, #15
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	4013      	ands	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <HAL_GPIO_Init+0x234>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d04a      	beq.n	80083b8 <HAL_GPIO_Init+0x258>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <HAL_GPIO_Init+0x238>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d02b      	beq.n	8008382 <HAL_GPIO_Init+0x222>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1b      	ldr	r2, [pc, #108]	; (800839c <HAL_GPIO_Init+0x23c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d025      	beq.n	800837e <HAL_GPIO_Init+0x21e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a1a      	ldr	r2, [pc, #104]	; (80083a0 <HAL_GPIO_Init+0x240>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01f      	beq.n	800837a <HAL_GPIO_Init+0x21a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <HAL_GPIO_Init+0x244>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d019      	beq.n	8008376 <HAL_GPIO_Init+0x216>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <HAL_GPIO_Init+0x248>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d013      	beq.n	8008372 <HAL_GPIO_Init+0x212>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a17      	ldr	r2, [pc, #92]	; (80083ac <HAL_GPIO_Init+0x24c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00d      	beq.n	800836e <HAL_GPIO_Init+0x20e>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <HAL_GPIO_Init+0x250>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <HAL_GPIO_Init+0x20a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <HAL_GPIO_Init+0x254>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d101      	bne.n	8008366 <HAL_GPIO_Init+0x206>
 8008362:	2309      	movs	r3, #9
 8008364:	e029      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 8008366:	230a      	movs	r3, #10
 8008368:	e027      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 800836a:	2307      	movs	r3, #7
 800836c:	e025      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 800836e:	2306      	movs	r3, #6
 8008370:	e023      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 8008372:	2305      	movs	r3, #5
 8008374:	e021      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 8008376:	2304      	movs	r3, #4
 8008378:	e01f      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 800837a:	2303      	movs	r3, #3
 800837c:	e01d      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 800837e:	2302      	movs	r3, #2
 8008380:	e01b      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 8008382:	2301      	movs	r3, #1
 8008384:	e019      	b.n	80083ba <HAL_GPIO_Init+0x25a>
 8008386:	bf00      	nop
 8008388:	58000080 	.word	0x58000080
 800838c:	58024400 	.word	0x58024400
 8008390:	58000400 	.word	0x58000400
 8008394:	58020000 	.word	0x58020000
 8008398:	58020400 	.word	0x58020400
 800839c:	58020800 	.word	0x58020800
 80083a0:	58020c00 	.word	0x58020c00
 80083a4:	58021000 	.word	0x58021000
 80083a8:	58021400 	.word	0x58021400
 80083ac:	58021800 	.word	0x58021800
 80083b0:	58021c00 	.word	0x58021c00
 80083b4:	58022400 	.word	0x58022400
 80083b8:	2300      	movs	r3, #0
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	f002 0203 	and.w	r2, r2, #3
 80083c0:	0092      	lsls	r2, r2, #2
 80083c2:	4093      	lsls	r3, r2
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083ca:	4938      	ldr	r1, [pc, #224]	; (80084ac <HAL_GPIO_Init+0x34c>)
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	089b      	lsrs	r3, r3, #2
 80083d0:	3302      	adds	r3, #2
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4013      	ands	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80083fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	43db      	mvns	r3, r3
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	4013      	ands	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800842c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	43db      	mvns	r3, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4013      	ands	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	43db      	mvns	r3, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	3301      	adds	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f ae6b 	bne.w	8008174 <HAL_GPIO_Init+0x14>
  }
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	3724      	adds	r7, #36	; 0x24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	58000400 	.word	0x58000400

080084b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084be:	4b72      	ldr	r3, [pc, #456]	; (8008688 <HAL_GPIO_DeInit+0x1d8>)
 80084c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80084c2:	e0d3      	b.n	800866c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80084c4:	2201      	movs	r2, #1
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	4013      	ands	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80c6 	beq.w	8008666 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80084da:	4a6c      	ldr	r2, [pc, #432]	; (800868c <HAL_GPIO_DeInit+0x1dc>)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	089b      	lsrs	r3, r3, #2
 80084e0:	3302      	adds	r3, #2
 80084e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	220f      	movs	r2, #15
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a64      	ldr	r2, [pc, #400]	; (8008690 <HAL_GPIO_DeInit+0x1e0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d031      	beq.n	8008568 <HAL_GPIO_DeInit+0xb8>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a63      	ldr	r2, [pc, #396]	; (8008694 <HAL_GPIO_DeInit+0x1e4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d02b      	beq.n	8008564 <HAL_GPIO_DeInit+0xb4>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a62      	ldr	r2, [pc, #392]	; (8008698 <HAL_GPIO_DeInit+0x1e8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d025      	beq.n	8008560 <HAL_GPIO_DeInit+0xb0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a61      	ldr	r2, [pc, #388]	; (800869c <HAL_GPIO_DeInit+0x1ec>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d01f      	beq.n	800855c <HAL_GPIO_DeInit+0xac>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a60      	ldr	r2, [pc, #384]	; (80086a0 <HAL_GPIO_DeInit+0x1f0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d019      	beq.n	8008558 <HAL_GPIO_DeInit+0xa8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a5f      	ldr	r2, [pc, #380]	; (80086a4 <HAL_GPIO_DeInit+0x1f4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <HAL_GPIO_DeInit+0xa4>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a5e      	ldr	r2, [pc, #376]	; (80086a8 <HAL_GPIO_DeInit+0x1f8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00d      	beq.n	8008550 <HAL_GPIO_DeInit+0xa0>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a5d      	ldr	r2, [pc, #372]	; (80086ac <HAL_GPIO_DeInit+0x1fc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <HAL_GPIO_DeInit+0x9c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a5c      	ldr	r2, [pc, #368]	; (80086b0 <HAL_GPIO_DeInit+0x200>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d101      	bne.n	8008548 <HAL_GPIO_DeInit+0x98>
 8008544:	2309      	movs	r3, #9
 8008546:	e010      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008548:	230a      	movs	r3, #10
 800854a:	e00e      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 800854c:	2307      	movs	r3, #7
 800854e:	e00c      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008550:	2306      	movs	r3, #6
 8008552:	e00a      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008554:	2305      	movs	r3, #5
 8008556:	e008      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008558:	2304      	movs	r3, #4
 800855a:	e006      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 800855c:	2303      	movs	r3, #3
 800855e:	e004      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008560:	2302      	movs	r3, #2
 8008562:	e002      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_GPIO_DeInit+0xba>
 8008568:	2300      	movs	r3, #0
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	f002 0203 	and.w	r2, r2, #3
 8008570:	0092      	lsls	r2, r2, #2
 8008572:	4093      	lsls	r3, r2
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d136      	bne.n	80085e8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	43db      	mvns	r3, r3
 8008582:	401a      	ands	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	43db      	mvns	r3, r3
 8008590:	401a      	ands	r2, r3
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	43db      	mvns	r3, r3
 80085a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085a4:	4013      	ands	r3, r2
 80085a6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80085a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	43db      	mvns	r3, r3
 80085b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085b6:	4013      	ands	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	220f      	movs	r2, #15
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80085ca:	4a30      	ldr	r2, [pc, #192]	; (800868c <HAL_GPIO_DeInit+0x1dc>)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	089b      	lsrs	r3, r3, #2
 80085d0:	3302      	adds	r3, #2
 80085d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	43da      	mvns	r2, r3
 80085da:	482c      	ldr	r0, [pc, #176]	; (800868c <HAL_GPIO_DeInit+0x1dc>)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	089b      	lsrs	r3, r3, #2
 80085e0:	400a      	ands	r2, r1
 80085e2:	3302      	adds	r3, #2
 80085e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2103      	movs	r1, #3
 80085f2:	fa01 f303 	lsl.w	r3, r1, r3
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	08da      	lsrs	r2, r3, #3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3208      	adds	r2, #8
 8008604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	220f      	movs	r2, #15
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	43db      	mvns	r3, r3
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	08d2      	lsrs	r2, r2, #3
 800861c:	4019      	ands	r1, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3208      	adds	r2, #8
 8008622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	2103      	movs	r1, #3
 8008630:	fa01 f303 	lsl.w	r3, r1, r3
 8008634:	43db      	mvns	r3, r3
 8008636:	401a      	ands	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	2101      	movs	r1, #1
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	fa01 f303 	lsl.w	r3, r1, r3
 8008648:	43db      	mvns	r3, r3
 800864a:	401a      	ands	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	2103      	movs	r1, #3
 800865a:	fa01 f303 	lsl.w	r3, r1, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	401a      	ands	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	3301      	adds	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	f47f af25 	bne.w	80084c4 <HAL_GPIO_DeInit+0x14>
  }
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	58000080 	.word	0x58000080
 800868c:	58000400 	.word	0x58000400
 8008690:	58020000 	.word	0x58020000
 8008694:	58020400 	.word	0x58020400
 8008698:	58020800 	.word	0x58020800
 800869c:	58020c00 	.word	0x58020c00
 80086a0:	58021000 	.word	0x58021000
 80086a4:	58021400 	.word	0x58021400
 80086a8:	58021800 	.word	0x58021800
 80086ac:	58021c00 	.word	0x58021c00
 80086b0:	58022400 	.word	0x58022400

080086b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
 80086c0:	4613      	mov	r3, r2
 80086c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086c4:	787b      	ldrb	r3, [r7, #1]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086ca:	887a      	ldrh	r2, [r7, #2]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086d0:	e003      	b.n	80086da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086d2:	887b      	ldrh	r3, [r7, #2]
 80086d4:	041a      	lsls	r2, r3, #16
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	619a      	str	r2, [r3, #24]
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	4603      	mov	r3, r0
 80086ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80086f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f804 	bl	800871a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	4603      	mov	r3, r0
 8008722:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008738:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <HAL_PWREx_ConfigSupply+0x70>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b04      	cmp	r3, #4
 8008742:	d00a      	beq.n	800875a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	429a      	cmp	r2, r3
 8008750:	d001      	beq.n	8008756 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e01f      	b.n	8008796 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e01d      	b.n	8008796 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800875a:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <HAL_PWREx_ConfigSupply+0x70>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f023 0207 	bic.w	r2, r3, #7
 8008762:	490f      	ldr	r1, [pc, #60]	; (80087a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4313      	orrs	r3, r2
 8008768:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800876a:	f7fc fbbb 	bl	8004ee4 <HAL_GetTick>
 800876e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008770:	e009      	b.n	8008786 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008772:	f7fc fbb7 	bl	8004ee4 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008780:	d901      	bls.n	8008786 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e007      	b.n	8008796 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008792:	d1ee      	bne.n	8008772 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	58024800 	.word	0x58024800

080087a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08c      	sub	sp, #48	; 0x30
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e39d      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8087 	beq.w	80088d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c4:	4b88      	ldr	r3, [pc, #544]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087ce:	4b86      	ldr	r3, [pc, #536]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d007      	beq.n	80087ea <HAL_RCC_OscConfig+0x46>
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	2b18      	cmp	r3, #24
 80087de:	d110      	bne.n	8008802 <HAL_RCC_OscConfig+0x5e>
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d10b      	bne.n	8008802 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ea:	4b7f      	ldr	r3, [pc, #508]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d06c      	beq.n	80088d0 <HAL_RCC_OscConfig+0x12c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d168      	bne.n	80088d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e377      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880a:	d106      	bne.n	800881a <HAL_RCC_OscConfig+0x76>
 800880c:	4b76      	ldr	r3, [pc, #472]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a75      	ldr	r2, [pc, #468]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e02e      	b.n	8008878 <HAL_RCC_OscConfig+0xd4>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x98>
 8008822:	4b71      	ldr	r3, [pc, #452]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a70      	ldr	r2, [pc, #448]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4b6e      	ldr	r3, [pc, #440]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a6d      	ldr	r2, [pc, #436]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e01d      	b.n	8008878 <HAL_RCC_OscConfig+0xd4>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008844:	d10c      	bne.n	8008860 <HAL_RCC_OscConfig+0xbc>
 8008846:	4b68      	ldr	r3, [pc, #416]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a67      	ldr	r2, [pc, #412]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800884c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	4b65      	ldr	r3, [pc, #404]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a64      	ldr	r2, [pc, #400]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e00b      	b.n	8008878 <HAL_RCC_OscConfig+0xd4>
 8008860:	4b61      	ldr	r3, [pc, #388]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a60      	ldr	r2, [pc, #384]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	4b5e      	ldr	r3, [pc, #376]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a5d      	ldr	r2, [pc, #372]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fc fb30 	bl	8004ee4 <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008888:	f7fc fb2c 	bl	8004ee4 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	; 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e32b      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800889a:	4b53      	ldr	r3, [pc, #332]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0xe4>
 80088a6:	e014      	b.n	80088d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fc fb1c 	bl	8004ee4 <HAL_GetTick>
 80088ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b0:	f7fc fb18 	bl	8004ee4 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b64      	cmp	r3, #100	; 0x64
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e317      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088c2:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x10c>
 80088ce:	e000      	b.n	80088d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 808c 	beq.w	80089f8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e0:	4b41      	ldr	r3, [pc, #260]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088ea:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <HAL_RCC_OscConfig+0x162>
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	2b18      	cmp	r3, #24
 80088fa:	d137      	bne.n	800896c <HAL_RCC_OscConfig+0x1c8>
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d132      	bne.n	800896c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008906:	4b38      	ldr	r3, [pc, #224]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_RCC_OscConfig+0x17a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e2e9      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 0219 	bic.w	r2, r3, #25
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	492f      	ldr	r1, [pc, #188]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800892c:	4313      	orrs	r3, r2
 800892e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008930:	f7fc fad8 	bl	8004ee4 <HAL_GetTick>
 8008934:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008938:	f7fc fad4 	bl	8004ee4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e2d3      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800894a:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	061b      	lsls	r3, r3, #24
 8008964:	4920      	ldr	r1, [pc, #128]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008966:	4313      	orrs	r3, r2
 8008968:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800896a:	e045      	b.n	80089f8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d026      	beq.n	80089c2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008974:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f023 0219 	bic.w	r2, r3, #25
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	4919      	ldr	r1, [pc, #100]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 8008982:	4313      	orrs	r3, r2
 8008984:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008986:	f7fc faad 	bl	8004ee4 <HAL_GetTick>
 800898a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800898c:	e008      	b.n	80089a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800898e:	f7fc faa9 	bl	8004ee4 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d901      	bls.n	80089a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e2a8      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0f0      	beq.n	800898e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	490b      	ldr	r1, [pc, #44]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	e01a      	b.n	80089f8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <HAL_RCC_OscConfig+0x244>)
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fc fa89 	bl	8004ee4 <HAL_GetTick>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089d4:	e00a      	b.n	80089ec <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089d6:	f7fc fa85 	bl	8004ee4 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d903      	bls.n	80089ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e284      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
 80089e8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089ec:	4b96      	ldr	r3, [pc, #600]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1ee      	bne.n	80089d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d06a      	beq.n	8008ada <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a04:	4b90      	ldr	r3, [pc, #576]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a0e:	4b8e      	ldr	r3, [pc, #568]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d007      	beq.n	8008a2a <HAL_RCC_OscConfig+0x286>
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b18      	cmp	r3, #24
 8008a1e:	d11b      	bne.n	8008a58 <HAL_RCC_OscConfig+0x2b4>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d116      	bne.n	8008a58 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a2a:	4b87      	ldr	r3, [pc, #540]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <HAL_RCC_OscConfig+0x29e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	2b80      	cmp	r3, #128	; 0x80
 8008a3c:	d001      	beq.n	8008a42 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e257      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a42:	4b81      	ldr	r3, [pc, #516]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	061b      	lsls	r3, r3, #24
 8008a50:	497d      	ldr	r1, [pc, #500]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a56:	e040      	b.n	8008ada <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d023      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a60:	4b79      	ldr	r3, [pc, #484]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a78      	ldr	r2, [pc, #480]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6c:	f7fc fa3a 	bl	8004ee4 <HAL_GetTick>
 8008a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a74:	f7fc fa36 	bl	8004ee4 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e235      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a86:	4b70      	ldr	r3, [pc, #448]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0f0      	beq.n	8008a74 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a92:	4b6d      	ldr	r3, [pc, #436]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	4969      	ldr	r1, [pc, #420]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60cb      	str	r3, [r1, #12]
 8008aa6:	e018      	b.n	8008ada <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008aa8:	4b67      	ldr	r3, [pc, #412]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a66      	ldr	r2, [pc, #408]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7fc fa16 	bl	8004ee4 <HAL_GetTick>
 8008ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008abc:	f7fc fa12 	bl	8004ee4 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e211      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ace:	4b5e      	ldr	r3, [pc, #376]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f0      	bne.n	8008abc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d036      	beq.n	8008b54 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d019      	beq.n	8008b22 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aee:	4b56      	ldr	r3, [pc, #344]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af2:	4a55      	ldr	r2, [pc, #340]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afa:	f7fc f9f3 	bl	8004ee4 <HAL_GetTick>
 8008afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b02:	f7fc f9ef 	bl	8004ee4 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e1ee      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b14:	4b4c      	ldr	r3, [pc, #304]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <HAL_RCC_OscConfig+0x35e>
 8008b20:	e018      	b.n	8008b54 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b22:	4b49      	ldr	r3, [pc, #292]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b26:	4a48      	ldr	r2, [pc, #288]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2e:	f7fc f9d9 	bl	8004ee4 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b36:	f7fc f9d5 	bl	8004ee4 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e1d4      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b48:	4b3f      	ldr	r3, [pc, #252]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0320 	and.w	r3, r3, #32
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d036      	beq.n	8008bce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d019      	beq.n	8008b9c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b68:	4b37      	ldr	r3, [pc, #220]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a36      	ldr	r2, [pc, #216]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b74:	f7fc f9b6 	bl	8004ee4 <HAL_GetTick>
 8008b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008b7c:	f7fc f9b2 	bl	8004ee4 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e1b1      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b8e:	4b2e      	ldr	r3, [pc, #184]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f0      	beq.n	8008b7c <HAL_RCC_OscConfig+0x3d8>
 8008b9a:	e018      	b.n	8008bce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b9c:	4b2a      	ldr	r3, [pc, #168]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a29      	ldr	r2, [pc, #164]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ba8:	f7fc f99c 	bl	8004ee4 <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bb0:	f7fc f998 	bl	8004ee4 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e197      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bc2:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8086 	beq.w	8008ce8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <HAL_RCC_OscConfig+0x4a8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1a      	ldr	r2, [pc, #104]	; (8008c4c <HAL_RCC_OscConfig+0x4a8>)
 8008be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008be8:	f7fc f97c 	bl	8004ee4 <HAL_GetTick>
 8008bec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008bf0:	f7fc f978 	bl	8004ee4 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b64      	cmp	r3, #100	; 0x64
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e177      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <HAL_RCC_OscConfig+0x4a8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d106      	bne.n	8008c24 <HAL_RCC_OscConfig+0x480>
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1a:	4a0b      	ldr	r2, [pc, #44]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	6713      	str	r3, [r2, #112]	; 0x70
 8008c22:	e032      	b.n	8008c8a <HAL_RCC_OscConfig+0x4e6>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d111      	bne.n	8008c50 <HAL_RCC_OscConfig+0x4ac>
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c32:	f023 0301 	bic.w	r3, r3, #1
 8008c36:	6713      	str	r3, [r2, #112]	; 0x70
 8008c38:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3c:	4a02      	ldr	r2, [pc, #8]	; (8008c48 <HAL_RCC_OscConfig+0x4a4>)
 8008c3e:	f023 0304 	bic.w	r3, r3, #4
 8008c42:	6713      	str	r3, [r2, #112]	; 0x70
 8008c44:	e021      	b.n	8008c8a <HAL_RCC_OscConfig+0x4e6>
 8008c46:	bf00      	nop
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	58024800 	.word	0x58024800
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b05      	cmp	r3, #5
 8008c56:	d10c      	bne.n	8008c72 <HAL_RCC_OscConfig+0x4ce>
 8008c58:	4b83      	ldr	r3, [pc, #524]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5c:	4a82      	ldr	r2, [pc, #520]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c5e:	f043 0304 	orr.w	r3, r3, #4
 8008c62:	6713      	str	r3, [r2, #112]	; 0x70
 8008c64:	4b80      	ldr	r3, [pc, #512]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c68:	4a7f      	ldr	r2, [pc, #508]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c70:	e00b      	b.n	8008c8a <HAL_RCC_OscConfig+0x4e6>
 8008c72:	4b7d      	ldr	r3, [pc, #500]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	4a7c      	ldr	r2, [pc, #496]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7e:	4b7a      	ldr	r3, [pc, #488]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	4a79      	ldr	r2, [pc, #484]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008c84:	f023 0304 	bic.w	r3, r3, #4
 8008c88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d015      	beq.n	8008cbe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c92:	f7fc f927 	bl	8004ee4 <HAL_GetTick>
 8008c96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c98:	e00a      	b.n	8008cb0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c9a:	f7fc f923 	bl	8004ee4 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d901      	bls.n	8008cb0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e120      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cb0:	4b6d      	ldr	r3, [pc, #436]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0ee      	beq.n	8008c9a <HAL_RCC_OscConfig+0x4f6>
 8008cbc:	e014      	b.n	8008ce8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbe:	f7fc f911 	bl	8004ee4 <HAL_GetTick>
 8008cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc6:	f7fc f90d 	bl	8004ee4 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e10a      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cdc:	4b62      	ldr	r3, [pc, #392]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1ee      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 80ff 	beq.w	8008ef0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008cf2:	4b5d      	ldr	r3, [pc, #372]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cfa:	2b18      	cmp	r3, #24
 8008cfc:	f000 80ba 	beq.w	8008e74 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	f040 8095 	bne.w	8008e34 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0a:	4b57      	ldr	r3, [pc, #348]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a56      	ldr	r2, [pc, #344]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d16:	f7fc f8e5 	bl	8004ee4 <HAL_GetTick>
 8008d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d1e:	f7fc f8e1 	bl	8004ee4 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e0e0      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d30:	4b4d      	ldr	r3, [pc, #308]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1f0      	bne.n	8008d1e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d3c:	4b4a      	ldr	r3, [pc, #296]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d40:	4b4a      	ldr	r3, [pc, #296]	; (8008e6c <HAL_RCC_OscConfig+0x6c8>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d4c:	0112      	lsls	r2, r2, #4
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	4945      	ldr	r1, [pc, #276]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	628b      	str	r3, [r1, #40]	; 0x28
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d64:	3b01      	subs	r3, #1
 8008d66:	025b      	lsls	r3, r3, #9
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	3b01      	subs	r3, #1
 8008d72:	041b      	lsls	r3, r3, #16
 8008d74:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d86:	4938      	ldr	r1, [pc, #224]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008d8c:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	4a35      	ldr	r2, [pc, #212]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d98:	4b33      	ldr	r3, [pc, #204]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d9c:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <HAL_RCC_OscConfig+0x6cc>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008da4:	00d2      	lsls	r2, r2, #3
 8008da6:	4930      	ldr	r1, [pc, #192]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dac:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	f023 020c 	bic.w	r2, r3, #12
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	492b      	ldr	r1, [pc, #172]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008dbe:	4b2a      	ldr	r3, [pc, #168]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	f023 0202 	bic.w	r2, r3, #2
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	4927      	ldr	r1, [pc, #156]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	4a24      	ldr	r2, [pc, #144]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ddc:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	4a21      	ldr	r2, [pc, #132]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008de8:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008df4:	4b1c      	ldr	r3, [pc, #112]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e00:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0c:	f7fc f86a 	bl	8004ee4 <HAL_GetTick>
 8008e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e12:	e008      	b.n	8008e26 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e14:	f7fc f866 	bl	8004ee4 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e065      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0f0      	beq.n	8008e14 <HAL_RCC_OscConfig+0x670>
 8008e32:	e05d      	b.n	8008ef0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fc f850 	bl	8004ee4 <HAL_GetTick>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e48:	f7fc f84c 	bl	8004ee4 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e04b      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e5a:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <HAL_RCC_OscConfig+0x6c4>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <HAL_RCC_OscConfig+0x6a4>
 8008e66:	e043      	b.n	8008ef0 <HAL_RCC_OscConfig+0x74c>
 8008e68:	58024400 	.word	0x58024400
 8008e6c:	fffffc0c 	.word	0xfffffc0c
 8008e70:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e74:	4b21      	ldr	r3, [pc, #132]	; (8008efc <HAL_RCC_OscConfig+0x758>)
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e7a:	4b20      	ldr	r3, [pc, #128]	; (8008efc <HAL_RCC_OscConfig+0x758>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d031      	beq.n	8008eec <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f003 0203 	and.w	r2, r3, #3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d12a      	bne.n	8008eec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d122      	bne.n	8008eec <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d11a      	bne.n	8008eec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	0a5b      	lsrs	r3, r3, #9
 8008eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d111      	bne.n	8008eec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	0c1b      	lsrs	r3, r3, #16
 8008ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d108      	bne.n	8008eec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	0e1b      	lsrs	r3, r3, #24
 8008ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d001      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3730      	adds	r7, #48	; 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400

08008f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e19c      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f14:	4b8a      	ldr	r3, [pc, #552]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d910      	bls.n	8008f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f22:	4b87      	ldr	r3, [pc, #540]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 020f 	bic.w	r2, r3, #15
 8008f2a:	4985      	ldr	r1, [pc, #532]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f32:	4b83      	ldr	r3, [pc, #524]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d001      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e184      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d010      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	4b7b      	ldr	r3, [pc, #492]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d908      	bls.n	8008f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f60:	4b78      	ldr	r3, [pc, #480]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	4975      	ldr	r1, [pc, #468]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d010      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	4b70      	ldr	r3, [pc, #448]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d908      	bls.n	8008fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f8e:	4b6d      	ldr	r3, [pc, #436]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	496a      	ldr	r1, [pc, #424]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d010      	beq.n	8008fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	4b64      	ldr	r3, [pc, #400]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d908      	bls.n	8008fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fbc:	4b61      	ldr	r3, [pc, #388]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	495e      	ldr	r1, [pc, #376]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d010      	beq.n	8008ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	4b59      	ldr	r3, [pc, #356]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d908      	bls.n	8008ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008fea:	4b56      	ldr	r3, [pc, #344]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4953      	ldr	r1, [pc, #332]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d010      	beq.n	800902a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	4b4d      	ldr	r3, [pc, #308]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	429a      	cmp	r2, r3
 8009016:	d908      	bls.n	800902a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009018:	4b4a      	ldr	r3, [pc, #296]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f023 020f 	bic.w	r2, r3, #15
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4947      	ldr	r1, [pc, #284]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009026:	4313      	orrs	r3, r2
 8009028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d055      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009036:	4b43      	ldr	r3, [pc, #268]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4940      	ldr	r1, [pc, #256]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009044:	4313      	orrs	r3, r2
 8009046:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d107      	bne.n	8009060 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009050:	4b3c      	ldr	r3, [pc, #240]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d121      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e0f6      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	2b03      	cmp	r3, #3
 8009066:	d107      	bne.n	8009078 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009068:	4b36      	ldr	r3, [pc, #216]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d115      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0ea      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d107      	bne.n	8009090 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009080:	4b30      	ldr	r3, [pc, #192]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0de      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009090:	4b2c      	ldr	r3, [pc, #176]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0d6      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090a0:	4b28      	ldr	r3, [pc, #160]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f023 0207 	bic.w	r2, r3, #7
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4925      	ldr	r1, [pc, #148]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b2:	f7fb ff17 	bl	8004ee4 <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b8:	e00a      	b.n	80090d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ba:	f7fb ff13 	bl	8004ee4 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d901      	bls.n	80090d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e0be      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d0:	4b1c      	ldr	r3, [pc, #112]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	429a      	cmp	r2, r3
 80090e0:	d1eb      	bne.n	80090ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d010      	beq.n	8009110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	4b14      	ldr	r3, [pc, #80]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d208      	bcs.n	8009110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090fe:	4b11      	ldr	r3, [pc, #68]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f023 020f 	bic.w	r2, r3, #15
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	490e      	ldr	r1, [pc, #56]	; (8009144 <HAL_RCC_ClockConfig+0x244>)
 800910c:	4313      	orrs	r3, r2
 800910e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d214      	bcs.n	8009148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f023 020f 	bic.w	r2, r3, #15
 8009126:	4906      	ldr	r1, [pc, #24]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <HAL_RCC_ClockConfig+0x240>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d005      	beq.n	8009148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e086      	b.n	800924e <HAL_RCC_ClockConfig+0x34e>
 8009140:	52002000 	.word	0x52002000
 8009144:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	4b3f      	ldr	r3, [pc, #252]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009160:	429a      	cmp	r2, r3
 8009162:	d208      	bcs.n	8009176 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009164:	4b3c      	ldr	r3, [pc, #240]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	4939      	ldr	r1, [pc, #228]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009172:	4313      	orrs	r3, r2
 8009174:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d010      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695a      	ldr	r2, [r3, #20]
 8009186:	4b34      	ldr	r3, [pc, #208]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800918e:	429a      	cmp	r2, r3
 8009190:	d208      	bcs.n	80091a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009192:	4b31      	ldr	r3, [pc, #196]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	492e      	ldr	r1, [pc, #184]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d010      	beq.n	80091d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	4b28      	ldr	r3, [pc, #160]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091bc:	429a      	cmp	r2, r3
 80091be:	d208      	bcs.n	80091d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091c0:	4b25      	ldr	r3, [pc, #148]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	4922      	ldr	r1, [pc, #136]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d010      	beq.n	8009200 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69da      	ldr	r2, [r3, #28]
 80091e2:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d208      	bcs.n	8009200 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80091ee:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	4917      	ldr	r1, [pc, #92]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009200:	f000 f834 	bl	800926c <HAL_RCC_GetSysClockFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	4912      	ldr	r1, [pc, #72]	; (800925c <HAL_RCC_ClockConfig+0x35c>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	f003 031f 	and.w	r3, r3, #31
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <HAL_RCC_ClockConfig+0x358>)
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	4a0d      	ldr	r2, [pc, #52]	; (800925c <HAL_RCC_ClockConfig+0x35c>)
 8009228:	5cd3      	ldrb	r3, [r2, r3]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	fa22 f303 	lsr.w	r3, r2, r3
 8009234:	4a0a      	ldr	r2, [pc, #40]	; (8009260 <HAL_RCC_ClockConfig+0x360>)
 8009236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009238:	4a0a      	ldr	r2, [pc, #40]	; (8009264 <HAL_RCC_ClockConfig+0x364>)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800923e:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <HAL_RCC_ClockConfig+0x368>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f7fb fe04 	bl	8004e50 <HAL_InitTick>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	0800ee5c 	.word	0x0800ee5c
 8009260:	240001c4 	.word	0x240001c4
 8009264:	240001c0 	.word	0x240001c0
 8009268:	240001c8 	.word	0x240001c8

0800926c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	; 0x24
 8009270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009272:	4bb3      	ldr	r3, [pc, #716]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800927a:	2b18      	cmp	r3, #24
 800927c:	f200 8155 	bhi.w	800952a <HAL_RCC_GetSysClockFreq+0x2be>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092ed 	.word	0x080092ed
 800928c:	0800952b 	.word	0x0800952b
 8009290:	0800952b 	.word	0x0800952b
 8009294:	0800952b 	.word	0x0800952b
 8009298:	0800952b 	.word	0x0800952b
 800929c:	0800952b 	.word	0x0800952b
 80092a0:	0800952b 	.word	0x0800952b
 80092a4:	0800952b 	.word	0x0800952b
 80092a8:	08009313 	.word	0x08009313
 80092ac:	0800952b 	.word	0x0800952b
 80092b0:	0800952b 	.word	0x0800952b
 80092b4:	0800952b 	.word	0x0800952b
 80092b8:	0800952b 	.word	0x0800952b
 80092bc:	0800952b 	.word	0x0800952b
 80092c0:	0800952b 	.word	0x0800952b
 80092c4:	0800952b 	.word	0x0800952b
 80092c8:	08009319 	.word	0x08009319
 80092cc:	0800952b 	.word	0x0800952b
 80092d0:	0800952b 	.word	0x0800952b
 80092d4:	0800952b 	.word	0x0800952b
 80092d8:	0800952b 	.word	0x0800952b
 80092dc:	0800952b 	.word	0x0800952b
 80092e0:	0800952b 	.word	0x0800952b
 80092e4:	0800952b 	.word	0x0800952b
 80092e8:	0800931f 	.word	0x0800931f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ec:	4b94      	ldr	r3, [pc, #592]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092f8:	4b91      	ldr	r3, [pc, #580]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	4a90      	ldr	r2, [pc, #576]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800930a:	e111      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800930c:	4b8d      	ldr	r3, [pc, #564]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800930e:	61bb      	str	r3, [r7, #24]
    break;
 8009310:	e10e      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009312:	4b8d      	ldr	r3, [pc, #564]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009314:	61bb      	str	r3, [r7, #24]
    break;
 8009316:	e10b      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009318:	4b8c      	ldr	r3, [pc, #560]	; (800954c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800931a:	61bb      	str	r3, [r7, #24]
    break;
 800931c:	e108      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800931e:	4b88      	ldr	r3, [pc, #544]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009328:	4b85      	ldr	r3, [pc, #532]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009334:	4b82      	ldr	r3, [pc, #520]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800933e:	4b80      	ldr	r3, [pc, #512]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	08db      	lsrs	r3, r3, #3
 8009344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	fb02 f303 	mul.w	r3, r2, r3
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80e1 	beq.w	8009524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b02      	cmp	r3, #2
 8009366:	f000 8083 	beq.w	8009470 <HAL_RCC_GetSysClockFreq+0x204>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b02      	cmp	r3, #2
 800936e:	f200 80a1 	bhi.w	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCC_GetSysClockFreq+0x114>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d056      	beq.n	800942c <HAL_RCC_GetSysClockFreq+0x1c0>
 800937e:	e099      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009380:	4b6f      	ldr	r3, [pc, #444]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b00      	cmp	r3, #0
 800938a:	d02d      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800938c:	4b6c      	ldr	r3, [pc, #432]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	08db      	lsrs	r3, r3, #3
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	4a6b      	ldr	r2, [pc, #428]	; (8009544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b62      	ldr	r3, [pc, #392]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80093e6:	e087      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b51      	ldr	r3, [pc, #324]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a02 	vldr	s12, [r7, #8]
 800940e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942a:	e065      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800943a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943e:	4b40      	ldr	r3, [pc, #256]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946e:	e043      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800955c <HAL_RCC_GetSysClockFreq+0x2f0>
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b2f      	ldr	r3, [pc, #188]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a02 	vldr	s12, [r7, #8]
 8009496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b2:	e021      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094f8:	4b11      	ldr	r3, [pc, #68]	; (8009540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	0a5b      	lsrs	r3, r3, #9
 80094fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009502:	3301      	adds	r3, #1
 8009504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	ee07 3a90 	vmov	s15, r3
 800950c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009510:	edd7 6a07 	vldr	s13, [r7, #28]
 8009514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951c:	ee17 3a90 	vmov	r3, s15
 8009520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009522:	e005      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	61bb      	str	r3, [r7, #24]
    break;
 8009528:	e002      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800952c:	61bb      	str	r3, [r7, #24]
    break;
 800952e:	bf00      	nop
  }

  return sysclockfreq;
 8009530:	69bb      	ldr	r3, [r7, #24]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3724      	adds	r7, #36	; 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	007a1200 	.word	0x007a1200
 8009550:	46000000 	.word	0x46000000
 8009554:	4c742400 	.word	0x4c742400
 8009558:	4a742400 	.word	0x4a742400
 800955c:	4af42400 	.word	0x4af42400

08009560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009566:	f7ff fe81 	bl	800926c <HAL_RCC_GetSysClockFreq>
 800956a:	4602      	mov	r2, r0
 800956c:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	490f      	ldr	r1, [pc, #60]	; (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009578:	5ccb      	ldrb	r3, [r1, r3]
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800958e:	5cd3      	ldrb	r3, [r2, r3]
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	4a07      	ldr	r2, [pc, #28]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800959c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800959e:	4a07      	ldr	r2, [pc, #28]	; (80095bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	58024400 	.word	0x58024400
 80095b4:	0800ee5c 	.word	0x0800ee5c
 80095b8:	240001c4 	.word	0x240001c4
 80095bc:	240001c0 	.word	0x240001c0

080095c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095c4:	f7ff ffcc 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	f003 031f 	and.w	r3, r3, #31
 80095dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	58024400 	.word	0x58024400
 80095e8:	0800ee5c 	.word	0x0800ee5c

080095ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095f0:	f7ff ffb6 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58024400 	.word	0x58024400
 8009614:	0800ee5c 	.word	0x0800ee5c

08009618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009620:	2300      	movs	r3, #0
 8009622:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009624:	2300      	movs	r3, #0
 8009626:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d03f      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800963c:	d02a      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800963e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009642:	d824      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009648:	d018      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800964a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800964e:	d81e      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009658:	d007      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800965a:	e018      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800965c:	4ba4      	ldr	r3, [pc, #656]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	4aa3      	ldr	r2, [pc, #652]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009668:	e015      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3304      	adds	r3, #4
 800966e:	2102      	movs	r1, #2
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f989 	bl	800a988 <RCCEx_PLL2_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800967a:	e00c      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3324      	adds	r3, #36	; 0x24
 8009680:	2102      	movs	r1, #2
 8009682:	4618      	mov	r0, r3
 8009684:	f001 fa32 	bl	800aaec <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800968c:	e003      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	75fb      	strb	r3, [r7, #23]
      break;
 8009692:	e000      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800969c:	4b94      	ldr	r3, [pc, #592]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a8:	4991      	ldr	r1, [pc, #580]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	650b      	str	r3, [r1, #80]	; 0x50
 80096ae:	e001      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d03d      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d826      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80096c8:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	080096e5 	.word	0x080096e5
 80096d4:	080096f3 	.word	0x080096f3
 80096d8:	08009705 	.word	0x08009705
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	0800971d 	.word	0x0800971d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4b82      	ldr	r3, [pc, #520]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a81      	ldr	r2, [pc, #516]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096f0:	e015      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 f945 	bl	800a988 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009702:	e00c      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3324      	adds	r3, #36	; 0x24
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f001 f9ee 	bl	800aaec <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009714:	e003      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	75fb      	strb	r3, [r7, #23]
      break;
 800971a:	e000      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800971c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009724:	4b72      	ldr	r3, [pc, #456]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009728:	f023 0207 	bic.w	r2, r3, #7
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009730:	496f      	ldr	r1, [pc, #444]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009732:	4313      	orrs	r3, r2
 8009734:	650b      	str	r3, [r1, #80]	; 0x50
 8009736:	e001      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009744:	2b00      	cmp	r3, #0
 8009746:	d051      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800974e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009752:	d036      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009754:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009758:	d830      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800975a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800975e:	d032      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009764:	d82a      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800976a:	d02e      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800976c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009770:	d824      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009776:	d018      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800977c:	d81e      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009786:	d007      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009788:	e018      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978a:	4b59      	ldr	r3, [pc, #356]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	4a58      	ldr	r2, [pc, #352]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009796:	e019      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3304      	adds	r3, #4
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 f8f2 	bl	800a988 <RCCEx_PLL2_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80097a8:	e010      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3324      	adds	r3, #36	; 0x24
 80097ae:	2100      	movs	r1, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 f99b 	bl	800aaec <RCCEx_PLL3_Config>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ba:	e007      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]
      break;
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80097c2:	bf00      	nop
 80097c4:	e002      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80097c6:	bf00      	nop
 80097c8:	e000      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80097ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097d2:	4b47      	ldr	r3, [pc, #284]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097e0:	4943      	ldr	r1, [pc, #268]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	658b      	str	r3, [r1, #88]	; 0x58
 80097e6:	e001      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d051      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009802:	d036      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009804:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009808:	d830      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800980a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800980e:	d032      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009814:	d82a      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800981a:	d02e      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800981c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009820:	d824      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009826:	d018      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800982c:	d81e      	bhi.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009836:	d007      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009838:	e018      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983a:	4b2d      	ldr	r3, [pc, #180]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009846:	e019      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3304      	adds	r3, #4
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f001 f89a 	bl	800a988 <RCCEx_PLL2_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009858:	e010      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3324      	adds	r3, #36	; 0x24
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f001 f943 	bl	800aaec <RCCEx_PLL3_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800986a:	e007      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]
      break;
 8009870:	e004      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009872:	bf00      	nop
 8009874:	e002      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009876:	bf00      	nop
 8009878:	e000      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800987a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10a      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009882:	4b1b      	ldr	r3, [pc, #108]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009886:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009890:	4917      	ldr	r1, [pc, #92]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009892:	4313      	orrs	r3, r2
 8009894:	658b      	str	r3, [r1, #88]	; 0x58
 8009896:	e001      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d035      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ac:	2b30      	cmp	r3, #48	; 0x30
 80098ae:	d01c      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098b0:	2b30      	cmp	r3, #48	; 0x30
 80098b2:	d817      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d00c      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d813      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d019      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d10f      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80098d0:	e011      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	2102      	movs	r1, #2
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 f855 	bl	800a988 <RCCEx_PLL2_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80098e2:	e008      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]
      break;
 80098e8:	e005      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80098ea:	bf00      	nop
 80098ec:	e003      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80098ee:	bf00      	nop
 80098f0:	58024400 	.word	0x58024400
      break;
 80098f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80098fc:	4ba3      	ldr	r3, [pc, #652]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80098fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009908:	49a0      	ldr	r1, [pc, #640]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800990a:	4313      	orrs	r3, r2
 800990c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800990e:	e001      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d047      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009928:	d030      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800992a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800992e:	d82a      	bhi.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009934:	d02c      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800993a:	d824      	bhi.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800993c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009940:	d018      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009946:	d81e      	bhi.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800994c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009950:	d007      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009952:	e018      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009954:	4b8d      	ldr	r3, [pc, #564]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	4a8c      	ldr	r2, [pc, #560]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800995a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800995e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009960:	e017      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3304      	adds	r3, #4
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f80d 	bl	800a988 <RCCEx_PLL2_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009972:	e00e      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3324      	adds	r3, #36	; 0x24
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f001 f8b6 	bl	800aaec <RCCEx_PLL3_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009984:	e005      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	75fb      	strb	r3, [r7, #23]
      break;
 800998a:	e002      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800998c:	bf00      	nop
 800998e:	e000      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009998:	4b7c      	ldr	r3, [pc, #496]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800999a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800999c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a4:	4979      	ldr	r1, [pc, #484]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	650b      	str	r3, [r1, #80]	; 0x50
 80099aa:	e001      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d049      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099c4:	d02e      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80099c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099ca:	d828      	bhi.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80099cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099d0:	d02a      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80099d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099d6:	d822      	bhi.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80099d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099dc:	d026      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80099de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099e2:	d81c      	bhi.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80099e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099e8:	d010      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80099ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ee:	d816      	bhi.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01d      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f8:	d111      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3304      	adds	r3, #4
 80099fe:	2101      	movs	r1, #1
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 ffc1 	bl	800a988 <RCCEx_PLL2_Config>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a0a:	e012      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3324      	adds	r3, #36	; 0x24
 8009a10:	2101      	movs	r1, #1
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f86a 	bl	800aaec <RCCEx_PLL3_Config>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a1c:	e009      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	75fb      	strb	r3, [r7, #23]
      break;
 8009a22:	e006      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a24:	bf00      	nop
 8009a26:	e004      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a28:	bf00      	nop
 8009a2a:	e002      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a2c:	bf00      	nop
 8009a2e:	e000      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a38:	4b54      	ldr	r3, [pc, #336]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a44:	4951      	ldr	r1, [pc, #324]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	650b      	str	r3, [r1, #80]	; 0x50
 8009a4a:	e001      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d04b      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a66:	d02e      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a6c:	d828      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a72:	d02a      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a78:	d822      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a7e:	d026      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009a80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a84:	d81c      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a8a:	d010      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a90:	d816      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d01d      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a9a:	d111      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 ff70 	bl	800a988 <RCCEx_PLL2_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009aac:	e012      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3324      	adds	r3, #36	; 0x24
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 f819 	bl	800aaec <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009abe:	e009      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac4:	e006      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009ac6:	bf00      	nop
 8009ac8:	e004      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009aca:	bf00      	nop
 8009acc:	e002      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009ace:	bf00      	nop
 8009ad0:	e000      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ada:	4b2c      	ldr	r3, [pc, #176]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ade:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ae8:	4928      	ldr	r1, [pc, #160]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	658b      	str	r3, [r1, #88]	; 0x58
 8009aee:	e001      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02f      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b08:	d00e      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b0e:	d814      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d015      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b18:	d10f      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b1a:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	4a1b      	ldr	r2, [pc, #108]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b26:	e00c      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 ff2a 	bl	800a988 <RCCEx_PLL2_Config>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b38:	e003      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3e:	e000      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d109      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b54:	490d      	ldr	r1, [pc, #52]	; (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	650b      	str	r3, [r1, #80]	; 0x50
 8009b5a:	e001      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d034      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d81d      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009bb7 	.word	0x08009bb7
 8009b80:	08009b91 	.word	0x08009b91
 8009b84:	08009b9f 	.word	0x08009b9f
 8009b88:	08009bb7 	.word	0x08009bb7
 8009b8c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b90:	4bb1      	ldr	r3, [pc, #708]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	4ab0      	ldr	r2, [pc, #704]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b9c:	e00c      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 feef 	bl	800a988 <RCCEx_PLL2_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009bae:	e003      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d109      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bbe:	4ba6      	ldr	r3, [pc, #664]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc2:	f023 0203 	bic.w	r2, r3, #3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bca:	49a3      	ldr	r1, [pc, #652]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bd0:	e001      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 8086 	beq.w	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009be4:	4b9d      	ldr	r3, [pc, #628]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a9c      	ldr	r2, [pc, #624]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bf0:	f7fb f978 	bl	8004ee4 <HAL_GetTick>
 8009bf4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bf6:	e009      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bf8:	f7fb f974 	bl	8004ee4 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b64      	cmp	r3, #100	; 0x64
 8009c04:	d902      	bls.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	75fb      	strb	r3, [r7, #23]
        break;
 8009c0a:	e005      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c0c:	4b93      	ldr	r3, [pc, #588]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0ef      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d166      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c1e:	4b8e      	ldr	r3, [pc, #568]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c28:	4053      	eors	r3, r2
 8009c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d013      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c32:	4b89      	ldr	r3, [pc, #548]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c3a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c3c:	4b86      	ldr	r3, [pc, #536]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	4a85      	ldr	r2, [pc, #532]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c46:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c48:	4b83      	ldr	r3, [pc, #524]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	4a82      	ldr	r2, [pc, #520]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c52:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c54:	4a80      	ldr	r2, [pc, #512]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c64:	d115      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c66:	f7fb f93d 	bl	8004ee4 <HAL_GetTick>
 8009c6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c6c:	e00b      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c6e:	f7fb f939 	bl	8004ee4 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d902      	bls.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	75fb      	strb	r3, [r7, #23]
            break;
 8009c84:	e005      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c86:	4b74      	ldr	r3, [pc, #464]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0ed      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d126      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ca6:	d10d      	bne.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009ca8:	4b6b      	ldr	r3, [pc, #428]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cb6:	0919      	lsrs	r1, r3, #4
 8009cb8:	4b69      	ldr	r3, [pc, #420]	; (8009e60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009cba:	400b      	ands	r3, r1
 8009cbc:	4966      	ldr	r1, [pc, #408]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
 8009cc2:	e005      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009cc4:	4b64      	ldr	r3, [pc, #400]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	4a63      	ldr	r2, [pc, #396]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009cce:	6113      	str	r3, [r2, #16]
 8009cd0:	4b61      	ldr	r3, [pc, #388]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cde:	495e      	ldr	r1, [pc, #376]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	670b      	str	r3, [r1, #112]	; 0x70
 8009ce4:	e004      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	75bb      	strb	r3, [r7, #22]
 8009cea:	e001      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d07e      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d00:	2b28      	cmp	r3, #40	; 0x28
 8009d02:	d867      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009d04:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009ddb 	.word	0x08009ddb
 8009d10:	08009dd5 	.word	0x08009dd5
 8009d14:	08009dd5 	.word	0x08009dd5
 8009d18:	08009dd5 	.word	0x08009dd5
 8009d1c:	08009dd5 	.word	0x08009dd5
 8009d20:	08009dd5 	.word	0x08009dd5
 8009d24:	08009dd5 	.word	0x08009dd5
 8009d28:	08009dd5 	.word	0x08009dd5
 8009d2c:	08009db1 	.word	0x08009db1
 8009d30:	08009dd5 	.word	0x08009dd5
 8009d34:	08009dd5 	.word	0x08009dd5
 8009d38:	08009dd5 	.word	0x08009dd5
 8009d3c:	08009dd5 	.word	0x08009dd5
 8009d40:	08009dd5 	.word	0x08009dd5
 8009d44:	08009dd5 	.word	0x08009dd5
 8009d48:	08009dd5 	.word	0x08009dd5
 8009d4c:	08009dc3 	.word	0x08009dc3
 8009d50:	08009dd5 	.word	0x08009dd5
 8009d54:	08009dd5 	.word	0x08009dd5
 8009d58:	08009dd5 	.word	0x08009dd5
 8009d5c:	08009dd5 	.word	0x08009dd5
 8009d60:	08009dd5 	.word	0x08009dd5
 8009d64:	08009dd5 	.word	0x08009dd5
 8009d68:	08009dd5 	.word	0x08009dd5
 8009d6c:	08009ddb 	.word	0x08009ddb
 8009d70:	08009dd5 	.word	0x08009dd5
 8009d74:	08009dd5 	.word	0x08009dd5
 8009d78:	08009dd5 	.word	0x08009dd5
 8009d7c:	08009dd5 	.word	0x08009dd5
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009dd5 	.word	0x08009dd5
 8009d88:	08009dd5 	.word	0x08009dd5
 8009d8c:	08009ddb 	.word	0x08009ddb
 8009d90:	08009dd5 	.word	0x08009dd5
 8009d94:	08009dd5 	.word	0x08009dd5
 8009d98:	08009dd5 	.word	0x08009dd5
 8009d9c:	08009dd5 	.word	0x08009dd5
 8009da0:	08009dd5 	.word	0x08009dd5
 8009da4:	08009dd5 	.word	0x08009dd5
 8009da8:	08009dd5 	.word	0x08009dd5
 8009dac:	08009ddb 	.word	0x08009ddb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	2101      	movs	r1, #1
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fde6 	bl	800a988 <RCCEx_PLL2_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009dc0:	e00c      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3324      	adds	r3, #36	; 0x24
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fe8f 	bl	800aaec <RCCEx_PLL3_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009dd2:	e003      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd8:	e000      	b.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009de2:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dee:	491a      	ldr	r1, [pc, #104]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	654b      	str	r3, [r1, #84]	; 0x54
 8009df4:	e001      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d03e      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d820      	bhi.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009e0e:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e14:	08009e65 	.word	0x08009e65
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e3f 	.word	0x08009e3f
 8009e20:	08009e65 	.word	0x08009e65
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fda8 	bl	800a988 <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e3c:	e013      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3324      	adds	r3, #36	; 0x24
 8009e42:	2101      	movs	r1, #1
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fe51 	bl	800aaec <RCCEx_PLL3_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e4e:	e00a      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	75fb      	strb	r3, [r7, #23]
      break;
 8009e54:	e007      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009e56:	bf00      	nop
 8009e58:	58024400 	.word	0x58024400
 8009e5c:	58024800 	.word	0x58024800
 8009e60:	00ffffcf 	.word	0x00ffffcf
      break;
 8009e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e6c:	4b9f      	ldr	r3, [pc, #636]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e70:	f023 0207 	bic.w	r2, r3, #7
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e78:	499c      	ldr	r1, [pc, #624]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	654b      	str	r3, [r1, #84]	; 0x54
 8009e7e:	e001      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d039      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d820      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ee3 	.word	0x08009ee3
 8009ea4:	08009eb9 	.word	0x08009eb9
 8009ea8:	08009ecb 	.word	0x08009ecb
 8009eac:	08009ee3 	.word	0x08009ee3
 8009eb0:	08009ee3 	.word	0x08009ee3
 8009eb4:	08009ee3 	.word	0x08009ee3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 fd62 	bl	800a988 <RCCEx_PLL2_Config>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ec8:	e00c      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3324      	adds	r3, #36	; 0x24
 8009ece:	2101      	movs	r1, #1
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 fe0b 	bl	800aaec <RCCEx_PLL3_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009eda:	e003      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee0:	e000      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eea:	4b80      	ldr	r3, [pc, #512]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eee:	f023 0207 	bic.w	r2, r3, #7
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ef8:	497c      	ldr	r1, [pc, #496]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	658b      	str	r3, [r1, #88]	; 0x58
 8009efe:	e001      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0320 	and.w	r3, r3, #32
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d04b      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f1a:	d02e      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f20:	d828      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f26:	d02a      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2c:	d822      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f32:	d026      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009f34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f38:	d81c      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f3e:	d010      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f44:	d816      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01d      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f4e:	d111      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3304      	adds	r3, #4
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fd16 	bl	800a988 <RCCEx_PLL2_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f60:	e012      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3324      	adds	r3, #36	; 0x24
 8009f66:	2102      	movs	r1, #2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fdbf 	bl	800aaec <RCCEx_PLL3_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f72:	e009      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	75fb      	strb	r3, [r7, #23]
      break;
 8009f78:	e006      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009f7a:	bf00      	nop
 8009f7c:	e004      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009f7e:	bf00      	nop
 8009f80:	e002      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009f82:	bf00      	nop
 8009f84:	e000      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f8e:	4b57      	ldr	r3, [pc, #348]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	4953      	ldr	r1, [pc, #332]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	654b      	str	r3, [r1, #84]	; 0x54
 8009fa2:	e001      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d04b      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fbe:	d02e      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009fc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009fc4:	d828      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fca:	d02a      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd0:	d822      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fd6:	d026      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fdc:	d81c      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe2:	d010      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe8:	d816      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01d      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ff2:	d111      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fcc4 	bl	800a988 <RCCEx_PLL2_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a004:	e012      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3324      	adds	r3, #36	; 0x24
 800a00a:	2102      	movs	r1, #2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fd6d 	bl	800aaec <RCCEx_PLL3_Config>
 800a012:	4603      	mov	r3, r0
 800a014:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a016:	e009      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]
      break;
 800a01c:	e006      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a01e:	bf00      	nop
 800a020:	e004      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a02a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a032:	4b2e      	ldr	r3, [pc, #184]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a036:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a040:	492a      	ldr	r1, [pc, #168]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a042:	4313      	orrs	r3, r2
 800a044:	658b      	str	r3, [r1, #88]	; 0x58
 800a046:	e001      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a054:	2b00      	cmp	r3, #0
 800a056:	d04d      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a05e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a062:	d02e      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a068:	d828      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a06e:	d02a      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a074:	d822      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a076:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a07a:	d026      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a07c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a080:	d81c      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a086:	d010      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a08c:	d816      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01d      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a096:	d111      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3304      	adds	r3, #4
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fc72 	bl	800a988 <RCCEx_PLL2_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0a8:	e012      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3324      	adds	r3, #36	; 0x24
 800a0ae:	2102      	movs	r1, #2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fd1b 	bl	800aaec <RCCEx_PLL3_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a0ba:	e009      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c0:	e006      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a0c2:	bf00      	nop
 800a0c4:	e004      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a0c6:	bf00      	nop
 800a0c8:	e002      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a0ca:	bf00      	nop
 800a0cc:	e000      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a0ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10c      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0e4:	4901      	ldr	r1, [pc, #4]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	658b      	str	r3, [r1, #88]	; 0x58
 800a0ea:	e003      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a0ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d018      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a108:	d10a      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3324      	adds	r3, #36	; 0x24
 800a10e:	2102      	movs	r1, #2
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fceb 	bl	800aaec <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a120:	4b8a      	ldr	r3, [pc, #552]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a12c:	4987      	ldr	r1, [pc, #540]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0310 	and.w	r3, r3, #16
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01a      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a148:	d10a      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3324      	adds	r3, #36	; 0x24
 800a14e:	2102      	movs	r1, #2
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fccb 	bl	800aaec <RCCEx_PLL3_Config>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a160:	4b7a      	ldr	r3, [pc, #488]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16e:	4977      	ldr	r1, [pc, #476]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a170:	4313      	orrs	r3, r2
 800a172:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d034      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a18a:	d01d      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a18c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a190:	d817      	bhi.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a19a:	d009      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a19c:	e011      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fbef 	bl	800a988 <RCCEx_PLL2_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1ae:	e00c      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3324      	adds	r3, #36	; 0x24
 800a1b4:	2102      	movs	r1, #2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fc98 	bl	800aaec <RCCEx_PLL3_Config>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a1c0:	e003      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c6:	e000      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a1c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1d0:	4b5e      	ldr	r3, [pc, #376]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1de:	495b      	ldr	r1, [pc, #364]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	658b      	str	r3, [r1, #88]	; 0x58
 800a1e4:	e001      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d033      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a200:	d01c      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a206:	d816      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a20c:	d003      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a20e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a212:	d007      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a214:	e00f      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a216:	4b4d      	ldr	r3, [pc, #308]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	4a4c      	ldr	r2, [pc, #304]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a21c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a222:	e00c      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3324      	adds	r3, #36	; 0x24
 800a228:	2101      	movs	r1, #1
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fc5e 	bl	800aaec <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a234:	e003      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	75fb      	strb	r3, [r7, #23]
      break;
 800a23a:	e000      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a23c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10a      	bne.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a244:	4b41      	ldr	r3, [pc, #260]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a252:	493e      	ldr	r1, [pc, #248]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a254:	4313      	orrs	r3, r2
 800a256:	654b      	str	r3, [r1, #84]	; 0x54
 800a258:	e001      	b.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a266:	2b00      	cmp	r3, #0
 800a268:	d029      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a276:	d007      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a278:	e00f      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a27a:	4b34      	ldr	r3, [pc, #208]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	4a33      	ldr	r2, [pc, #204]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a286:	e00b      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	2102      	movs	r1, #2
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fb7a 	bl	800a988 <RCCEx_PLL2_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a298:	e002      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
      break;
 800a29e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d109      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2a6:	4b29      	ldr	r3, [pc, #164]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b2:	4926      	ldr	r1, [pc, #152]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2b8:	e001      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3324      	adds	r3, #36	; 0x24
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fc0b 	bl	800aaec <RCCEx_PLL3_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d033      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2f4:	d017      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a2f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2fa:	d811      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a2fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a300:	d013      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a306:	d80b      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d010      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a310:	d106      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a31c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a31e:	e007      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	e004      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a32e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a342:	4902      	ldr	r1, [pc, #8]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a344:	4313      	orrs	r3, r2
 800a346:	654b      	str	r3, [r1, #84]	; 0x54
 800a348:	e004      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d008      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a360:	4b29      	ldr	r3, [pc, #164]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a36c:	4926      	ldr	r1, [pc, #152]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d008      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a37e:	4b22      	ldr	r3, [pc, #136]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a38a:	491f      	ldr	r1, [pc, #124]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00d      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	4a19      	ldr	r2, [pc, #100]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3a6:	6113      	str	r3, [r2, #16]
 800a3a8:	4b17      	ldr	r3, [pc, #92]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3b2:	4915      	ldr	r1, [pc, #84]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da08      	bge.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3c0:	4b11      	ldr	r3, [pc, #68]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3cc:	490e      	ldr	r1, [pc, #56]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ec:	4906      	ldr	r1, [pc, #24]	; (800a408 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a3f2:	7dbb      	ldrb	r3, [r7, #22]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e000      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	58024400 	.word	0x58024400

0800a40c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a410:	f7ff f8a6 	bl	8009560 <HAL_RCC_GetHCLKFreq>
 800a414:	4602      	mov	r2, r0
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	091b      	lsrs	r3, r3, #4
 800a41c:	f003 0307 	and.w	r3, r3, #7
 800a420:	4904      	ldr	r1, [pc, #16]	; (800a434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a422:	5ccb      	ldrb	r3, [r1, r3]
 800a424:	f003 031f 	and.w	r3, r3, #31
 800a428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	58024400 	.word	0x58024400
 800a434:	0800ee5c 	.word	0x0800ee5c

0800a438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a438:	b480      	push	{r7}
 800a43a:	b089      	sub	sp, #36	; 0x24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a440:	4ba1      	ldr	r3, [pc, #644]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a44a:	4b9f      	ldr	r3, [pc, #636]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	0b1b      	lsrs	r3, r3, #12
 800a450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a456:	4b9c      	ldr	r3, [pc, #624]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a462:	4b99      	ldr	r3, [pc, #612]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 8111 	beq.w	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	f000 8083 	beq.w	800a594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	f200 80a1 	bhi.w	800a5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d056      	beq.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4a2:	e099      	b.n	800a5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a4:	4b88      	ldr	r3, [pc, #544]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02d      	beq.n	800a50c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4b0:	4b85      	ldr	r3, [pc, #532]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	08db      	lsrs	r3, r3, #3
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	4a84      	ldr	r2, [pc, #528]	; (800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4da:	4b7b      	ldr	r3, [pc, #492]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a50a:	e087      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51e:	4b6a      	ldr	r3, [pc, #424]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a532:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a54e:	e065      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a562:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a572:	ed97 6a03 	vldr	s12, [r7, #12]
 800a576:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a592:	e043      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a6:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5d6:	e021      	b.n	800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b37      	ldr	r3, [pc, #220]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a61a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a61c:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	0a5b      	lsrs	r3, r3, #9
 800a622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a636:	edd7 6a07 	vldr	s13, [r7, #28]
 800a63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a642:	ee17 2a90 	vmov	r2, s15
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a664:	edd7 6a07 	vldr	s13, [r7, #28]
 800a668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a670:	ee17 2a90 	vmov	r2, s15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6a6:	e008      	b.n	800a6ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]
}
 800a6ba:	bf00      	nop
 800a6bc:	3724      	adds	r7, #36	; 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	46000000 	.word	0x46000000
 800a6d4:	4c742400 	.word	0x4c742400
 800a6d8:	4a742400 	.word	0x4a742400
 800a6dc:	4af42400 	.word	0x4af42400

0800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b089      	sub	sp, #36	; 0x24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6e8:	4ba1      	ldr	r3, [pc, #644]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a6f2:	4b9f      	ldr	r3, [pc, #636]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	0d1b      	lsrs	r3, r3, #20
 800a6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a6fe:	4b9c      	ldr	r3, [pc, #624]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a70a:	4b99      	ldr	r3, [pc, #612]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	fb02 f303 	mul.w	r3, r2, r3
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 8111 	beq.w	800a950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b02      	cmp	r3, #2
 800a732:	f000 8083 	beq.w	800a83c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	f200 80a1 	bhi.w	800a880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d056      	beq.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a74a:	e099      	b.n	800a880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a74c:	4b88      	ldr	r3, [pc, #544]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d02d      	beq.n	800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a758:	4b85      	ldr	r3, [pc, #532]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	4a84      	ldr	r2, [pc, #528]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
 800a768:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	ee07 3a90 	vmov	s15, r3
 800a770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a782:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a792:	ed97 6a03 	vldr	s12, [r7, #12]
 800a796:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7b2:	e087      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c6:	4b6a      	ldr	r3, [pc, #424]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7f6:	e065      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a802:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80a:	4b59      	ldr	r3, [pc, #356]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a83a:	e043      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a846:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84e:	4b48      	ldr	r3, [pc, #288]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a862:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a87e:	e021      	b.n	800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a892:	4b37      	ldr	r3, [pc, #220]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	0a5b      	lsrs	r3, r3, #9
 800a8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ea:	ee17 2a90 	vmov	r2, s15
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	0c1b      	lsrs	r3, r3, #16
 800a8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fc:	ee07 3a90 	vmov	s15, r3
 800a900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a918:	ee17 2a90 	vmov	r2, s15
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a920:	4b13      	ldr	r3, [pc, #76]	; (800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	0e1b      	lsrs	r3, r3, #24
 800a926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a946:	ee17 2a90 	vmov	r2, s15
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a94e:	e008      	b.n	800a962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	609a      	str	r2, [r3, #8]
}
 800a962:	bf00      	nop
 800a964:	3724      	adds	r7, #36	; 0x24
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
 800a974:	03d09000 	.word	0x03d09000
 800a978:	46000000 	.word	0x46000000
 800a97c:	4c742400 	.word	0x4c742400
 800a980:	4a742400 	.word	0x4a742400
 800a984:	4af42400 	.word	0x4af42400

0800a988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a996:	4b53      	ldr	r3, [pc, #332]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d101      	bne.n	800a9a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e099      	b.n	800aada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a9a6:	4b4f      	ldr	r3, [pc, #316]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a4e      	ldr	r2, [pc, #312]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a9ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9b2:	f7fa fa97 	bl	8004ee4 <HAL_GetTick>
 800a9b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9b8:	e008      	b.n	800a9cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a9ba:	f7fa fa93 	bl	8004ee4 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d901      	bls.n	800a9cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e086      	b.n	800aada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9cc:	4b45      	ldr	r3, [pc, #276]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1f0      	bne.n	800a9ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a9d8:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	031b      	lsls	r3, r3, #12
 800a9e6:	493f      	ldr	r1, [pc, #252]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	025b      	lsls	r3, r3, #9
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	061b      	lsls	r3, r3, #24
 800aa18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa1c:	4931      	ldr	r1, [pc, #196]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa22:	4b30      	ldr	r3, [pc, #192]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	492d      	ldr	r1, [pc, #180]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa34:	4b2b      	ldr	r3, [pc, #172]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	f023 0220 	bic.w	r2, r3, #32
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	4928      	ldr	r1, [pc, #160]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aa46:	4b27      	ldr	r3, [pc, #156]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	4a26      	ldr	r2, [pc, #152]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa4c:	f023 0310 	bic.w	r3, r3, #16
 800aa50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa56:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <RCCEx_PLL2_Config+0x160>)
 800aa58:	4013      	ands	r3, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	69d2      	ldr	r2, [r2, #28]
 800aa5e:	00d2      	lsls	r2, r2, #3
 800aa60:	4920      	ldr	r1, [pc, #128]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aa66:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	4a1e      	ldr	r2, [pc, #120]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa6c:	f043 0310 	orr.w	r3, r3, #16
 800aa70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aa78:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a19      	ldr	r2, [pc, #100]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa84:	e00f      	b.n	800aaa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d106      	bne.n	800aa9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aa8c:	4b15      	ldr	r3, [pc, #84]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	4a14      	ldr	r2, [pc, #80]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa98:	e005      	b.n	800aaa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa9a:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aaa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab2:	f7fa fa17 	bl	8004ee4 <HAL_GetTick>
 800aab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aab8:	e008      	b.n	800aacc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aaba:	f7fa fa13 	bl	8004ee4 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e006      	b.n	800aada <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aacc:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <RCCEx_PLL2_Config+0x15c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0f0      	beq.n	800aaba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	58024400 	.word	0x58024400
 800aae8:	ffff0007 	.word	0xffff0007

0800aaec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aafa:	4b53      	ldr	r3, [pc, #332]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafe:	f003 0303 	and.w	r3, r3, #3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d101      	bne.n	800ab0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e099      	b.n	800ac3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab0a:	4b4f      	ldr	r3, [pc, #316]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a4e      	ldr	r2, [pc, #312]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab16:	f7fa f9e5 	bl	8004ee4 <HAL_GetTick>
 800ab1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab1c:	e008      	b.n	800ab30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab1e:	f7fa f9e1 	bl	8004ee4 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e086      	b.n	800ac3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab30:	4b45      	ldr	r3, [pc, #276]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab3c:	4b42      	ldr	r3, [pc, #264]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	051b      	lsls	r3, r3, #20
 800ab4a:	493f      	ldr	r1, [pc, #252]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	628b      	str	r3, [r1, #40]	; 0x28
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	025b      	lsls	r3, r3, #9
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	061b      	lsls	r3, r3, #24
 800ab7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab80:	4931      	ldr	r1, [pc, #196]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ab86:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	492d      	ldr	r1, [pc, #180]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab94:	4313      	orrs	r3, r2
 800ab96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab98:	4b2b      	ldr	r3, [pc, #172]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	4928      	ldr	r1, [pc, #160]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800abaa:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abae:	4a26      	ldr	r2, [pc, #152]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800abb6:	4b24      	ldr	r3, [pc, #144]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <RCCEx_PLL3_Config+0x160>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	69d2      	ldr	r2, [r2, #28]
 800abc2:	00d2      	lsls	r2, r2, #3
 800abc4:	4920      	ldr	r1, [pc, #128]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800abca:	4b1f      	ldr	r3, [pc, #124]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abce:	4a1e      	ldr	r2, [pc, #120]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d106      	bne.n	800abea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800abdc:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	4a19      	ldr	r2, [pc, #100]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abe2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abe8:	e00f      	b.n	800ac0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d106      	bne.n	800abfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800abf0:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a14      	ldr	r2, [pc, #80]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800abf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abfc:	e005      	b.n	800ac0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800abfe:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	4a11      	ldr	r2, [pc, #68]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ac04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ac10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac16:	f7fa f965 	bl	8004ee4 <HAL_GetTick>
 800ac1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac1c:	e008      	b.n	800ac30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac1e:	f7fa f961 	bl	8004ee4 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e006      	b.n	800ac3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac30:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <RCCEx_PLL3_Config+0x15c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	ffff0007 	.word	0xffff0007

0800ac50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e049      	b.n	800acf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d106      	bne.n	800ac7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7f9 fa40 	bl	80040fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f000 feb8 	bl	800ba04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d001      	beq.n	800ad18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e05e      	b.n	800add6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f042 0201 	orr.w	r2, r2, #1
 800ad2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a2b      	ldr	r2, [pc, #172]	; (800ade4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d02c      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad42:	d027      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a27      	ldr	r2, [pc, #156]	; (800ade8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d022      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a26      	ldr	r2, [pc, #152]	; (800adec <HAL_TIM_Base_Start_IT+0xec>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d01d      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a24      	ldr	r2, [pc, #144]	; (800adf0 <HAL_TIM_Base_Start_IT+0xf0>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d018      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a23      	ldr	r2, [pc, #140]	; (800adf4 <HAL_TIM_Base_Start_IT+0xf4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d013      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a21      	ldr	r2, [pc, #132]	; (800adf8 <HAL_TIM_Base_Start_IT+0xf8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00e      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a20      	ldr	r2, [pc, #128]	; (800adfc <HAL_TIM_Base_Start_IT+0xfc>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d009      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <HAL_TIM_Base_Start_IT+0x100>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d004      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x94>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a1d      	ldr	r2, [pc, #116]	; (800ae04 <HAL_TIM_Base_Start_IT+0x104>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d115      	bne.n	800adc0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689a      	ldr	r2, [r3, #8]
 800ad9a:	4b1b      	ldr	r3, [pc, #108]	; (800ae08 <HAL_TIM_Base_Start_IT+0x108>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b06      	cmp	r3, #6
 800ada4:	d015      	beq.n	800add2 <HAL_TIM_Base_Start_IT+0xd2>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adac:	d011      	beq.n	800add2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0201 	orr.w	r2, r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adbe:	e008      	b.n	800add2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f042 0201 	orr.w	r2, r2, #1
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	e000      	b.n	800add4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40000400 	.word	0x40000400
 800adec:	40000800 	.word	0x40000800
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	40010400 	.word	0x40010400
 800adf8:	40001800 	.word	0x40001800
 800adfc:	40014000 	.word	0x40014000
 800ae00:	4000e000 	.word	0x4000e000
 800ae04:	4000e400 	.word	0x4000e400
 800ae08:	00010007 	.word	0x00010007

0800ae0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e049      	b.n	800aeb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7f9 fa9a 	bl	800436c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f000 fdda 	bl	800ba04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d109      	bne.n	800aee0 <HAL_TIM_PWM_Start+0x24>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	bf14      	ite	ne
 800aed8:	2301      	movne	r3, #1
 800aeda:	2300      	moveq	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	e03c      	b.n	800af5a <HAL_TIM_PWM_Start+0x9e>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d109      	bne.n	800aefa <HAL_TIM_PWM_Start+0x3e>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	bf14      	ite	ne
 800aef2:	2301      	movne	r3, #1
 800aef4:	2300      	moveq	r3, #0
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	e02f      	b.n	800af5a <HAL_TIM_PWM_Start+0x9e>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d109      	bne.n	800af14 <HAL_TIM_PWM_Start+0x58>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b01      	cmp	r3, #1
 800af0a:	bf14      	ite	ne
 800af0c:	2301      	movne	r3, #1
 800af0e:	2300      	moveq	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	e022      	b.n	800af5a <HAL_TIM_PWM_Start+0x9e>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b0c      	cmp	r3, #12
 800af18:	d109      	bne.n	800af2e <HAL_TIM_PWM_Start+0x72>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b01      	cmp	r3, #1
 800af24:	bf14      	ite	ne
 800af26:	2301      	movne	r3, #1
 800af28:	2300      	moveq	r3, #0
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	e015      	b.n	800af5a <HAL_TIM_PWM_Start+0x9e>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b10      	cmp	r3, #16
 800af32:	d109      	bne.n	800af48 <HAL_TIM_PWM_Start+0x8c>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	bf14      	ite	ne
 800af40:	2301      	movne	r3, #1
 800af42:	2300      	moveq	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	e008      	b.n	800af5a <HAL_TIM_PWM_Start+0x9e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	bf14      	ite	ne
 800af54:	2301      	movne	r3, #1
 800af56:	2300      	moveq	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e0ab      	b.n	800b0ba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <HAL_TIM_PWM_Start+0xb6>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2202      	movs	r2, #2
 800af6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af70:	e023      	b.n	800afba <HAL_TIM_PWM_Start+0xfe>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2b04      	cmp	r3, #4
 800af76:	d104      	bne.n	800af82 <HAL_TIM_PWM_Start+0xc6>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af80:	e01b      	b.n	800afba <HAL_TIM_PWM_Start+0xfe>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b08      	cmp	r3, #8
 800af86:	d104      	bne.n	800af92 <HAL_TIM_PWM_Start+0xd6>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af90:	e013      	b.n	800afba <HAL_TIM_PWM_Start+0xfe>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b0c      	cmp	r3, #12
 800af96:	d104      	bne.n	800afa2 <HAL_TIM_PWM_Start+0xe6>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2202      	movs	r2, #2
 800af9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afa0:	e00b      	b.n	800afba <HAL_TIM_PWM_Start+0xfe>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d104      	bne.n	800afb2 <HAL_TIM_PWM_Start+0xf6>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afb0:	e003      	b.n	800afba <HAL_TIM_PWM_Start+0xfe>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2202      	movs	r2, #2
 800afb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2201      	movs	r2, #1
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 f938 	bl	800c238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a3d      	ldr	r2, [pc, #244]	; (800b0c4 <HAL_TIM_PWM_Start+0x208>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d013      	beq.n	800affa <HAL_TIM_PWM_Start+0x13e>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a3c      	ldr	r2, [pc, #240]	; (800b0c8 <HAL_TIM_PWM_Start+0x20c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d00e      	beq.n	800affa <HAL_TIM_PWM_Start+0x13e>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a3a      	ldr	r2, [pc, #232]	; (800b0cc <HAL_TIM_PWM_Start+0x210>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d009      	beq.n	800affa <HAL_TIM_PWM_Start+0x13e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a39      	ldr	r2, [pc, #228]	; (800b0d0 <HAL_TIM_PWM_Start+0x214>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <HAL_TIM_PWM_Start+0x13e>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a37      	ldr	r2, [pc, #220]	; (800b0d4 <HAL_TIM_PWM_Start+0x218>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <HAL_TIM_PWM_Start+0x142>
 800affa:	2301      	movs	r3, #1
 800affc:	e000      	b.n	800b000 <HAL_TIM_PWM_Start+0x144>
 800affe:	2300      	movs	r3, #0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a2a      	ldr	r2, [pc, #168]	; (800b0c4 <HAL_TIM_PWM_Start+0x208>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d02c      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b026:	d027      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a2a      	ldr	r2, [pc, #168]	; (800b0d8 <HAL_TIM_PWM_Start+0x21c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d022      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a29      	ldr	r2, [pc, #164]	; (800b0dc <HAL_TIM_PWM_Start+0x220>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d01d      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a27      	ldr	r2, [pc, #156]	; (800b0e0 <HAL_TIM_PWM_Start+0x224>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d018      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a1f      	ldr	r2, [pc, #124]	; (800b0c8 <HAL_TIM_PWM_Start+0x20c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d013      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a23      	ldr	r2, [pc, #140]	; (800b0e4 <HAL_TIM_PWM_Start+0x228>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00e      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a1b      	ldr	r2, [pc, #108]	; (800b0cc <HAL_TIM_PWM_Start+0x210>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a1f      	ldr	r2, [pc, #124]	; (800b0e8 <HAL_TIM_PWM_Start+0x22c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d004      	beq.n	800b078 <HAL_TIM_PWM_Start+0x1bc>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a1e      	ldr	r2, [pc, #120]	; (800b0ec <HAL_TIM_PWM_Start+0x230>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d115      	bne.n	800b0a4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689a      	ldr	r2, [r3, #8]
 800b07e:	4b1c      	ldr	r3, [pc, #112]	; (800b0f0 <HAL_TIM_PWM_Start+0x234>)
 800b080:	4013      	ands	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b06      	cmp	r3, #6
 800b088:	d015      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x1fa>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b090:	d011      	beq.n	800b0b6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f042 0201 	orr.w	r2, r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a2:	e008      	b.n	800b0b6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e000      	b.n	800b0b8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40010400 	.word	0x40010400
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	40014400 	.word	0x40014400
 800b0d4:	40014800 	.word	0x40014800
 800b0d8:	40000400 	.word	0x40000400
 800b0dc:	40000800 	.word	0x40000800
 800b0e0:	40000c00 	.word	0x40000c00
 800b0e4:	40001800 	.word	0x40001800
 800b0e8:	4000e000 	.word	0x4000e000
 800b0ec:	4000e400 	.word	0x4000e400
 800b0f0:	00010007 	.word	0x00010007

0800b0f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e08f      	b.n	800b228 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7f9 f833 	bl	8004188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6899      	ldr	r1, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <HAL_TIM_Encoder_Init+0x13c>)
 800b136:	400b      	ands	r3, r1
 800b138:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f000 fc5d 	bl	800ba04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	4b31      	ldr	r3, [pc, #196]	; (800b234 <HAL_TIM_Encoder_Init+0x140>)
 800b170:	4013      	ands	r3, r2
 800b172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	4313      	orrs	r3, r2
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4b2b      	ldr	r3, [pc, #172]	; (800b238 <HAL_TIM_Encoder_Init+0x144>)
 800b18a:	4013      	ands	r3, r2
 800b18c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	4b2a      	ldr	r3, [pc, #168]	; (800b23c <HAL_TIM_Encoder_Init+0x148>)
 800b192:	4013      	ands	r3, r2
 800b194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	011a      	lsls	r2, r3, #4
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	031b      	lsls	r3, r3, #12
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b1c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b1ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	011b      	lsls	r3, r3, #4
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	fffebff8 	.word	0xfffebff8
 800b234:	fffffcfc 	.word	0xfffffcfc
 800b238:	fffff3f3 	.word	0xfffff3f3
 800b23c:	ffff0f0f 	.word	0xffff0f0f

0800b240 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b250:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b258:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b260:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b268:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d110      	bne.n	800b292 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d102      	bne.n	800b27c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b276:	7b7b      	ldrb	r3, [r7, #13]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d001      	beq.n	800b280 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e069      	b.n	800b354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b290:	e031      	b.n	800b2f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d110      	bne.n	800b2ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d102      	bne.n	800b2a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b29e:	7b3b      	ldrb	r3, [r7, #12]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d001      	beq.n	800b2a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e055      	b.n	800b354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b8:	e01d      	b.n	800b2f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d108      	bne.n	800b2d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d105      	bne.n	800b2d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2c6:	7b7b      	ldrb	r3, [r7, #13]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d102      	bne.n	800b2d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2cc:	7b3b      	ldrb	r3, [r7, #12]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d001      	beq.n	800b2d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e03e      	b.n	800b354 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <HAL_TIM_Encoder_Start+0xc4>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d008      	beq.n	800b314 <HAL_TIM_Encoder_Start+0xd4>
 800b302:	e00f      	b.n	800b324 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2201      	movs	r2, #1
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 ff93 	bl	800c238 <TIM_CCxChannelCmd>
      break;
 800b312:	e016      	b.n	800b342 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2201      	movs	r2, #1
 800b31a:	2104      	movs	r1, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 ff8b 	bl	800c238 <TIM_CCxChannelCmd>
      break;
 800b322:	e00e      	b.n	800b342 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2201      	movs	r2, #1
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 ff83 	bl	800c238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2201      	movs	r2, #1
 800b338:	2104      	movs	r1, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 ff7c 	bl	800c238 <TIM_CCxChannelCmd>
      break;
 800b340:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f042 0201 	orr.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d122      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d11b      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 0202 	mvn.w	r2, #2
 800b388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	f003 0303 	and.w	r3, r3, #3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fb12 	bl	800b9c8 <HAL_TIM_IC_CaptureCallback>
 800b3a4:	e005      	b.n	800b3b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fb04 	bl	800b9b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fb15 	bl	800b9dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d122      	bne.n	800b40c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d11b      	bne.n	800b40c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f06f 0204 	mvn.w	r2, #4
 800b3dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fae8 	bl	800b9c8 <HAL_TIM_IC_CaptureCallback>
 800b3f8:	e005      	b.n	800b406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fada 	bl	800b9b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 faeb 	bl	800b9dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	f003 0308 	and.w	r3, r3, #8
 800b416:	2b08      	cmp	r3, #8
 800b418:	d122      	bne.n	800b460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f003 0308 	and.w	r3, r3, #8
 800b424:	2b08      	cmp	r3, #8
 800b426:	d11b      	bne.n	800b460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f06f 0208 	mvn.w	r2, #8
 800b430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2204      	movs	r2, #4
 800b436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fabe 	bl	800b9c8 <HAL_TIM_IC_CaptureCallback>
 800b44c:	e005      	b.n	800b45a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fab0 	bl	800b9b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fac1 	bl	800b9dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	f003 0310 	and.w	r3, r3, #16
 800b46a:	2b10      	cmp	r3, #16
 800b46c:	d122      	bne.n	800b4b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	f003 0310 	and.w	r3, r3, #16
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d11b      	bne.n	800b4b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f06f 0210 	mvn.w	r2, #16
 800b484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2208      	movs	r2, #8
 800b48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa94 	bl	800b9c8 <HAL_TIM_IC_CaptureCallback>
 800b4a0:	e005      	b.n	800b4ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fa86 	bl	800b9b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fa97 	bl	800b9dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d10e      	bne.n	800b4e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d107      	bne.n	800b4e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f06f 0201 	mvn.w	r2, #1
 800b4d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7f9 fa58 	bl	8004990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ea:	2b80      	cmp	r3, #128	; 0x80
 800b4ec:	d10e      	bne.n	800b50c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f8:	2b80      	cmp	r3, #128	; 0x80
 800b4fa:	d107      	bne.n	800b50c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f001 f802 	bl	800c510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b51a:	d10e      	bne.n	800b53a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b526:	2b80      	cmp	r3, #128	; 0x80
 800b528:	d107      	bne.n	800b53a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fff5 	bl	800c524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b544:	2b40      	cmp	r3, #64	; 0x40
 800b546:	d10e      	bne.n	800b566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b552:	2b40      	cmp	r3, #64	; 0x40
 800b554:	d107      	bne.n	800b566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fa45 	bl	800b9f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	f003 0320 	and.w	r3, r3, #32
 800b570:	2b20      	cmp	r3, #32
 800b572:	d10e      	bne.n	800b592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	f003 0320 	and.w	r3, r3, #32
 800b57e:	2b20      	cmp	r3, #32
 800b580:	d107      	bne.n	800b592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f06f 0220 	mvn.w	r2, #32
 800b58a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 ffb5 	bl	800c4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b592:	bf00      	nop
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e0ff      	b.n	800b7ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b14      	cmp	r3, #20
 800b5c6:	f200 80f0 	bhi.w	800b7aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b625 	.word	0x0800b625
 800b5d4:	0800b7ab 	.word	0x0800b7ab
 800b5d8:	0800b7ab 	.word	0x0800b7ab
 800b5dc:	0800b7ab 	.word	0x0800b7ab
 800b5e0:	0800b665 	.word	0x0800b665
 800b5e4:	0800b7ab 	.word	0x0800b7ab
 800b5e8:	0800b7ab 	.word	0x0800b7ab
 800b5ec:	0800b7ab 	.word	0x0800b7ab
 800b5f0:	0800b6a7 	.word	0x0800b6a7
 800b5f4:	0800b7ab 	.word	0x0800b7ab
 800b5f8:	0800b7ab 	.word	0x0800b7ab
 800b5fc:	0800b7ab 	.word	0x0800b7ab
 800b600:	0800b6e7 	.word	0x0800b6e7
 800b604:	0800b7ab 	.word	0x0800b7ab
 800b608:	0800b7ab 	.word	0x0800b7ab
 800b60c:	0800b7ab 	.word	0x0800b7ab
 800b610:	0800b729 	.word	0x0800b729
 800b614:	0800b7ab 	.word	0x0800b7ab
 800b618:	0800b7ab 	.word	0x0800b7ab
 800b61c:	0800b7ab 	.word	0x0800b7ab
 800b620:	0800b769 	.word	0x0800b769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fa90 	bl	800bb50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	699a      	ldr	r2, [r3, #24]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f042 0208 	orr.w	r2, r2, #8
 800b63e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	699a      	ldr	r2, [r3, #24]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f022 0204 	bic.w	r2, r2, #4
 800b64e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6999      	ldr	r1, [r3, #24]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	691a      	ldr	r2, [r3, #16]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	619a      	str	r2, [r3, #24]
      break;
 800b662:	e0a5      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fb00 	bl	800bc70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699a      	ldr	r2, [r3, #24]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	699a      	ldr	r2, [r3, #24]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6999      	ldr	r1, [r3, #24]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	021a      	lsls	r2, r3, #8
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	619a      	str	r2, [r3, #24]
      break;
 800b6a4:	e084      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fb69 	bl	800bd84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69da      	ldr	r2, [r3, #28]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f042 0208 	orr.w	r2, r2, #8
 800b6c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69da      	ldr	r2, [r3, #28]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f022 0204 	bic.w	r2, r2, #4
 800b6d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	69d9      	ldr	r1, [r3, #28]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	61da      	str	r2, [r3, #28]
      break;
 800b6e4:	e064      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fbd1 	bl	800be94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69da      	ldr	r2, [r3, #28]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69da      	ldr	r2, [r3, #28]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69d9      	ldr	r1, [r3, #28]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	021a      	lsls	r2, r3, #8
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	61da      	str	r2, [r3, #28]
      break;
 800b726:	e043      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 fc1a 	bl	800bf68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0208 	orr.w	r2, r2, #8
 800b742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0204 	bic.w	r2, r2, #4
 800b752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	691a      	ldr	r2, [r3, #16]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b766:	e023      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 fc5e 	bl	800c030 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	021a      	lsls	r2, r3, #8
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b7a8:	e002      	b.n	800b7b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop

0800b7c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIM_ConfigClockSource+0x1c>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e0dc      	b.n	800b99a <HAL_TIM_ConfigClockSource+0x1d6>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	4b6a      	ldr	r3, [pc, #424]	; (800b9a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a64      	ldr	r2, [pc, #400]	; (800b9a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b816:	4293      	cmp	r3, r2
 800b818:	f000 80a9 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b81c:	4a62      	ldr	r2, [pc, #392]	; (800b9a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	f200 80ae 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b824:	4a61      	ldr	r2, [pc, #388]	; (800b9ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	f000 80a1 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b82c:	4a5f      	ldr	r2, [pc, #380]	; (800b9ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	f200 80a6 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b834:	4a5e      	ldr	r2, [pc, #376]	; (800b9b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b836:	4293      	cmp	r3, r2
 800b838:	f000 8099 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b83c:	4a5c      	ldr	r2, [pc, #368]	; (800b9b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f200 809e 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b844:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b848:	f000 8091 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b84c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b850:	f200 8096 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b858:	f000 8089 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b85c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b860:	f200 808e 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b868:	d03e      	beq.n	800b8e8 <HAL_TIM_ConfigClockSource+0x124>
 800b86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b86e:	f200 8087 	bhi.w	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b876:	f000 8086 	beq.w	800b986 <HAL_TIM_ConfigClockSource+0x1c2>
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87e:	d87f      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b880:	2b70      	cmp	r3, #112	; 0x70
 800b882:	d01a      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0xf6>
 800b884:	2b70      	cmp	r3, #112	; 0x70
 800b886:	d87b      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b888:	2b60      	cmp	r3, #96	; 0x60
 800b88a:	d050      	beq.n	800b92e <HAL_TIM_ConfigClockSource+0x16a>
 800b88c:	2b60      	cmp	r3, #96	; 0x60
 800b88e:	d877      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b890:	2b50      	cmp	r3, #80	; 0x50
 800b892:	d03c      	beq.n	800b90e <HAL_TIM_ConfigClockSource+0x14a>
 800b894:	2b50      	cmp	r3, #80	; 0x50
 800b896:	d873      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b898:	2b40      	cmp	r3, #64	; 0x40
 800b89a:	d058      	beq.n	800b94e <HAL_TIM_ConfigClockSource+0x18a>
 800b89c:	2b40      	cmp	r3, #64	; 0x40
 800b89e:	d86f      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a0:	2b30      	cmp	r3, #48	; 0x30
 800b8a2:	d064      	beq.n	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a4:	2b30      	cmp	r3, #48	; 0x30
 800b8a6:	d86b      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a8:	2b20      	cmp	r3, #32
 800b8aa:	d060      	beq.n	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d867      	bhi.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d05c      	beq.n	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b4:	2b10      	cmp	r3, #16
 800b8b6:	d05a      	beq.n	800b96e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b8:	e062      	b.n	800b980 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	6899      	ldr	r1, [r3, #8]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f000 fc95 	bl	800c1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	609a      	str	r2, [r3, #8]
      break;
 800b8e6:	e04f      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6818      	ldr	r0, [r3, #0]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	6899      	ldr	r1, [r3, #8]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	f000 fc7e 	bl	800c1f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b90a:	609a      	str	r2, [r3, #8]
      break;
 800b90c:	e03c      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	6859      	ldr	r1, [r3, #4]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	461a      	mov	r2, r3
 800b91c:	f000 fbee 	bl	800c0fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2150      	movs	r1, #80	; 0x50
 800b926:	4618      	mov	r0, r3
 800b928:	f000 fc48 	bl	800c1bc <TIM_ITRx_SetConfig>
      break;
 800b92c:	e02c      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	6859      	ldr	r1, [r3, #4]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	461a      	mov	r2, r3
 800b93c:	f000 fc0d 	bl	800c15a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2160      	movs	r1, #96	; 0x60
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fc38 	bl	800c1bc <TIM_ITRx_SetConfig>
      break;
 800b94c:	e01c      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	6859      	ldr	r1, [r3, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f000 fbce 	bl	800c0fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2140      	movs	r1, #64	; 0x40
 800b966:	4618      	mov	r0, r3
 800b968:	f000 fc28 	bl	800c1bc <TIM_ITRx_SetConfig>
      break;
 800b96c:	e00c      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4619      	mov	r1, r3
 800b978:	4610      	mov	r0, r2
 800b97a:	f000 fc1f 	bl	800c1bc <TIM_ITRx_SetConfig>
      break;
 800b97e:	e003      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	73fb      	strb	r3, [r7, #15]
      break;
 800b984:	e000      	b.n	800b988 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	ffceff88 	.word	0xffceff88
 800b9a8:	00100040 	.word	0x00100040
 800b9ac:	00100030 	.word	0x00100030
 800b9b0:	00100020 	.word	0x00100020

0800b9b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a44      	ldr	r2, [pc, #272]	; (800bb28 <TIM_Base_SetConfig+0x124>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d013      	beq.n	800ba44 <TIM_Base_SetConfig+0x40>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba22:	d00f      	beq.n	800ba44 <TIM_Base_SetConfig+0x40>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a41      	ldr	r2, [pc, #260]	; (800bb2c <TIM_Base_SetConfig+0x128>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d00b      	beq.n	800ba44 <TIM_Base_SetConfig+0x40>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a40      	ldr	r2, [pc, #256]	; (800bb30 <TIM_Base_SetConfig+0x12c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d007      	beq.n	800ba44 <TIM_Base_SetConfig+0x40>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a3f      	ldr	r2, [pc, #252]	; (800bb34 <TIM_Base_SetConfig+0x130>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d003      	beq.n	800ba44 <TIM_Base_SetConfig+0x40>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a3e      	ldr	r2, [pc, #248]	; (800bb38 <TIM_Base_SetConfig+0x134>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d108      	bne.n	800ba56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a33      	ldr	r2, [pc, #204]	; (800bb28 <TIM_Base_SetConfig+0x124>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d027      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba64:	d023      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a30      	ldr	r2, [pc, #192]	; (800bb2c <TIM_Base_SetConfig+0x128>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d01f      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a2f      	ldr	r2, [pc, #188]	; (800bb30 <TIM_Base_SetConfig+0x12c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d01b      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a2e      	ldr	r2, [pc, #184]	; (800bb34 <TIM_Base_SetConfig+0x130>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d017      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a2d      	ldr	r2, [pc, #180]	; (800bb38 <TIM_Base_SetConfig+0x134>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d013      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a2c      	ldr	r2, [pc, #176]	; (800bb3c <TIM_Base_SetConfig+0x138>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d00f      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a2b      	ldr	r2, [pc, #172]	; (800bb40 <TIM_Base_SetConfig+0x13c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d00b      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a2a      	ldr	r2, [pc, #168]	; (800bb44 <TIM_Base_SetConfig+0x140>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d007      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a29      	ldr	r2, [pc, #164]	; (800bb48 <TIM_Base_SetConfig+0x144>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d003      	beq.n	800baae <TIM_Base_SetConfig+0xaa>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a28      	ldr	r2, [pc, #160]	; (800bb4c <TIM_Base_SetConfig+0x148>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d108      	bne.n	800bac0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	4313      	orrs	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <TIM_Base_SetConfig+0x124>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00f      	beq.n	800bb0c <TIM_Base_SetConfig+0x108>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a12      	ldr	r2, [pc, #72]	; (800bb38 <TIM_Base_SetConfig+0x134>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d00b      	beq.n	800bb0c <TIM_Base_SetConfig+0x108>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a11      	ldr	r2, [pc, #68]	; (800bb3c <TIM_Base_SetConfig+0x138>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d007      	beq.n	800bb0c <TIM_Base_SetConfig+0x108>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a10      	ldr	r2, [pc, #64]	; (800bb40 <TIM_Base_SetConfig+0x13c>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d003      	beq.n	800bb0c <TIM_Base_SetConfig+0x108>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a0f      	ldr	r2, [pc, #60]	; (800bb44 <TIM_Base_SetConfig+0x140>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d103      	bne.n	800bb14 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	691a      	ldr	r2, [r3, #16]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	615a      	str	r2, [r3, #20]
}
 800bb1a:	bf00      	nop
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	40010000 	.word	0x40010000
 800bb2c:	40000400 	.word	0x40000400
 800bb30:	40000800 	.word	0x40000800
 800bb34:	40000c00 	.word	0x40000c00
 800bb38:	40010400 	.word	0x40010400
 800bb3c:	40014000 	.word	0x40014000
 800bb40:	40014400 	.word	0x40014400
 800bb44:	40014800 	.word	0x40014800
 800bb48:	4000e000 	.word	0x4000e000
 800bb4c:	4000e400 	.word	0x4000e400

0800bb50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	f023 0201 	bic.w	r2, r3, #1
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	4b37      	ldr	r3, [pc, #220]	; (800bc58 <TIM_OC1_SetConfig+0x108>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f023 0302 	bic.w	r3, r3, #2
 800bb98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a2d      	ldr	r2, [pc, #180]	; (800bc5c <TIM_OC1_SetConfig+0x10c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d00f      	beq.n	800bbcc <TIM_OC1_SetConfig+0x7c>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a2c      	ldr	r2, [pc, #176]	; (800bc60 <TIM_OC1_SetConfig+0x110>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d00b      	beq.n	800bbcc <TIM_OC1_SetConfig+0x7c>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a2b      	ldr	r2, [pc, #172]	; (800bc64 <TIM_OC1_SetConfig+0x114>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d007      	beq.n	800bbcc <TIM_OC1_SetConfig+0x7c>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a2a      	ldr	r2, [pc, #168]	; (800bc68 <TIM_OC1_SetConfig+0x118>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d003      	beq.n	800bbcc <TIM_OC1_SetConfig+0x7c>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a29      	ldr	r2, [pc, #164]	; (800bc6c <TIM_OC1_SetConfig+0x11c>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d10c      	bne.n	800bbe6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f023 0308 	bic.w	r3, r3, #8
 800bbd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f023 0304 	bic.w	r3, r3, #4
 800bbe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a1c      	ldr	r2, [pc, #112]	; (800bc5c <TIM_OC1_SetConfig+0x10c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00f      	beq.n	800bc0e <TIM_OC1_SetConfig+0xbe>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a1b      	ldr	r2, [pc, #108]	; (800bc60 <TIM_OC1_SetConfig+0x110>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00b      	beq.n	800bc0e <TIM_OC1_SetConfig+0xbe>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <TIM_OC1_SetConfig+0x114>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d007      	beq.n	800bc0e <TIM_OC1_SetConfig+0xbe>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a19      	ldr	r2, [pc, #100]	; (800bc68 <TIM_OC1_SetConfig+0x118>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d003      	beq.n	800bc0e <TIM_OC1_SetConfig+0xbe>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a18      	ldr	r2, [pc, #96]	; (800bc6c <TIM_OC1_SetConfig+0x11c>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d111      	bne.n	800bc32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	621a      	str	r2, [r3, #32]
}
 800bc4c:	bf00      	nop
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	fffeff8f 	.word	0xfffeff8f
 800bc5c:	40010000 	.word	0x40010000
 800bc60:	40010400 	.word	0x40010400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800

0800bc70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	f023 0210 	bic.w	r2, r3, #16
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	4b34      	ldr	r3, [pc, #208]	; (800bd6c <TIM_OC2_SetConfig+0xfc>)
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f023 0320 	bic.w	r3, r3, #32
 800bcba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	011b      	lsls	r3, r3, #4
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a29      	ldr	r2, [pc, #164]	; (800bd70 <TIM_OC2_SetConfig+0x100>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <TIM_OC2_SetConfig+0x68>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a28      	ldr	r2, [pc, #160]	; (800bd74 <TIM_OC2_SetConfig+0x104>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d10d      	bne.n	800bcf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a1e      	ldr	r2, [pc, #120]	; (800bd70 <TIM_OC2_SetConfig+0x100>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00f      	beq.n	800bd1c <TIM_OC2_SetConfig+0xac>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a1d      	ldr	r2, [pc, #116]	; (800bd74 <TIM_OC2_SetConfig+0x104>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00b      	beq.n	800bd1c <TIM_OC2_SetConfig+0xac>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a1c      	ldr	r2, [pc, #112]	; (800bd78 <TIM_OC2_SetConfig+0x108>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d007      	beq.n	800bd1c <TIM_OC2_SetConfig+0xac>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a1b      	ldr	r2, [pc, #108]	; (800bd7c <TIM_OC2_SetConfig+0x10c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <TIM_OC2_SetConfig+0xac>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a1a      	ldr	r2, [pc, #104]	; (800bd80 <TIM_OC2_SetConfig+0x110>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d113      	bne.n	800bd44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	621a      	str	r2, [r3, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	feff8fff 	.word	0xfeff8fff
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40010400 	.word	0x40010400
 800bd78:	40014000 	.word	0x40014000
 800bd7c:	40014400 	.word	0x40014400
 800bd80:	40014800 	.word	0x40014800

0800bd84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b087      	sub	sp, #28
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4b33      	ldr	r3, [pc, #204]	; (800be7c <TIM_OC3_SetConfig+0xf8>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0303 	bic.w	r3, r3, #3
 800bdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a28      	ldr	r2, [pc, #160]	; (800be80 <TIM_OC3_SetConfig+0xfc>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_OC3_SetConfig+0x66>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a27      	ldr	r2, [pc, #156]	; (800be84 <TIM_OC3_SetConfig+0x100>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d10d      	bne.n	800be06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a1d      	ldr	r2, [pc, #116]	; (800be80 <TIM_OC3_SetConfig+0xfc>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d00f      	beq.n	800be2e <TIM_OC3_SetConfig+0xaa>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a1c      	ldr	r2, [pc, #112]	; (800be84 <TIM_OC3_SetConfig+0x100>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d00b      	beq.n	800be2e <TIM_OC3_SetConfig+0xaa>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a1b      	ldr	r2, [pc, #108]	; (800be88 <TIM_OC3_SetConfig+0x104>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d007      	beq.n	800be2e <TIM_OC3_SetConfig+0xaa>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a1a      	ldr	r2, [pc, #104]	; (800be8c <TIM_OC3_SetConfig+0x108>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d003      	beq.n	800be2e <TIM_OC3_SetConfig+0xaa>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a19      	ldr	r2, [pc, #100]	; (800be90 <TIM_OC3_SetConfig+0x10c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d113      	bne.n	800be56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	4313      	orrs	r3, r2
 800be48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4313      	orrs	r3, r2
 800be54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	621a      	str	r2, [r3, #32]
}
 800be70:	bf00      	nop
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	fffeff8f 	.word	0xfffeff8f
 800be80:	40010000 	.word	0x40010000
 800be84:	40010400 	.word	0x40010400
 800be88:	40014000 	.word	0x40014000
 800be8c:	40014400 	.word	0x40014400
 800be90:	40014800 	.word	0x40014800

0800be94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <TIM_OC4_SetConfig+0xbc>)
 800bec0:	4013      	ands	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	031b      	lsls	r3, r3, #12
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	4313      	orrs	r3, r2
 800beea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a19      	ldr	r2, [pc, #100]	; (800bf54 <TIM_OC4_SetConfig+0xc0>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00f      	beq.n	800bf14 <TIM_OC4_SetConfig+0x80>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a18      	ldr	r2, [pc, #96]	; (800bf58 <TIM_OC4_SetConfig+0xc4>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d00b      	beq.n	800bf14 <TIM_OC4_SetConfig+0x80>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a17      	ldr	r2, [pc, #92]	; (800bf5c <TIM_OC4_SetConfig+0xc8>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d007      	beq.n	800bf14 <TIM_OC4_SetConfig+0x80>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a16      	ldr	r2, [pc, #88]	; (800bf60 <TIM_OC4_SetConfig+0xcc>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_OC4_SetConfig+0x80>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a15      	ldr	r2, [pc, #84]	; (800bf64 <TIM_OC4_SetConfig+0xd0>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d109      	bne.n	800bf28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	019b      	lsls	r3, r3, #6
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	feff8fff 	.word	0xfeff8fff
 800bf54:	40010000 	.word	0x40010000
 800bf58:	40010400 	.word	0x40010400
 800bf5c:	40014000 	.word	0x40014000
 800bf60:	40014400 	.word	0x40014400
 800bf64:	40014800 	.word	0x40014800

0800bf68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4b21      	ldr	r3, [pc, #132]	; (800c018 <TIM_OC5_SetConfig+0xb0>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bfa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a18      	ldr	r2, [pc, #96]	; (800c01c <TIM_OC5_SetConfig+0xb4>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00f      	beq.n	800bfde <TIM_OC5_SetConfig+0x76>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a17      	ldr	r2, [pc, #92]	; (800c020 <TIM_OC5_SetConfig+0xb8>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00b      	beq.n	800bfde <TIM_OC5_SetConfig+0x76>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a16      	ldr	r2, [pc, #88]	; (800c024 <TIM_OC5_SetConfig+0xbc>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d007      	beq.n	800bfde <TIM_OC5_SetConfig+0x76>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a15      	ldr	r2, [pc, #84]	; (800c028 <TIM_OC5_SetConfig+0xc0>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d003      	beq.n	800bfde <TIM_OC5_SetConfig+0x76>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a14      	ldr	r2, [pc, #80]	; (800c02c <TIM_OC5_SetConfig+0xc4>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d109      	bne.n	800bff2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	021b      	lsls	r3, r3, #8
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	621a      	str	r2, [r3, #32]
}
 800c00c:	bf00      	nop
 800c00e:	371c      	adds	r7, #28
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	fffeff8f 	.word	0xfffeff8f
 800c01c:	40010000 	.word	0x40010000
 800c020:	40010400 	.word	0x40010400
 800c024:	40014000 	.word	0x40014000
 800c028:	40014400 	.word	0x40014400
 800c02c:	40014800 	.word	0x40014800

0800c030 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c030:	b480      	push	{r7}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4b22      	ldr	r3, [pc, #136]	; (800c0e4 <TIM_OC6_SetConfig+0xb4>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	051b      	lsls	r3, r3, #20
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a19      	ldr	r2, [pc, #100]	; (800c0e8 <TIM_OC6_SetConfig+0xb8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d00f      	beq.n	800c0a8 <TIM_OC6_SetConfig+0x78>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a18      	ldr	r2, [pc, #96]	; (800c0ec <TIM_OC6_SetConfig+0xbc>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d00b      	beq.n	800c0a8 <TIM_OC6_SetConfig+0x78>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a17      	ldr	r2, [pc, #92]	; (800c0f0 <TIM_OC6_SetConfig+0xc0>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d007      	beq.n	800c0a8 <TIM_OC6_SetConfig+0x78>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a16      	ldr	r2, [pc, #88]	; (800c0f4 <TIM_OC6_SetConfig+0xc4>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d003      	beq.n	800c0a8 <TIM_OC6_SetConfig+0x78>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a15      	ldr	r2, [pc, #84]	; (800c0f8 <TIM_OC6_SetConfig+0xc8>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d109      	bne.n	800c0bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	695b      	ldr	r3, [r3, #20]
 800c0b4:	029b      	lsls	r3, r3, #10
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	621a      	str	r2, [r3, #32]
}
 800c0d6:	bf00      	nop
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	feff8fff 	.word	0xfeff8fff
 800c0e8:	40010000 	.word	0x40010000
 800c0ec:	40010400 	.word	0x40010400
 800c0f0:	40014000 	.word	0x40014000
 800c0f4:	40014400 	.word	0x40014400
 800c0f8:	40014800 	.word	0x40014800

0800c0fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b087      	sub	sp, #28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	f023 0201 	bic.w	r2, r3, #1
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	011b      	lsls	r3, r3, #4
 800c12c:	693a      	ldr	r2, [r7, #16]
 800c12e:	4313      	orrs	r3, r2
 800c130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f023 030a 	bic.w	r3, r3, #10
 800c138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	4313      	orrs	r3, r2
 800c140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	621a      	str	r2, [r3, #32]
}
 800c14e:	bf00      	nop
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b087      	sub	sp, #28
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f023 0210 	bic.w	r2, r3, #16
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	031b      	lsls	r3, r3, #12
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	011b      	lsls	r3, r3, #4
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	693a      	ldr	r2, [r7, #16]
 800c1ac:	621a      	str	r2, [r3, #32]
}
 800c1ae:	bf00      	nop
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
	...

0800c1bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <TIM_ITRx_SetConfig+0x38>)
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	f043 0307 	orr.w	r3, r3, #7
 800c1de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	609a      	str	r2, [r3, #8]
}
 800c1e6:	bf00      	nop
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	ffcfff8f 	.word	0xffcfff8f

0800c1f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	021a      	lsls	r2, r3, #8
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	431a      	orrs	r2, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	4313      	orrs	r3, r2
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	4313      	orrs	r3, r2
 800c224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	609a      	str	r2, [r3, #8]
}
 800c22c:	bf00      	nop
 800c22e:	371c      	adds	r7, #28
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f003 031f 	and.w	r3, r3, #31
 800c24a:	2201      	movs	r2, #1
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a1a      	ldr	r2, [r3, #32]
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	43db      	mvns	r3, r3
 800c25a:	401a      	ands	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a1a      	ldr	r2, [r3, #32]
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f003 031f 	and.w	r3, r3, #31
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	fa01 f303 	lsl.w	r3, r1, r3
 800c270:	431a      	orrs	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	621a      	str	r2, [r3, #32]
}
 800c276:	bf00      	nop
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c298:	2302      	movs	r3, #2
 800c29a:	e077      	b.n	800c38c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a35      	ldr	r2, [pc, #212]	; (800c398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d004      	beq.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a34      	ldr	r2, [pc, #208]	; (800c39c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d108      	bne.n	800c2e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a25      	ldr	r2, [pc, #148]	; (800c398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d02c      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c30e:	d027      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a22      	ldr	r2, [pc, #136]	; (800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d022      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a21      	ldr	r2, [pc, #132]	; (800c3a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d01d      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d018      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a1a      	ldr	r2, [pc, #104]	; (800c39c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d013      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a1b      	ldr	r2, [pc, #108]	; (800c3ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00e      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a1a      	ldr	r2, [pc, #104]	; (800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d009      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d004      	beq.n	800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a17      	ldr	r2, [pc, #92]	; (800c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d10c      	bne.n	800c37a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	4313      	orrs	r3, r2
 800c370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	40010000 	.word	0x40010000
 800c39c:	40010400 	.word	0x40010400
 800c3a0:	40000400 	.word	0x40000400
 800c3a4:	40000800 	.word	0x40000800
 800c3a8:	40000c00 	.word	0x40000c00
 800c3ac:	40001800 	.word	0x40001800
 800c3b0:	40014000 	.word	0x40014000
 800c3b4:	4000e000 	.word	0x4000e000
 800c3b8:	4000e400 	.word	0x4000e400

0800c3bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d101      	bne.n	800c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	e087      	b.n	800c4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	4313      	orrs	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	695b      	ldr	r3, [r3, #20]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	041b      	lsls	r3, r3, #16
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a27      	ldr	r2, [pc, #156]	; (800c4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d004      	beq.n	800c466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a25      	ldr	r2, [pc, #148]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d106      	bne.n	800c474 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a1e      	ldr	r2, [pc, #120]	; (800c4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d004      	beq.n	800c488 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1d      	ldr	r2, [pc, #116]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d126      	bne.n	800c4d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	051b      	lsls	r3, r3, #20
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d004      	beq.n	800c4c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a0d      	ldr	r2, [pc, #52]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d106      	bne.n	800c4d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	40010000 	.word	0x40010000
 800c4f8:	40010400 	.word	0x40010400

0800c4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e042      	b.n	800c5d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c550:	2b00      	cmp	r3, #0
 800c552:	d106      	bne.n	800c562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7f7 ffc5 	bl	80044ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2224      	movs	r2, #36	; 0x24
 800c566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f022 0201 	bic.w	r2, r2, #1
 800c578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fd0e 	bl	800cf9c <UART_SetConfig>
 800c580:	4603      	mov	r3, r0
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e022      	b.n	800c5d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 fb6e 	bl	800dc74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	689a      	ldr	r2, [r3, #8]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f042 0201 	orr.w	r2, r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 fbf5 	bl	800ddb8 <UART_CheckIdleState>
 800c5ce:	4603      	mov	r3, r0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e02e      	b.n	800c648 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2224      	movs	r2, #36	; 0x24
 800c5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0201 	bic.w	r2, r2, #1
 800c600:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2200      	movs	r2, #0
 800c608:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2200      	movs	r2, #0
 800c610:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2200      	movs	r2, #0
 800c618:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7f8 f84e 	bl	80046bc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08a      	sub	sp, #40	; 0x28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c664:	2b20      	cmp	r3, #32
 800c666:	d17a      	bne.n	800c75e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <HAL_UART_Transmit_DMA+0x24>
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	e073      	b.n	800c760 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d101      	bne.n	800c686 <HAL_UART_Transmit_DMA+0x36>
 800c682:	2302      	movs	r3, #2
 800c684:	e06c      	b.n	800c760 <HAL_UART_Transmit_DMA+0x110>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	88fa      	ldrh	r2, [r7, #6]
 800c698:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	88fa      	ldrh	r2, [r7, #6]
 800c6a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2221      	movs	r2, #33	; 0x21
 800c6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d02c      	beq.n	800c716 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c0:	4a29      	ldr	r2, [pc, #164]	; (800c768 <HAL_UART_Transmit_DMA+0x118>)
 800c6c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c8:	4a28      	ldr	r2, [pc, #160]	; (800c76c <HAL_UART_Transmit_DMA+0x11c>)
 800c6ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6d0:	4a27      	ldr	r2, [pc, #156]	; (800c770 <HAL_UART_Transmit_DMA+0x120>)
 800c6d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6d8:	2200      	movs	r2, #0
 800c6da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3328      	adds	r3, #40	; 0x28
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	f7f9 fa56 	bl	8005ba0 <HAL_DMA_Start_IT>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00d      	beq.n	800c716 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2210      	movs	r2, #16
 800c6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e024      	b.n	800c760 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2240      	movs	r2, #64	; 0x40
 800c71c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	e853 3f00 	ldrex	r3, [r3]
 800c734:	613b      	str	r3, [r7, #16]
   return(result);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c73c:	627b      	str	r3, [r7, #36]	; 0x24
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3308      	adds	r3, #8
 800c744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c746:	623a      	str	r2, [r7, #32]
 800c748:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74a:	69f9      	ldr	r1, [r7, #28]
 800c74c:	6a3a      	ldr	r2, [r7, #32]
 800c74e:	e841 2300 	strex	r3, r2, [r1]
 800c752:	61bb      	str	r3, [r7, #24]
   return(result);
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1e5      	bne.n	800c726 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	e000      	b.n	800c760 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c75e:	2302      	movs	r3, #2
  }
}
 800c760:	4618      	mov	r0, r3
 800c762:	3728      	adds	r7, #40	; 0x28
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	0800e281 	.word	0x0800e281
 800c76c:	0800e317 	.word	0x0800e317
 800c770:	0800e48d 	.word	0x0800e48d

0800c774 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08a      	sub	sp, #40	; 0x28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c788:	2b20      	cmp	r3, #32
 800c78a:	d142      	bne.n	800c812 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <HAL_UART_Receive_DMA+0x24>
 800c792:	88fb      	ldrh	r3, [r7, #6]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e03b      	b.n	800c814 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d101      	bne.n	800c7aa <HAL_UART_Receive_DMA+0x36>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e034      	b.n	800c814 <HAL_UART_Receive_DMA+0xa0>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a17      	ldr	r2, [pc, #92]	; (800c81c <HAL_UART_Receive_DMA+0xa8>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d01f      	beq.n	800c802 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d018      	beq.n	800c802 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	e853 3f00 	ldrex	r3, [r3]
 800c7dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	623b      	str	r3, [r7, #32]
 800c7f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f2:	69f9      	ldr	r1, [r7, #28]
 800c7f4:	6a3a      	ldr	r2, [r7, #32]
 800c7f6:	e841 2300 	strex	r3, r2, [r1]
 800c7fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1e6      	bne.n	800c7d0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c802:	88fb      	ldrh	r3, [r7, #6]
 800c804:	461a      	mov	r2, r3
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f001 fbe9 	bl	800dfe0 <UART_Start_Receive_DMA>
 800c80e:	4603      	mov	r3, r0
 800c810:	e000      	b.n	800c814 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c812:	2302      	movs	r3, #2
  }
}
 800c814:	4618      	mov	r0, r3
 800c816:	3728      	adds	r7, #40	; 0x28
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	58000c00 	.word	0x58000c00

0800c820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b0ba      	sub	sp, #232	; 0xe8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69db      	ldr	r3, [r3, #28]
 800c82e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c84a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c84e:	4013      	ands	r3, r2
 800c850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d11b      	bne.n	800c894 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c860:	f003 0320 	and.w	r3, r3, #32
 800c864:	2b00      	cmp	r3, #0
 800c866:	d015      	beq.n	800c894 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d009      	beq.n	800c894 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 835a 	beq.w	800cf3e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
      }
      return;
 800c892:	e354      	b.n	800cf3e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 811f 	beq.w	800cadc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c89e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c8a2:	4b8b      	ldr	r3, [pc, #556]	; (800cad0 <HAL_UART_IRQHandler+0x2b0>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d106      	bne.n	800c8b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c8aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c8ae:	4b89      	ldr	r3, [pc, #548]	; (800cad4 <HAL_UART_IRQHandler+0x2b4>)
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 8112 	beq.w	800cadc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d011      	beq.n	800c8e8 <HAL_UART_IRQHandler+0xc8>
 800c8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00b      	beq.n	800c8e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8de:	f043 0201 	orr.w	r2, r3, #1
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d011      	beq.n	800c918 <HAL_UART_IRQHandler+0xf8>
 800c8f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2202      	movs	r2, #2
 800c906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90e:	f043 0204 	orr.w	r2, r3, #4
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b00      	cmp	r3, #0
 800c922:	d011      	beq.n	800c948 <HAL_UART_IRQHandler+0x128>
 800c924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2204      	movs	r2, #4
 800c936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93e:	f043 0202 	orr.w	r2, r3, #2
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c94c:	f003 0308 	and.w	r3, r3, #8
 800c950:	2b00      	cmp	r3, #0
 800c952:	d017      	beq.n	800c984 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c958:	f003 0320 	and.w	r3, r3, #32
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d105      	bne.n	800c96c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c960:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c964:	4b5a      	ldr	r3, [pc, #360]	; (800cad0 <HAL_UART_IRQHandler+0x2b0>)
 800c966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00b      	beq.n	800c984 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2208      	movs	r2, #8
 800c972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c97a:	f043 0208 	orr.w	r2, r3, #8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d012      	beq.n	800c9b6 <HAL_UART_IRQHandler+0x196>
 800c990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00c      	beq.n	800c9b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ac:	f043 0220 	orr.w	r2, r3, #32
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 82c0 	beq.w	800cf42 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9c6:	f003 0320 	and.w	r3, r3, #32
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d013      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d105      	bne.n	800c9e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d007      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	d005      	beq.n	800ca1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d04f      	beq.n	800caba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f001 fbca 	bl	800e1b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca2a:	2b40      	cmp	r3, #64	; 0x40
 800ca2c:	d141      	bne.n	800cab2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3308      	adds	r3, #8
 800ca34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ca44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3308      	adds	r3, #8
 800ca56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ca5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ca5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ca66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca6a:	e841 2300 	strex	r3, r2, [r1]
 800ca6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ca72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1d9      	bne.n	800ca2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d013      	beq.n	800caaa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca86:	4a14      	ldr	r2, [pc, #80]	; (800cad8 <HAL_UART_IRQHandler+0x2b8>)
 800ca88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f9 fe0e 	bl	80066b0 <HAL_DMA_Abort_IT>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d017      	beq.n	800caca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800caa4:	4610      	mov	r0, r2
 800caa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa8:	e00f      	b.n	800caca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7f6 fb62 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cab0:	e00b      	b.n	800caca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f6 fb5e 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cab8:	e007      	b.n	800caca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7f6 fb5a 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cac8:	e23b      	b.n	800cf42 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caca:	bf00      	nop
    return;
 800cacc:	e239      	b.n	800cf42 <HAL_UART_IRQHandler+0x722>
 800cace:	bf00      	nop
 800cad0:	10000001 	.word	0x10000001
 800cad4:	04000120 	.word	0x04000120
 800cad8:	0800e50d 	.word	0x0800e50d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	f040 81ce 	bne.w	800ce82 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caea:	f003 0310 	and.w	r3, r3, #16
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 81c7 	beq.w	800ce82 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800caf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caf8:	f003 0310 	and.w	r3, r3, #16
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 81c0 	beq.w	800ce82 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2210      	movs	r2, #16
 800cb08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb14:	2b40      	cmp	r3, #64	; 0x40
 800cb16:	f040 813b 	bne.w	800cd90 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a8b      	ldr	r2, [pc, #556]	; (800cd50 <HAL_UART_IRQHandler+0x530>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d059      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a89      	ldr	r2, [pc, #548]	; (800cd54 <HAL_UART_IRQHandler+0x534>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d053      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a87      	ldr	r2, [pc, #540]	; (800cd58 <HAL_UART_IRQHandler+0x538>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d04d      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a85      	ldr	r2, [pc, #532]	; (800cd5c <HAL_UART_IRQHandler+0x53c>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d047      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a83      	ldr	r2, [pc, #524]	; (800cd60 <HAL_UART_IRQHandler+0x540>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d041      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a81      	ldr	r2, [pc, #516]	; (800cd64 <HAL_UART_IRQHandler+0x544>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d03b      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a7f      	ldr	r2, [pc, #508]	; (800cd68 <HAL_UART_IRQHandler+0x548>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d035      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a7d      	ldr	r2, [pc, #500]	; (800cd6c <HAL_UART_IRQHandler+0x54c>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d02f      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a7b      	ldr	r2, [pc, #492]	; (800cd70 <HAL_UART_IRQHandler+0x550>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d029      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a79      	ldr	r2, [pc, #484]	; (800cd74 <HAL_UART_IRQHandler+0x554>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d023      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a77      	ldr	r2, [pc, #476]	; (800cd78 <HAL_UART_IRQHandler+0x558>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d01d      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a75      	ldr	r2, [pc, #468]	; (800cd7c <HAL_UART_IRQHandler+0x55c>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d017      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a73      	ldr	r2, [pc, #460]	; (800cd80 <HAL_UART_IRQHandler+0x560>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d011      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a71      	ldr	r2, [pc, #452]	; (800cd84 <HAL_UART_IRQHandler+0x564>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00b      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a6f      	ldr	r2, [pc, #444]	; (800cd88 <HAL_UART_IRQHandler+0x568>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d005      	beq.n	800cbda <HAL_UART_IRQHandler+0x3ba>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a6d      	ldr	r2, [pc, #436]	; (800cd8c <HAL_UART_IRQHandler+0x56c>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d105      	bne.n	800cbe6 <HAL_UART_IRQHandler+0x3c6>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	e004      	b.n	800cbf0 <HAL_UART_IRQHandler+0x3d0>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 81a4 	beq.w	800cf46 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	f080 819c 	bcs.w	800cf46 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc22:	f000 8086 	beq.w	800cd32 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc32:	e853 3f00 	ldrex	r3, [r3]
 800cc36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1da      	bne.n	800cc26 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3308      	adds	r3, #8
 800cc76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc7a:	e853 3f00 	ldrex	r3, [r3]
 800cc7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc82:	f023 0301 	bic.w	r3, r3, #1
 800cc86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3308      	adds	r3, #8
 800cc90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cca0:	e841 2300 	strex	r3, r2, [r1]
 800cca4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1e1      	bne.n	800cc70 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb6:	e853 3f00 	ldrex	r3, [r3]
 800ccba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ccbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3308      	adds	r3, #8
 800cccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccd8:	e841 2300 	strex	r3, r2, [r1]
 800ccdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ccde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1e3      	bne.n	800ccac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2220      	movs	r2, #32
 800cce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfa:	e853 3f00 	ldrex	r3, [r3]
 800ccfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd02:	f023 0310 	bic.w	r3, r3, #16
 800cd06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd14:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd1c:	e841 2300 	strex	r3, r2, [r1]
 800cd20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1e4      	bne.n	800ccf2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7f9 f9a1 	bl	8006074 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f91c 	bl	800cf84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd4c:	e0fb      	b.n	800cf46 <HAL_UART_IRQHandler+0x726>
 800cd4e:	bf00      	nop
 800cd50:	40020010 	.word	0x40020010
 800cd54:	40020028 	.word	0x40020028
 800cd58:	40020040 	.word	0x40020040
 800cd5c:	40020058 	.word	0x40020058
 800cd60:	40020070 	.word	0x40020070
 800cd64:	40020088 	.word	0x40020088
 800cd68:	400200a0 	.word	0x400200a0
 800cd6c:	400200b8 	.word	0x400200b8
 800cd70:	40020410 	.word	0x40020410
 800cd74:	40020428 	.word	0x40020428
 800cd78:	40020440 	.word	0x40020440
 800cd7c:	40020458 	.word	0x40020458
 800cd80:	40020470 	.word	0x40020470
 800cd84:	40020488 	.word	0x40020488
 800cd88:	400204a0 	.word	0x400204a0
 800cd8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 80cc 	beq.w	800cf4a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cdb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 80c7 	beq.w	800cf4a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	e853 3f00 	ldrex	r3, [r3]
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cdde:	647b      	str	r3, [r7, #68]	; 0x44
 800cde0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cde4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e4      	bne.n	800cdbc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	e853 3f00 	ldrex	r3, [r3]
 800ce00:	623b      	str	r3, [r7, #32]
   return(result);
 800ce02:	6a3a      	ldr	r2, [r7, #32]
 800ce04:	4b54      	ldr	r3, [pc, #336]	; (800cf58 <HAL_UART_IRQHandler+0x738>)
 800ce06:	4013      	ands	r3, r2
 800ce08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3308      	adds	r3, #8
 800ce12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce16:	633a      	str	r2, [r7, #48]	; 0x30
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	e841 2300 	strex	r3, r2, [r1]
 800ce22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1e3      	bne.n	800cdf2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2220      	movs	r2, #32
 800ce2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f023 0310 	bic.w	r3, r3, #16
 800ce52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce64:	69b9      	ldr	r1, [r7, #24]
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	e841 2300 	strex	r3, r2, [r1]
 800ce6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1e4      	bne.n	800ce3e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f882 	bl	800cf84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce80:	e063      	b.n	800cf4a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00e      	beq.n	800ceac <HAL_UART_IRQHandler+0x68c>
 800ce8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d008      	beq.n	800ceac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f001 fb72 	bl	800e58e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ceaa:	e051      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ceac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d014      	beq.n	800cee2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ceb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d105      	bne.n	800ced0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d008      	beq.n	800cee2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d03a      	beq.n	800cf4e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
    }
    return;
 800cee0:	e035      	b.n	800cf4e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d009      	beq.n	800cf02 <HAL_UART_IRQHandler+0x6e2>
 800ceee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 fb1c 	bl	800e538 <UART_EndTransmit_IT>
    return;
 800cf00:	e026      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d009      	beq.n	800cf22 <HAL_UART_IRQHandler+0x702>
 800cf0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f001 fb4b 	bl	800e5b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf20:	e016      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d010      	beq.n	800cf50 <HAL_UART_IRQHandler+0x730>
 800cf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	da0c      	bge.n	800cf50 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f001 fb33 	bl	800e5a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf3c:	e008      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
      return;
 800cf3e:	bf00      	nop
 800cf40:	e006      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
    return;
 800cf42:	bf00      	nop
 800cf44:	e004      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
      return;
 800cf46:	bf00      	nop
 800cf48:	e002      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
      return;
 800cf4a:	bf00      	nop
 800cf4c:	e000      	b.n	800cf50 <HAL_UART_IRQHandler+0x730>
    return;
 800cf4e:	bf00      	nop
  }
}
 800cf50:	37e8      	adds	r7, #232	; 0xe8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	effffffe 	.word	0xeffffffe

0800cf5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf78:	bf00      	nop
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfa0:	b092      	sub	sp, #72	; 0x48
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	431a      	orrs	r2, r3
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	695b      	ldr	r3, [r3, #20]
 800cfba:	431a      	orrs	r2, r3
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4bbe      	ldr	r3, [pc, #760]	; (800d2c4 <UART_SetConfig+0x328>)
 800cfcc:	4013      	ands	r3, r2
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	6812      	ldr	r2, [r2, #0]
 800cfd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfd4:	430b      	orrs	r3, r1
 800cfd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	430a      	orrs	r2, r1
 800cfec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4ab3      	ldr	r2, [pc, #716]	; (800d2c8 <UART_SetConfig+0x32c>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d004      	beq.n	800d008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d004:	4313      	orrs	r3, r2
 800d006:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	4baf      	ldr	r3, [pc, #700]	; (800d2cc <UART_SetConfig+0x330>)
 800d010:	4013      	ands	r3, r2
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	6812      	ldr	r2, [r2, #0]
 800d016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d018:	430b      	orrs	r3, r1
 800d01a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	f023 010f 	bic.w	r1, r3, #15
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	430a      	orrs	r2, r1
 800d030:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4aa6      	ldr	r2, [pc, #664]	; (800d2d0 <UART_SetConfig+0x334>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d177      	bne.n	800d12c <UART_SetConfig+0x190>
 800d03c:	4ba5      	ldr	r3, [pc, #660]	; (800d2d4 <UART_SetConfig+0x338>)
 800d03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d044:	2b28      	cmp	r3, #40	; 0x28
 800d046:	d86d      	bhi.n	800d124 <UART_SetConfig+0x188>
 800d048:	a201      	add	r2, pc, #4	; (adr r2, 800d050 <UART_SetConfig+0xb4>)
 800d04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04e:	bf00      	nop
 800d050:	0800d0f5 	.word	0x0800d0f5
 800d054:	0800d125 	.word	0x0800d125
 800d058:	0800d125 	.word	0x0800d125
 800d05c:	0800d125 	.word	0x0800d125
 800d060:	0800d125 	.word	0x0800d125
 800d064:	0800d125 	.word	0x0800d125
 800d068:	0800d125 	.word	0x0800d125
 800d06c:	0800d125 	.word	0x0800d125
 800d070:	0800d0fd 	.word	0x0800d0fd
 800d074:	0800d125 	.word	0x0800d125
 800d078:	0800d125 	.word	0x0800d125
 800d07c:	0800d125 	.word	0x0800d125
 800d080:	0800d125 	.word	0x0800d125
 800d084:	0800d125 	.word	0x0800d125
 800d088:	0800d125 	.word	0x0800d125
 800d08c:	0800d125 	.word	0x0800d125
 800d090:	0800d105 	.word	0x0800d105
 800d094:	0800d125 	.word	0x0800d125
 800d098:	0800d125 	.word	0x0800d125
 800d09c:	0800d125 	.word	0x0800d125
 800d0a0:	0800d125 	.word	0x0800d125
 800d0a4:	0800d125 	.word	0x0800d125
 800d0a8:	0800d125 	.word	0x0800d125
 800d0ac:	0800d125 	.word	0x0800d125
 800d0b0:	0800d10d 	.word	0x0800d10d
 800d0b4:	0800d125 	.word	0x0800d125
 800d0b8:	0800d125 	.word	0x0800d125
 800d0bc:	0800d125 	.word	0x0800d125
 800d0c0:	0800d125 	.word	0x0800d125
 800d0c4:	0800d125 	.word	0x0800d125
 800d0c8:	0800d125 	.word	0x0800d125
 800d0cc:	0800d125 	.word	0x0800d125
 800d0d0:	0800d115 	.word	0x0800d115
 800d0d4:	0800d125 	.word	0x0800d125
 800d0d8:	0800d125 	.word	0x0800d125
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d125 	.word	0x0800d125
 800d0e4:	0800d125 	.word	0x0800d125
 800d0e8:	0800d125 	.word	0x0800d125
 800d0ec:	0800d125 	.word	0x0800d125
 800d0f0:	0800d11d 	.word	0x0800d11d
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fa:	e326      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d0fc:	2304      	movs	r3, #4
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d102:	e322      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d104:	2308      	movs	r3, #8
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10a:	e31e      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d10c:	2310      	movs	r3, #16
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e31a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d114:	2320      	movs	r3, #32
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e316      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d11c:	2340      	movs	r3, #64	; 0x40
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e312      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d124:	2380      	movs	r3, #128	; 0x80
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e30e      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a69      	ldr	r2, [pc, #420]	; (800d2d8 <UART_SetConfig+0x33c>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d130      	bne.n	800d198 <UART_SetConfig+0x1fc>
 800d136:	4b67      	ldr	r3, [pc, #412]	; (800d2d4 <UART_SetConfig+0x338>)
 800d138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13a:	f003 0307 	and.w	r3, r3, #7
 800d13e:	2b05      	cmp	r3, #5
 800d140:	d826      	bhi.n	800d190 <UART_SetConfig+0x1f4>
 800d142:	a201      	add	r2, pc, #4	; (adr r2, 800d148 <UART_SetConfig+0x1ac>)
 800d144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d148:	0800d161 	.word	0x0800d161
 800d14c:	0800d169 	.word	0x0800d169
 800d150:	0800d171 	.word	0x0800d171
 800d154:	0800d179 	.word	0x0800d179
 800d158:	0800d181 	.word	0x0800d181
 800d15c:	0800d189 	.word	0x0800d189
 800d160:	2300      	movs	r3, #0
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d166:	e2f0      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d168:	2304      	movs	r3, #4
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16e:	e2ec      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d170:	2308      	movs	r3, #8
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d176:	e2e8      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d178:	2310      	movs	r3, #16
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e2e4      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d180:	2320      	movs	r3, #32
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e2e0      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e2dc      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d190:	2380      	movs	r3, #128	; 0x80
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e2d8      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a4f      	ldr	r2, [pc, #316]	; (800d2dc <UART_SetConfig+0x340>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d130      	bne.n	800d204 <UART_SetConfig+0x268>
 800d1a2:	4b4c      	ldr	r3, [pc, #304]	; (800d2d4 <UART_SetConfig+0x338>)
 800d1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b05      	cmp	r3, #5
 800d1ac:	d826      	bhi.n	800d1fc <UART_SetConfig+0x260>
 800d1ae:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <UART_SetConfig+0x218>)
 800d1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b4:	0800d1cd 	.word	0x0800d1cd
 800d1b8:	0800d1d5 	.word	0x0800d1d5
 800d1bc:	0800d1dd 	.word	0x0800d1dd
 800d1c0:	0800d1e5 	.word	0x0800d1e5
 800d1c4:	0800d1ed 	.word	0x0800d1ed
 800d1c8:	0800d1f5 	.word	0x0800d1f5
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e2ba      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e2b6      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1dc:	2308      	movs	r3, #8
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e2b2      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e2ae      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e2aa      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1f4:	2340      	movs	r3, #64	; 0x40
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e2a6      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d1fc:	2380      	movs	r3, #128	; 0x80
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e2a2      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a35      	ldr	r2, [pc, #212]	; (800d2e0 <UART_SetConfig+0x344>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d130      	bne.n	800d270 <UART_SetConfig+0x2d4>
 800d20e:	4b31      	ldr	r3, [pc, #196]	; (800d2d4 <UART_SetConfig+0x338>)
 800d210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b05      	cmp	r3, #5
 800d218:	d826      	bhi.n	800d268 <UART_SetConfig+0x2cc>
 800d21a:	a201      	add	r2, pc, #4	; (adr r2, 800d220 <UART_SetConfig+0x284>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d239 	.word	0x0800d239
 800d224:	0800d241 	.word	0x0800d241
 800d228:	0800d249 	.word	0x0800d249
 800d22c:	0800d251 	.word	0x0800d251
 800d230:	0800d259 	.word	0x0800d259
 800d234:	0800d261 	.word	0x0800d261
 800d238:	2300      	movs	r3, #0
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e284      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d240:	2304      	movs	r3, #4
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e280      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d248:	2308      	movs	r3, #8
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e27c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d250:	2310      	movs	r3, #16
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e278      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d258:	2320      	movs	r3, #32
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e274      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e270      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d268:	2380      	movs	r3, #128	; 0x80
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e26c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a1b      	ldr	r2, [pc, #108]	; (800d2e4 <UART_SetConfig+0x348>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d142      	bne.n	800d300 <UART_SetConfig+0x364>
 800d27a:	4b16      	ldr	r3, [pc, #88]	; (800d2d4 <UART_SetConfig+0x338>)
 800d27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27e:	f003 0307 	and.w	r3, r3, #7
 800d282:	2b05      	cmp	r3, #5
 800d284:	d838      	bhi.n	800d2f8 <UART_SetConfig+0x35c>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <UART_SetConfig+0x2f0>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2a5 	.word	0x0800d2a5
 800d290:	0800d2ad 	.word	0x0800d2ad
 800d294:	0800d2b5 	.word	0x0800d2b5
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2e9 	.word	0x0800d2e9
 800d2a0:	0800d2f1 	.word	0x0800d2f1
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2aa:	e24e      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2ac:	2304      	movs	r3, #4
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b2:	e24a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e246      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2bc:	2310      	movs	r3, #16
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e242      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2c4:	cfff69f3 	.word	0xcfff69f3
 800d2c8:	58000c00 	.word	0x58000c00
 800d2cc:	11fff4ff 	.word	0x11fff4ff
 800d2d0:	40011000 	.word	0x40011000
 800d2d4:	58024400 	.word	0x58024400
 800d2d8:	40004400 	.word	0x40004400
 800d2dc:	40004800 	.word	0x40004800
 800d2e0:	40004c00 	.word	0x40004c00
 800d2e4:	40005000 	.word	0x40005000
 800d2e8:	2320      	movs	r3, #32
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ee:	e22c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2f0:	2340      	movs	r3, #64	; 0x40
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f6:	e228      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d2f8:	2380      	movs	r3, #128	; 0x80
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fe:	e224      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4ab1      	ldr	r2, [pc, #708]	; (800d5cc <UART_SetConfig+0x630>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d176      	bne.n	800d3f8 <UART_SetConfig+0x45c>
 800d30a:	4bb1      	ldr	r3, [pc, #708]	; (800d5d0 <UART_SetConfig+0x634>)
 800d30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d30e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d312:	2b28      	cmp	r3, #40	; 0x28
 800d314:	d86c      	bhi.n	800d3f0 <UART_SetConfig+0x454>
 800d316:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <UART_SetConfig+0x380>)
 800d318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31c:	0800d3c1 	.word	0x0800d3c1
 800d320:	0800d3f1 	.word	0x0800d3f1
 800d324:	0800d3f1 	.word	0x0800d3f1
 800d328:	0800d3f1 	.word	0x0800d3f1
 800d32c:	0800d3f1 	.word	0x0800d3f1
 800d330:	0800d3f1 	.word	0x0800d3f1
 800d334:	0800d3f1 	.word	0x0800d3f1
 800d338:	0800d3f1 	.word	0x0800d3f1
 800d33c:	0800d3c9 	.word	0x0800d3c9
 800d340:	0800d3f1 	.word	0x0800d3f1
 800d344:	0800d3f1 	.word	0x0800d3f1
 800d348:	0800d3f1 	.word	0x0800d3f1
 800d34c:	0800d3f1 	.word	0x0800d3f1
 800d350:	0800d3f1 	.word	0x0800d3f1
 800d354:	0800d3f1 	.word	0x0800d3f1
 800d358:	0800d3f1 	.word	0x0800d3f1
 800d35c:	0800d3d1 	.word	0x0800d3d1
 800d360:	0800d3f1 	.word	0x0800d3f1
 800d364:	0800d3f1 	.word	0x0800d3f1
 800d368:	0800d3f1 	.word	0x0800d3f1
 800d36c:	0800d3f1 	.word	0x0800d3f1
 800d370:	0800d3f1 	.word	0x0800d3f1
 800d374:	0800d3f1 	.word	0x0800d3f1
 800d378:	0800d3f1 	.word	0x0800d3f1
 800d37c:	0800d3d9 	.word	0x0800d3d9
 800d380:	0800d3f1 	.word	0x0800d3f1
 800d384:	0800d3f1 	.word	0x0800d3f1
 800d388:	0800d3f1 	.word	0x0800d3f1
 800d38c:	0800d3f1 	.word	0x0800d3f1
 800d390:	0800d3f1 	.word	0x0800d3f1
 800d394:	0800d3f1 	.word	0x0800d3f1
 800d398:	0800d3f1 	.word	0x0800d3f1
 800d39c:	0800d3e1 	.word	0x0800d3e1
 800d3a0:	0800d3f1 	.word	0x0800d3f1
 800d3a4:	0800d3f1 	.word	0x0800d3f1
 800d3a8:	0800d3f1 	.word	0x0800d3f1
 800d3ac:	0800d3f1 	.word	0x0800d3f1
 800d3b0:	0800d3f1 	.word	0x0800d3f1
 800d3b4:	0800d3f1 	.word	0x0800d3f1
 800d3b8:	0800d3f1 	.word	0x0800d3f1
 800d3bc:	0800d3e9 	.word	0x0800d3e9
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e1c0      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3c8:	2304      	movs	r3, #4
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e1bc      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3d0:	2308      	movs	r3, #8
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e1b8      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3d8:	2310      	movs	r3, #16
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e1b4      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3e0:	2320      	movs	r3, #32
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e1b0      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3e8:	2340      	movs	r3, #64	; 0x40
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e1ac      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3f0:	2380      	movs	r3, #128	; 0x80
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e1a8      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a75      	ldr	r2, [pc, #468]	; (800d5d4 <UART_SetConfig+0x638>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d130      	bne.n	800d464 <UART_SetConfig+0x4c8>
 800d402:	4b73      	ldr	r3, [pc, #460]	; (800d5d0 <UART_SetConfig+0x634>)
 800d404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d406:	f003 0307 	and.w	r3, r3, #7
 800d40a:	2b05      	cmp	r3, #5
 800d40c:	d826      	bhi.n	800d45c <UART_SetConfig+0x4c0>
 800d40e:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <UART_SetConfig+0x478>)
 800d410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d414:	0800d42d 	.word	0x0800d42d
 800d418:	0800d435 	.word	0x0800d435
 800d41c:	0800d43d 	.word	0x0800d43d
 800d420:	0800d445 	.word	0x0800d445
 800d424:	0800d44d 	.word	0x0800d44d
 800d428:	0800d455 	.word	0x0800d455
 800d42c:	2300      	movs	r3, #0
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d432:	e18a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d434:	2304      	movs	r3, #4
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e186      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d43c:	2308      	movs	r3, #8
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e182      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d444:	2310      	movs	r3, #16
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e17e      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d44c:	2320      	movs	r3, #32
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e17a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d454:	2340      	movs	r3, #64	; 0x40
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e176      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d45c:	2380      	movs	r3, #128	; 0x80
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e172      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a5b      	ldr	r2, [pc, #364]	; (800d5d8 <UART_SetConfig+0x63c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d130      	bne.n	800d4d0 <UART_SetConfig+0x534>
 800d46e:	4b58      	ldr	r3, [pc, #352]	; (800d5d0 <UART_SetConfig+0x634>)
 800d470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d472:	f003 0307 	and.w	r3, r3, #7
 800d476:	2b05      	cmp	r3, #5
 800d478:	d826      	bhi.n	800d4c8 <UART_SetConfig+0x52c>
 800d47a:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <UART_SetConfig+0x4e4>)
 800d47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d480:	0800d499 	.word	0x0800d499
 800d484:	0800d4a1 	.word	0x0800d4a1
 800d488:	0800d4a9 	.word	0x0800d4a9
 800d48c:	0800d4b1 	.word	0x0800d4b1
 800d490:	0800d4b9 	.word	0x0800d4b9
 800d494:	0800d4c1 	.word	0x0800d4c1
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49e:	e154      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4a0:	2304      	movs	r3, #4
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e150      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4a8:	2308      	movs	r3, #8
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e14c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4b0:	2310      	movs	r3, #16
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e148      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4b8:	2320      	movs	r3, #32
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e144      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4c0:	2340      	movs	r3, #64	; 0x40
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e140      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4c8:	2380      	movs	r3, #128	; 0x80
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e13c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a41      	ldr	r2, [pc, #260]	; (800d5dc <UART_SetConfig+0x640>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	f040 8082 	bne.w	800d5e0 <UART_SetConfig+0x644>
 800d4dc:	4b3c      	ldr	r3, [pc, #240]	; (800d5d0 <UART_SetConfig+0x634>)
 800d4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4e4:	2b28      	cmp	r3, #40	; 0x28
 800d4e6:	d86d      	bhi.n	800d5c4 <UART_SetConfig+0x628>
 800d4e8:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <UART_SetConfig+0x554>)
 800d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ee:	bf00      	nop
 800d4f0:	0800d595 	.word	0x0800d595
 800d4f4:	0800d5c5 	.word	0x0800d5c5
 800d4f8:	0800d5c5 	.word	0x0800d5c5
 800d4fc:	0800d5c5 	.word	0x0800d5c5
 800d500:	0800d5c5 	.word	0x0800d5c5
 800d504:	0800d5c5 	.word	0x0800d5c5
 800d508:	0800d5c5 	.word	0x0800d5c5
 800d50c:	0800d5c5 	.word	0x0800d5c5
 800d510:	0800d59d 	.word	0x0800d59d
 800d514:	0800d5c5 	.word	0x0800d5c5
 800d518:	0800d5c5 	.word	0x0800d5c5
 800d51c:	0800d5c5 	.word	0x0800d5c5
 800d520:	0800d5c5 	.word	0x0800d5c5
 800d524:	0800d5c5 	.word	0x0800d5c5
 800d528:	0800d5c5 	.word	0x0800d5c5
 800d52c:	0800d5c5 	.word	0x0800d5c5
 800d530:	0800d5a5 	.word	0x0800d5a5
 800d534:	0800d5c5 	.word	0x0800d5c5
 800d538:	0800d5c5 	.word	0x0800d5c5
 800d53c:	0800d5c5 	.word	0x0800d5c5
 800d540:	0800d5c5 	.word	0x0800d5c5
 800d544:	0800d5c5 	.word	0x0800d5c5
 800d548:	0800d5c5 	.word	0x0800d5c5
 800d54c:	0800d5c5 	.word	0x0800d5c5
 800d550:	0800d5ad 	.word	0x0800d5ad
 800d554:	0800d5c5 	.word	0x0800d5c5
 800d558:	0800d5c5 	.word	0x0800d5c5
 800d55c:	0800d5c5 	.word	0x0800d5c5
 800d560:	0800d5c5 	.word	0x0800d5c5
 800d564:	0800d5c5 	.word	0x0800d5c5
 800d568:	0800d5c5 	.word	0x0800d5c5
 800d56c:	0800d5c5 	.word	0x0800d5c5
 800d570:	0800d5b5 	.word	0x0800d5b5
 800d574:	0800d5c5 	.word	0x0800d5c5
 800d578:	0800d5c5 	.word	0x0800d5c5
 800d57c:	0800d5c5 	.word	0x0800d5c5
 800d580:	0800d5c5 	.word	0x0800d5c5
 800d584:	0800d5c5 	.word	0x0800d5c5
 800d588:	0800d5c5 	.word	0x0800d5c5
 800d58c:	0800d5c5 	.word	0x0800d5c5
 800d590:	0800d5bd 	.word	0x0800d5bd
 800d594:	2301      	movs	r3, #1
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e0d6      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d59c:	2304      	movs	r3, #4
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e0d2      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5a4:	2308      	movs	r3, #8
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e0ce      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5ac:	2310      	movs	r3, #16
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b2:	e0ca      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5b4:	2320      	movs	r3, #32
 800d5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ba:	e0c6      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5bc:	2340      	movs	r3, #64	; 0x40
 800d5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c2:	e0c2      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5c4:	2380      	movs	r3, #128	; 0x80
 800d5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ca:	e0be      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d5cc:	40011400 	.word	0x40011400
 800d5d0:	58024400 	.word	0x58024400
 800d5d4:	40007800 	.word	0x40007800
 800d5d8:	40007c00 	.word	0x40007c00
 800d5dc:	40011800 	.word	0x40011800
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4aad      	ldr	r2, [pc, #692]	; (800d89c <UART_SetConfig+0x900>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d176      	bne.n	800d6d8 <UART_SetConfig+0x73c>
 800d5ea:	4bad      	ldr	r3, [pc, #692]	; (800d8a0 <UART_SetConfig+0x904>)
 800d5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5f2:	2b28      	cmp	r3, #40	; 0x28
 800d5f4:	d86c      	bhi.n	800d6d0 <UART_SetConfig+0x734>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <UART_SetConfig+0x660>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d6a1 	.word	0x0800d6a1
 800d600:	0800d6d1 	.word	0x0800d6d1
 800d604:	0800d6d1 	.word	0x0800d6d1
 800d608:	0800d6d1 	.word	0x0800d6d1
 800d60c:	0800d6d1 	.word	0x0800d6d1
 800d610:	0800d6d1 	.word	0x0800d6d1
 800d614:	0800d6d1 	.word	0x0800d6d1
 800d618:	0800d6d1 	.word	0x0800d6d1
 800d61c:	0800d6a9 	.word	0x0800d6a9
 800d620:	0800d6d1 	.word	0x0800d6d1
 800d624:	0800d6d1 	.word	0x0800d6d1
 800d628:	0800d6d1 	.word	0x0800d6d1
 800d62c:	0800d6d1 	.word	0x0800d6d1
 800d630:	0800d6d1 	.word	0x0800d6d1
 800d634:	0800d6d1 	.word	0x0800d6d1
 800d638:	0800d6d1 	.word	0x0800d6d1
 800d63c:	0800d6b1 	.word	0x0800d6b1
 800d640:	0800d6d1 	.word	0x0800d6d1
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6d1 	.word	0x0800d6d1
 800d64c:	0800d6d1 	.word	0x0800d6d1
 800d650:	0800d6d1 	.word	0x0800d6d1
 800d654:	0800d6d1 	.word	0x0800d6d1
 800d658:	0800d6d1 	.word	0x0800d6d1
 800d65c:	0800d6b9 	.word	0x0800d6b9
 800d660:	0800d6d1 	.word	0x0800d6d1
 800d664:	0800d6d1 	.word	0x0800d6d1
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d6d1 	.word	0x0800d6d1
 800d670:	0800d6d1 	.word	0x0800d6d1
 800d674:	0800d6d1 	.word	0x0800d6d1
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6c1 	.word	0x0800d6c1
 800d680:	0800d6d1 	.word	0x0800d6d1
 800d684:	0800d6d1 	.word	0x0800d6d1
 800d688:	0800d6d1 	.word	0x0800d6d1
 800d68c:	0800d6d1 	.word	0x0800d6d1
 800d690:	0800d6d1 	.word	0x0800d6d1
 800d694:	0800d6d1 	.word	0x0800d6d1
 800d698:	0800d6d1 	.word	0x0800d6d1
 800d69c:	0800d6c9 	.word	0x0800d6c9
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e050      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e04c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e048      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e044      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e040      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6c8:	2340      	movs	r3, #64	; 0x40
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e03c      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6d0:	2380      	movs	r3, #128	; 0x80
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e038      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a71      	ldr	r2, [pc, #452]	; (800d8a4 <UART_SetConfig+0x908>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d130      	bne.n	800d744 <UART_SetConfig+0x7a8>
 800d6e2:	4b6f      	ldr	r3, [pc, #444]	; (800d8a0 <UART_SetConfig+0x904>)
 800d6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d826      	bhi.n	800d73c <UART_SetConfig+0x7a0>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <UART_SetConfig+0x758>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d70d 	.word	0x0800d70d
 800d6f8:	0800d715 	.word	0x0800d715
 800d6fc:	0800d71d 	.word	0x0800d71d
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d72d 	.word	0x0800d72d
 800d708:	0800d735 	.word	0x0800d735
 800d70c:	2302      	movs	r3, #2
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e01a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d714:	2304      	movs	r3, #4
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e016      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d71c:	2308      	movs	r3, #8
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e012      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d724:	2310      	movs	r3, #16
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e00e      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d72c:	2320      	movs	r3, #32
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e00a      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e006      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e002      	b.n	800d74a <UART_SetConfig+0x7ae>
 800d744:	2380      	movs	r3, #128	; 0x80
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a55      	ldr	r2, [pc, #340]	; (800d8a4 <UART_SetConfig+0x908>)
 800d750:	4293      	cmp	r3, r2
 800d752:	f040 80f8 	bne.w	800d946 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d756:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	dc46      	bgt.n	800d7ec <UART_SetConfig+0x850>
 800d75e:	2b02      	cmp	r3, #2
 800d760:	db75      	blt.n	800d84e <UART_SetConfig+0x8b2>
 800d762:	3b02      	subs	r3, #2
 800d764:	2b1e      	cmp	r3, #30
 800d766:	d872      	bhi.n	800d84e <UART_SetConfig+0x8b2>
 800d768:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <UART_SetConfig+0x7d4>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d7f3 	.word	0x0800d7f3
 800d774:	0800d84f 	.word	0x0800d84f
 800d778:	0800d7fb 	.word	0x0800d7fb
 800d77c:	0800d84f 	.word	0x0800d84f
 800d780:	0800d84f 	.word	0x0800d84f
 800d784:	0800d84f 	.word	0x0800d84f
 800d788:	0800d80b 	.word	0x0800d80b
 800d78c:	0800d84f 	.word	0x0800d84f
 800d790:	0800d84f 	.word	0x0800d84f
 800d794:	0800d84f 	.word	0x0800d84f
 800d798:	0800d84f 	.word	0x0800d84f
 800d79c:	0800d84f 	.word	0x0800d84f
 800d7a0:	0800d84f 	.word	0x0800d84f
 800d7a4:	0800d84f 	.word	0x0800d84f
 800d7a8:	0800d81b 	.word	0x0800d81b
 800d7ac:	0800d84f 	.word	0x0800d84f
 800d7b0:	0800d84f 	.word	0x0800d84f
 800d7b4:	0800d84f 	.word	0x0800d84f
 800d7b8:	0800d84f 	.word	0x0800d84f
 800d7bc:	0800d84f 	.word	0x0800d84f
 800d7c0:	0800d84f 	.word	0x0800d84f
 800d7c4:	0800d84f 	.word	0x0800d84f
 800d7c8:	0800d84f 	.word	0x0800d84f
 800d7cc:	0800d84f 	.word	0x0800d84f
 800d7d0:	0800d84f 	.word	0x0800d84f
 800d7d4:	0800d84f 	.word	0x0800d84f
 800d7d8:	0800d84f 	.word	0x0800d84f
 800d7dc:	0800d84f 	.word	0x0800d84f
 800d7e0:	0800d84f 	.word	0x0800d84f
 800d7e4:	0800d84f 	.word	0x0800d84f
 800d7e8:	0800d841 	.word	0x0800d841
 800d7ec:	2b40      	cmp	r3, #64	; 0x40
 800d7ee:	d02a      	beq.n	800d846 <UART_SetConfig+0x8aa>
 800d7f0:	e02d      	b.n	800d84e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d7f2:	f7fc fe0b 	bl	800a40c <HAL_RCCEx_GetD3PCLK1Freq>
 800d7f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d7f8:	e02f      	b.n	800d85a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fc fe1a 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d808:	e027      	b.n	800d85a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d80a:	f107 0318 	add.w	r3, r7, #24
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc ff66 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d818:	e01f      	b.n	800d85a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d81a:	4b21      	ldr	r3, [pc, #132]	; (800d8a0 <UART_SetConfig+0x904>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 0320 	and.w	r3, r3, #32
 800d822:	2b00      	cmp	r3, #0
 800d824:	d009      	beq.n	800d83a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d826:	4b1e      	ldr	r3, [pc, #120]	; (800d8a0 <UART_SetConfig+0x904>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	08db      	lsrs	r3, r3, #3
 800d82c:	f003 0303 	and.w	r3, r3, #3
 800d830:	4a1d      	ldr	r2, [pc, #116]	; (800d8a8 <UART_SetConfig+0x90c>)
 800d832:	fa22 f303 	lsr.w	r3, r2, r3
 800d836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d838:	e00f      	b.n	800d85a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d83a:	4b1b      	ldr	r3, [pc, #108]	; (800d8a8 <UART_SetConfig+0x90c>)
 800d83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d83e:	e00c      	b.n	800d85a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d840:	4b1a      	ldr	r3, [pc, #104]	; (800d8ac <UART_SetConfig+0x910>)
 800d842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d844:	e009      	b.n	800d85a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d84c:	e005      	b.n	800d85a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 81ee 	beq.w	800dc3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d866:	4a12      	ldr	r2, [pc, #72]	; (800d8b0 <UART_SetConfig+0x914>)
 800d868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d86c:	461a      	mov	r2, r3
 800d86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d870:	fbb3 f3f2 	udiv	r3, r3, r2
 800d874:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	4613      	mov	r3, r2
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	4413      	add	r3, r2
 800d880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d882:	429a      	cmp	r2, r3
 800d884:	d305      	bcc.n	800d892 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88e:	429a      	cmp	r2, r3
 800d890:	d910      	bls.n	800d8b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d898:	e1d1      	b.n	800dc3e <UART_SetConfig+0xca2>
 800d89a:	bf00      	nop
 800d89c:	40011c00 	.word	0x40011c00
 800d8a0:	58024400 	.word	0x58024400
 800d8a4:	58000c00 	.word	0x58000c00
 800d8a8:	03d09000 	.word	0x03d09000
 800d8ac:	003d0900 	.word	0x003d0900
 800d8b0:	0800ee74 	.word	0x0800ee74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	60bb      	str	r3, [r7, #8]
 800d8ba:	60fa      	str	r2, [r7, #12]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	4ac0      	ldr	r2, [pc, #768]	; (800dbc4 <UART_SetConfig+0xc28>)
 800d8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	607a      	str	r2, [r7, #4]
 800d8ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d8d6:	f7f2 fd23 	bl	8000320 <__aeabi_uldivmod>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	4610      	mov	r0, r2
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f04f 0200 	mov.w	r2, #0
 800d8e6:	f04f 0300 	mov.w	r3, #0
 800d8ea:	020b      	lsls	r3, r1, #8
 800d8ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8f0:	0202      	lsls	r2, r0, #8
 800d8f2:	6979      	ldr	r1, [r7, #20]
 800d8f4:	6849      	ldr	r1, [r1, #4]
 800d8f6:	0849      	lsrs	r1, r1, #1
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	eb12 0804 	adds.w	r8, r2, r4
 800d902:	eb43 0905 	adc.w	r9, r3, r5
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	469a      	mov	sl, r3
 800d90e:	4693      	mov	fp, r2
 800d910:	4652      	mov	r2, sl
 800d912:	465b      	mov	r3, fp
 800d914:	4640      	mov	r0, r8
 800d916:	4649      	mov	r1, r9
 800d918:	f7f2 fd02 	bl	8000320 <__aeabi_uldivmod>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4613      	mov	r3, r2
 800d922:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d92a:	d308      	bcc.n	800d93e <UART_SetConfig+0x9a2>
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d932:	d204      	bcs.n	800d93e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d93a:	60da      	str	r2, [r3, #12]
 800d93c:	e17f      	b.n	800dc3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d944:	e17b      	b.n	800dc3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	69db      	ldr	r3, [r3, #28]
 800d94a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d94e:	f040 80bd 	bne.w	800dacc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d952:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d956:	2b20      	cmp	r3, #32
 800d958:	dc48      	bgt.n	800d9ec <UART_SetConfig+0xa50>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	db7b      	blt.n	800da56 <UART_SetConfig+0xaba>
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d879      	bhi.n	800da56 <UART_SetConfig+0xaba>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <UART_SetConfig+0x9cc>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d9f3 	.word	0x0800d9f3
 800d96c:	0800d9fb 	.word	0x0800d9fb
 800d970:	0800da57 	.word	0x0800da57
 800d974:	0800da57 	.word	0x0800da57
 800d978:	0800da03 	.word	0x0800da03
 800d97c:	0800da57 	.word	0x0800da57
 800d980:	0800da57 	.word	0x0800da57
 800d984:	0800da57 	.word	0x0800da57
 800d988:	0800da13 	.word	0x0800da13
 800d98c:	0800da57 	.word	0x0800da57
 800d990:	0800da57 	.word	0x0800da57
 800d994:	0800da57 	.word	0x0800da57
 800d998:	0800da57 	.word	0x0800da57
 800d99c:	0800da57 	.word	0x0800da57
 800d9a0:	0800da57 	.word	0x0800da57
 800d9a4:	0800da57 	.word	0x0800da57
 800d9a8:	0800da23 	.word	0x0800da23
 800d9ac:	0800da57 	.word	0x0800da57
 800d9b0:	0800da57 	.word	0x0800da57
 800d9b4:	0800da57 	.word	0x0800da57
 800d9b8:	0800da57 	.word	0x0800da57
 800d9bc:	0800da57 	.word	0x0800da57
 800d9c0:	0800da57 	.word	0x0800da57
 800d9c4:	0800da57 	.word	0x0800da57
 800d9c8:	0800da57 	.word	0x0800da57
 800d9cc:	0800da57 	.word	0x0800da57
 800d9d0:	0800da57 	.word	0x0800da57
 800d9d4:	0800da57 	.word	0x0800da57
 800d9d8:	0800da57 	.word	0x0800da57
 800d9dc:	0800da57 	.word	0x0800da57
 800d9e0:	0800da57 	.word	0x0800da57
 800d9e4:	0800da57 	.word	0x0800da57
 800d9e8:	0800da49 	.word	0x0800da49
 800d9ec:	2b40      	cmp	r3, #64	; 0x40
 800d9ee:	d02e      	beq.n	800da4e <UART_SetConfig+0xab2>
 800d9f0:	e031      	b.n	800da56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9f2:	f7fb fde5 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800d9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9f8:	e033      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9fa:	f7fb fdf7 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800d9fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da00:	e02f      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da06:	4618      	mov	r0, r3
 800da08:	f7fc fd16 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da10:	e027      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da12:	f107 0318 	add.w	r3, r7, #24
 800da16:	4618      	mov	r0, r3
 800da18:	f7fc fe62 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da20:	e01f      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da22:	4b69      	ldr	r3, [pc, #420]	; (800dbc8 <UART_SetConfig+0xc2c>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f003 0320 	and.w	r3, r3, #32
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d009      	beq.n	800da42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da2e:	4b66      	ldr	r3, [pc, #408]	; (800dbc8 <UART_SetConfig+0xc2c>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	08db      	lsrs	r3, r3, #3
 800da34:	f003 0303 	and.w	r3, r3, #3
 800da38:	4a64      	ldr	r2, [pc, #400]	; (800dbcc <UART_SetConfig+0xc30>)
 800da3a:	fa22 f303 	lsr.w	r3, r2, r3
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da40:	e00f      	b.n	800da62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800da42:	4b62      	ldr	r3, [pc, #392]	; (800dbcc <UART_SetConfig+0xc30>)
 800da44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da46:	e00c      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da48:	4b61      	ldr	r3, [pc, #388]	; (800dbd0 <UART_SetConfig+0xc34>)
 800da4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da4c:	e009      	b.n	800da62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da54:	e005      	b.n	800da62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800da56:	2300      	movs	r3, #0
 800da58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80ea 	beq.w	800dc3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6e:	4a55      	ldr	r2, [pc, #340]	; (800dbc4 <UART_SetConfig+0xc28>)
 800da70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da74:	461a      	mov	r2, r3
 800da76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da78:	fbb3 f3f2 	udiv	r3, r3, r2
 800da7c:	005a      	lsls	r2, r3, #1
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	085b      	lsrs	r3, r3, #1
 800da84:	441a      	add	r2, r3
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	2b0f      	cmp	r3, #15
 800da94:	d916      	bls.n	800dac4 <UART_SetConfig+0xb28>
 800da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da9c:	d212      	bcs.n	800dac4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	f023 030f 	bic.w	r3, r3, #15
 800daa6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800daa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daaa:	085b      	lsrs	r3, r3, #1
 800daac:	b29b      	uxth	r3, r3
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dab6:	4313      	orrs	r3, r2
 800dab8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dac0:	60da      	str	r2, [r3, #12]
 800dac2:	e0bc      	b.n	800dc3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800daca:	e0b8      	b.n	800dc3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dacc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	dc4b      	bgt.n	800db6c <UART_SetConfig+0xbd0>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f2c0 8087 	blt.w	800dbe8 <UART_SetConfig+0xc4c>
 800dada:	2b20      	cmp	r3, #32
 800dadc:	f200 8084 	bhi.w	800dbe8 <UART_SetConfig+0xc4c>
 800dae0:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <UART_SetConfig+0xb4c>)
 800dae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae6:	bf00      	nop
 800dae8:	0800db73 	.word	0x0800db73
 800daec:	0800db7b 	.word	0x0800db7b
 800daf0:	0800dbe9 	.word	0x0800dbe9
 800daf4:	0800dbe9 	.word	0x0800dbe9
 800daf8:	0800db83 	.word	0x0800db83
 800dafc:	0800dbe9 	.word	0x0800dbe9
 800db00:	0800dbe9 	.word	0x0800dbe9
 800db04:	0800dbe9 	.word	0x0800dbe9
 800db08:	0800db93 	.word	0x0800db93
 800db0c:	0800dbe9 	.word	0x0800dbe9
 800db10:	0800dbe9 	.word	0x0800dbe9
 800db14:	0800dbe9 	.word	0x0800dbe9
 800db18:	0800dbe9 	.word	0x0800dbe9
 800db1c:	0800dbe9 	.word	0x0800dbe9
 800db20:	0800dbe9 	.word	0x0800dbe9
 800db24:	0800dbe9 	.word	0x0800dbe9
 800db28:	0800dba3 	.word	0x0800dba3
 800db2c:	0800dbe9 	.word	0x0800dbe9
 800db30:	0800dbe9 	.word	0x0800dbe9
 800db34:	0800dbe9 	.word	0x0800dbe9
 800db38:	0800dbe9 	.word	0x0800dbe9
 800db3c:	0800dbe9 	.word	0x0800dbe9
 800db40:	0800dbe9 	.word	0x0800dbe9
 800db44:	0800dbe9 	.word	0x0800dbe9
 800db48:	0800dbe9 	.word	0x0800dbe9
 800db4c:	0800dbe9 	.word	0x0800dbe9
 800db50:	0800dbe9 	.word	0x0800dbe9
 800db54:	0800dbe9 	.word	0x0800dbe9
 800db58:	0800dbe9 	.word	0x0800dbe9
 800db5c:	0800dbe9 	.word	0x0800dbe9
 800db60:	0800dbe9 	.word	0x0800dbe9
 800db64:	0800dbe9 	.word	0x0800dbe9
 800db68:	0800dbdb 	.word	0x0800dbdb
 800db6c:	2b40      	cmp	r3, #64	; 0x40
 800db6e:	d037      	beq.n	800dbe0 <UART_SetConfig+0xc44>
 800db70:	e03a      	b.n	800dbe8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db72:	f7fb fd25 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800db76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db78:	e03c      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db7a:	f7fb fd37 	bl	80095ec <HAL_RCC_GetPCLK2Freq>
 800db7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db80:	e038      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db86:	4618      	mov	r0, r3
 800db88:	f7fc fc56 	bl	800a438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db90:	e030      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db92:	f107 0318 	add.w	r3, r7, #24
 800db96:	4618      	mov	r0, r3
 800db98:	f7fc fda2 	bl	800a6e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dba0:	e028      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dba2:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <UART_SetConfig+0xc2c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f003 0320 	and.w	r3, r3, #32
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d012      	beq.n	800dbd4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <UART_SetConfig+0xc2c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	08db      	lsrs	r3, r3, #3
 800dbb4:	f003 0303 	and.w	r3, r3, #3
 800dbb8:	4a04      	ldr	r2, [pc, #16]	; (800dbcc <UART_SetConfig+0xc30>)
 800dbba:	fa22 f303 	lsr.w	r3, r2, r3
 800dbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbc0:	e018      	b.n	800dbf4 <UART_SetConfig+0xc58>
 800dbc2:	bf00      	nop
 800dbc4:	0800ee74 	.word	0x0800ee74
 800dbc8:	58024400 	.word	0x58024400
 800dbcc:	03d09000 	.word	0x03d09000
 800dbd0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dbd4:	4b24      	ldr	r3, [pc, #144]	; (800dc68 <UART_SetConfig+0xccc>)
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbd8:	e00c      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbda:	4b24      	ldr	r3, [pc, #144]	; (800dc6c <UART_SetConfig+0xcd0>)
 800dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbde:	e009      	b.n	800dbf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbe6:	e005      	b.n	800dbf4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dbf2:	bf00      	nop
    }

    if (pclk != 0U)
 800dbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d021      	beq.n	800dc3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfe:	4a1c      	ldr	r2, [pc, #112]	; (800dc70 <UART_SetConfig+0xcd4>)
 800dc00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc04:	461a      	mov	r2, r3
 800dc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc08:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	085b      	lsrs	r3, r3, #1
 800dc12:	441a      	add	r2, r3
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc1c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc20:	2b0f      	cmp	r3, #15
 800dc22:	d909      	bls.n	800dc38 <UART_SetConfig+0xc9c>
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc2a:	d205      	bcs.n	800dc38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60da      	str	r2, [r3, #12]
 800dc36:	e002      	b.n	800dc3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2200      	movs	r2, #0
 800dc52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2200      	movs	r2, #0
 800dc58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc5a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3748      	adds	r7, #72	; 0x48
 800dc62:	46bd      	mov	sp, r7
 800dc64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc68:	03d09000 	.word	0x03d09000
 800dc6c:	003d0900 	.word	0x003d0900
 800dc70:	0800ee74 	.word	0x0800ee74

0800dc74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00a      	beq.n	800dc9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	430a      	orrs	r2, r1
 800dc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca2:	f003 0302 	and.w	r3, r3, #2
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	430a      	orrs	r2, r1
 800dcbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00a      	beq.n	800dd04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	430a      	orrs	r2, r1
 800dd02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	f003 0310 	and.w	r3, r3, #16
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00a      	beq.n	800dd26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	430a      	orrs	r2, r1
 800dd24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2a:	f003 0320 	and.w	r3, r3, #32
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00a      	beq.n	800dd48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	430a      	orrs	r2, r1
 800dd46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d01a      	beq.n	800dd8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	430a      	orrs	r2, r1
 800dd68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd72:	d10a      	bne.n	800dd8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	430a      	orrs	r2, r1
 800dd88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	430a      	orrs	r2, r1
 800ddaa:	605a      	str	r2, [r3, #4]
  }
}
 800ddac:	bf00      	nop
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af02      	add	r7, sp, #8
 800ddbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddc8:	f7f7 f88c 	bl	8004ee4 <HAL_GetTick>
 800ddcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f003 0308 	and.w	r3, r3, #8
 800ddd8:	2b08      	cmp	r3, #8
 800ddda:	d10e      	bne.n	800ddfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f82f 	bl	800de4e <UART_WaitOnFlagUntilTimeout>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e025      	b.n	800de46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b04      	cmp	r3, #4
 800de06:	d10e      	bne.n	800de26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f819 	bl	800de4e <UART_WaitOnFlagUntilTimeout>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e00f      	b.n	800de46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2220      	movs	r2, #32
 800de2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2220      	movs	r2, #32
 800de32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b09c      	sub	sp, #112	; 0x70
 800de52:	af00      	add	r7, sp, #0
 800de54:	60f8      	str	r0, [r7, #12]
 800de56:	60b9      	str	r1, [r7, #8]
 800de58:	603b      	str	r3, [r7, #0]
 800de5a:	4613      	mov	r3, r2
 800de5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de5e:	e0a9      	b.n	800dfb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de66:	f000 80a5 	beq.w	800dfb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de6a:	f7f7 f83b 	bl	8004ee4 <HAL_GetTick>
 800de6e:	4602      	mov	r2, r0
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de76:	429a      	cmp	r2, r3
 800de78:	d302      	bcc.n	800de80 <UART_WaitOnFlagUntilTimeout+0x32>
 800de7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d140      	bne.n	800df02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de88:	e853 3f00 	ldrex	r3, [r3]
 800de8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de94:	667b      	str	r3, [r7, #100]	; 0x64
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dea0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dea6:	e841 2300 	strex	r3, r2, [r1]
 800deaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800deac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1e6      	bne.n	800de80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	f023 0301 	bic.w	r3, r3, #1
 800dec8:	663b      	str	r3, [r7, #96]	; 0x60
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	3308      	adds	r3, #8
 800ded0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ded2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ded4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ded8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deda:	e841 2300 	strex	r3, r2, [r1]
 800dede:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1e5      	bne.n	800deb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2220      	movs	r2, #32
 800deea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2220      	movs	r2, #32
 800def2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e069      	b.n	800dfd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 0304 	and.w	r3, r3, #4
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d051      	beq.n	800dfb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	69db      	ldr	r3, [r3, #28]
 800df16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df1e:	d149      	bne.n	800dfb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	e853 3f00 	ldrex	r3, [r3]
 800df36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df48:	637b      	str	r3, [r7, #52]	; 0x34
 800df4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df50:	e841 2300 	strex	r3, r2, [r1]
 800df54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1e6      	bne.n	800df2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	3308      	adds	r3, #8
 800df62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	e853 3f00 	ldrex	r3, [r3]
 800df6a:	613b      	str	r3, [r7, #16]
   return(result);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f023 0301 	bic.w	r3, r3, #1
 800df72:	66bb      	str	r3, [r7, #104]	; 0x68
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	3308      	adds	r3, #8
 800df7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df7c:	623a      	str	r2, [r7, #32]
 800df7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df80:	69f9      	ldr	r1, [r7, #28]
 800df82:	6a3a      	ldr	r2, [r7, #32]
 800df84:	e841 2300 	strex	r3, r2, [r1]
 800df88:	61bb      	str	r3, [r7, #24]
   return(result);
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e5      	bne.n	800df5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2220      	movs	r2, #32
 800df94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2220      	movs	r2, #32
 800df9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e010      	b.n	800dfd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	69da      	ldr	r2, [r3, #28]
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	bf0c      	ite	eq
 800dfc4:	2301      	moveq	r3, #1
 800dfc6:	2300      	movne	r3, #0
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	461a      	mov	r2, r3
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	f43f af46 	beq.w	800de60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3770      	adds	r7, #112	; 0x70
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b096      	sub	sp, #88	; 0x58
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	88fa      	ldrh	r2, [r7, #6]
 800dff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2222      	movs	r2, #34	; 0x22
 800e008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e010:	2b00      	cmp	r3, #0
 800e012:	d02c      	beq.n	800e06e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e018:	4a42      	ldr	r2, [pc, #264]	; (800e124 <UART_Start_Receive_DMA+0x144>)
 800e01a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e020:	4a41      	ldr	r2, [pc, #260]	; (800e128 <UART_Start_Receive_DMA+0x148>)
 800e022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e028:	4a40      	ldr	r2, [pc, #256]	; (800e12c <UART_Start_Receive_DMA+0x14c>)
 800e02a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e030:	2200      	movs	r2, #0
 800e032:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3324      	adds	r3, #36	; 0x24
 800e03e:	4619      	mov	r1, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e044:	461a      	mov	r2, r3
 800e046:	88fb      	ldrh	r3, [r7, #6]
 800e048:	f7f7 fdaa 	bl	8005ba0 <HAL_DMA_Start_IT>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00d      	beq.n	800e06e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2210      	movs	r2, #16
 800e056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e055      	b.n	800e11a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d018      	beq.n	800e0b0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e086:	e853 3f00 	ldrex	r3, [r3]
 800e08a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e092:	657b      	str	r3, [r7, #84]	; 0x54
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	461a      	mov	r2, r3
 800e09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e09c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e09e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0a4:	e841 2300 	strex	r3, r2, [r1]
 800e0a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e6      	bne.n	800e07e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	e853 3f00 	ldrex	r3, [r3]
 800e0be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	f043 0301 	orr.w	r3, r3, #1
 800e0c6:	653b      	str	r3, [r7, #80]	; 0x50
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0d0:	637a      	str	r2, [r7, #52]	; 0x34
 800e0d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0d8:	e841 2300 	strex	r3, r2, [r1]
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1e5      	bne.n	800e0b0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	3308      	adds	r3, #8
 800e0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	e853 3f00 	ldrex	r3, [r3]
 800e0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3308      	adds	r3, #8
 800e102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e104:	623a      	str	r2, [r7, #32]
 800e106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e108:	69f9      	ldr	r1, [r7, #28]
 800e10a:	6a3a      	ldr	r2, [r7, #32]
 800e10c:	e841 2300 	strex	r3, r2, [r1]
 800e110:	61bb      	str	r3, [r7, #24]
   return(result);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e5      	bne.n	800e0e4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3758      	adds	r7, #88	; 0x58
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	0800e333 	.word	0x0800e333
 800e128:	0800e455 	.word	0x0800e455
 800e12c:	0800e48d 	.word	0x0800e48d

0800e130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e130:	b480      	push	{r7}
 800e132:	b08f      	sub	sp, #60	; 0x3c
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	e853 3f00 	ldrex	r3, [r3]
 800e144:	61fb      	str	r3, [r7, #28]
   return(result);
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e14c:	637b      	str	r3, [r7, #52]	; 0x34
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e156:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e158:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e15e:	e841 2300 	strex	r3, r2, [r1]
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1e6      	bne.n	800e138 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	3308      	adds	r3, #8
 800e170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	e853 3f00 	ldrex	r3, [r3]
 800e178:	60bb      	str	r3, [r7, #8]
   return(result);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e180:	633b      	str	r3, [r7, #48]	; 0x30
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3308      	adds	r3, #8
 800e188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e18a:	61ba      	str	r2, [r7, #24]
 800e18c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18e:	6979      	ldr	r1, [r7, #20]
 800e190:	69ba      	ldr	r2, [r7, #24]
 800e192:	e841 2300 	strex	r3, r2, [r1]
 800e196:	613b      	str	r3, [r7, #16]
   return(result);
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1e5      	bne.n	800e16a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2220      	movs	r2, #32
 800e1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e1a6:	bf00      	nop
 800e1a8:	373c      	adds	r7, #60	; 0x3c
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b095      	sub	sp, #84	; 0x54
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c4:	e853 3f00 	ldrex	r3, [r3]
 800e1c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1da:	643b      	str	r3, [r7, #64]	; 0x40
 800e1dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e6      	bne.n	800e1bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1fe:	69fa      	ldr	r2, [r7, #28]
 800e200:	4b1e      	ldr	r3, [pc, #120]	; (800e27c <UART_EndRxTransfer+0xc8>)
 800e202:	4013      	ands	r3, r2
 800e204:	64bb      	str	r3, [r7, #72]	; 0x48
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e20e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e5      	bne.n	800e1ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e226:	2b01      	cmp	r3, #1
 800e228:	d118      	bne.n	800e25c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	60bb      	str	r3, [r7, #8]
   return(result);
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f023 0310 	bic.w	r3, r3, #16
 800e23e:	647b      	str	r3, [r7, #68]	; 0x44
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e248:	61bb      	str	r3, [r7, #24]
 800e24a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24c:	6979      	ldr	r1, [r7, #20]
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	613b      	str	r3, [r7, #16]
   return(result);
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e6      	bne.n	800e22a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2220      	movs	r2, #32
 800e260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e270:	bf00      	nop
 800e272:	3754      	adds	r7, #84	; 0x54
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr
 800e27c:	effffffe 	.word	0xeffffffe

0800e280 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b090      	sub	sp, #64	; 0x40
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	69db      	ldr	r3, [r3, #28]
 800e292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e296:	d037      	beq.n	800e308 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e29a:	2200      	movs	r2, #0
 800e29c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	623b      	str	r3, [r7, #32]
   return(result);
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3308      	adds	r3, #8
 800e2be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2c0:	633a      	str	r2, [r7, #48]	; 0x30
 800e2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e5      	bne.n	800e2a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	e853 3f00 	ldrex	r3, [r3]
 800e2e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f2:	61fb      	str	r3, [r7, #28]
 800e2f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f6:	69b9      	ldr	r1, [r7, #24]
 800e2f8:	69fa      	ldr	r2, [r7, #28]
 800e2fa:	e841 2300 	strex	r3, r2, [r1]
 800e2fe:	617b      	str	r3, [r7, #20]
   return(result);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1e6      	bne.n	800e2d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e306:	e002      	b.n	800e30e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e308:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e30a:	f7f4 ff6b 	bl	80031e4 <HAL_UART_TxCpltCallback>
}
 800e30e:	bf00      	nop
 800e310:	3740      	adds	r7, #64	; 0x40
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e322:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7fe fe19 	bl	800cf5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e32a:	bf00      	nop
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b09c      	sub	sp, #112	; 0x70
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	69db      	ldr	r3, [r3, #28]
 800e344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e348:	d071      	beq.n	800e42e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e34c:	2200      	movs	r2, #0
 800e34e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e35a:	e853 3f00 	ldrex	r3, [r3]
 800e35e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e366:	66bb      	str	r3, [r7, #104]	; 0x68
 800e368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e370:	65bb      	str	r3, [r7, #88]	; 0x58
 800e372:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e378:	e841 2300 	strex	r3, r2, [r1]
 800e37c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e6      	bne.n	800e352 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3308      	adds	r3, #8
 800e38a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e396:	f023 0301 	bic.w	r3, r3, #1
 800e39a:	667b      	str	r3, [r7, #100]	; 0x64
 800e39c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e3a4:	647a      	str	r2, [r7, #68]	; 0x44
 800e3a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e5      	bne.n	800e384 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	623b      	str	r3, [r7, #32]
   return(result);
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ce:	663b      	str	r3, [r7, #96]	; 0x60
 800e3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e3d8:	633a      	str	r2, [r7, #48]	; 0x30
 800e3da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e0:	e841 2300 	strex	r3, r2, [r1]
 800e3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1e5      	bne.n	800e3b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3ee:	2220      	movs	r2, #32
 800e3f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d118      	bne.n	800e42e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	e853 3f00 	ldrex	r3, [r3]
 800e408:	60fb      	str	r3, [r7, #12]
   return(result);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f023 0310 	bic.w	r3, r3, #16
 800e410:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	461a      	mov	r2, r3
 800e418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e41a:	61fb      	str	r3, [r7, #28]
 800e41c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41e:	69b9      	ldr	r1, [r7, #24]
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	e841 2300 	strex	r3, r2, [r1]
 800e426:	617b      	str	r3, [r7, #20]
   return(result);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1e6      	bne.n	800e3fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e42e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e432:	2b01      	cmp	r3, #1
 800e434:	d107      	bne.n	800e446 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e43c:	4619      	mov	r1, r3
 800e43e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e440:	f7fe fda0 	bl	800cf84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e444:	e002      	b.n	800e44c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e448:	f7f4 fede 	bl	8003208 <HAL_UART_RxCpltCallback>
}
 800e44c:	bf00      	nop
 800e44e:	3770      	adds	r7, #112	; 0x70
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e460:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e466:	2b01      	cmp	r3, #1
 800e468:	d109      	bne.n	800e47e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e470:	085b      	lsrs	r3, r3, #1
 800e472:	b29b      	uxth	r3, r3
 800e474:	4619      	mov	r1, r3
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7fe fd84 	bl	800cf84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e47c:	e002      	b.n	800e484 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7fe fd76 	bl	800cf70 <HAL_UART_RxHalfCpltCallback>
}
 800e484:	bf00      	nop
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e498:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b4:	2b80      	cmp	r3, #128	; 0x80
 800e4b6:	d109      	bne.n	800e4cc <UART_DMAError+0x40>
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	2b21      	cmp	r3, #33	; 0x21
 800e4bc:	d106      	bne.n	800e4cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e4c6:	6978      	ldr	r0, [r7, #20]
 800e4c8:	f7ff fe32 	bl	800e130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d6:	2b40      	cmp	r3, #64	; 0x40
 800e4d8:	d109      	bne.n	800e4ee <UART_DMAError+0x62>
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b22      	cmp	r3, #34	; 0x22
 800e4de:	d106      	bne.n	800e4ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e4e8:	6978      	ldr	r0, [r7, #20]
 800e4ea:	f7ff fe63 	bl	800e1b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f4:	f043 0210 	orr.w	r2, r3, #16
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e4fe:	6978      	ldr	r0, [r7, #20]
 800e500:	f7f4 fe38 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e504:	bf00      	nop
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7f4 fe22 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e530:	bf00      	nop
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b088      	sub	sp, #32
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e554:	61fb      	str	r3, [r7, #28]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	461a      	mov	r2, r3
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	61bb      	str	r3, [r7, #24]
 800e560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6979      	ldr	r1, [r7, #20]
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	613b      	str	r3, [r7, #16]
   return(result);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e6      	bne.n	800e540 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f4 fe2f 	bl	80031e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e586:	bf00      	nop
 800e588:	3720      	adds	r7, #32
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e58e:	b480      	push	{r7}
 800e590:	b083      	sub	sp, #12
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e596:	bf00      	nop
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e5a2:	b480      	push	{r7}
 800e5a4:	b083      	sub	sp, #12
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e5aa:	bf00      	nop
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr

0800e5b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e5b6:	b480      	push	{r7}
 800e5b8:	b083      	sub	sp, #12
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e5be:	bf00      	nop
 800e5c0:	370c      	adds	r7, #12
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	b085      	sub	sp, #20
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d101      	bne.n	800e5e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800e5dc:	2302      	movs	r3, #2
 800e5de:	e027      	b.n	800e630 <HAL_UARTEx_DisableFifoMode+0x66>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2224      	movs	r2, #36	; 0x24
 800e5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f022 0201 	bic.w	r2, r2, #1
 800e606:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e60e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2220      	movs	r2, #32
 800e622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d101      	bne.n	800e654 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e650:	2302      	movs	r3, #2
 800e652:	e02d      	b.n	800e6b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2224      	movs	r2, #36	; 0x24
 800e660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f022 0201 	bic.w	r2, r2, #1
 800e67a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	430a      	orrs	r2, r1
 800e68e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 f84f 	bl	800e734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d101      	bne.n	800e6d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	e02d      	b.n	800e72c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2224      	movs	r2, #36	; 0x24
 800e6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f022 0201 	bic.w	r2, r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	430a      	orrs	r2, r1
 800e70a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 f811 	bl	800e734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2220      	movs	r2, #32
 800e71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e740:	2b00      	cmp	r3, #0
 800e742:	d108      	bne.n	800e756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e754:	e031      	b.n	800e7ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e756:	2310      	movs	r3, #16
 800e758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e75a:	2310      	movs	r3, #16
 800e75c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	0e5b      	lsrs	r3, r3, #25
 800e766:	b2db      	uxtb	r3, r3
 800e768:	f003 0307 	and.w	r3, r3, #7
 800e76c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	0f5b      	lsrs	r3, r3, #29
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 0307 	and.w	r3, r3, #7
 800e77c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	7b3a      	ldrb	r2, [r7, #12]
 800e782:	4911      	ldr	r1, [pc, #68]	; (800e7c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e784:	5c8a      	ldrb	r2, [r1, r2]
 800e786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e78a:	7b3a      	ldrb	r2, [r7, #12]
 800e78c:	490f      	ldr	r1, [pc, #60]	; (800e7cc <UARTEx_SetNbDataToProcess+0x98>)
 800e78e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e790:	fb93 f3f2 	sdiv	r3, r3, r2
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	7b7a      	ldrb	r2, [r7, #13]
 800e7a0:	4909      	ldr	r1, [pc, #36]	; (800e7c8 <UARTEx_SetNbDataToProcess+0x94>)
 800e7a2:	5c8a      	ldrb	r2, [r1, r2]
 800e7a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7a8:	7b7a      	ldrb	r2, [r7, #13]
 800e7aa:	4908      	ldr	r1, [pc, #32]	; (800e7cc <UARTEx_SetNbDataToProcess+0x98>)
 800e7ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e7ba:	bf00      	nop
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	0800ee8c 	.word	0x0800ee8c
 800e7cc:	0800ee94 	.word	0x0800ee94

0800e7d0 <__cxa_pure_virtual>:
 800e7d0:	b508      	push	{r3, lr}
 800e7d2:	f000 f80d 	bl	800e7f0 <_ZSt9terminatev>

0800e7d6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e7d6:	b508      	push	{r3, lr}
 800e7d8:	4780      	blx	r0
 800e7da:	f000 f80e 	bl	800e7fa <abort>
	...

0800e7e0 <_ZSt13get_terminatev>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	; (800e7ec <_ZSt13get_terminatev+0xc>)
 800e7e2:	6818      	ldr	r0, [r3, #0]
 800e7e4:	f3bf 8f5b 	dmb	ish
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	240001d0 	.word	0x240001d0

0800e7f0 <_ZSt9terminatev>:
 800e7f0:	b508      	push	{r3, lr}
 800e7f2:	f7ff fff5 	bl	800e7e0 <_ZSt13get_terminatev>
 800e7f6:	f7ff ffee 	bl	800e7d6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e7fa <abort>:
 800e7fa:	b508      	push	{r3, lr}
 800e7fc:	2006      	movs	r0, #6
 800e7fe:	f000 f873 	bl	800e8e8 <raise>
 800e802:	2001      	movs	r0, #1
 800e804:	f7f6 f80a 	bl	800481c <_exit>

0800e808 <__errno>:
 800e808:	4b01      	ldr	r3, [pc, #4]	; (800e810 <__errno+0x8>)
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	240001d4 	.word	0x240001d4

0800e814 <__libc_init_array>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	4d0d      	ldr	r5, [pc, #52]	; (800e84c <__libc_init_array+0x38>)
 800e818:	4c0d      	ldr	r4, [pc, #52]	; (800e850 <__libc_init_array+0x3c>)
 800e81a:	1b64      	subs	r4, r4, r5
 800e81c:	10a4      	asrs	r4, r4, #2
 800e81e:	2600      	movs	r6, #0
 800e820:	42a6      	cmp	r6, r4
 800e822:	d109      	bne.n	800e838 <__libc_init_array+0x24>
 800e824:	4d0b      	ldr	r5, [pc, #44]	; (800e854 <__libc_init_array+0x40>)
 800e826:	4c0c      	ldr	r4, [pc, #48]	; (800e858 <__libc_init_array+0x44>)
 800e828:	f000 f9b0 	bl	800eb8c <_init>
 800e82c:	1b64      	subs	r4, r4, r5
 800e82e:	10a4      	asrs	r4, r4, #2
 800e830:	2600      	movs	r6, #0
 800e832:	42a6      	cmp	r6, r4
 800e834:	d105      	bne.n	800e842 <__libc_init_array+0x2e>
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83c:	4798      	blx	r3
 800e83e:	3601      	adds	r6, #1
 800e840:	e7ee      	b.n	800e820 <__libc_init_array+0xc>
 800e842:	f855 3b04 	ldr.w	r3, [r5], #4
 800e846:	4798      	blx	r3
 800e848:	3601      	adds	r6, #1
 800e84a:	e7f2      	b.n	800e832 <__libc_init_array+0x1e>
 800e84c:	0800eea4 	.word	0x0800eea4
 800e850:	0800eea4 	.word	0x0800eea4
 800e854:	0800eea4 	.word	0x0800eea4
 800e858:	0800eeac 	.word	0x0800eeac

0800e85c <memcpy>:
 800e85c:	440a      	add	r2, r1
 800e85e:	4291      	cmp	r1, r2
 800e860:	f100 33ff 	add.w	r3, r0, #4294967295
 800e864:	d100      	bne.n	800e868 <memcpy+0xc>
 800e866:	4770      	bx	lr
 800e868:	b510      	push	{r4, lr}
 800e86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e872:	4291      	cmp	r1, r2
 800e874:	d1f9      	bne.n	800e86a <memcpy+0xe>
 800e876:	bd10      	pop	{r4, pc}

0800e878 <memset>:
 800e878:	4402      	add	r2, r0
 800e87a:	4603      	mov	r3, r0
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d100      	bne.n	800e882 <memset+0xa>
 800e880:	4770      	bx	lr
 800e882:	f803 1b01 	strb.w	r1, [r3], #1
 800e886:	e7f9      	b.n	800e87c <memset+0x4>

0800e888 <realloc>:
 800e888:	4b02      	ldr	r3, [pc, #8]	; (800e894 <realloc+0xc>)
 800e88a:	460a      	mov	r2, r1
 800e88c:	4601      	mov	r1, r0
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	f000 b8da 	b.w	800ea48 <_realloc_r>
 800e894:	240001d4 	.word	0x240001d4

0800e898 <_raise_r>:
 800e898:	291f      	cmp	r1, #31
 800e89a:	b538      	push	{r3, r4, r5, lr}
 800e89c:	4604      	mov	r4, r0
 800e89e:	460d      	mov	r5, r1
 800e8a0:	d904      	bls.n	800e8ac <_raise_r+0x14>
 800e8a2:	2316      	movs	r3, #22
 800e8a4:	6003      	str	r3, [r0, #0]
 800e8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8ae:	b112      	cbz	r2, 800e8b6 <_raise_r+0x1e>
 800e8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8b4:	b94b      	cbnz	r3, 800e8ca <_raise_r+0x32>
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 f830 	bl	800e91c <_getpid_r>
 800e8bc:	462a      	mov	r2, r5
 800e8be:	4601      	mov	r1, r0
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8c6:	f000 b817 	b.w	800e8f8 <_kill_r>
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d00a      	beq.n	800e8e4 <_raise_r+0x4c>
 800e8ce:	1c59      	adds	r1, r3, #1
 800e8d0:	d103      	bne.n	800e8da <_raise_r+0x42>
 800e8d2:	2316      	movs	r3, #22
 800e8d4:	6003      	str	r3, [r0, #0]
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	e7e7      	b.n	800e8aa <_raise_r+0x12>
 800e8da:	2400      	movs	r4, #0
 800e8dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	4798      	blx	r3
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	e7e0      	b.n	800e8aa <_raise_r+0x12>

0800e8e8 <raise>:
 800e8e8:	4b02      	ldr	r3, [pc, #8]	; (800e8f4 <raise+0xc>)
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	6818      	ldr	r0, [r3, #0]
 800e8ee:	f7ff bfd3 	b.w	800e898 <_raise_r>
 800e8f2:	bf00      	nop
 800e8f4:	240001d4 	.word	0x240001d4

0800e8f8 <_kill_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4d07      	ldr	r5, [pc, #28]	; (800e918 <_kill_r+0x20>)
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4604      	mov	r4, r0
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	602b      	str	r3, [r5, #0]
 800e906:	f7f5 ff79 	bl	80047fc <_kill>
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	d102      	bne.n	800e914 <_kill_r+0x1c>
 800e90e:	682b      	ldr	r3, [r5, #0]
 800e910:	b103      	cbz	r3, 800e914 <_kill_r+0x1c>
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	bd38      	pop	{r3, r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	24001c84 	.word	0x24001c84

0800e91c <_getpid_r>:
 800e91c:	f7f5 bf66 	b.w	80047ec <_getpid>

0800e920 <sbrk_aligned>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4e0e      	ldr	r6, [pc, #56]	; (800e95c <sbrk_aligned+0x3c>)
 800e924:	460c      	mov	r4, r1
 800e926:	6831      	ldr	r1, [r6, #0]
 800e928:	4605      	mov	r5, r0
 800e92a:	b911      	cbnz	r1, 800e932 <sbrk_aligned+0x12>
 800e92c:	f000 f8bc 	bl	800eaa8 <_sbrk_r>
 800e930:	6030      	str	r0, [r6, #0]
 800e932:	4621      	mov	r1, r4
 800e934:	4628      	mov	r0, r5
 800e936:	f000 f8b7 	bl	800eaa8 <_sbrk_r>
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	d00a      	beq.n	800e954 <sbrk_aligned+0x34>
 800e93e:	1cc4      	adds	r4, r0, #3
 800e940:	f024 0403 	bic.w	r4, r4, #3
 800e944:	42a0      	cmp	r0, r4
 800e946:	d007      	beq.n	800e958 <sbrk_aligned+0x38>
 800e948:	1a21      	subs	r1, r4, r0
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 f8ac 	bl	800eaa8 <_sbrk_r>
 800e950:	3001      	adds	r0, #1
 800e952:	d101      	bne.n	800e958 <sbrk_aligned+0x38>
 800e954:	f04f 34ff 	mov.w	r4, #4294967295
 800e958:	4620      	mov	r0, r4
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
 800e95c:	24001c80 	.word	0x24001c80

0800e960 <_malloc_r>:
 800e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e964:	1ccd      	adds	r5, r1, #3
 800e966:	f025 0503 	bic.w	r5, r5, #3
 800e96a:	3508      	adds	r5, #8
 800e96c:	2d0c      	cmp	r5, #12
 800e96e:	bf38      	it	cc
 800e970:	250c      	movcc	r5, #12
 800e972:	2d00      	cmp	r5, #0
 800e974:	4607      	mov	r7, r0
 800e976:	db01      	blt.n	800e97c <_malloc_r+0x1c>
 800e978:	42a9      	cmp	r1, r5
 800e97a:	d905      	bls.n	800e988 <_malloc_r+0x28>
 800e97c:	230c      	movs	r3, #12
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	2600      	movs	r6, #0
 800e982:	4630      	mov	r0, r6
 800e984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e988:	4e2e      	ldr	r6, [pc, #184]	; (800ea44 <_malloc_r+0xe4>)
 800e98a:	f000 f89d 	bl	800eac8 <__malloc_lock>
 800e98e:	6833      	ldr	r3, [r6, #0]
 800e990:	461c      	mov	r4, r3
 800e992:	bb34      	cbnz	r4, 800e9e2 <_malloc_r+0x82>
 800e994:	4629      	mov	r1, r5
 800e996:	4638      	mov	r0, r7
 800e998:	f7ff ffc2 	bl	800e920 <sbrk_aligned>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	4604      	mov	r4, r0
 800e9a0:	d14d      	bne.n	800ea3e <_malloc_r+0xde>
 800e9a2:	6834      	ldr	r4, [r6, #0]
 800e9a4:	4626      	mov	r6, r4
 800e9a6:	2e00      	cmp	r6, #0
 800e9a8:	d140      	bne.n	800ea2c <_malloc_r+0xcc>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	4631      	mov	r1, r6
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	eb04 0803 	add.w	r8, r4, r3
 800e9b4:	f000 f878 	bl	800eaa8 <_sbrk_r>
 800e9b8:	4580      	cmp	r8, r0
 800e9ba:	d13a      	bne.n	800ea32 <_malloc_r+0xd2>
 800e9bc:	6821      	ldr	r1, [r4, #0]
 800e9be:	3503      	adds	r5, #3
 800e9c0:	1a6d      	subs	r5, r5, r1
 800e9c2:	f025 0503 	bic.w	r5, r5, #3
 800e9c6:	3508      	adds	r5, #8
 800e9c8:	2d0c      	cmp	r5, #12
 800e9ca:	bf38      	it	cc
 800e9cc:	250c      	movcc	r5, #12
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	4638      	mov	r0, r7
 800e9d2:	f7ff ffa5 	bl	800e920 <sbrk_aligned>
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	d02b      	beq.n	800ea32 <_malloc_r+0xd2>
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	442b      	add	r3, r5
 800e9de:	6023      	str	r3, [r4, #0]
 800e9e0:	e00e      	b.n	800ea00 <_malloc_r+0xa0>
 800e9e2:	6822      	ldr	r2, [r4, #0]
 800e9e4:	1b52      	subs	r2, r2, r5
 800e9e6:	d41e      	bmi.n	800ea26 <_malloc_r+0xc6>
 800e9e8:	2a0b      	cmp	r2, #11
 800e9ea:	d916      	bls.n	800ea1a <_malloc_r+0xba>
 800e9ec:	1961      	adds	r1, r4, r5
 800e9ee:	42a3      	cmp	r3, r4
 800e9f0:	6025      	str	r5, [r4, #0]
 800e9f2:	bf18      	it	ne
 800e9f4:	6059      	strne	r1, [r3, #4]
 800e9f6:	6863      	ldr	r3, [r4, #4]
 800e9f8:	bf08      	it	eq
 800e9fa:	6031      	streq	r1, [r6, #0]
 800e9fc:	5162      	str	r2, [r4, r5]
 800e9fe:	604b      	str	r3, [r1, #4]
 800ea00:	4638      	mov	r0, r7
 800ea02:	f104 060b 	add.w	r6, r4, #11
 800ea06:	f000 f865 	bl	800ead4 <__malloc_unlock>
 800ea0a:	f026 0607 	bic.w	r6, r6, #7
 800ea0e:	1d23      	adds	r3, r4, #4
 800ea10:	1af2      	subs	r2, r6, r3
 800ea12:	d0b6      	beq.n	800e982 <_malloc_r+0x22>
 800ea14:	1b9b      	subs	r3, r3, r6
 800ea16:	50a3      	str	r3, [r4, r2]
 800ea18:	e7b3      	b.n	800e982 <_malloc_r+0x22>
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	42a3      	cmp	r3, r4
 800ea1e:	bf0c      	ite	eq
 800ea20:	6032      	streq	r2, [r6, #0]
 800ea22:	605a      	strne	r2, [r3, #4]
 800ea24:	e7ec      	b.n	800ea00 <_malloc_r+0xa0>
 800ea26:	4623      	mov	r3, r4
 800ea28:	6864      	ldr	r4, [r4, #4]
 800ea2a:	e7b2      	b.n	800e992 <_malloc_r+0x32>
 800ea2c:	4634      	mov	r4, r6
 800ea2e:	6876      	ldr	r6, [r6, #4]
 800ea30:	e7b9      	b.n	800e9a6 <_malloc_r+0x46>
 800ea32:	230c      	movs	r3, #12
 800ea34:	603b      	str	r3, [r7, #0]
 800ea36:	4638      	mov	r0, r7
 800ea38:	f000 f84c 	bl	800ead4 <__malloc_unlock>
 800ea3c:	e7a1      	b.n	800e982 <_malloc_r+0x22>
 800ea3e:	6025      	str	r5, [r4, #0]
 800ea40:	e7de      	b.n	800ea00 <_malloc_r+0xa0>
 800ea42:	bf00      	nop
 800ea44:	24001c7c 	.word	0x24001c7c

0800ea48 <_realloc_r>:
 800ea48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4c:	4680      	mov	r8, r0
 800ea4e:	4614      	mov	r4, r2
 800ea50:	460e      	mov	r6, r1
 800ea52:	b921      	cbnz	r1, 800ea5e <_realloc_r+0x16>
 800ea54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea58:	4611      	mov	r1, r2
 800ea5a:	f7ff bf81 	b.w	800e960 <_malloc_r>
 800ea5e:	b92a      	cbnz	r2, 800ea6c <_realloc_r+0x24>
 800ea60:	f000 f83e 	bl	800eae0 <_free_r>
 800ea64:	4625      	mov	r5, r4
 800ea66:	4628      	mov	r0, r5
 800ea68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea6c:	f000 f884 	bl	800eb78 <_malloc_usable_size_r>
 800ea70:	4284      	cmp	r4, r0
 800ea72:	4607      	mov	r7, r0
 800ea74:	d802      	bhi.n	800ea7c <_realloc_r+0x34>
 800ea76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea7a:	d812      	bhi.n	800eaa2 <_realloc_r+0x5a>
 800ea7c:	4621      	mov	r1, r4
 800ea7e:	4640      	mov	r0, r8
 800ea80:	f7ff ff6e 	bl	800e960 <_malloc_r>
 800ea84:	4605      	mov	r5, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d0ed      	beq.n	800ea66 <_realloc_r+0x1e>
 800ea8a:	42bc      	cmp	r4, r7
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	4631      	mov	r1, r6
 800ea90:	bf28      	it	cs
 800ea92:	463a      	movcs	r2, r7
 800ea94:	f7ff fee2 	bl	800e85c <memcpy>
 800ea98:	4631      	mov	r1, r6
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	f000 f820 	bl	800eae0 <_free_r>
 800eaa0:	e7e1      	b.n	800ea66 <_realloc_r+0x1e>
 800eaa2:	4635      	mov	r5, r6
 800eaa4:	e7df      	b.n	800ea66 <_realloc_r+0x1e>
	...

0800eaa8 <_sbrk_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4d06      	ldr	r5, [pc, #24]	; (800eac4 <_sbrk_r+0x1c>)
 800eaac:	2300      	movs	r3, #0
 800eaae:	4604      	mov	r4, r0
 800eab0:	4608      	mov	r0, r1
 800eab2:	602b      	str	r3, [r5, #0]
 800eab4:	f7f5 febc 	bl	8004830 <_sbrk>
 800eab8:	1c43      	adds	r3, r0, #1
 800eaba:	d102      	bne.n	800eac2 <_sbrk_r+0x1a>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	b103      	cbz	r3, 800eac2 <_sbrk_r+0x1a>
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	24001c84 	.word	0x24001c84

0800eac8 <__malloc_lock>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__malloc_lock+0x8>)
 800eaca:	f000 b85d 	b.w	800eb88 <__retarget_lock_acquire_recursive>
 800eace:	bf00      	nop
 800ead0:	24001c88 	.word	0x24001c88

0800ead4 <__malloc_unlock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__malloc_unlock+0x8>)
 800ead6:	f000 b858 	b.w	800eb8a <__retarget_lock_release_recursive>
 800eada:	bf00      	nop
 800eadc:	24001c88 	.word	0x24001c88

0800eae0 <_free_r>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	2900      	cmp	r1, #0
 800eae4:	d044      	beq.n	800eb70 <_free_r+0x90>
 800eae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaea:	9001      	str	r0, [sp, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f1a1 0404 	sub.w	r4, r1, #4
 800eaf2:	bfb8      	it	lt
 800eaf4:	18e4      	addlt	r4, r4, r3
 800eaf6:	f7ff ffe7 	bl	800eac8 <__malloc_lock>
 800eafa:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <_free_r+0x94>)
 800eafc:	9801      	ldr	r0, [sp, #4]
 800eafe:	6813      	ldr	r3, [r2, #0]
 800eb00:	b933      	cbnz	r3, 800eb10 <_free_r+0x30>
 800eb02:	6063      	str	r3, [r4, #4]
 800eb04:	6014      	str	r4, [r2, #0]
 800eb06:	b003      	add	sp, #12
 800eb08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb0c:	f7ff bfe2 	b.w	800ead4 <__malloc_unlock>
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	d908      	bls.n	800eb26 <_free_r+0x46>
 800eb14:	6825      	ldr	r5, [r4, #0]
 800eb16:	1961      	adds	r1, r4, r5
 800eb18:	428b      	cmp	r3, r1
 800eb1a:	bf01      	itttt	eq
 800eb1c:	6819      	ldreq	r1, [r3, #0]
 800eb1e:	685b      	ldreq	r3, [r3, #4]
 800eb20:	1949      	addeq	r1, r1, r5
 800eb22:	6021      	streq	r1, [r4, #0]
 800eb24:	e7ed      	b.n	800eb02 <_free_r+0x22>
 800eb26:	461a      	mov	r2, r3
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	b10b      	cbz	r3, 800eb30 <_free_r+0x50>
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	d9fa      	bls.n	800eb26 <_free_r+0x46>
 800eb30:	6811      	ldr	r1, [r2, #0]
 800eb32:	1855      	adds	r5, r2, r1
 800eb34:	42a5      	cmp	r5, r4
 800eb36:	d10b      	bne.n	800eb50 <_free_r+0x70>
 800eb38:	6824      	ldr	r4, [r4, #0]
 800eb3a:	4421      	add	r1, r4
 800eb3c:	1854      	adds	r4, r2, r1
 800eb3e:	42a3      	cmp	r3, r4
 800eb40:	6011      	str	r1, [r2, #0]
 800eb42:	d1e0      	bne.n	800eb06 <_free_r+0x26>
 800eb44:	681c      	ldr	r4, [r3, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	6053      	str	r3, [r2, #4]
 800eb4a:	4421      	add	r1, r4
 800eb4c:	6011      	str	r1, [r2, #0]
 800eb4e:	e7da      	b.n	800eb06 <_free_r+0x26>
 800eb50:	d902      	bls.n	800eb58 <_free_r+0x78>
 800eb52:	230c      	movs	r3, #12
 800eb54:	6003      	str	r3, [r0, #0]
 800eb56:	e7d6      	b.n	800eb06 <_free_r+0x26>
 800eb58:	6825      	ldr	r5, [r4, #0]
 800eb5a:	1961      	adds	r1, r4, r5
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	bf04      	itt	eq
 800eb60:	6819      	ldreq	r1, [r3, #0]
 800eb62:	685b      	ldreq	r3, [r3, #4]
 800eb64:	6063      	str	r3, [r4, #4]
 800eb66:	bf04      	itt	eq
 800eb68:	1949      	addeq	r1, r1, r5
 800eb6a:	6021      	streq	r1, [r4, #0]
 800eb6c:	6054      	str	r4, [r2, #4]
 800eb6e:	e7ca      	b.n	800eb06 <_free_r+0x26>
 800eb70:	b003      	add	sp, #12
 800eb72:	bd30      	pop	{r4, r5, pc}
 800eb74:	24001c7c 	.word	0x24001c7c

0800eb78 <_malloc_usable_size_r>:
 800eb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb7c:	1f18      	subs	r0, r3, #4
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	bfbc      	itt	lt
 800eb82:	580b      	ldrlt	r3, [r1, r0]
 800eb84:	18c0      	addlt	r0, r0, r3
 800eb86:	4770      	bx	lr

0800eb88 <__retarget_lock_acquire_recursive>:
 800eb88:	4770      	bx	lr

0800eb8a <__retarget_lock_release_recursive>:
 800eb8a:	4770      	bx	lr

0800eb8c <_init>:
 800eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8e:	bf00      	nop
 800eb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb92:	bc08      	pop	{r3}
 800eb94:	469e      	mov	lr, r3
 800eb96:	4770      	bx	lr

0800eb98 <_fini>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	bf00      	nop
 800eb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb9e:	bc08      	pop	{r3}
 800eba0:	469e      	mov	lr, r3
 800eba2:	4770      	bx	lr
