
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e618  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e8e8  0800e8e8  0001e8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ebe0  0800ebe0  0001ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ebe8  0800ebe8  0001ebe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ebf0  0800ebf0  0001ebf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  0800ebf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e50  24000218  0800ee0c  00020218  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001068  0800ee0c  00021068  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002133d  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036be  00000000  00000000  00041583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  00044c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001398  00000000  00000000  000460f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035170  00000000  00000000  00047488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b5f1  00000000  00000000  0007c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015365f  00000000  00000000  00097be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eb248  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c40  00000000  00000000  001eb298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000218 	.word	0x24000218
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e8d0 	.word	0x0800e8d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400021c 	.word	0x2400021c
 800030c:	0800e8d0 	.word	0x0800e8d0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	4aa9      	ldr	r2, [pc, #676]	; (8000930 <pidCtrl+0x2b0>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2168      	movs	r1, #104	; 0x68
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	3318      	adds	r3, #24
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000908 <pidCtrl+0x288>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000910 <pidCtrl+0x290>
 80006ae:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b2:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8000918 <pidCtrl+0x298>
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000920 <pidCtrl+0x2a0>
 80006be:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c2:	4a9b      	ldr	r2, [pc, #620]	; (8000930 <pidCtrl+0x2b0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2168      	movs	r1, #104	; 0x68
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3328      	adds	r3, #40	; 0x28
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d4:	4a96      	ldr	r2, [pc, #600]	; (8000930 <pidCtrl+0x2b0>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2168      	movs	r1, #104	; 0x68
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	3320      	adds	r3, #32
 80006e2:	ed93 6b00 	vldr	d6, [r3]
 80006e6:	4a92      	ldr	r2, [pc, #584]	; (8000930 <pidCtrl+0x2b0>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2168      	movs	r1, #104	; 0x68
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <pidCtrl+0x2b0>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2168      	movs	r1, #104	; 0x68
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 800070e:	4a88      	ldr	r2, [pc, #544]	; (8000930 <pidCtrl+0x2b0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2168      	movs	r1, #104	; 0x68
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	ed93 6b00 	vldr	d6, [r3]
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <pidCtrl+0x2b0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2168      	movs	r1, #104	; 0x68
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	ed93 7b00 	vldr	d7, [r3]
 8000730:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000734:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <pidCtrl+0x2b0>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2168      	movs	r1, #104	; 0x68
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	3348      	adds	r3, #72	; 0x48
 8000742:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000746:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <pidCtrl+0x2b0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2168      	movs	r1, #104	; 0x68
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	ed93 6b00 	vldr	d6, [r3]
 8000758:	4a75      	ldr	r2, [pc, #468]	; (8000930 <pidCtrl+0x2b0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	ed93 5b00 	vldr	d5, [r3]
 800076a:	4a71      	ldr	r2, [pc, #452]	; (8000930 <pidCtrl+0x2b0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	3338      	adds	r3, #56	; 0x38
 8000778:	ed93 7b00 	vldr	d7, [r3]
 800077c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000780:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8000920 <pidCtrl+0x2a0>
 8000784:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	4a68      	ldr	r2, [pc, #416]	; (8000930 <pidCtrl+0x2b0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <pidCtrl+0x2b0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2168      	movs	r1, #104	; 0x68
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	3310      	adds	r3, #16
 80007ac:	ed93 6b00 	vldr	d6, [r3]
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <pidCtrl+0x2b0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2168      	movs	r1, #104	; 0x68
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	ed93 5b00 	vldr	d5, [r3]
 80007c2:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <pidCtrl+0x2b0>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2168      	movs	r1, #104	; 0x68
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	3338      	adds	r3, #56	; 0x38
 80007d0:	ed93 7b00 	vldr	d7, [r3]
 80007d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007dc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000920 <pidCtrl+0x2a0>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <pidCtrl+0x2b0>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	3358      	adds	r3, #88	; 0x58
 80007f2:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80007f6:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <pidCtrl+0x2b0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2168      	movs	r1, #104	; 0x68
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3350      	adds	r3, #80	; 0x50
 8000804:	ed93 7b00 	vldr	d7, [r3]
 8000808:	eeb0 7bc7 	vabs.f64	d7, d7
 800080c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000810:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	dd1d      	ble.n	8000856 <pidCtrl+0x1d6>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <pidCtrl+0x2b0>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2168      	movs	r1, #104	; 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	3350      	adds	r3, #80	; 0x50
 8000828:	ed93 7b00 	vldr	d7, [r3]
 800082c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	db03      	blt.n	800083e <pidCtrl+0x1be>
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <pidCtrl+0x2b4>)
 800083c:	e002      	b.n	8000844 <pidCtrl+0x1c4>
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pidCtrl+0x2b8>)
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <pidCtrl+0x2b0>)
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2468      	movs	r4, #104	; 0x68
 800084a:	fb04 f101 	mul.w	r1, r4, r1
 800084e:	4401      	add	r1, r0
 8000850:	3150      	adds	r1, #80	; 0x50
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <pidCtrl+0x2b0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2168      	movs	r1, #104	; 0x68
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	3348      	adds	r3, #72	; 0x48
 8000864:	ed93 6b00 	vldr	d6, [r3]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <pidCtrl+0x2b0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2168      	movs	r1, #104	; 0x68
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <pidCtrl+0x2b0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2168      	movs	r1, #104	; 0x68
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	ed93 7b00 	vldr	d7, [r3]
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <pidCtrl+0x2b0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	3340      	adds	r3, #64	; 0x40
 80008a2:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <pidCtrl+0x2b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <pidCtrl+0x2b0>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2468      	movs	r4, #104	; 0x68
 80008be:	fb04 f101 	mul.w	r1, r4, r1
 80008c2:	4401      	add	r1, r0
 80008c4:	3138      	adds	r1, #56	; 0x38
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]

	Kpid[i].pulse = fabs(Kpid[i].u) * 3200;
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <pidCtrl+0x2b0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	3340      	adds	r3, #64	; 0x40
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000928 <pidCtrl+0x2a8>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <pidCtrl+0x2b0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2168      	movs	r1, #104	; 0x68
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	ed83 7b00 	vstr	d7, [r3]
//	if(Kpid[i].pulse > 3200)	Kpid[i].pulse = 3200;
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	f3af 8000 	nop.w
 8000908:	54cadf99 	.word	0x54cadf99
 800090c:	400921fb 	.word	0x400921fb
 8000910:	b6ae7d56 	.word	0xb6ae7d56
 8000914:	3fb97f62 	.word	0x3fb97f62
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	40e4cccc 	.word	0x40e4cccc
 8000920:	00000000 	.word	0x00000000
 8000924:	408f4000 	.word	0x408f4000
 8000928:	00000000 	.word	0x00000000
 800092c:	40a90000 	.word	0x40a90000
 8000930:	24000000 	.word	0x24000000
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f004 f8ec 	bl	8004b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f862 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fc68 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 fc3e 	bl	80011cc <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000950:	f000 fbf0 	bl	8001134 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000954:	f000 f91a 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000958:	f000 f96e 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000960:	f000 fa0e 	bl	8000d80 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000964:	f000 faa8 	bl	8000eb8 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000968:	f000 fb38 	bl	8000fdc <MX_TIM23_Init>
  MX_TIM24_Init();
 800096c:	f000 fb8c 	bl	8001088 <MX_TIM24_Init>
  MX_TIM2_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0xb0>)
 8000976:	f00a f865 	bl	800aa44 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xb4>)
 800097c:	f00a f862 	bl	800aa44 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0xb8>)
 8000984:	f00a f93c 	bl	800ac00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000988:	210c      	movs	r1, #12
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0xb8>)
 800098c:	f00a f938 	bl	800ac00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0xbc>)
 8000994:	f00a f934 	bl	800ac00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <main+0xbc>)
 800099c:	f00a f930 	bl	800ac00 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0xc0>)
 80009a4:	f00a faee 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xc0>)
 80009ac:	f00a faea 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xc4>)
 80009b4:	f00a fae6 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xc4>)
 80009bc:	f00a fae2 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0xc8>)
 80009c4:	f00a fade 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xc8>)
 80009cc:	f00a fada 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0xcc>)
 80009d4:	f00a fad6 	bl	800af84 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <main+0xcc>)
 80009dc:	f00a fad2 	bl	800af84 <HAL_TIM_Encoder_Start>


    setup();
 80009e0:	f002 fb34 	bl	800304c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 80009e4:	f002 fb48 	bl	8003078 <loop>
 80009e8:	e7fc      	b.n	80009e4 <main+0xa8>
 80009ea:	bf00      	nop
 80009ec:	24000318 	.word	0x24000318
 80009f0:	24000234 	.word	0x24000234
 80009f4:	24000364 	.word	0x24000364
 80009f8:	240003b0 	.word	0x240003b0
 80009fc:	24000448 	.word	0x24000448
 8000a00:	24000280 	.word	0x24000280
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240003fc 	.word	0x240003fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00d fdce 	bl	800e5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fdc8 	bl	800e5bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f007 fd21 	bl	8008474 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0xe0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <SystemClock_Config+0xe0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xe0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a7a:	2315      	movs	r3, #21
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fd24 	bl	80084e8 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fc79 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f8b6 	bl	8008c44 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ade:	f000 fc5d 	bl	800139c <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	223f      	movs	r2, #63	; 0x3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b38:	f009 ff2c 	bl	800a994 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b42:	f000 fc2b 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b54:	f00a fcd8 	bl	800b508 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f000 fc1d 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b70:	f00b fa2a 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b7a:	f000 fc0f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000234 	.word	0x24000234

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00d fd0e 	bl	800e5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f00a f91c 	bl	800ae38 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fbc9 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f00b f9d6 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fbbb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000280 	.word	0x24000280
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fcb8 	bl	800e5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f00a f8c6 	bl	800ae38 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fb73 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f00b f980 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 fb65 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240002cc 	.word	0x240002cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_TIM5_Init+0x98>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d2a:	f009 fe33 	bl	800a994 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fb32 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d46:	f00a fbdf 	bl	800b508 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fb24 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d62:	f00b f931 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fb16 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	40000c00 	.word	0x40000c00

08000d80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00d fc05 	bl	800e5bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x134>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000de0:	f009 feb6 	bl	800ab50 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fad7 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e02:	f00b f8e1 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fac6 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e36:	f00a fa53 	bl	800b2e0 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 faac 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e4e:	f00a fa47 	bl	800b2e0 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 faa0 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e92:	f00b f935 	bl	800c100 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000e9c:	f000 fa7e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000ea2:	f003 f953 	bl	800414c <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d fb69 	bl	800e5bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM15_Init+0x120>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000efe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f18:	f009 fe1a 	bl	800ab50 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fa3b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f36:	f00b f847 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fa2c 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f6a:	f00a f9b9 	bl	800b2e0 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f74:	f000 fa12 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f82:	f00a f9ad 	bl	800b2e0 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 fa06 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fb8:	f00b f8a2 	bl	800c100 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fc2:	f000 f9eb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fc8:	f003 f8c0 	bl	800414c <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3760      	adds	r7, #96	; 0x60
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240003b0 	.word	0x240003b0
 8000fd8:	40014000 	.word	0x40014000

08000fdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d fae6 	bl	800e5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM23_Init+0xa4>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM23_Init+0xa8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM23_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM23_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM23_Init+0xa4>)
 800104c:	f009 fef4 	bl	800ae38 <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 f9a1 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001068:	f00a ffae 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 f993 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240003fc 	.word	0x240003fc
 8001084:	4000e000 	.word	0x4000e000

08001088 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fa90 	bl	800e5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_TIM24_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM24_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM24_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM24_Init+0xa4>)
 80010f8:	f009 fe9e 	bl	800ae38 <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 f94b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM24_Init+0xa4>)
 8001114:	f00a ff58 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 f93d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000448 	.word	0x24000448
 8001130:	4000e400 	.word	0x4000e400

08001134 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_USART10_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800117e:	f00b f87d 	bl	800c27c <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 f908 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001190:	f00d f8f6 	bl	800e380 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 f8ff 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011a2:	f00d f92b 	bl	800e3fc <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 f8f6 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011b2:	f00d f8ac 	bl	800e30e <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 f8ee 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000494 	.word	0x24000494
 80011c8:	40011c00 	.word	0x40011c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x4c>)
 80011d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x4c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 fe22 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fa:	200b      	movs	r0, #11
 80011fc:	f003 fe39 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200c      	movs	r0, #12
 8001206:	f003 fe1a 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800120a:	200c      	movs	r0, #12
 800120c:	f003 fe31 	bl	8004e72 <HAL_NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <MX_GPIO_Init+0x170>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <MX_GPIO_Init+0x170>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_GPIO_Init+0x170>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x170>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_GPIO_Init+0x170>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x170>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <MX_GPIO_Init+0x170>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x170>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_GPIO_Init+0x170>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x170>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x170>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x170>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0x170>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_GPIO_Init+0x174>)
 800130c:	f007 f874 	bl	80083f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <MX_GPIO_Init+0x178>)
 8001318:	f007 f86e 	bl	80083f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800131c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001320:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0x174>)
 8001336:	f006 fdb5 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x17c>)
 8001352:	f006 fda7 	bl	8007ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x178>)
 8001370:	f006 fd98 	bl	8007ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f003 fd60 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fd77 	bl	8004e72 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58021000 	.word	0x58021000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>

080013a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	0800eb90 	.word	0x0800eb90

080013e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      data()
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffe8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffcf 	bl	80013a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0800eb78 	.word	0x0800eb78

08001418 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0a19      	lsrs	r1, r3, #8
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0e19      	lsrs	r1, r3, #24
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a19      	lsrs	r1, r3, #8
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0c19      	lsrs	r1, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3302      	adds	r3, #2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0e19      	lsrs	r1, r3, #24
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3303      	adds	r3, #3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3304      	adds	r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ba:	68fb      	ldr	r3, [r7, #12]
    }
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3302      	adds	r3, #2
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3303      	adds	r3, #3
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3302      	adds	r3, #2
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	440b      	add	r3, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3303      	adds	r3, #3
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3304      	adds	r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
     return offset;
 8001582:	68fb      	ldr	r3, [r7, #12]
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	0800e8e8 	.word	0x0800e8e8

080015ac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	0800e8fc 	.word	0x0800e8fc

080015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fef8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	809a      	strh	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    {
    }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800eb60 	.word	0x0800eb60
 800160c:	0800e920 	.word	0x0800e920

08001610 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8899      	ldrh	r1, [r3, #4]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b299      	uxth	r1, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3302      	adds	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe60 	bl	8000310 <strlen>
 8001650:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fdb4 	bl	80031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3304      	adds	r3, #4
 8001664:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	18d0      	adds	r0, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4619      	mov	r1, r3
 8001674:	f00c ff94 	bl	800e5a0 <memcpy>
      offset += length_topic_name;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fe43 	bl	8000310 <strlen>
 800168a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fd97 	bl	80031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	18d0      	adds	r0, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f00c ff77 	bl	800e5a0 <memcpy>
      offset += length_message_type;
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fe26 	bl	8000310 <strlen>
 80016c4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd7a 	bl	80031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	18d0      	adds	r0, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f00c ff5a 	bl	800e5a0 <memcpy>
      offset += length_md5sum;
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c19      	lsrs	r1, r3, #16
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3302      	adds	r3, #2
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0e19      	lsrs	r1, r3, #24
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3303      	adds	r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	4413      	add	r3, r2
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
      return offset;
 800173c:	69fb      	ldr	r3, [r7, #28]
    }
 800173e:	4618      	mov	r0, r3
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	b21a      	sxth	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3301      	adds	r3, #1
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3302      	adds	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fd36 	bl	8003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3304      	adds	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	441a      	add	r2, r3
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e7ec      	b.n	80017a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3b01      	subs	r3, #1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	441a      	add	r2, r3
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fd03 	bl	8003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3304      	adds	r3, #4
 8001802:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	429a      	cmp	r2, r3
 8001812:	d20c      	bcs.n	800182e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	441a      	add	r2, r3
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	3b01      	subs	r3, #1
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	440b      	add	r3, r1
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	3301      	adds	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	e7ec      	b.n	8001808 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	3b01      	subs	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fcd0 	bl	8003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3304      	adds	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	441a      	add	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3b01      	subs	r3, #1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440b      	add	r3, r1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e7ec      	b.n	800186e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	3b01      	subs	r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	441a      	add	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440a      	add	r2, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3301      	adds	r3, #1
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	440b      	add	r3, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	3302      	adds	r3, #2
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3303      	adds	r3, #3
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	3304      	adds	r3, #4
 800190a:	61bb      	str	r3, [r7, #24]
     return offset;
 800190c:	69bb      	ldr	r3, [r7, #24]
    }
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	0800e924 	.word	0x0800e924

08001934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	0800e940 	.word	0x0800e940

08001950 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd34 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	711a      	strb	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001970:	609a      	str	r2, [r3, #8]
    {
    }
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	0800eb48 	.word	0x0800eb48
 8001980:	0800e920 	.word	0x0800e920

08001984 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	7912      	ldrb	r2, [r2, #4]
 800199c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fcb1 	bl	8000310 <strlen>
 80019ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fc05 	bl	80031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	18d0      	adds	r0, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f00c fde5 	bl	800e5a0 <memcpy>
      offset += length_msg;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019de:	68fb      	ldr	r3, [r7, #12]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fbf5 	bl	8003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20c      	bcs.n	8001a4a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	441a      	add	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e7ec      	b.n	8001a24 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b01      	subs	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
     return offset;
 8001a6e:	693b      	ldr	r3, [r7, #16]
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0800e964 	.word	0x0800e964

08001a94 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0800e978 	.word	0x0800e978

08001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc84 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800eb30 	.word	0x0800eb30

08001af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0a19      	lsrs	r1, r3, #8
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0c19      	lsrs	r1, r3, #16
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3302      	adds	r3, #2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0e19      	lsrs	r1, r3, #24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3303      	adds	r3, #3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d22b      	bcs.n	8001bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	0a19      	lsrs	r1, r3, #8
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3301      	adds	r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	0c19      	lsrs	r1, r3, #16
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	0e19      	lsrs	r1, r3, #24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3304      	adds	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	e7ce      	b.n	8001b54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	0a19      	lsrs	r1, r3, #8
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	0c19      	lsrs	r1, r3, #16
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3302      	adds	r3, #2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	0e19      	lsrs	r1, r3, #24
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d22b      	bcs.n	8001c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0a19      	lsrs	r1, r3, #8
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3301      	adds	r3, #1
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0c19      	lsrs	r1, r3, #16
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3302      	adds	r3, #2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	0e19      	lsrs	r1, r3, #24
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3303      	adds	r3, #3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e7ce      	b.n	8001c04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69d9      	ldr	r1, [r3, #28]
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	0a19      	lsrs	r1, r3, #8
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	0c19      	lsrs	r1, r3, #16
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3302      	adds	r3, #2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	0e19      	lsrs	r1, r3, #24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	3304      	adds	r3, #4
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d228      	bcs.n	8001d10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb20 	bl	8000310 <strlen>
 8001cd0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fa74 	bl	80031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	18d0      	adds	r0, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f00c fc50 	bl	800e5a0 <memcpy>
      offset += length_stringsi;
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e7d1      	b.n	8001cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d12:	4618      	mov	r0, r3
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08e      	sub	sp, #56	; 0x38
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	3301      	adds	r3, #1
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3302      	adds	r3, #2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3303      	adds	r3, #3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	6a3a      	ldr	r2, [r7, #32]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	6a3a      	ldr	r2, [r7, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d90a      	bls.n	8001d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f00c fc22 	bl	800e5cc <realloc>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d236      	bcs.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	440a      	add	r2, r1
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	3301      	adds	r3, #1
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	3302      	adds	r3, #2
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	440b      	add	r3, r1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3303      	adds	r3, #3
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	440b      	add	r3, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	3304      	adds	r3, #4
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0e:	e7c3      	b.n	8001d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3302      	adds	r3, #2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	3303      	adds	r3, #3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3304      	adds	r3, #4
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d90a      	bls.n	8001e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f00c fbae 	bl	800e5cc <realloc>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d236      	bcs.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	440a      	add	r2, r1
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	440b      	add	r3, r1
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	440b      	add	r3, r1
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	3304      	adds	r3, #4
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	3214      	adds	r2, #20
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	e7c3      	b.n	8001e80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3302      	adds	r3, #2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3303      	adds	r3, #3
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d90a      	bls.n	8001f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f00c fb3a 	bl	800e5cc <realloc>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d23f      	bcs.n	8001ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	441a      	add	r2, r3
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f940 	bl	8003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	3304      	adds	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3301      	adds	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e7ec      	b.n	8001f8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	3220      	adds	r2, #32
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3301      	adds	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff0:	e7ba      	b.n	8001f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3738      	adds	r7, #56	; 0x38
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	0800ea84 	.word	0x0800ea84

08002018 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	0800e99c 	.word	0x0800e99c

08002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68d8      	ldr	r0, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6891      	ldr	r1, [r2, #8]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4798      	blx	r3
 8002080:	4603      	mov	r3, r0
  };
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
  }
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d068      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d061      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d05a      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d053      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04c      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d045      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03e      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d037      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d030      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d029      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01b      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d014      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d006      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d109      	bne.n	80021a0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219e:	e008      	b.n	80021b2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40020010 	.word	0x40020010
 80021c4:	40020028 	.word	0x40020028
 80021c8:	40020040 	.word	0x40020040
 80021cc:	40020058 	.word	0x40020058
 80021d0:	40020070 	.word	0x40020070
 80021d4:	40020088 	.word	0x40020088
 80021d8:	400200a0 	.word	0x400200a0
 80021dc:	400200b8 	.word	0x400200b8
 80021e0:	40020410 	.word	0x40020410
 80021e4:	40020428 	.word	0x40020428
 80021e8:	40020440 	.word	0x40020440
 80021ec:	40020458 	.word	0x40020458
 80021f0:	40020470 	.word	0x40020470
 80021f4:	40020488 	.word	0x40020488
 80021f8:	400204a0 	.word	0x400204a0
 80021fc:	400204b8 	.word	0x400204b8

08002200 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <_ZN13STM32HardwareC1Ev+0x34>)
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	24000494 	.word	0x24000494

08002238 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f804 	bl	800224e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002262:	4619      	mov	r1, r3
 8002264:	f00a f928 	bl	800c4b8 <HAL_UART_Receive_DMA>
    }
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff0d 	bl	80020a4 <_ZN13STM32Hardware10getRdmaIndEv>
 800228a:	4603      	mov	r3, r0
 800228c:	429c      	cmp	r4, r3
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022a0:	1c59      	adds	r1, r3, #1
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80022c0:	68fb      	ldr	r3, [r7, #12]
    }
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
	...

080022cc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d108      	bne.n	80022f2 <_ZN13STM32Hardware5flushEv+0x26>
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <_ZN13STM32Hardware5flushEv+0x26>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <_ZN13STM32Hardware5flushEv+0x28>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03f      	beq.n	8002378 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800230a:	429a      	cmp	r2, r3
 800230c:	d031      	beq.n	8002372 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800231a:	429a      	cmp	r2, r3
 800231c:	d20a      	bcs.n	8002334 <_ZN13STM32Hardware5flushEv+0x68>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800232c:	b29b      	uxth	r3, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b29b      	uxth	r3, r3
 8002332:	e006      	b.n	8002342 <_ZN13STM32Hardware5flushEv+0x76>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800233a:	b29b      	uxth	r3, r3
 800233c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002340:	b29b      	uxth	r3, r3
 8002342:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800234e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	89fa      	ldrh	r2, [r7, #14]
 8002358:	4619      	mov	r1, r3
 800235a:	f00a f81b 	bl	800c394 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4413      	add	r3, r2
 8002368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
      }
    }
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	24000614 	.word	0x24000614

08002384 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239a:	bfa8      	it	ge
 800239c:	f44f 7300 	movge.w	r3, #512	; 0x200
 80023a0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023a8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	bf28      	it	cs
 80023b2:	4613      	movcs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80023bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f00c f8e9 	bl	800e5a0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4413      	add	r3, r2
 80023d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d00b      	beq.n	8002402 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	18d1      	adds	r1, r2, r3
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	f00c f8cf 	bl	800e5a0 <memcpy>
      }

      flush();
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7ff ff62 	bl	80022cc <_ZN13STM32Hardware5flushEv>
    }
 8002408:	bf00      	nop
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	f002 fc06 	bl	8004c28 <HAL_GetTick>
 800241c:	4603      	mov	r3, r0
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe ffc8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	0800eaec 	.word	0x0800eaec

08002478 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002478:	b480      	push	{r7}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800248c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	4401      	add	r1, r0
 800249a:	b2d3      	uxtb	r3, r2
 800249c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800249e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	0a02      	lsrs	r2, r0, #8
 80024ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024b0:	0a0b      	lsrs	r3, r1, #8
 80024b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b4:	3101      	adds	r1, #1
 80024b6:	6838      	ldr	r0, [r7, #0]
 80024b8:	4401      	add	r1, r0
 80024ba:	b2d3      	uxtb	r3, r2
 80024bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80024be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	0c02      	lsrs	r2, r0, #16
 80024cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024d0:	0c0b      	lsrs	r3, r1, #16
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	3102      	adds	r1, #2
 80024d6:	6838      	ldr	r0, [r7, #0]
 80024d8:	4401      	add	r1, r0
 80024da:	b2d3      	uxtb	r3, r2
 80024dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80024de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	0e02      	lsrs	r2, r0, #24
 80024ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024f0:	0e0b      	lsrs	r3, r1, #24
 80024f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f4:	3103      	adds	r1, #3
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	4401      	add	r1, r0
 80024fa:	b2d3      	uxtb	r3, r2
 80024fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80024fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	000a      	movs	r2, r1
 800250c:	2300      	movs	r3, #0
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	3104      	adds	r1, #4
 8002512:	6838      	ldr	r0, [r7, #0]
 8002514:	4401      	add	r1, r0
 8002516:	b2d3      	uxtb	r3, r2
 8002518:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800251a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	0a0a      	lsrs	r2, r1, #8
 8002528:	2300      	movs	r3, #0
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	3105      	adds	r1, #5
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	4401      	add	r1, r0
 8002532:	b2d3      	uxtb	r3, r2
 8002534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	0c0a      	lsrs	r2, r1, #16
 8002544:	2300      	movs	r3, #0
 8002546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002548:	3106      	adds	r1, #6
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	4401      	add	r1, r0
 800254e:	b2d3      	uxtb	r3, r2
 8002550:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	0e0a      	lsrs	r2, r1, #24
 8002560:	2300      	movs	r3, #0
 8002562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002564:	3107      	adds	r1, #7
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	4401      	add	r1, r0
 800256a:	b2d3      	uxtb	r3, r2
 800256c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3308      	adds	r3, #8
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800257a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800257e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	6838      	ldr	r0, [r7, #0]
 8002586:	4401      	add	r1, r0
 8002588:	b2d3      	uxtb	r3, r2
 800258a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800258c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	0a02      	lsrs	r2, r0, #8
 800259a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800259e:	0a0b      	lsrs	r3, r1, #8
 80025a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a2:	3101      	adds	r1, #1
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	4401      	add	r1, r0
 80025a8:	b2d3      	uxtb	r3, r2
 80025aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80025ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	0c02      	lsrs	r2, r0, #16
 80025ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025be:	0c0b      	lsrs	r3, r1, #16
 80025c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c2:	3102      	adds	r1, #2
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	4401      	add	r1, r0
 80025c8:	b2d3      	uxtb	r3, r2
 80025ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80025cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	0e02      	lsrs	r2, r0, #24
 80025da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025de:	0e0b      	lsrs	r3, r1, #24
 80025e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e2:	3103      	adds	r1, #3
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	4401      	add	r1, r0
 80025e8:	b2d3      	uxtb	r3, r2
 80025ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80025ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	000a      	movs	r2, r1
 80025fa:	2300      	movs	r3, #0
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	3104      	adds	r1, #4
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	4401      	add	r1, r0
 8002604:	b2d3      	uxtb	r3, r2
 8002606:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	0a0a      	lsrs	r2, r1, #8
 8002616:	2300      	movs	r3, #0
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	3105      	adds	r1, #5
 800261c:	6838      	ldr	r0, [r7, #0]
 800261e:	4401      	add	r1, r0
 8002620:	b2d3      	uxtb	r3, r2
 8002622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	0c0a      	lsrs	r2, r1, #16
 8002632:	2300      	movs	r3, #0
 8002634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002636:	3106      	adds	r1, #6
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	4401      	add	r1, r0
 800263c:	b2d3      	uxtb	r3, r2
 800263e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	0e0a      	lsrs	r2, r1, #24
 800264e:	2300      	movs	r3, #0
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	3107      	adds	r1, #7
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	4401      	add	r1, r0
 8002658:	b2d3      	uxtb	r3, r2
 800265a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3308      	adds	r3, #8
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002668:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	4401      	add	r1, r0
 8002676:	b2d3      	uxtb	r3, r2
 8002678:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800267a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	0a02      	lsrs	r2, r0, #8
 8002688:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800268c:	0a0b      	lsrs	r3, r1, #8
 800268e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002690:	3101      	adds	r1, #1
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	4401      	add	r1, r0
 8002696:	b2d3      	uxtb	r3, r2
 8002698:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800269a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	0c02      	lsrs	r2, r0, #16
 80026a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026ac:	0c0b      	lsrs	r3, r1, #16
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	3102      	adds	r1, #2
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	4401      	add	r1, r0
 80026b6:	b2d3      	uxtb	r3, r2
 80026b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80026ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	0e02      	lsrs	r2, r0, #24
 80026c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026cc:	0e0b      	lsrs	r3, r1, #24
 80026ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d0:	3103      	adds	r1, #3
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	4401      	add	r1, r0
 80026d6:	b2d3      	uxtb	r3, r2
 80026d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80026da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	000a      	movs	r2, r1
 80026e8:	2300      	movs	r3, #0
 80026ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ec:	3104      	adds	r1, #4
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	4401      	add	r1, r0
 80026f2:	b2d3      	uxtb	r3, r2
 80026f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80026f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	0a0a      	lsrs	r2, r1, #8
 8002704:	2300      	movs	r3, #0
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	3105      	adds	r1, #5
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	4401      	add	r1, r0
 800270e:	b2d3      	uxtb	r3, r2
 8002710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	0c0a      	lsrs	r2, r1, #16
 8002720:	2300      	movs	r3, #0
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	3106      	adds	r1, #6
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	4401      	add	r1, r0
 800272a:	b2d3      	uxtb	r3, r2
 800272c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800272e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	0e0a      	lsrs	r2, r1, #24
 800273c:	2300      	movs	r3, #0
 800273e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002740:	3107      	adds	r1, #7
 8002742:	6838      	ldr	r0, [r7, #0]
 8002744:	4401      	add	r1, r0
 8002746:	b2d3      	uxtb	r3, r2
 8002748:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3308      	adds	r3, #8
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002752:	4618      	mov	r0, r3
 8002754:	372c      	adds	r7, #44	; 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800275e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002762:	b0eb      	sub	sp, #428	; 0x1ac
 8002764:	af00      	add	r7, sp, #0
 8002766:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800276a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002780:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002784:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002788:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2200      	movs	r2, #0
 8002794:	461c      	mov	r4, r3
 8002796:	4615      	mov	r5, r2
 8002798:	ea40 0804 	orr.w	r8, r0, r4
 800279c:	ea41 0905 	orr.w	r9, r1, r5
 80027a0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2200      	movs	r2, #0
 80027ba:	469a      	mov	sl, r3
 80027bc:	4693      	mov	fp, r2
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80027ca:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80027ce:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80027d2:	ea40 0402 	orr.w	r4, r0, r2
 80027d6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80027da:	430b      	orrs	r3, r1
 80027dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027e0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80027e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002802:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002812:	464c      	mov	r4, r9
 8002814:	0423      	lsls	r3, r4, #16
 8002816:	4644      	mov	r4, r8
 8002818:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800281c:	4644      	mov	r4, r8
 800281e:	0422      	lsls	r2, r4, #16
 8002820:	ea40 0402 	orr.w	r4, r0, r2
 8002824:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002828:	430b      	orrs	r3, r1
 800282a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800282e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002832:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002836:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800283a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800283e:	1cda      	adds	r2, r3, #3
 8002840:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002850:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002854:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002858:	4623      	mov	r3, r4
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002860:	4623      	mov	r3, r4
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002868:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800286c:	4623      	mov	r3, r4
 800286e:	4303      	orrs	r3, r0
 8002870:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002874:	462b      	mov	r3, r5
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800287c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002880:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002884:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002888:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800288c:	1d1a      	adds	r2, r3, #4
 800288e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800289e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80028ae:	0023      	movs	r3, r4
 80028b0:	2200      	movs	r2, #0
 80028b2:	ea40 0402 	orr.w	r4, r0, r2
 80028b6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80028ba:	430b      	orrs	r3, r1
 80028bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80028c0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80028c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028d0:	1d5a      	adds	r2, r3, #5
 80028d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028e2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80028f2:	0223      	lsls	r3, r4, #8
 80028f4:	2200      	movs	r2, #0
 80028f6:	ea40 0402 	orr.w	r4, r0, r2
 80028fa:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80028fe:	430b      	orrs	r3, r1
 8002900:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002904:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002908:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800290c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002910:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002914:	1d9a      	adds	r2, r3, #6
 8002916:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800291a:	4413      	add	r3, r2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002926:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002936:	0423      	lsls	r3, r4, #16
 8002938:	2200      	movs	r2, #0
 800293a:	ea40 0402 	orr.w	r4, r0, r2
 800293e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002942:	430b      	orrs	r3, r1
 8002944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002948:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800294c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002950:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002954:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002958:	1dda      	adds	r2, r3, #7
 800295a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800296a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800297a:	0623      	lsls	r3, r4, #24
 800297c:	2200      	movs	r2, #0
 800297e:	ea40 0402 	orr.w	r4, r0, r2
 8002982:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002986:	430b      	orrs	r3, r1
 8002988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800298c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002990:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002994:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002998:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800299c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80029a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029a4:	3308      	adds	r3, #8
 80029a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029b6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029ba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80029ce:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80029d2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80029d6:	4623      	mov	r3, r4
 80029d8:	4303      	orrs	r3, r0
 80029da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80029de:	462b      	mov	r3, r5
 80029e0:	430b      	orrs	r3, r1
 80029e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029e6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80029ea:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029ee:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a08:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002a18:	464c      	mov	r4, r9
 8002a1a:	0223      	lsls	r3, r4, #8
 8002a1c:	4644      	mov	r4, r8
 8002a1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a22:	4644      	mov	r4, r8
 8002a24:	0222      	lsls	r2, r4, #8
 8002a26:	ea40 0402 	orr.w	r4, r0, r2
 8002a2a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a34:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002a38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a44:	1c9a      	adds	r2, r3, #2
 8002a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002a66:	464c      	mov	r4, r9
 8002a68:	0423      	lsls	r3, r4, #16
 8002a6a:	4644      	mov	r4, r8
 8002a6c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a70:	4644      	mov	r4, r8
 8002a72:	0422      	lsls	r2, r4, #16
 8002a74:	ea40 0402 	orr.w	r4, r0, r2
 8002a78:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002a86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a92:	1cda      	adds	r2, r3, #3
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aa4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aa8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002aac:	4623      	mov	r3, r4
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	061b      	lsls	r3, r3, #24
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	4303      	orrs	r3, r0
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	462b      	mov	r3, r5
 8002aca:	430b      	orrs	r3, r1
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ad0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ad4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ad8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b02:	0023      	movs	r3, r4
 8002b04:	2200      	movs	r2, #0
 8002b06:	ea40 0402 	orr.w	r4, r0, r2
 8002b0a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b14:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002b18:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b24:	1d5a      	adds	r2, r3, #5
 8002b26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b36:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002b46:	0223      	lsls	r3, r4, #8
 8002b48:	2200      	movs	r2, #0
 8002b4a:	ea40 0402 	orr.w	r4, r0, r2
 8002b4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002b52:	430b      	orrs	r3, r1
 8002b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b58:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002b5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b68:	1d9a      	adds	r2, r3, #6
 8002b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002b8a:	0423      	lsls	r3, r4, #16
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	ea40 0402 	orr.w	r4, r0, r2
 8002b92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002b96:	430b      	orrs	r3, r1
 8002b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b9c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002ba0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ba4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bac:	1dda      	adds	r2, r3, #7
 8002bae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002bce:	0623      	lsls	r3, r4, #24
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	ea40 0402 	orr.w	r4, r0, r2
 8002bd6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002be0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002be4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002be8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002bf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c22:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	4303      	orrs	r3, r0
 8002c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c30:	462b      	mov	r3, r5
 8002c32:	430b      	orrs	r3, r1
 8002c34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c36:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	673b      	str	r3, [r7, #112]	; 0x70
 8002c56:	677a      	str	r2, [r7, #116]	; 0x74
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c64:	464c      	mov	r4, r9
 8002c66:	0223      	lsls	r3, r4, #8
 8002c68:	4644      	mov	r4, r8
 8002c6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c6e:	4644      	mov	r4, r8
 8002c70:	0222      	lsls	r2, r4, #8
 8002c72:	ea40 0402 	orr.w	r4, r0, r2
 8002c76:	66bc      	str	r4, [r7, #104]	; 0x68
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002c80:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c84:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002caa:	464c      	mov	r4, r9
 8002cac:	0423      	lsls	r3, r4, #16
 8002cae:	4644      	mov	r4, r8
 8002cb0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002cb4:	4644      	mov	r4, r8
 8002cb6:	0422      	lsls	r2, r4, #16
 8002cb8:	ea40 0402 	orr.w	r4, r0, r2
 8002cbc:	65bc      	str	r4, [r7, #88]	; 0x58
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002cc6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd2:	1cda      	adds	r2, r3, #3
 8002cd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ce2:	657a      	str	r2, [r7, #84]	; 0x54
 8002ce4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ce8:	4623      	mov	r3, r4
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cee:	4623      	mov	r3, r4
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfe:	462b      	mov	r3, r5
 8002d00:	430b      	orrs	r3, r1
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
 8002d04:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d08:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d0c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d14:	1d1a      	adds	r2, r3, #4
 8002d16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002d30:	0023      	movs	r3, r4
 8002d32:	2200      	movs	r2, #0
 8002d34:	ea40 0402 	orr.w	r4, r0, r2
 8002d38:	633c      	str	r4, [r7, #48]	; 0x30
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d42:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d46:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d4e:	1d5a      	adds	r2, r3, #5
 8002d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d6a:	0223      	lsls	r3, r4, #8
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	ea40 0402 	orr.w	r4, r0, r2
 8002d72:	623c      	str	r4, [r7, #32]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002d7c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d80:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d88:	3306      	adds	r3, #6
 8002d8a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	61fa      	str	r2, [r7, #28]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	69bc      	ldr	r4, [r7, #24]
 8002da4:	0423      	lsls	r3, r4, #16
 8002da6:	2200      	movs	r2, #0
 8002da8:	ea40 0402 	orr.w	r4, r0, r2
 8002dac:	613c      	str	r4, [r7, #16]
 8002dae:	430b      	orrs	r3, r1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002db6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	68bc      	ldr	r4, [r7, #8]
 8002dde:	0623      	lsls	r3, r4, #24
 8002de0:	2200      	movs	r2, #0
 8002de2:	ea40 0402 	orr.w	r4, r0, r2
 8002de6:	603c      	str	r4, [r7, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002df0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002df4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002df8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002e0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e1a:	4770      	bx	lr

08002e1c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	0800e9c0 	.word	0x0800e9c0

08002e38 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	0800e9d8 	.word	0x0800e9d8

08002e54 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fab2 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002e64:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fada 	bl	8002428 <_ZN13geometry_msgs7Vector3C1Ev>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3328      	adds	r3, #40	; 0x28
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fad5 	bl	8002428 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0800ead4 	.word	0x0800ead4

08002e8c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f103 0008 	add.w	r0, r3, #8
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7ff fae6 	bl	8002478 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7ff fad9 	bl	8002478 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ece:	68fb      	ldr	r3, [r7, #12]
    }
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f103 0008 	add.w	r0, r3, #8
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7ff fc33 	bl	800275e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fc26 	bl	800275e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
     return offset;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    }
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	0800e9fc 	.word	0x0800e9fc

08002f40 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	0800ea10 	.word	0x0800ea10

08002f5c <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);

void callback(const geometry_msgs::Twist &msg)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8002f6c:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002f78:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f82:	4906      	ldr	r1, [pc, #24]	; (8002f9c <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	24000f60 	.word	0x24000f60
 8002f98:	24000f68 	.word	0x24000f68
 8002f9c:	24000f70 	.word	0x24000f70

08002fa0 <interPub>:
void interPub(void){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <interPub+0x48>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	4910      	ldr	r1, [pc, #64]	; (8002fec <interPub+0x4c>)
 8002fac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <interPub+0x50>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	490d      	ldr	r1, [pc, #52]	; (8002fec <interPub+0x4c>)
 8002fb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <interPub+0x54>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <interPub+0x4c>)
 8002fc4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <interPub+0x58>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <interPub+0x58>)
 8002fd0:	6013      	str	r3, [r2, #0]

	pub.publish(&insVel);
 8002fd2:	4906      	ldr	r1, [pc, #24]	; (8002fec <interPub+0x4c>)
 8002fd4:	4809      	ldr	r0, [pc, #36]	; (8002ffc <interPub+0x5c>)
 8002fd6:	f7ff f844 	bl	8002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <interPub+0x60>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <interPub+0x60>)
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	24000f78 	.word	0x24000f78
 8002fec:	24000f90 	.word	0x24000f90
 8002ff0:	24000f80 	.word	0x24000f80
 8002ff4:	24000f88 	.word	0x24000f88
 8002ff8:	24000f54 	.word	0x24000f54
 8002ffc:	24000fd8 	.word	0x24000fd8
 8003000:	24000f58 	.word	0x24000f58

08003004 <HAL_UART_TxCpltCallback>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 800300c:	4805      	ldr	r0, [pc, #20]	; (8003024 <HAL_UART_TxCpltCallback+0x20>)
 800300e:	f000 f9e3 	bl	80033d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003012:	4603      	mov	r3, r0
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff f959 	bl	80022cc <_ZN13STM32Hardware5flushEv>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	24000618 	.word	0x24000618

08003028 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <HAL_UART_RxCpltCallback+0x20>)
 8003032:	f000 f9d1 	bl	80033d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003036:	4603      	mov	r3, r0
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f908 	bl	800224e <_ZN13STM32Hardware10reset_rbufEv>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	24000618 	.word	0x24000618

0800304c <setup>:
void setup(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
    nh.initNode();
 8003050:	4806      	ldr	r0, [pc, #24]	; (800306c <setup+0x20>)
 8003052:	f000 f9cd 	bl	80033f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003056:	4906      	ldr	r1, [pc, #24]	; (8003070 <setup+0x24>)
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <setup+0x20>)
 800305a:	f000 f9e6 	bl	800342a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 800305e:	4905      	ldr	r1, [pc, #20]	; (8003074 <setup+0x28>)
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <setup+0x20>)
 8003062:	f000 fa0d 	bl	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	24000618 	.word	0x24000618
 8003070:	24000ff0 	.word	0x24000ff0
 8003074:	24000fd8 	.word	0x24000fd8

08003078 <loop>:
void loop(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <loop+0x10>)
 800307e:	f000 fa2f 	bl	80034e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	24000618 	.word	0x24000618

0800308c <_Z13Error_Handlerv>:

/* UART Communication */
void Error_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003090:	b672      	cpsid	i
}
 8003092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003094:	e7fe      	b.n	8003094 <_Z13Error_Handlerv+0x8>
	...

08003098 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800309e:	4a2d      	ldr	r2, [pc, #180]	; (8003154 <_ZL20MX_USART10_UART_Initv+0xbc>)
 80030a0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030be:	220c      	movs	r2, #12
 80030c0:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80030e0:	481b      	ldr	r0, [pc, #108]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030e2:	f009 f8cb 	bl	800c27c <HAL_UART_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 80030f6:	f7ff ffc9 	bl	800308c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030fa:	2100      	movs	r1, #0
 80030fc:	4814      	ldr	r0, [pc, #80]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030fe:	f00b f93f 	bl	800e380 <HAL_UARTEx_SetTxFifoThreshold>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8003112:	f7ff ffbb 	bl	800308c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003116:	2100      	movs	r1, #0
 8003118:	480d      	ldr	r0, [pc, #52]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800311a:	f00b f96f 	bl	800e3fc <HAL_UARTEx_SetRxFifoThreshold>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 800312e:	f7ff ffad 	bl	800308c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8003132:	4807      	ldr	r0, [pc, #28]	; (8003150 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003134:	f00b f8eb 	bl	800e30e <HAL_UARTEx_DisableFifoMode>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8003148:	f7ff ffa0 	bl	800308c <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	24000494 	.word	0x24000494
 8003154:	40011c00 	.word	0x40011c00

08003158 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_UART_ErrorCallback+0x5c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d120      	bne.n	80031aa <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003168:	4913      	ldr	r1, [pc, #76]	; (80031b8 <HAL_UART_ErrorCallback+0x60>)
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003176:	4911      	ldr	r1, [pc, #68]	; (80031bc <HAL_UART_ErrorCallback+0x64>)
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_UART_ErrorCallback+0x68>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003192:	4808      	ldr	r0, [pc, #32]	; (80031b4 <HAL_UART_ErrorCallback+0x5c>)
 8003194:	f009 f8c2 	bl	800c31c <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003198:	f7ff ff7e 	bl	8003098 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800319c:	4809      	ldr	r0, [pc, #36]	; (80031c4 <HAL_UART_ErrorCallback+0x6c>)
 800319e:	f000 f91b 	bl	80033d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f847 	bl	8002238 <_ZN13STM32Hardware4initEv>
    }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	24000494 	.word	0x24000494
 80031b8:	24000f60 	.word	0x24000f60
 80031bc:	24000f68 	.word	0x24000f68
 80031c0:	24000f70 	.word	0x24000f70
 80031c4:	24000618 	.word	0x24000618

080031c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d80d      	bhi.n	80031f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	fa22 f103 	lsr.w	r1, r2, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	b2ca      	uxtb	r2, r1
 80031ee:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e7ee      	b.n	80031d6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d811      	bhi.n	8003242 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	440a      	add	r2, r1
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	4611      	mov	r1, r2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	00d2      	lsls	r2, r2, #3
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e7ea      	b.n	8003218 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	0800eb1c 	.word	0x0800eb1c

08003270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffe8 	bl	8003250 <_ZN3ros15NodeHandleBase_C1Ev>
 8003280:	4a3a      	ldr	r2, [pc, #232]	; (800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe ffb8 	bl	8002200 <_ZN13STM32HardwareC1Ev>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fc06 	bl	8001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b18      	cmp	r3, #24
 80032ac:	d80b      	bhi.n	80032c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3301      	adds	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e7f0      	b.n	80032a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b18      	cmp	r3, #24
 80032ce:	d80a      	bhi.n	80032e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032d8:	2100      	movs	r1, #0
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e7f1      	b.n	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f0:	d20a      	bcs.n	8003308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e7f0      	b.n	80032ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003312:	d20a      	bcs.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	e7f0      	b.n	800330c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	0800eac0 	.word	0x0800eac0

08003370 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	0800eb04 	.word	0x0800eb04

08003390 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ffe5 	bl	8003370 <_ZN3ros11Subscriber_C1Ev>
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3310      	adds	r3, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fd4f 	bl	8002e54 <_ZN13geometry_msgs5TwistC1Ev>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
  };
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	0800eaa8 	.word	0x0800eaa8

080033d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
  }
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ff1b 	bl	8002238 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b18      	cmp	r3, #24
 800343c:	dc19      	bgt.n	8003472 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800344e:	6839      	ldr	r1, [r7, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]
        return true;
 8003466:	2301      	movs	r3, #1
 8003468:	e004      	b.n	8003474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e7e2      	b.n	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003472:	2300      	movs	r3, #0
  }
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b18      	cmp	r3, #24
 8003492:	dc1e      	bgt.n	80034d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d111      	bne.n	80034ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        return true;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e004      	b.n	80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e7dd      	b.n	800348e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80034d2:	2300      	movs	r3, #0
  }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe ff8f 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 80034f2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003502:	4293      	cmp	r3, r2
 8003504:	d903      	bls.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d903      	bls.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe ff68 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad2      	subs	r2, r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800354c:	429a      	cmp	r2, r3
 800354e:	bf8c      	ite	hi
 8003550:	2301      	movhi	r3, #1
 8003552:	2300      	movls	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800355a:	f06f 0301 	mvn.w	r3, #1
 800355e:	e194      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fe83 	bl	8002270 <_ZN13STM32Hardware4readEv>
 800356a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f2c0 8174 	blt.w	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800358a:	2b07      	cmp	r3, #7
 800358c:	d11e      	bne.n	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003594:	1c59      	adds	r1, r3, #1
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	b2d1      	uxtb	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	460a      	mov	r2, r1
 80035a6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1b4      	bne.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035ca:	e7af      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d128      	bne.n	8003628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2bff      	cmp	r3, #255	; 0xff
 80035da:	d10d      	bne.n	80035f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f103 0214 	add.w	r2, r3, #20
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80035f6:	e799      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff07 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	bf8c      	ite	hi
 8003610:	2301      	movhi	r3, #1
 8003612:	2300      	movls	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d088      	beq.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003622:	f06f 0301 	mvn.w	r3, #1
 8003626:	e130      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800362e:	2b01      	cmp	r3, #1
 8003630:	d118      	bne.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2bfe      	cmp	r3, #254	; 0xfe
 8003636:	d107      	bne.n	8003648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003646:	e771      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003656:	2b00      	cmp	r3, #0
 8003658:	f47f af68 	bne.w	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f918 	bl	8003892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003662:	e763      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800366a:	2b02      	cmp	r3, #2
 800366c:	d113      	bne.n	8003696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003694:	e74a      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800369c:	2b03      	cmp	r3, #3
 800369e:	d110      	bne.n	80036c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	441a      	add	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036c0:	e734      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d116      	bne.n	80036fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036d2:	425a      	negs	r2, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	bf58      	it	pl
 80036da:	4253      	negpl	r3, r2
 80036dc:	2bff      	cmp	r3, #255	; 0xff
 80036de:	d107      	bne.n	80036f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036ee:	e71d      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036f8:	e718      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10f      	bne.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003722:	e703      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800372a:	2b06      	cmp	r3, #6
 800372c:	d117      	bne.n	800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2207      	movs	r2, #7
 8003744:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800374e:	2b00      	cmp	r3, #0
 8003750:	f47f aeec 	bne.w	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2208      	movs	r2, #8
 8003758:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800375c:	e6e6      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003764:	2b08      	cmp	r3, #8
 8003766:	f47f aee1 	bne.w	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003778:	425a      	negs	r2, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	bf58      	it	pl
 8003780:	4253      	negpl	r3, r2
 8003782:	2bff      	cmp	r3, #255	; 0xff
 8003784:	f47f aed2 	bne.w	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d110      	bne.n	80037b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f87d 	bl	8003892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f898 	bl	80038ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	e06a      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d107      	bne.n	80037ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f960 	bl	8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80037cc:	e6ae      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037d4:	2b06      	cmp	r3, #6
 80037d6:	d10e      	bne.n	80037f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe fa97 	bl	8001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80037f4:	e69a      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037fc:	2b0b      	cmp	r3, #11
 80037fe:	d104      	bne.n	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003808:	e690      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003810:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f202 2222 	addw	r2, r2, #546	; 0x222
 800381a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f43f ae84 	beq.w	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800382a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003834:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800383e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003856:	4611      	mov	r1, r2
 8003858:	4798      	blx	r3
    while (true)
 800385a:	e667      	b.n	800352c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800385c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00f      	beq.n	8003888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003876:	4293      	cmp	r3, r2
 8003878:	d906      	bls.n	8003888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f809 	bl	8003892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003888:	2300      	movs	r3, #0
  }
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fda2 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f107 020c 	add.w	r2, r7, #12
 80038ae:	210a      	movs	r1, #10
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
    rt_time = hardware_.time();
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fda9 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80038ce:	b590      	push	{r4, r7, lr}
 80038d0:	b08b      	sub	sp, #44	; 0x2c
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fe74 	bl	80015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	2b18      	cmp	r3, #24
 80038e8:	dc63      	bgt.n	80039b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d056      	beq.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	b29b      	uxth	r3, r3
 800390e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4608      	mov	r0, r1
 800394a:	4798      	blx	r3
 800394c:	4603      	mov	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4608      	mov	r0, r1
 8003978:	4798      	blx	r3
 800397a:	4603      	mov	r3, r0
 800397c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800397e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003982:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681c      	ldr	r4, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fb76 	bl	800208a <_ZN3ros9Publisher15getEndpointTypeEv>
 800399e:	4601      	mov	r1, r0
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	461a      	mov	r2, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	3301      	adds	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e798      	b.n	80038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b18      	cmp	r3, #24
 80039ba:	dc5f      	bgt.n	8003a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d053      	beq.n	8003a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4798      	blx	r3
 8003a10:	4603      	mov	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4608      	mov	r0, r1
 8003a34:	4798      	blx	r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a3e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681c      	ldr	r4, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4608      	mov	r0, r1
 8003a66:	4798      	blx	r3
 8003a68:	4601      	mov	r1, r0
 8003a6a:	f107 030c 	add.w	r3, r7, #12
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	e79c      	b.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a84:	bf00      	nop
 8003a86:	372c      	adds	r7, #44	; 0x2c
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd90      	pop	{r4, r7, pc}

08003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fca4 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fcb3 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fd03 	bl	80014c8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4915      	ldr	r1, [pc, #84]	; (8003b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ac8:	fba1 1303 	umull	r1, r3, r1, r3
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ad2:	6939      	ldr	r1, [r7, #16]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ad8:	fba3 0302 	umull	r0, r3, r3, r2
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	440b      	add	r3, r1
 8003af0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8a6 	bl	8003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fc83 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	10624dd3 	.word	0x10624dd3
 8003b20:	000f4240 	.word	0x000f4240

08003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b63      	cmp	r3, #99	; 0x63
 8003b34:	dd09      	ble.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b3c:	f083 0301 	eor.w	r3, r3, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e079      	b.n	8003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b56:	3207      	adds	r2, #7
 8003b58:	4611      	mov	r1, r2
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	22fe      	movs	r2, #254	; 0xfe
 8003b6c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b96:	4413      	add	r3, r2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	b21b      	sxth	r3, r3
 8003bb2:	121b      	asrs	r3, r3, #8
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3306      	adds	r3, #6
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dc0d      	bgt.n	8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e7ec      	b.n	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3307      	adds	r3, #7
 8003bf0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	bf58      	it	pl
 8003bfc:	4253      	negpl	r3, r2
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	6179      	str	r1, [r7, #20]
 8003c06:	43d2      	mvns	r2, r2
 8003c08:	b2d1      	uxtb	r1, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	460a      	mov	r2, r1
 8003c10:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1a:	dc0a      	bgt.n	8003c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1d18      	adds	r0, r3, #4
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7fe fbab 	bl	8002384 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	e005      	b.n	8003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003c32:	4905      	ldr	r1, [pc, #20]	; (8003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f849 	bl	8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	0800ea34 	.word	0x0800ea34

08003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fbd8 	bl	8002410 <_ZN13STM32Hardware4timeEv>
 8003c60:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c82:	fba3 0302 	umull	r0, r3, r3, r2
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8c:	fb00 f303 	mul.w	r3, r0, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	1aca      	subs	r2, r1, r3
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f7fc fcb6 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	10624dd3 	.word	0x10624dd3
 8003cc4:	000f4240 	.word	0x000f4240
 8003cc8:	3b9aca00 	.word	0x3b9aca00

08003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	2103      	movs	r1, #3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f804 	bl	8003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fe28 	bl	8001950 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f107 0214 	add.w	r2, r7, #20
 8003d12:	2107      	movs	r1, #7
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	4798      	blx	r3
  }
 8003d18:	bf00      	nop
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_Z41__static_initialization_and_destruction_0ii>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d116      	bne.n	8003d5e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d111      	bne.n	8003d5e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003d3a:	480b      	ldr	r0, [pc, #44]	; (8003d68 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003d3c:	f7ff fa98 	bl	8003270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8003d40:	480a      	ldr	r0, [pc, #40]	; (8003d6c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003d42:	f7ff f887 	bl	8002e54 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 8003d46:	2300      	movs	r3, #0
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003d4a:	4909      	ldr	r1, [pc, #36]	; (8003d70 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003d4c:	4809      	ldr	r0, [pc, #36]	; (8003d74 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003d4e:	f7fe f971 	bl	8002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8003d52:	2301      	movs	r3, #1
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003d56:	4909      	ldr	r1, [pc, #36]	; (8003d7c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d58:	4809      	ldr	r0, [pc, #36]	; (8003d80 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d5a:	f7ff fb19 	bl	8003390 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	24000618 	.word	0x24000618
 8003d6c:	24000f90 	.word	0x24000f90
 8003d70:	0800ea70 	.word	0x0800ea70
 8003d74:	24000fd8 	.word	0x24000fd8
 8003d78:	08002f5d 	.word	0x08002f5d
 8003d7c:	0800ea7c 	.word	0x0800ea7c
 8003d80:	24000ff0 	.word	0x24000ff0

08003d84 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3310      	adds	r3, #16
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f89f 	bl	8002ed8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	3210      	adds	r2, #16
 8003da2:	4610      	mov	r0, r2
 8003da4:	4798      	blx	r3
  }
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f8a6 	bl	8002f24 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003dd8:	4603      	mov	r3, r0
  }
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3310      	adds	r3, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f8a6 	bl	8002f40 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003df4:	4603      	mov	r3, r0
  }
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_GLOBAL__sub_I_nh>:
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e20:	2001      	movs	r0, #1
 8003e22:	f7ff ff7d 	bl	8003d20 <_Z41__static_initialization_and_destruction_0ii>
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_MspInit+0x3c>)
 8003e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_MspInit+0x3c>)
 8003e36:	f043 0302 	orr.w	r3, r3, #2
 8003e3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_MspInit+0x3c>)
 8003e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2100      	movs	r1, #0
 8003e50:	2005      	movs	r0, #5
 8003e52:	f000 fff4 	bl	8004e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003e56:	2005      	movs	r0, #5
 8003e58:	f001 f80b 	bl	8004e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d117      	bne.n	8003eaa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e8a:	4b18      	ldr	r3, [pc, #96]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	201c      	movs	r0, #28
 8003e9e:	f000 ffce 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ea2:	201c      	movs	r0, #28
 8003ea4:	f000 ffe5 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003ea8:	e01b      	b.n	8003ee2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <HAL_TIM_Base_MspInit+0x88>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d116      	bne.n	8003ee2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_TIM_Base_MspInit+0x84>)
 8003ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2032      	movs	r0, #50	; 0x32
 8003ed8:	f000 ffb1 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003edc:	2032      	movs	r0, #50	; 0x32
 8003ede:	f000 ffc8 	bl	8004e72 <HAL_NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	40000c00 	.word	0x40000c00

08003ef4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b090      	sub	sp, #64	; 0x40
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d12e      	bne.n	8003f74 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f16:	4b69      	ldr	r3, [pc, #420]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f1c:	4a67      	ldr	r2, [pc, #412]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f26:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f34:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f3a:	4a60      	ldr	r2, [pc, #384]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f44:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f52:	23c0      	movs	r3, #192	; 0xc0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f62:	2302      	movs	r3, #2
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4854      	ldr	r0, [pc, #336]	; (80040c0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003f6e:	f003 ff99 	bl	8007ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8003f72:	e09c      	b.n	80040ae <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a52      	ldr	r2, [pc, #328]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d12f      	bne.n	8003fde <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f7e:	4b4f      	ldr	r3, [pc, #316]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f84:	4a4d      	ldr	r2, [pc, #308]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f8e:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9c:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	4a46      	ldr	r2, [pc, #280]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	483c      	ldr	r0, [pc, #240]	; (80040c8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003fd8:	f003 ff64 	bl	8007ea4 <HAL_GPIO_Init>
}
 8003fdc:	e067      	b.n	80040ae <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d12e      	bne.n	8004046 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003fe8:	4b34      	ldr	r3, [pc, #208]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003fea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003fee:	4a33      	ldr	r2, [pc, #204]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003ff8:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004006:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004024:	2303      	movs	r3, #3
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004030:	2300      	movs	r3, #0
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004034:	230d      	movs	r3, #13
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403c:	4619      	mov	r1, r3
 800403e:	4824      	ldr	r0, [pc, #144]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004040:	f003 ff30 	bl	8007ea4 <HAL_GPIO_Init>
}
 8004044:	e033      	b.n	80040ae <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d12e      	bne.n	80040ae <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004052:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004056:	4a19      	ldr	r2, [pc, #100]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800405c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004062:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004076:	f043 0320 	orr.w	r3, r3, #32
 800407a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800408c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409a:	2300      	movs	r3, #0
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800409e:	230e      	movs	r3, #14
 80040a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040a6:	4619      	mov	r1, r3
 80040a8:	4809      	ldr	r0, [pc, #36]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80040aa:	f003 fefb 	bl	8007ea4 <HAL_GPIO_Init>
}
 80040ae:	bf00      	nop
 80040b0:	3740      	adds	r7, #64	; 0x40
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40000400 	.word	0x40000400
 80040bc:	58024400 	.word	0x58024400
 80040c0:	58020000 	.word	0x58020000
 80040c4:	40000800 	.word	0x40000800
 80040c8:	58020c00 	.word	0x58020c00
 80040cc:	4000e000 	.word	0x4000e000
 80040d0:	58021400 	.word	0x58021400
 80040d4:	4000e400 	.word	0x4000e400

080040d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_TIM_PWM_MspInit+0x68>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10f      	bne.n	800410a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 80040ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 80040f2:	f043 0302 	orr.w	r3, r3, #2
 80040f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 80040fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004108:	e013      	b.n	8004132 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_TIM_PWM_MspInit+0x70>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10e      	bne.n	8004132 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 8004116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <HAL_TIM_PWM_MspInit+0x6c>)
 8004126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010400 	.word	0x40010400
 8004144:	58024400 	.word	0x58024400
 8004148:	40014000 	.word	0x40014000

0800414c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a35      	ldr	r2, [pc, #212]	; (8004240 <HAL_TIM_MspPostInit+0xf4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d120      	bne.n	80041b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800416e:	4b35      	ldr	r3, [pc, #212]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 8004170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800418c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800419e:	2303      	movs	r3, #3
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	4619      	mov	r1, r3
 80041a8:	4827      	ldr	r0, [pc, #156]	; (8004248 <HAL_TIM_MspPostInit+0xfc>)
 80041aa:	f003 fe7b 	bl	8007ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80041ae:	e042      	b.n	8004236 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_TIM_MspPostInit+0x100>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d13d      	bne.n	8004236 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c0:	4a20      	ldr	r2, [pc, #128]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041c2:	f043 0310 	orr.w	r3, r3, #16
 80041c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_TIM_MspPostInit+0xf8>)
 80041ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041f6:	2320      	movs	r3, #32
 80041f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fa:	2302      	movs	r3, #2
 80041fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004202:	2300      	movs	r3, #0
 8004204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004206:	2304      	movs	r3, #4
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	4619      	mov	r1, r3
 8004210:	480f      	ldr	r0, [pc, #60]	; (8004250 <HAL_TIM_MspPostInit+0x104>)
 8004212:	f003 fe47 	bl	8007ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004216:	2308      	movs	r3, #8
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004226:	2304      	movs	r3, #4
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4808      	ldr	r0, [pc, #32]	; (8004254 <HAL_TIM_MspPostInit+0x108>)
 8004232:	f003 fe37 	bl	8007ea4 <HAL_GPIO_Init>
}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40010400 	.word	0x40010400
 8004244:	58024400 	.word	0x58024400
 8004248:	58020800 	.word	0x58020800
 800424c:	40014000 	.word	0x40014000
 8004250:	58021000 	.word	0x58021000
 8004254:	58020000 	.word	0x58020000

08004258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b0b6      	sub	sp, #216	; 0xd8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	22b4      	movs	r2, #180	; 0xb4
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f00a f99f 	bl	800e5bc <memset>
  if(huart->Instance==USART10)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a62      	ldr	r2, [pc, #392]	; (800440c <HAL_UART_MspInit+0x1b4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f040 80bc 	bne.w	8004402 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800428a:	2301      	movs	r3, #1
 800428c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800428e:	2300      	movs	r3, #0
 8004290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4618      	mov	r0, r3
 800429a:	f005 f85f 	bl	800935c <HAL_RCCEx_PeriphCLKConfig>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80042a4:	f7fd f87a 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ae:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042b8:	4b55      	ldr	r3, [pc, #340]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042c6:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042cc:	4a50      	ldr	r2, [pc, #320]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_UART_MspInit+0x1b8>)
 80042d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042e4:	2304      	movs	r3, #4
 80042e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80042fc:	2304      	movs	r3, #4
 80042fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004302:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004306:	4619      	mov	r1, r3
 8004308:	4842      	ldr	r0, [pc, #264]	; (8004414 <HAL_UART_MspInit+0x1bc>)
 800430a:	f003 fdcb 	bl	8007ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800430e:	2308      	movs	r3, #8
 8004310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004326:	230b      	movs	r3, #11
 8004328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800432c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004330:	4619      	mov	r1, r3
 8004332:	4838      	ldr	r0, [pc, #224]	; (8004414 <HAL_UART_MspInit+0x1bc>)
 8004334:	f003 fdb6 	bl	8007ea4 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_UART_MspInit+0x1c4>)
 800433c:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004340:	2276      	movs	r2, #118	; 0x76
 8004342:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004356:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004358:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436a:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800436e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004372:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004376:	2200      	movs	r2, #0
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 800437a:	4827      	ldr	r0, [pc, #156]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800437c:	f000 fda2 	bl	8004ec4 <HAL_DMA_Init>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8004386:	f7fd f809 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 800438e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004390:	4a21      	ldr	r2, [pc, #132]	; (8004418 <HAL_UART_MspInit+0x1c0>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_UART_MspInit+0x1cc>)
 800439a:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 800439e:	2277      	movs	r2, #119	; 0x77
 80043a0:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b4:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ce:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 80043d6:	4812      	ldr	r0, [pc, #72]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043d8:	f000 fd74 	bl	8004ec4 <HAL_DMA_Init>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 80043e2:	f7fc ffdb 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043ea:	679a      	str	r2, [r3, #120]	; 0x78
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_UART_MspInit+0x1c8>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2100      	movs	r1, #0
 80043f6:	209c      	movs	r0, #156	; 0x9c
 80043f8:	f000 fd21 	bl	8004e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80043fc:	209c      	movs	r0, #156	; 0x9c
 80043fe:	f000 fd38 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004402:	bf00      	nop
 8004404:	37d8      	adds	r7, #216	; 0xd8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40011c00 	.word	0x40011c00
 8004410:	58024400 	.word	0x58024400
 8004414:	58021000 	.word	0x58021000
 8004418:	24000524 	.word	0x24000524
 800441c:	40020010 	.word	0x40020010
 8004420:	2400059c 	.word	0x2400059c
 8004424:	40020028 	.word	0x40020028

08004428 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <HAL_UART_MspDeInit+0x4c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d118      	bne.n	800446c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_UART_MspDeInit+0x50>)
 800443c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_UART_MspDeInit+0x50>)
 8004442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004446:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 800444a:	210c      	movs	r1, #12
 800444c:	480b      	ldr	r0, [pc, #44]	; (800447c <HAL_UART_MspDeInit+0x54>)
 800444e:	f003 fed1 	bl	80081f4 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f88e 	bl	8005578 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f889 	bl	8005578 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004466:	209c      	movs	r0, #156	; 0x9c
 8004468:	f000 fd11 	bl	8004e8e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40011c00 	.word	0x40011c00
 8004478:	58024400 	.word	0x58024400
 800447c:	58021000 	.word	0x58021000

08004480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <NMI_Handler+0x4>

08004486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <HardFault_Handler+0x4>

0800448c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004490:	e7fe      	b.n	8004490 <MemManage_Handler+0x4>

08004492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004496:	e7fe      	b.n	8004496 <BusFault_Handler+0x4>

08004498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800449c:	e7fe      	b.n	800449c <UsageFault_Handler+0x4>

0800449e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044cc:	f000 fb98 	bl	8004c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <DMA1_Stream0_IRQHandler+0x10>)
 80044ea:	f002 f9c9 	bl	8006880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	24000524 	.word	0x24000524

080044f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <DMA1_Stream1_IRQHandler+0x10>)
 80044fe:	f002 f9bf 	bl	8006880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2400059c 	.word	0x2400059c

0800450c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <TIM2_IRQHandler+0x10>)
 8004512:	f006 fdc5 	bl	800b0a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	24000234 	.word	0x24000234

08004520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004528:	f003 ff7f 	bl	800842a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}

08004530 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <TIM5_IRQHandler+0x10>)
 8004536:	f006 fdb3 	bl	800b0a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	24000318 	.word	0x24000318

08004544 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <USART10_IRQHandler+0x10>)
 800454a:	f008 f80b 	bl	800c564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	24000494 	.word	0x24000494

08004558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	return 1;
 800455c:	2301      	movs	r3, #1
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <_kill>:

int _kill(int pid, int sig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004572:	f009 ffeb 	bl	800e54c <__errno>
 8004576:	4603      	mov	r3, r0
 8004578:	2216      	movs	r2, #22
 800457a:	601a      	str	r2, [r3, #0]
	return -1;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <_exit>:

void _exit (int status)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004590:	f04f 31ff 	mov.w	r1, #4294967295
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ffe7 	bl	8004568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800459a:	e7fe      	b.n	800459a <_exit+0x12>

0800459c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <_sbrk+0x5c>)
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <_sbrk+0x60>)
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <_sbrk+0x64>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <_sbrk+0x64>)
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <_sbrk+0x68>)
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <_sbrk+0x64>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d207      	bcs.n	80045dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045cc:	f009 ffbe 	bl	800e54c <__errno>
 80045d0:	4603      	mov	r3, r0
 80045d2:	220c      	movs	r2, #12
 80045d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e009      	b.n	80045f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <_sbrk+0x64>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <_sbrk+0x64>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	4a05      	ldr	r2, [pc, #20]	; (8004600 <_sbrk+0x64>)
 80045ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	24050000 	.word	0x24050000
 80045fc:	00000400 	.word	0x00000400
 8004600:	24001050 	.word	0x24001050
 8004604:	24001068 	.word	0x24001068

08004608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800460c:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <SystemInit+0xd0>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <SystemInit+0xd0>)
 8004614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800461c:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <SystemInit+0xd4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2b06      	cmp	r3, #6
 8004626:	d807      	bhi.n	8004638 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004628:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <SystemInit+0xd4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 030f 	bic.w	r3, r3, #15
 8004630:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <SystemInit+0xd4>)
 8004632:	f043 0307 	orr.w	r3, r3, #7
 8004636:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004638:	4b29      	ldr	r3, [pc, #164]	; (80046e0 <SystemInit+0xd8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <SystemInit+0xd8>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <SystemInit+0xd8>)
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800464a:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <SystemInit+0xd8>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4924      	ldr	r1, [pc, #144]	; (80046e0 <SystemInit+0xd8>)
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <SystemInit+0xdc>)
 8004652:	4013      	ands	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <SystemInit+0xd4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <SystemInit+0xd4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 030f 	bic.w	r3, r3, #15
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <SystemInit+0xd4>)
 800466c:	f043 0307 	orr.w	r3, r3, #7
 8004670:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <SystemInit+0xd8>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <SystemInit+0xd8>)
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <SystemInit+0xd8>)
 8004680:	2200      	movs	r2, #0
 8004682:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <SystemInit+0xd8>)
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <SystemInit+0xe0>)
 8004688:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <SystemInit+0xd8>)
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <SystemInit+0xe4>)
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <SystemInit+0xd8>)
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <SystemInit+0xe8>)
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <SystemInit+0xd8>)
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <SystemInit+0xd8>)
 800469e:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <SystemInit+0xe8>)
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <SystemInit+0xd8>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <SystemInit+0xd8>)
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <SystemInit+0xe8>)
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <SystemInit+0xd8>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <SystemInit+0xd8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <SystemInit+0xd8>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <SystemInit+0xd8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <SystemInit+0xec>)
 80046c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80046cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00
 80046dc:	52002000 	.word	0x52002000
 80046e0:	58024400 	.word	0x58024400
 80046e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80046e8:	02020200 	.word	0x02020200
 80046ec:	01ff0000 	.word	0x01ff0000
 80046f0:	01010280 	.word	0x01010280
 80046f4:	52004000 	.word	0x52004000

080046f8 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d101      	bne.n	800470e <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 800470a:	f7fe fc49 	bl	8002fa0 <interPub>
	}
	if (htim->Instance == TIM5) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4aad      	ldr	r2, [pc, #692]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	f040 81c9 	bne.w	8004aac <HAL_TIM_PeriodElapsedCallback+0x3b4>
		Kpid[0].goalVel = Vy + Vx + (W * 0.152767);
 800471a:	4bac      	ldr	r3, [pc, #688]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800471c:	ed93 6b00 	vldr	d6, [r3]
 8004720:	4bab      	ldr	r3, [pc, #684]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004722:	ed93 7b00 	vldr	d7, [r3]
 8004726:	ee36 6b07 	vadd.f64	d6, d6, d7
 800472a:	4baa      	ldr	r3, [pc, #680]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800472c:	ed93 7b00 	vldr	d7, [r3]
 8004730:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 80049a8 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8004734:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004738:	ee36 7b07 	vadd.f64	d7, d6, d7
 800473c:	4ba6      	ldr	r3, [pc, #664]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800473e:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * 0.152844);
 8004742:	4ba2      	ldr	r3, [pc, #648]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004744:	ed93 6b00 	vldr	d6, [r3]
 8004748:	4ba1      	ldr	r3, [pc, #644]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800474a:	ed93 7b00 	vldr	d7, [r3]
 800474e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004752:	4ba0      	ldr	r3, [pc, #640]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004754:	ed93 7b00 	vldr	d7, [r3]
 8004758:	ed9f 5b95 	vldr	d5, [pc, #596]	; 80049b0 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 800475c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004760:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004764:	4b9c      	ldr	r3, [pc, #624]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004766:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
		Kpid[2].goalVel = Vy + Vx - (W * 0.152998);
 800476a:	4b98      	ldr	r3, [pc, #608]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800476c:	ed93 6b00 	vldr	d6, [r3]
 8004770:	4b97      	ldr	r3, [pc, #604]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004772:	ed93 7b00 	vldr	d7, [r3]
 8004776:	ee36 6b07 	vadd.f64	d6, d6, d7
 800477a:	4b96      	ldr	r3, [pc, #600]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800477c:	ed93 7b00 	vldr	d7, [r3]
 8004780:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 80049b8 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8004784:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004788:	ee36 7b47 	vsub.f64	d7, d6, d7
 800478c:	4b92      	ldr	r3, [pc, #584]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800478e:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
		Kpid[3].goalVel = Vy - Vx + (W * 0.154852);
 8004792:	4b8e      	ldr	r3, [pc, #568]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004794:	ed93 6b00 	vldr	d6, [r3]
 8004798:	4b8d      	ldr	r3, [pc, #564]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800479a:	ed93 7b00 	vldr	d7, [r3]
 800479e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047a2:	4b8c      	ldr	r3, [pc, #560]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80047a4:	ed93 7b00 	vldr	d7, [r3]
 80047a8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80049c0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80047ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80047b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047b4:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047b6:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	b21a      	sxth	r2, r3
 80047c2:	4b85      	ldr	r3, [pc, #532]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047c4:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 80047c6:	4b86      	ldr	r3, [pc, #536]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	425b      	negs	r3, r3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b21a      	sxth	r2, r3
 80047d4:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 80047da:	4b82      	ldr	r3, [pc, #520]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	b21a      	sxth	r2, r3
 80047e2:	4b7d      	ldr	r3, [pc, #500]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047e4:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 80047e8:	4b7f      	ldr	r3, [pc, #508]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	4b79      	ldr	r3, [pc, #484]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80047f2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		__HAL_TIM_SetCounter(&htim24, 0);
 80047f6:	4b7b      	ldr	r3, [pc, #492]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 80047fe:	4b77      	ldr	r3, [pc, #476]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004806:	4b78      	ldr	r3, [pc, #480]	; (80049e8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 800480e:	4b74      	ldr	r3, [pc, #464]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b03      	cmp	r3, #3
 800481e:	dc06      	bgt.n	800482e <HAL_TIM_PeriodElapsedCallback+0x136>
			pidCtrl(i);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7fb ff2d 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e7f5      	b.n	800481a <HAL_TIM_PeriodElapsedCallback+0x122>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004830:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004834:	4b6d      	ldr	r3, [pc, #436]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800483c:	ee17 2a90 	vmov	r2, s15
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004844:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004850:	ee17 2a90 	vmov	r2, s15
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004856:	4b60      	ldr	r3, [pc, #384]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004858:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 800485c:	4b64      	ldr	r3, [pc, #400]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 800486a:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800486c:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8004870:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004878:	ee17 2a90 	vmov	r2, s15
 800487c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800487e:	2200      	movs	r2, #0
 8004880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004884:	485b      	ldr	r0, [pc, #364]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004886:	f003 fdb7 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800488a:	2200      	movs	r2, #0
 800488c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004890:	4858      	ldr	r0, [pc, #352]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004892:	f003 fdb1 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004896:	2200      	movs	r2, #0
 8004898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800489c:	4856      	ldr	r0, [pc, #344]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800489e:	f003 fdab 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2140      	movs	r1, #64	; 0x40
 80048a6:	4854      	ldr	r0, [pc, #336]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048a8:	f003 fda6 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048b2:	4851      	ldr	r0, [pc, #324]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048b4:	f003 fda0 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048be:	484e      	ldr	r0, [pc, #312]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048c0:	f003 fd9a 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ca:	484b      	ldr	r0, [pc, #300]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048cc:	f003 fd94 	bl	80083f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80048d0:	2200      	movs	r2, #0
 80048d2:	2180      	movs	r1, #128	; 0x80
 80048d4:	4848      	ldr	r0, [pc, #288]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80048d6:	f003 fd8f 	bl	80083f8 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80048dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80048e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e8:	dd06      	ble.n	80048f8 <HAL_TIM_PeriodElapsedCallback+0x200>
 80048ea:	2201      	movs	r2, #1
 80048ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048f0:	4840      	ldr	r0, [pc, #256]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80048f2:	f003 fd81 	bl	80083f8 <HAL_GPIO_WritePin>
 80048f6:	e00d      	b.n	8004914 <HAL_TIM_PeriodElapsedCallback+0x21c>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80048f8:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80048fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80048fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	d505      	bpl.n	8004914 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8004908:	2201      	movs	r2, #1
 800490a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800490e:	4839      	ldr	r0, [pc, #228]	; (80049f4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004910:	f003 fd72 	bl	80083f8 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004916:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800491a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	dd06      	ble.n	8004932 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8004924:	2201      	movs	r2, #1
 8004926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800492a:	4833      	ldr	r0, [pc, #204]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800492c:	f003 fd64 	bl	80083f8 <HAL_GPIO_WritePin>
 8004930:	e00c      	b.n	800494c <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004934:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004938:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004940:	d504      	bpl.n	800494c <HAL_TIM_PeriodElapsedCallback+0x254>
 8004942:	2201      	movs	r2, #1
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	482c      	ldr	r0, [pc, #176]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004948:	f003 fd56 	bl	80083f8 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800494e:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004952:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495a:	dd06      	ble.n	800496a <HAL_TIM_PeriodElapsedCallback+0x272>
 800495c:	2201      	movs	r2, #1
 800495e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004962:	4825      	ldr	r0, [pc, #148]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004964:	f003 fd48 	bl	80083f8 <HAL_GPIO_WritePin>
 8004968:	e00d      	b.n	8004986 <HAL_TIM_PeriodElapsedCallback+0x28e>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800496c:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004970:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d505      	bpl.n	8004986 <HAL_TIM_PeriodElapsedCallback+0x28e>
 800497a:	2201      	movs	r2, #1
 800497c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004980:	481d      	ldr	r0, [pc, #116]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004982:	f003 fd39 	bl	80083f8 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004988:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 800498c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	dd32      	ble.n	80049fc <HAL_TIM_PeriodElapsedCallback+0x304>
 8004996:	2201      	movs	r2, #1
 8004998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800499c:	4816      	ldr	r0, [pc, #88]	; (80049f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800499e:	f003 fd2b 	bl	80083f8 <HAL_GPIO_WritePin>
 80049a2:	e038      	b.n	8004a16 <HAL_TIM_PeriodElapsedCallback+0x31e>
 80049a4:	f3af 8000 	nop.w
 80049a8:	7a743a64 	.word	0x7a743a64
 80049ac:	3fc38dde 	.word	0x3fc38dde
 80049b0:	66b1e5c1 	.word	0x66b1e5c1
 80049b4:	3fc39064 	.word	0x3fc39064
 80049b8:	3f2d3c79 	.word	0x3f2d3c79
 80049bc:	3fc39570 	.word	0x3fc39570
 80049c0:	b9dc2f40 	.word	0xb9dc2f40
 80049c4:	3fc3d230 	.word	0x3fc3d230
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	24000f68 	.word	0x24000f68
 80049d0:	24000f60 	.word	0x24000f60
 80049d4:	24000f70 	.word	0x24000f70
 80049d8:	24000000 	.word	0x24000000
 80049dc:	240003fc 	.word	0x240003fc
 80049e0:	240002cc 	.word	0x240002cc
 80049e4:	24000448 	.word	0x24000448
 80049e8:	24000280 	.word	0x24000280
 80049ec:	24000364 	.word	0x24000364
 80049f0:	240003b0 	.word	0x240003b0
 80049f4:	58020400 	.word	0x58020400
 80049f8:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80049fc:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80049fe:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004a02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d504      	bpl.n	8004a16 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	4829      	ldr	r0, [pc, #164]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004a12:	f003 fcf1 	bl	80083f8 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a18:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a1e:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a22:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004a26:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a28:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a30:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a32:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004a36:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004a3a:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004a44:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a4a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a4e:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a50:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a54:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004a58:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a5a:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a5e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a64:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004a68:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a6c:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004a70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a74:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004a76:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a7c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a82:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004a86:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a8c:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004a90:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004a96:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004a9a:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004a9e:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004aa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8004aa8:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	24000000 	.word	0x24000000
 8004ab8:	58021000 	.word	0x58021000
 8004abc:	24000f80 	.word	0x24000f80
 8004ac0:	24000f78 	.word	0x24000f78
 8004ac4:	24000f88 	.word	0x24000f88

08004ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004acc:	f7ff fd9c 	bl	8004608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ad0:	480c      	ldr	r0, [pc, #48]	; (8004b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ad2:	490d      	ldr	r1, [pc, #52]	; (8004b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad8:	e002      	b.n	8004ae0 <LoopCopyDataInit>

08004ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ade:	3304      	adds	r3, #4

08004ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae4:	d3f9      	bcc.n	8004ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ae8:	4c0a      	ldr	r4, [pc, #40]	; (8004b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aec:	e001      	b.n	8004af2 <LoopFillZerobss>

08004aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af0:	3204      	adds	r2, #4

08004af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af4:	d3fb      	bcc.n	8004aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004af6:	f009 fd2f 	bl	800e558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004afa:	f7fb ff1f 	bl	800093c <main>
  bx  lr
 8004afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004b08:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8004b0c:	0800ebf4 	.word	0x0800ebf4
  ldr r2, =_sbss
 8004b10:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8004b14:	24001068 	.word	0x24001068

08004b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b18:	e7fe      	b.n	8004b18 <ADC3_IRQHandler>
	...

08004b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b22:	2003      	movs	r0, #3
 8004b24:	f000 f980 	bl	8004e28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b28:	f004 fa42 	bl	8008fb0 <HAL_RCC_GetSysClockFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <HAL_Init+0x68>)
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	4913      	ldr	r1, [pc, #76]	; (8004b88 <HAL_Init+0x6c>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
 8004b44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_Init+0x68>)
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <HAL_Init+0x6c>)
 8004b50:	5cd3      	ldrb	r3, [r2, r3]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <HAL_Init+0x70>)
 8004b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b60:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <HAL_Init+0x74>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b66:	200f      	movs	r0, #15
 8004b68:	f000 f814 	bl	8004b94 <HAL_InitTick>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e002      	b.n	8004b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004b76:	f7ff f957 	bl	8003e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	58024400 	.word	0x58024400
 8004b88:	0800eba0 	.word	0x0800eba0
 8004b8c:	240001a4 	.word	0x240001a4
 8004b90:	240001a0 	.word	0x240001a0

08004b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004b9c:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <HAL_InitTick+0x60>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e021      	b.n	8004bec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <HAL_InitTick+0x64>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_InitTick+0x60>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f973 	bl	8004eaa <HAL_SYSTICK_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e00e      	b.n	8004bec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d80a      	bhi.n	8004bea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	f000 f92f 	bl	8004e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004be0:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <HAL_InitTick+0x68>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	240001ac 	.word	0x240001ac
 8004bf8:	240001a0 	.word	0x240001a0
 8004bfc:	240001a8 	.word	0x240001a8

08004c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_IncTick+0x20>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_IncTick+0x24>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4413      	add	r3, r2
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <HAL_IncTick+0x24>)
 8004c12:	6013      	str	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	240001ac 	.word	0x240001ac
 8004c24:	24001054 	.word	0x24001054

08004c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_GetTick+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	24001054 	.word	0x24001054

08004c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <__NVIC_SetPriorityGrouping+0x40>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <__NVIC_SetPriorityGrouping+0x44>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c6e:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <__NVIC_SetPriorityGrouping+0x40>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	60d3      	str	r3, [r2, #12]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000ed00 	.word	0xe000ed00
 8004c84:	05fa0000 	.word	0x05fa0000

08004c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 0307 	and.w	r3, r3, #7
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000ed00 	.word	0xe000ed00

08004ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	db0b      	blt.n	8004cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f003 021f 	and.w	r2, r3, #31
 8004cbc:	4907      	ldr	r1, [pc, #28]	; (8004cdc <__NVIC_EnableIRQ+0x38>)
 8004cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	e000e100 	.word	0xe000e100

08004ce0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db12      	blt.n	8004d18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	490a      	ldr	r1, [pc, #40]	; (8004d24 <__NVIC_DisableIRQ+0x44>)
 8004cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	3320      	adds	r3, #32
 8004d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d0c:	f3bf 8f4f 	dsb	sy
}
 8004d10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d12:	f3bf 8f6f 	isb	sy
}
 8004d16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000e100 	.word	0xe000e100

08004d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f1c3 0307 	rsb	r3, r3, #7
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	bf28      	it	cs
 8004d9a:	2304      	movcs	r3, #4
 8004d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3304      	adds	r3, #4
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d902      	bls.n	8004dac <NVIC_EncodePriority+0x30>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3b03      	subs	r3, #3
 8004daa:	e000      	b.n	8004dae <NVIC_EncodePriority+0x32>
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	43d9      	mvns	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd4:	4313      	orrs	r3, r2
         );
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df4:	d301      	bcc.n	8004dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df6:	2301      	movs	r3, #1
 8004df8:	e00f      	b.n	8004e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <SysTick_Config+0x40>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e02:	210f      	movs	r1, #15
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	f7ff ff8e 	bl	8004d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <SysTick_Config+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e12:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <SysTick_Config+0x40>)
 8004e14:	2207      	movs	r2, #7
 8004e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff05 	bl	8004c40 <__NVIC_SetPriorityGrouping>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e4c:	f7ff ff1c 	bl	8004c88 <__NVIC_GetPriorityGrouping>
 8004e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7ff ff90 	bl	8004d7c <NVIC_EncodePriority>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff5f 	bl	8004d28 <__NVIC_SetPriority>
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff0f 	bl	8004ca4 <__NVIC_EnableIRQ>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff1f 	bl	8004ce0 <__NVIC_DisableIRQ>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff96 	bl	8004de4 <SysTick_Config>
 8004eb8:	4603      	mov	r3, r0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ecc:	f7ff feac 	bl	8004c28 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e314      	b.n	8005506 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a66      	ldr	r2, [pc, #408]	; (800507c <HAL_DMA_Init+0x1b8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a65      	ldr	r2, [pc, #404]	; (8005080 <HAL_DMA_Init+0x1bc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a63      	ldr	r2, [pc, #396]	; (8005084 <HAL_DMA_Init+0x1c0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a62      	ldr	r2, [pc, #392]	; (8005088 <HAL_DMA_Init+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a60      	ldr	r2, [pc, #384]	; (800508c <HAL_DMA_Init+0x1c8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5f      	ldr	r2, [pc, #380]	; (8005090 <HAL_DMA_Init+0x1cc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <HAL_DMA_Init+0x1d0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5c      	ldr	r2, [pc, #368]	; (8005098 <HAL_DMA_Init+0x1d4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5a      	ldr	r2, [pc, #360]	; (800509c <HAL_DMA_Init+0x1d8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a59      	ldr	r2, [pc, #356]	; (80050a0 <HAL_DMA_Init+0x1dc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <HAL_DMA_Init+0x1e0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a56      	ldr	r2, [pc, #344]	; (80050a8 <HAL_DMA_Init+0x1e4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a54      	ldr	r2, [pc, #336]	; (80050ac <HAL_DMA_Init+0x1e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a53      	ldr	r2, [pc, #332]	; (80050b0 <HAL_DMA_Init+0x1ec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_DMA_Init+0x1f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_Init+0xb8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <HAL_DMA_Init+0x1f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_DMA_Init+0xbc>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_DMA_Init+0xbe>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 813c 	beq.w	8005200 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a37      	ldr	r2, [pc, #220]	; (800507c <HAL_DMA_Init+0x1b8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04a      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a36      	ldr	r2, [pc, #216]	; (8005080 <HAL_DMA_Init+0x1bc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d045      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a34      	ldr	r2, [pc, #208]	; (8005084 <HAL_DMA_Init+0x1c0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d040      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a33      	ldr	r2, [pc, #204]	; (8005088 <HAL_DMA_Init+0x1c4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d03b      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a31      	ldr	r2, [pc, #196]	; (800508c <HAL_DMA_Init+0x1c8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d036      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_DMA_Init+0x1cc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d031      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2e      	ldr	r2, [pc, #184]	; (8005094 <HAL_DMA_Init+0x1d0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d02c      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2d      	ldr	r2, [pc, #180]	; (8005098 <HAL_DMA_Init+0x1d4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d027      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <HAL_DMA_Init+0x1d8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <HAL_DMA_Init+0x1dc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <HAL_DMA_Init+0x1e0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a27      	ldr	r2, [pc, #156]	; (80050a8 <HAL_DMA_Init+0x1e4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <HAL_DMA_Init+0x1e8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_Init+0x174>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <HAL_DMA_Init+0x1ec>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_DMA_Init+0x174>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_DMA_Init+0x1f0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_Init+0x174>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <HAL_DMA_Init+0x1f4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d108      	bne.n	800504a <HAL_DMA_Init+0x186>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <HAL_DMA_Init+0x196>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800505a:	e02f      	b.n	80050bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800505c:	f7ff fde4 	bl	8004c28 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b05      	cmp	r3, #5
 8005068:	d928      	bls.n	80050bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2203      	movs	r2, #3
 8005074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e244      	b.n	8005506 <HAL_DMA_Init+0x642>
 800507c:	40020010 	.word	0x40020010
 8005080:	40020028 	.word	0x40020028
 8005084:	40020040 	.word	0x40020040
 8005088:	40020058 	.word	0x40020058
 800508c:	40020070 	.word	0x40020070
 8005090:	40020088 	.word	0x40020088
 8005094:	400200a0 	.word	0x400200a0
 8005098:	400200b8 	.word	0x400200b8
 800509c:	40020410 	.word	0x40020410
 80050a0:	40020428 	.word	0x40020428
 80050a4:	40020440 	.word	0x40020440
 80050a8:	40020458 	.word	0x40020458
 80050ac:	40020470 	.word	0x40020470
 80050b0:	40020488 	.word	0x40020488
 80050b4:	400204a0 	.word	0x400204a0
 80050b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1c8      	bne.n	800505c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <HAL_DMA_Init+0x424>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b04      	cmp	r3, #4
 800510e:	d107      	bne.n	8005120 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4313      	orrs	r3, r2
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b28      	cmp	r3, #40	; 0x28
 8005126:	d903      	bls.n	8005130 <HAL_DMA_Init+0x26c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b2e      	cmp	r3, #46	; 0x2e
 800512e:	d91f      	bls.n	8005170 <HAL_DMA_Init+0x2ac>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b3e      	cmp	r3, #62	; 0x3e
 8005136:	d903      	bls.n	8005140 <HAL_DMA_Init+0x27c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b42      	cmp	r3, #66	; 0x42
 800513e:	d917      	bls.n	8005170 <HAL_DMA_Init+0x2ac>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b46      	cmp	r3, #70	; 0x46
 8005146:	d903      	bls.n	8005150 <HAL_DMA_Init+0x28c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b48      	cmp	r3, #72	; 0x48
 800514e:	d90f      	bls.n	8005170 <HAL_DMA_Init+0x2ac>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b4e      	cmp	r3, #78	; 0x4e
 8005156:	d903      	bls.n	8005160 <HAL_DMA_Init+0x29c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b52      	cmp	r3, #82	; 0x52
 800515e:	d907      	bls.n	8005170 <HAL_DMA_Init+0x2ac>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b73      	cmp	r3, #115	; 0x73
 8005166:	d905      	bls.n	8005174 <HAL_DMA_Init+0x2b0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b77      	cmp	r3, #119	; 0x77
 800516e:	d801      	bhi.n	8005174 <HAL_DMA_Init+0x2b0>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_DMA_Init+0x2b2>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005180:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d117      	bne.n	80051dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00e      	beq.n	80051dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f002 fce6 	bl	8007b90 <DMA_CheckFifoParam>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2240      	movs	r2, #64	; 0x40
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e194      	b.n	8005506 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f002 fc21 	bl	8007a2c <DMA_CalcBaseAndBitshift>
 80051ea:	4603      	mov	r3, r0
 80051ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	223f      	movs	r2, #63	; 0x3f
 80051f8:	409a      	lsls	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	e0ca      	b.n	8005396 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a39      	ldr	r2, [pc, #228]	; (80052ec <HAL_DMA_Init+0x428>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a38      	ldr	r2, [pc, #224]	; (80052f0 <HAL_DMA_Init+0x42c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a36      	ldr	r2, [pc, #216]	; (80052f4 <HAL_DMA_Init+0x430>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <HAL_DMA_Init+0x434>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_DMA_Init+0x438>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a32      	ldr	r2, [pc, #200]	; (8005300 <HAL_DMA_Init+0x43c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a30      	ldr	r2, [pc, #192]	; (8005304 <HAL_DMA_Init+0x440>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_DMA_Init+0x38c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2f      	ldr	r2, [pc, #188]	; (8005308 <HAL_DMA_Init+0x444>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <HAL_DMA_Init+0x390>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_DMA_Init+0x392>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8094 	beq.w	8005384 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a22      	ldr	r2, [pc, #136]	; (80052ec <HAL_DMA_Init+0x428>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d021      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <HAL_DMA_Init+0x42c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d01c      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <HAL_DMA_Init+0x430>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d017      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_DMA_Init+0x434>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d012      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <HAL_DMA_Init+0x438>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00d      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_DMA_Init+0x43c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d008      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_DMA_Init+0x440>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <HAL_DMA_Init+0x3e6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <HAL_DMA_Init+0x444>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_DMA_Init+0x448>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d01d      	beq.n	8005310 <HAL_DMA_Init+0x44c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d102      	bne.n	80052e2 <HAL_DMA_Init+0x41e>
 80052dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052e0:	e017      	b.n	8005312 <HAL_DMA_Init+0x44e>
 80052e2:	2300      	movs	r3, #0
 80052e4:	e015      	b.n	8005312 <HAL_DMA_Init+0x44e>
 80052e6:	bf00      	nop
 80052e8:	fe10803f 	.word	0xfe10803f
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494
 800530c:	fffe000f 	.word	0xfffe000f
 8005310:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68d2      	ldr	r2, [r2, #12]
 8005316:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005340:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b6e      	ldr	r3, [pc, #440]	; (8005510 <HAL_DMA_Init+0x64c>)
 8005358:	4413      	add	r3, r2
 800535a:	4a6e      	ldr	r2, [pc, #440]	; (8005514 <HAL_DMA_Init+0x650>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f002 fb5f 	bl	8007a2c <DMA_CalcBaseAndBitshift>
 800536e:	4603      	mov	r3, r0
 8005370:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2201      	movs	r2, #1
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	e008      	b.n	8005396 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2203      	movs	r2, #3
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0b7      	b.n	8005506 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5f      	ldr	r2, [pc, #380]	; (8005518 <HAL_DMA_Init+0x654>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d072      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5d      	ldr	r2, [pc, #372]	; (800551c <HAL_DMA_Init+0x658>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d06d      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <HAL_DMA_Init+0x65c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d068      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5a      	ldr	r2, [pc, #360]	; (8005524 <HAL_DMA_Init+0x660>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d063      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a59      	ldr	r2, [pc, #356]	; (8005528 <HAL_DMA_Init+0x664>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d05e      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a57      	ldr	r2, [pc, #348]	; (800552c <HAL_DMA_Init+0x668>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d059      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_DMA_Init+0x66c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d054      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a54      	ldr	r2, [pc, #336]	; (8005534 <HAL_DMA_Init+0x670>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d04f      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a53      	ldr	r2, [pc, #332]	; (8005538 <HAL_DMA_Init+0x674>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d04a      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a51      	ldr	r2, [pc, #324]	; (800553c <HAL_DMA_Init+0x678>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d045      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a50      	ldr	r2, [pc, #320]	; (8005540 <HAL_DMA_Init+0x67c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d040      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <HAL_DMA_Init+0x680>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d03b      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4d      	ldr	r2, [pc, #308]	; (8005548 <HAL_DMA_Init+0x684>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d036      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4b      	ldr	r2, [pc, #300]	; (800554c <HAL_DMA_Init+0x688>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d031      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <HAL_DMA_Init+0x68c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d02c      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a48      	ldr	r2, [pc, #288]	; (8005554 <HAL_DMA_Init+0x690>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d027      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a47      	ldr	r2, [pc, #284]	; (8005558 <HAL_DMA_Init+0x694>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a45      	ldr	r2, [pc, #276]	; (800555c <HAL_DMA_Init+0x698>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01d      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a44      	ldr	r2, [pc, #272]	; (8005560 <HAL_DMA_Init+0x69c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_DMA_Init+0x6a0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a41      	ldr	r2, [pc, #260]	; (8005568 <HAL_DMA_Init+0x6a4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3f      	ldr	r2, [pc, #252]	; (800556c <HAL_DMA_Init+0x6a8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3e      	ldr	r2, [pc, #248]	; (8005570 <HAL_DMA_Init+0x6ac>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_DMA_Init+0x5c2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3c      	ldr	r2, [pc, #240]	; (8005574 <HAL_DMA_Init+0x6b0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d101      	bne.n	800548a <HAL_DMA_Init+0x5c6>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_DMA_Init+0x5c8>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d032      	beq.n	80054f6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 fbf9 	bl	8007c88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d102      	bne.n	80054a4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_DMA_Init+0x620>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d80c      	bhi.n	80054e4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f002 fc76 	bl	8007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	e008      	b.n	80054f6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	a7fdabf8 	.word	0xa7fdabf8
 8005514:	cccccccd 	.word	0xcccccccd
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	58025408 	.word	0x58025408
 800555c:	5802541c 	.word	0x5802541c
 8005560:	58025430 	.word	0x58025430
 8005564:	58025444 	.word	0x58025444
 8005568:	58025458 	.word	0x58025458
 800556c:	5802546c 	.word	0x5802546c
 8005570:	58025480 	.word	0x58025480
 8005574:	58025494 	.word	0x58025494

08005578 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e1a8      	b.n	80058dc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a82      	ldr	r2, [pc, #520]	; (8005798 <HAL_DMA_DeInit+0x220>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a80      	ldr	r2, [pc, #512]	; (800579c <HAL_DMA_DeInit+0x224>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a7f      	ldr	r2, [pc, #508]	; (80057a0 <HAL_DMA_DeInit+0x228>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a7d      	ldr	r2, [pc, #500]	; (80057a4 <HAL_DMA_DeInit+0x22c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a7c      	ldr	r2, [pc, #496]	; (80057a8 <HAL_DMA_DeInit+0x230>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a7a      	ldr	r2, [pc, #488]	; (80057ac <HAL_DMA_DeInit+0x234>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a79      	ldr	r2, [pc, #484]	; (80057b0 <HAL_DMA_DeInit+0x238>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a77      	ldr	r2, [pc, #476]	; (80057b4 <HAL_DMA_DeInit+0x23c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a76      	ldr	r2, [pc, #472]	; (80057b8 <HAL_DMA_DeInit+0x240>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a74      	ldr	r2, [pc, #464]	; (80057bc <HAL_DMA_DeInit+0x244>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a73      	ldr	r2, [pc, #460]	; (80057c0 <HAL_DMA_DeInit+0x248>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a71      	ldr	r2, [pc, #452]	; (80057c4 <HAL_DMA_DeInit+0x24c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <HAL_DMA_DeInit+0x250>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6e      	ldr	r2, [pc, #440]	; (80057cc <HAL_DMA_DeInit+0x254>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a6d      	ldr	r2, [pc, #436]	; (80057d0 <HAL_DMA_DeInit+0x258>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_DMA_DeInit+0xb2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a6b      	ldr	r2, [pc, #428]	; (80057d4 <HAL_DMA_DeInit+0x25c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <HAL_DMA_DeInit+0xc4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <HAL_DMA_DeInit+0xd4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a51      	ldr	r2, [pc, #324]	; (8005798 <HAL_DMA_DeInit+0x220>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d04a      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a50      	ldr	r2, [pc, #320]	; (800579c <HAL_DMA_DeInit+0x224>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d045      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_DMA_DeInit+0x228>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d040      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4d      	ldr	r2, [pc, #308]	; (80057a4 <HAL_DMA_DeInit+0x22c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d03b      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a4b      	ldr	r2, [pc, #300]	; (80057a8 <HAL_DMA_DeInit+0x230>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d036      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4a      	ldr	r2, [pc, #296]	; (80057ac <HAL_DMA_DeInit+0x234>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d031      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a48      	ldr	r2, [pc, #288]	; (80057b0 <HAL_DMA_DeInit+0x238>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02c      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a47      	ldr	r2, [pc, #284]	; (80057b4 <HAL_DMA_DeInit+0x23c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d027      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a45      	ldr	r2, [pc, #276]	; (80057b8 <HAL_DMA_DeInit+0x240>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a44      	ldr	r2, [pc, #272]	; (80057bc <HAL_DMA_DeInit+0x244>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d01d      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a42      	ldr	r2, [pc, #264]	; (80057c0 <HAL_DMA_DeInit+0x248>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a41      	ldr	r2, [pc, #260]	; (80057c4 <HAL_DMA_DeInit+0x24c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a3f      	ldr	r2, [pc, #252]	; (80057c8 <HAL_DMA_DeInit+0x250>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a3e      	ldr	r2, [pc, #248]	; (80057cc <HAL_DMA_DeInit+0x254>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <HAL_DMA_DeInit+0x258>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_DMA_DeInit+0x174>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3b      	ldr	r2, [pc, #236]	; (80057d4 <HAL_DMA_DeInit+0x25c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d101      	bne.n	80056f0 <HAL_DMA_DeInit+0x178>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_DMA_DeInit+0x17a>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d025      	beq.n	8005742 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2221      	movs	r2, #33	; 0x21
 8005724:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f002 f980 	bl	8007a2c <DMA_CalcBaseAndBitshift>
 800572c:	4603      	mov	r3, r0
 800572e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	223f      	movs	r2, #63	; 0x3f
 800573a:	409a      	lsls	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e081      	b.n	8005846 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <HAL_DMA_DeInit+0x260>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <HAL_DMA_DeInit+0x264>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <HAL_DMA_DeInit+0x268>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_DMA_DeInit+0x26c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_DMA_DeInit+0x270>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_DMA_DeInit+0x274>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_DMA_DeInit+0x278>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_DMA_DeInit+0x21a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_DMA_DeInit+0x27c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d132      	bne.n	80057f8 <HAL_DMA_DeInit+0x280>
 8005792:	2301      	movs	r3, #1
 8005794:	e031      	b.n	80057fa <HAL_DMA_DeInit+0x282>
 8005796:	bf00      	nop
 8005798:	40020010 	.word	0x40020010
 800579c:	40020028 	.word	0x40020028
 80057a0:	40020040 	.word	0x40020040
 80057a4:	40020058 	.word	0x40020058
 80057a8:	40020070 	.word	0x40020070
 80057ac:	40020088 	.word	0x40020088
 80057b0:	400200a0 	.word	0x400200a0
 80057b4:	400200b8 	.word	0x400200b8
 80057b8:	40020410 	.word	0x40020410
 80057bc:	40020428 	.word	0x40020428
 80057c0:	40020440 	.word	0x40020440
 80057c4:	40020458 	.word	0x40020458
 80057c8:	40020470 	.word	0x40020470
 80057cc:	40020488 	.word	0x40020488
 80057d0:	400204a0 	.word	0x400204a0
 80057d4:	400204b8 	.word	0x400204b8
 80057d8:	58025408 	.word	0x58025408
 80057dc:	5802541c 	.word	0x5802541c
 80057e0:	58025430 	.word	0x58025430
 80057e4:	58025444 	.word	0x58025444
 80057e8:	58025458 	.word	0x58025458
 80057ec:	5802546c 	.word	0x5802546c
 80057f0:	58025480 	.word	0x58025480
 80057f4:	58025494 	.word	0x58025494
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d021      	beq.n	8005842 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 f900 	bl	8007a2c <DMA_CalcBaseAndBitshift>
 800582c:	4603      	mov	r3, r0
 800582e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	e001      	b.n	8005846 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e04a      	b.n	80058dc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f002 fa1e 	bl	8007c88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005864:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00f      	beq.n	800588e <HAL_DMA_DeInit+0x316>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b08      	cmp	r3, #8
 8005874:	d80b      	bhi.n	800588e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f002 faa0 	bl	8007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800588c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e226      	b.n	8005d4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_DMA_Start_IT+0x2a>
 800590a:	2302      	movs	r3, #2
 800590c:	e21f      	b.n	8005d4e <HAL_DMA_Start_IT+0x46a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	f040 820a 	bne.w	8005d38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a68      	ldr	r2, [pc, #416]	; (8005ad8 <HAL_DMA_Start_IT+0x1f4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d04a      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a66      	ldr	r2, [pc, #408]	; (8005adc <HAL_DMA_Start_IT+0x1f8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d045      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <HAL_DMA_Start_IT+0x1fc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d040      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a63      	ldr	r2, [pc, #396]	; (8005ae4 <HAL_DMA_Start_IT+0x200>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d03b      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a62      	ldr	r2, [pc, #392]	; (8005ae8 <HAL_DMA_Start_IT+0x204>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d036      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a60      	ldr	r2, [pc, #384]	; (8005aec <HAL_DMA_Start_IT+0x208>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d031      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5f      	ldr	r2, [pc, #380]	; (8005af0 <HAL_DMA_Start_IT+0x20c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d02c      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_DMA_Start_IT+0x210>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d027      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_DMA_Start_IT+0x214>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d022      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5a      	ldr	r2, [pc, #360]	; (8005afc <HAL_DMA_Start_IT+0x218>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01d      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_DMA_Start_IT+0x21c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_DMA_Start_IT+0x220>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_DMA_Start_IT+0x224>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <HAL_DMA_Start_IT+0x228>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a53      	ldr	r2, [pc, #332]	; (8005b10 <HAL_DMA_Start_IT+0x22c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_DMA_Start_IT+0xee>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a51      	ldr	r2, [pc, #324]	; (8005b14 <HAL_DMA_Start_IT+0x230>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <HAL_DMA_Start_IT+0x100>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e007      	b.n	80059f4 <HAL_DMA_Start_IT+0x110>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f001 fe6a 	bl	80076d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <HAL_DMA_Start_IT+0x1f4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04a      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a33      	ldr	r2, [pc, #204]	; (8005adc <HAL_DMA_Start_IT+0x1f8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d045      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a31      	ldr	r2, [pc, #196]	; (8005ae0 <HAL_DMA_Start_IT+0x1fc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d040      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a30      	ldr	r2, [pc, #192]	; (8005ae4 <HAL_DMA_Start_IT+0x200>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d03b      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <HAL_DMA_Start_IT+0x204>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <HAL_DMA_Start_IT+0x208>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <HAL_DMA_Start_IT+0x20c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02c      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <HAL_DMA_Start_IT+0x210>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d027      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a28      	ldr	r2, [pc, #160]	; (8005af8 <HAL_DMA_Start_IT+0x214>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a27      	ldr	r2, [pc, #156]	; (8005afc <HAL_DMA_Start_IT+0x218>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <HAL_DMA_Start_IT+0x21c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <HAL_DMA_Start_IT+0x220>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <HAL_DMA_Start_IT+0x224>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a21      	ldr	r2, [pc, #132]	; (8005b0c <HAL_DMA_Start_IT+0x228>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <HAL_DMA_Start_IT+0x22c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x1bc>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <HAL_DMA_Start_IT+0x230>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_DMA_Start_IT+0x1c0>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_DMA_Start_IT+0x1c2>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d036      	beq.n	8005b18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 021e 	bic.w	r2, r3, #30
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0216 	orr.w	r2, r2, #22
 8005abc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d03e      	beq.n	8005b44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e035      	b.n	8005b44 <HAL_DMA_Start_IT+0x260>
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 020e 	bic.w	r2, r3, #14
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 020a 	orr.w	r2, r2, #10
 8005b2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0204 	orr.w	r2, r2, #4
 8005b42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a83      	ldr	r2, [pc, #524]	; (8005d58 <HAL_DMA_Start_IT+0x474>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d072      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a82      	ldr	r2, [pc, #520]	; (8005d5c <HAL_DMA_Start_IT+0x478>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d06d      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a80      	ldr	r2, [pc, #512]	; (8005d60 <HAL_DMA_Start_IT+0x47c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d068      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7f      	ldr	r2, [pc, #508]	; (8005d64 <HAL_DMA_Start_IT+0x480>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d063      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a7d      	ldr	r2, [pc, #500]	; (8005d68 <HAL_DMA_Start_IT+0x484>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d05e      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a7c      	ldr	r2, [pc, #496]	; (8005d6c <HAL_DMA_Start_IT+0x488>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d059      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a7a      	ldr	r2, [pc, #488]	; (8005d70 <HAL_DMA_Start_IT+0x48c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d054      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a79      	ldr	r2, [pc, #484]	; (8005d74 <HAL_DMA_Start_IT+0x490>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d04f      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a77      	ldr	r2, [pc, #476]	; (8005d78 <HAL_DMA_Start_IT+0x494>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d04a      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a76      	ldr	r2, [pc, #472]	; (8005d7c <HAL_DMA_Start_IT+0x498>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d045      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a74      	ldr	r2, [pc, #464]	; (8005d80 <HAL_DMA_Start_IT+0x49c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d040      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a73      	ldr	r2, [pc, #460]	; (8005d84 <HAL_DMA_Start_IT+0x4a0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d03b      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a71      	ldr	r2, [pc, #452]	; (8005d88 <HAL_DMA_Start_IT+0x4a4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d036      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a70      	ldr	r2, [pc, #448]	; (8005d8c <HAL_DMA_Start_IT+0x4a8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d031      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a6e      	ldr	r2, [pc, #440]	; (8005d90 <HAL_DMA_Start_IT+0x4ac>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a6d      	ldr	r2, [pc, #436]	; (8005d94 <HAL_DMA_Start_IT+0x4b0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d027      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a6b      	ldr	r2, [pc, #428]	; (8005d98 <HAL_DMA_Start_IT+0x4b4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6a      	ldr	r2, [pc, #424]	; (8005d9c <HAL_DMA_Start_IT+0x4b8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d01d      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a68      	ldr	r2, [pc, #416]	; (8005da0 <HAL_DMA_Start_IT+0x4bc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a67      	ldr	r2, [pc, #412]	; (8005da4 <HAL_DMA_Start_IT+0x4c0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <HAL_DMA_Start_IT+0x4c4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a64      	ldr	r2, [pc, #400]	; (8005dac <HAL_DMA_Start_IT+0x4c8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a62      	ldr	r2, [pc, #392]	; (8005db0 <HAL_DMA_Start_IT+0x4cc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_DMA_Start_IT+0x350>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a61      	ldr	r2, [pc, #388]	; (8005db4 <HAL_DMA_Start_IT+0x4d0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_DMA_Start_IT+0x354>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_DMA_Start_IT+0x356>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01a      	beq.n	8005c74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a37      	ldr	r2, [pc, #220]	; (8005d58 <HAL_DMA_Start_IT+0x474>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a36      	ldr	r2, [pc, #216]	; (8005d5c <HAL_DMA_Start_IT+0x478>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	; (8005d60 <HAL_DMA_Start_IT+0x47c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a33      	ldr	r2, [pc, #204]	; (8005d64 <HAL_DMA_Start_IT+0x480>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	; (8005d68 <HAL_DMA_Start_IT+0x484>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a30      	ldr	r2, [pc, #192]	; (8005d6c <HAL_DMA_Start_IT+0x488>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <HAL_DMA_Start_IT+0x48c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <HAL_DMA_Start_IT+0x490>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <HAL_DMA_Start_IT+0x494>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <HAL_DMA_Start_IT+0x498>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <HAL_DMA_Start_IT+0x49c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <HAL_DMA_Start_IT+0x4a0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <HAL_DMA_Start_IT+0x4a4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <HAL_DMA_Start_IT+0x4a8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <HAL_DMA_Start_IT+0x4ac>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_Start_IT+0x430>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <HAL_DMA_Start_IT+0x4b0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <HAL_DMA_Start_IT+0x442>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e012      	b.n	8005d4c <HAL_DMA_Start_IT+0x468>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e009      	b.n	8005d4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40020010 	.word	0x40020010
 8005d5c:	40020028 	.word	0x40020028
 8005d60:	40020040 	.word	0x40020040
 8005d64:	40020058 	.word	0x40020058
 8005d68:	40020070 	.word	0x40020070
 8005d6c:	40020088 	.word	0x40020088
 8005d70:	400200a0 	.word	0x400200a0
 8005d74:	400200b8 	.word	0x400200b8
 8005d78:	40020410 	.word	0x40020410
 8005d7c:	40020428 	.word	0x40020428
 8005d80:	40020440 	.word	0x40020440
 8005d84:	40020458 	.word	0x40020458
 8005d88:	40020470 	.word	0x40020470
 8005d8c:	40020488 	.word	0x40020488
 8005d90:	400204a0 	.word	0x400204a0
 8005d94:	400204b8 	.word	0x400204b8
 8005d98:	58025408 	.word	0x58025408
 8005d9c:	5802541c 	.word	0x5802541c
 8005da0:	58025430 	.word	0x58025430
 8005da4:	58025444 	.word	0x58025444
 8005da8:	58025458 	.word	0x58025458
 8005dac:	5802546c 	.word	0x5802546c
 8005db0:	58025480 	.word	0x58025480
 8005db4:	58025494 	.word	0x58025494

08005db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005dc0:	f7fe ff32 	bl	8004c28 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e2dc      	b.n	800638a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d008      	beq.n	8005dee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e2cd      	b.n	800638a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a76      	ldr	r2, [pc, #472]	; (8005fcc <HAL_DMA_Abort+0x214>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d04a      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a74      	ldr	r2, [pc, #464]	; (8005fd0 <HAL_DMA_Abort+0x218>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d045      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a73      	ldr	r2, [pc, #460]	; (8005fd4 <HAL_DMA_Abort+0x21c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d040      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a71      	ldr	r2, [pc, #452]	; (8005fd8 <HAL_DMA_Abort+0x220>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d03b      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a70      	ldr	r2, [pc, #448]	; (8005fdc <HAL_DMA_Abort+0x224>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d036      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a6e      	ldr	r2, [pc, #440]	; (8005fe0 <HAL_DMA_Abort+0x228>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d031      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a6d      	ldr	r2, [pc, #436]	; (8005fe4 <HAL_DMA_Abort+0x22c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d02c      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6b      	ldr	r2, [pc, #428]	; (8005fe8 <HAL_DMA_Abort+0x230>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6a      	ldr	r2, [pc, #424]	; (8005fec <HAL_DMA_Abort+0x234>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a68      	ldr	r2, [pc, #416]	; (8005ff0 <HAL_DMA_Abort+0x238>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a67      	ldr	r2, [pc, #412]	; (8005ff4 <HAL_DMA_Abort+0x23c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a65      	ldr	r2, [pc, #404]	; (8005ff8 <HAL_DMA_Abort+0x240>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a64      	ldr	r2, [pc, #400]	; (8005ffc <HAL_DMA_Abort+0x244>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a62      	ldr	r2, [pc, #392]	; (8006000 <HAL_DMA_Abort+0x248>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a61      	ldr	r2, [pc, #388]	; (8006004 <HAL_DMA_Abort+0x24c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_Abort+0xd6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a5f      	ldr	r2, [pc, #380]	; (8006008 <HAL_DMA_Abort+0x250>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_DMA_Abort+0xda>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <HAL_DMA_Abort+0xdc>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 021e 	bic.w	r2, r2, #30
 8005ea6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eb6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e00a      	b.n	8005ed6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 020e 	bic.w	r2, r2, #14
 8005ece:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3c      	ldr	r2, [pc, #240]	; (8005fcc <HAL_DMA_Abort+0x214>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d072      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <HAL_DMA_Abort+0x218>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d06d      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a39      	ldr	r2, [pc, #228]	; (8005fd4 <HAL_DMA_Abort+0x21c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d068      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <HAL_DMA_Abort+0x220>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d063      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a36      	ldr	r2, [pc, #216]	; (8005fdc <HAL_DMA_Abort+0x224>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d05e      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <HAL_DMA_Abort+0x228>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d059      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a33      	ldr	r2, [pc, #204]	; (8005fe4 <HAL_DMA_Abort+0x22c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d054      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a31      	ldr	r2, [pc, #196]	; (8005fe8 <HAL_DMA_Abort+0x230>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04f      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a30      	ldr	r2, [pc, #192]	; (8005fec <HAL_DMA_Abort+0x234>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d04a      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2e      	ldr	r2, [pc, #184]	; (8005ff0 <HAL_DMA_Abort+0x238>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d045      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <HAL_DMA_Abort+0x23c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d040      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <HAL_DMA_Abort+0x240>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d03b      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <HAL_DMA_Abort+0x244>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d036      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a28      	ldr	r2, [pc, #160]	; (8006000 <HAL_DMA_Abort+0x248>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d031      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a27      	ldr	r2, [pc, #156]	; (8006004 <HAL_DMA_Abort+0x24c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d02c      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a25      	ldr	r2, [pc, #148]	; (8006008 <HAL_DMA_Abort+0x250>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d027      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a24      	ldr	r2, [pc, #144]	; (800600c <HAL_DMA_Abort+0x254>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a22      	ldr	r2, [pc, #136]	; (8006010 <HAL_DMA_Abort+0x258>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01d      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <HAL_DMA_Abort+0x25c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1f      	ldr	r2, [pc, #124]	; (8006018 <HAL_DMA_Abort+0x260>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1e      	ldr	r2, [pc, #120]	; (800601c <HAL_DMA_Abort+0x264>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <HAL_DMA_Abort+0x268>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <HAL_DMA_Abort+0x26c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_Abort+0x20e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	; (8006028 <HAL_DMA_Abort+0x270>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d132      	bne.n	800602c <HAL_DMA_Abort+0x274>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e031      	b.n	800602e <HAL_DMA_Abort+0x276>
 8005fca:	bf00      	nop
 8005fcc:	40020010 	.word	0x40020010
 8005fd0:	40020028 	.word	0x40020028
 8005fd4:	40020040 	.word	0x40020040
 8005fd8:	40020058 	.word	0x40020058
 8005fdc:	40020070 	.word	0x40020070
 8005fe0:	40020088 	.word	0x40020088
 8005fe4:	400200a0 	.word	0x400200a0
 8005fe8:	400200b8 	.word	0x400200b8
 8005fec:	40020410 	.word	0x40020410
 8005ff0:	40020428 	.word	0x40020428
 8005ff4:	40020440 	.word	0x40020440
 8005ff8:	40020458 	.word	0x40020458
 8005ffc:	40020470 	.word	0x40020470
 8006000:	40020488 	.word	0x40020488
 8006004:	400204a0 	.word	0x400204a0
 8006008:	400204b8 	.word	0x400204b8
 800600c:	58025408 	.word	0x58025408
 8006010:	5802541c 	.word	0x5802541c
 8006014:	58025430 	.word	0x58025430
 8006018:	58025444 	.word	0x58025444
 800601c:	58025458 	.word	0x58025458
 8006020:	5802546c 	.word	0x5802546c
 8006024:	58025480 	.word	0x58025480
 8006028:	58025494 	.word	0x58025494
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006040:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6d      	ldr	r2, [pc, #436]	; (80061fc <HAL_DMA_Abort+0x444>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d04a      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a6b      	ldr	r2, [pc, #428]	; (8006200 <HAL_DMA_Abort+0x448>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d045      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6a      	ldr	r2, [pc, #424]	; (8006204 <HAL_DMA_Abort+0x44c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d040      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a68      	ldr	r2, [pc, #416]	; (8006208 <HAL_DMA_Abort+0x450>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d03b      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a67      	ldr	r2, [pc, #412]	; (800620c <HAL_DMA_Abort+0x454>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d036      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a65      	ldr	r2, [pc, #404]	; (8006210 <HAL_DMA_Abort+0x458>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d031      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a64      	ldr	r2, [pc, #400]	; (8006214 <HAL_DMA_Abort+0x45c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d02c      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a62      	ldr	r2, [pc, #392]	; (8006218 <HAL_DMA_Abort+0x460>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d027      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a61      	ldr	r2, [pc, #388]	; (800621c <HAL_DMA_Abort+0x464>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d022      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a5f      	ldr	r2, [pc, #380]	; (8006220 <HAL_DMA_Abort+0x468>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a5e      	ldr	r2, [pc, #376]	; (8006224 <HAL_DMA_Abort+0x46c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d018      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5c      	ldr	r2, [pc, #368]	; (8006228 <HAL_DMA_Abort+0x470>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a5b      	ldr	r2, [pc, #364]	; (800622c <HAL_DMA_Abort+0x474>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a59      	ldr	r2, [pc, #356]	; (8006230 <HAL_DMA_Abort+0x478>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a58      	ldr	r2, [pc, #352]	; (8006234 <HAL_DMA_Abort+0x47c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_DMA_Abort+0x32a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a56      	ldr	r2, [pc, #344]	; (8006238 <HAL_DMA_Abort+0x480>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <HAL_DMA_Abort+0x33c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e007      	b.n	8006104 <HAL_DMA_Abort+0x34c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006104:	e013      	b.n	800612e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006106:	f7fe fd8f 	bl	8004c28 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b05      	cmp	r3, #5
 8006112:	d90c      	bls.n	800612e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2203      	movs	r2, #3
 800611e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e12d      	b.n	800638a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <HAL_DMA_Abort+0x444>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <HAL_DMA_Abort+0x448>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_Abort+0x422>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <HAL_DMA_Abort+0x44c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <HAL_DMA_Abort+0x450>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a29      	ldr	r2, [pc, #164]	; (800620c <HAL_DMA_Abort+0x454>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_Abort+0x422>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_DMA_Abort+0x458>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <HAL_DMA_Abort+0x45c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_DMA_Abort+0x460>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_Abort+0x422>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a23      	ldr	r2, [pc, #140]	; (800621c <HAL_DMA_Abort+0x464>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_Abort+0x422>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <HAL_DMA_Abort+0x468>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_Abort+0x422>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a20      	ldr	r2, [pc, #128]	; (8006224 <HAL_DMA_Abort+0x46c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_Abort+0x422>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_DMA_Abort+0x470>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_Abort+0x422>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	; (800622c <HAL_DMA_Abort+0x474>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_Abort+0x422>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_DMA_Abort+0x478>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_Abort+0x422>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	; (8006234 <HAL_DMA_Abort+0x47c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_Abort+0x422>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_DMA_Abort+0x480>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <HAL_DMA_Abort+0x426>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <HAL_DMA_Abort+0x428>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02b      	beq.n	800623c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	223f      	movs	r2, #63	; 0x3f
 80061f4:	409a      	lsls	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	609a      	str	r2, [r3, #8]
 80061fa:	e02a      	b.n	8006252 <HAL_DMA_Abort+0x49a>
 80061fc:	40020010 	.word	0x40020010
 8006200:	40020028 	.word	0x40020028
 8006204:	40020040 	.word	0x40020040
 8006208:	40020058 	.word	0x40020058
 800620c:	40020070 	.word	0x40020070
 8006210:	40020088 	.word	0x40020088
 8006214:	400200a0 	.word	0x400200a0
 8006218:	400200b8 	.word	0x400200b8
 800621c:	40020410 	.word	0x40020410
 8006220:	40020428 	.word	0x40020428
 8006224:	40020440 	.word	0x40020440
 8006228:	40020458 	.word	0x40020458
 800622c:	40020470 	.word	0x40020470
 8006230:	40020488 	.word	0x40020488
 8006234:	400204a0 	.word	0x400204a0
 8006238:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2201      	movs	r2, #1
 800624c:	409a      	lsls	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4f      	ldr	r2, [pc, #316]	; (8006394 <HAL_DMA_Abort+0x5dc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d072      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a4d      	ldr	r2, [pc, #308]	; (8006398 <HAL_DMA_Abort+0x5e0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d06d      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a4c      	ldr	r2, [pc, #304]	; (800639c <HAL_DMA_Abort+0x5e4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d068      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a4a      	ldr	r2, [pc, #296]	; (80063a0 <HAL_DMA_Abort+0x5e8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d063      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a49      	ldr	r2, [pc, #292]	; (80063a4 <HAL_DMA_Abort+0x5ec>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d05e      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a47      	ldr	r2, [pc, #284]	; (80063a8 <HAL_DMA_Abort+0x5f0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d059      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a46      	ldr	r2, [pc, #280]	; (80063ac <HAL_DMA_Abort+0x5f4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d054      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a44      	ldr	r2, [pc, #272]	; (80063b0 <HAL_DMA_Abort+0x5f8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04f      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a43      	ldr	r2, [pc, #268]	; (80063b4 <HAL_DMA_Abort+0x5fc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a41      	ldr	r2, [pc, #260]	; (80063b8 <HAL_DMA_Abort+0x600>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a40      	ldr	r2, [pc, #256]	; (80063bc <HAL_DMA_Abort+0x604>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a3e      	ldr	r2, [pc, #248]	; (80063c0 <HAL_DMA_Abort+0x608>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a3d      	ldr	r2, [pc, #244]	; (80063c4 <HAL_DMA_Abort+0x60c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a3b      	ldr	r2, [pc, #236]	; (80063c8 <HAL_DMA_Abort+0x610>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a3a      	ldr	r2, [pc, #232]	; (80063cc <HAL_DMA_Abort+0x614>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a38      	ldr	r2, [pc, #224]	; (80063d0 <HAL_DMA_Abort+0x618>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a37      	ldr	r2, [pc, #220]	; (80063d4 <HAL_DMA_Abort+0x61c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a35      	ldr	r2, [pc, #212]	; (80063d8 <HAL_DMA_Abort+0x620>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <HAL_DMA_Abort+0x624>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a32      	ldr	r2, [pc, #200]	; (80063e0 <HAL_DMA_Abort+0x628>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a31      	ldr	r2, [pc, #196]	; (80063e4 <HAL_DMA_Abort+0x62c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <HAL_DMA_Abort+0x630>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2e      	ldr	r2, [pc, #184]	; (80063ec <HAL_DMA_Abort+0x634>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_Abort+0x58a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <HAL_DMA_Abort+0x638>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_DMA_Abort+0x58e>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_DMA_Abort+0x590>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006354:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006376:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40020010 	.word	0x40020010
 8006398:	40020028 	.word	0x40020028
 800639c:	40020040 	.word	0x40020040
 80063a0:	40020058 	.word	0x40020058
 80063a4:	40020070 	.word	0x40020070
 80063a8:	40020088 	.word	0x40020088
 80063ac:	400200a0 	.word	0x400200a0
 80063b0:	400200b8 	.word	0x400200b8
 80063b4:	40020410 	.word	0x40020410
 80063b8:	40020428 	.word	0x40020428
 80063bc:	40020440 	.word	0x40020440
 80063c0:	40020458 	.word	0x40020458
 80063c4:	40020470 	.word	0x40020470
 80063c8:	40020488 	.word	0x40020488
 80063cc:	400204a0 	.word	0x400204a0
 80063d0:	400204b8 	.word	0x400204b8
 80063d4:	58025408 	.word	0x58025408
 80063d8:	5802541c 	.word	0x5802541c
 80063dc:	58025430 	.word	0x58025430
 80063e0:	58025444 	.word	0x58025444
 80063e4:	58025458 	.word	0x58025458
 80063e8:	5802546c 	.word	0x5802546c
 80063ec:	58025480 	.word	0x58025480
 80063f0:	58025494 	.word	0x58025494

080063f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e237      	b.n	8006876 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d004      	beq.n	800641c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2280      	movs	r2, #128	; 0x80
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e22c      	b.n	8006876 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5c      	ldr	r2, [pc, #368]	; (8006594 <HAL_DMA_Abort_IT+0x1a0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04a      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5b      	ldr	r2, [pc, #364]	; (8006598 <HAL_DMA_Abort_IT+0x1a4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d045      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a59      	ldr	r2, [pc, #356]	; (800659c <HAL_DMA_Abort_IT+0x1a8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d040      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a58      	ldr	r2, [pc, #352]	; (80065a0 <HAL_DMA_Abort_IT+0x1ac>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d03b      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a56      	ldr	r2, [pc, #344]	; (80065a4 <HAL_DMA_Abort_IT+0x1b0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d036      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a55      	ldr	r2, [pc, #340]	; (80065a8 <HAL_DMA_Abort_IT+0x1b4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d031      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a53      	ldr	r2, [pc, #332]	; (80065ac <HAL_DMA_Abort_IT+0x1b8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02c      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_DMA_Abort_IT+0x1bc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d027      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a50      	ldr	r2, [pc, #320]	; (80065b4 <HAL_DMA_Abort_IT+0x1c0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a4f      	ldr	r2, [pc, #316]	; (80065b8 <HAL_DMA_Abort_IT+0x1c4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a4d      	ldr	r2, [pc, #308]	; (80065bc <HAL_DMA_Abort_IT+0x1c8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a4c      	ldr	r2, [pc, #304]	; (80065c0 <HAL_DMA_Abort_IT+0x1cc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <HAL_DMA_Abort_IT+0x1d0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a49      	ldr	r2, [pc, #292]	; (80065c8 <HAL_DMA_Abort_IT+0x1d4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a47      	ldr	r2, [pc, #284]	; (80065cc <HAL_DMA_Abort_IT+0x1d8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_DMA_Abort_IT+0xc8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a46      	ldr	r2, [pc, #280]	; (80065d0 <HAL_DMA_Abort_IT+0x1dc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_DMA_Abort_IT+0xcc>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_DMA_Abort_IT+0xce>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8086 	beq.w	80065d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2f      	ldr	r2, [pc, #188]	; (8006594 <HAL_DMA_Abort_IT+0x1a0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2e      	ldr	r2, [pc, #184]	; (8006598 <HAL_DMA_Abort_IT+0x1a4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_DMA_Abort_IT+0x1a8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <HAL_DMA_Abort_IT+0x1ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_DMA_Abort_IT+0x1b0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a28      	ldr	r2, [pc, #160]	; (80065a8 <HAL_DMA_Abort_IT+0x1b4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <HAL_DMA_Abort_IT+0x1b8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <HAL_DMA_Abort_IT+0x1bc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a23      	ldr	r2, [pc, #140]	; (80065b4 <HAL_DMA_Abort_IT+0x1c0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <HAL_DMA_Abort_IT+0x1c4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a20      	ldr	r2, [pc, #128]	; (80065bc <HAL_DMA_Abort_IT+0x1c8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_DMA_Abort_IT+0x1cc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <HAL_DMA_Abort_IT+0x1d0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <HAL_DMA_Abort_IT+0x1d4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_DMA_Abort_IT+0x1d8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_Abort_IT+0x17c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <HAL_DMA_Abort_IT+0x1dc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d108      	bne.n	8006582 <HAL_DMA_Abort_IT+0x18e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e178      	b.n	8006874 <HAL_DMA_Abort_IT+0x480>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e16f      	b.n	8006874 <HAL_DMA_Abort_IT+0x480>
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020e 	bic.w	r2, r2, #14
 80065e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a6c      	ldr	r2, [pc, #432]	; (800679c <HAL_DMA_Abort_IT+0x3a8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04a      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a6b      	ldr	r2, [pc, #428]	; (80067a0 <HAL_DMA_Abort_IT+0x3ac>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d045      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a69      	ldr	r2, [pc, #420]	; (80067a4 <HAL_DMA_Abort_IT+0x3b0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d040      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a68      	ldr	r2, [pc, #416]	; (80067a8 <HAL_DMA_Abort_IT+0x3b4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d03b      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a66      	ldr	r2, [pc, #408]	; (80067ac <HAL_DMA_Abort_IT+0x3b8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d036      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a65      	ldr	r2, [pc, #404]	; (80067b0 <HAL_DMA_Abort_IT+0x3bc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d031      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a63      	ldr	r2, [pc, #396]	; (80067b4 <HAL_DMA_Abort_IT+0x3c0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02c      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a62      	ldr	r2, [pc, #392]	; (80067b8 <HAL_DMA_Abort_IT+0x3c4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d027      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a60      	ldr	r2, [pc, #384]	; (80067bc <HAL_DMA_Abort_IT+0x3c8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d022      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5f      	ldr	r2, [pc, #380]	; (80067c0 <HAL_DMA_Abort_IT+0x3cc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d01d      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5d      	ldr	r2, [pc, #372]	; (80067c4 <HAL_DMA_Abort_IT+0x3d0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5c      	ldr	r2, [pc, #368]	; (80067c8 <HAL_DMA_Abort_IT+0x3d4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5a      	ldr	r2, [pc, #360]	; (80067cc <HAL_DMA_Abort_IT+0x3d8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a59      	ldr	r2, [pc, #356]	; (80067d0 <HAL_DMA_Abort_IT+0x3dc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a57      	ldr	r2, [pc, #348]	; (80067d4 <HAL_DMA_Abort_IT+0x3e0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_DMA_Abort_IT+0x290>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a56      	ldr	r2, [pc, #344]	; (80067d8 <HAL_DMA_Abort_IT+0x3e4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d108      	bne.n	8006696 <HAL_DMA_Abort_IT+0x2a2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e007      	b.n	80066a6 <HAL_DMA_Abort_IT+0x2b2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3c      	ldr	r2, [pc, #240]	; (800679c <HAL_DMA_Abort_IT+0x3a8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d072      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a3a      	ldr	r2, [pc, #232]	; (80067a0 <HAL_DMA_Abort_IT+0x3ac>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d06d      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a39      	ldr	r2, [pc, #228]	; (80067a4 <HAL_DMA_Abort_IT+0x3b0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d068      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <HAL_DMA_Abort_IT+0x3b4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d063      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a36      	ldr	r2, [pc, #216]	; (80067ac <HAL_DMA_Abort_IT+0x3b8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d05e      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <HAL_DMA_Abort_IT+0x3bc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d059      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <HAL_DMA_Abort_IT+0x3c0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d054      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_DMA_Abort_IT+0x3c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d04f      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a30      	ldr	r2, [pc, #192]	; (80067bc <HAL_DMA_Abort_IT+0x3c8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <HAL_DMA_Abort_IT+0x3cc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2d      	ldr	r2, [pc, #180]	; (80067c4 <HAL_DMA_Abort_IT+0x3d0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <HAL_DMA_Abort_IT+0x3d4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2a      	ldr	r2, [pc, #168]	; (80067cc <HAL_DMA_Abort_IT+0x3d8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a28      	ldr	r2, [pc, #160]	; (80067d0 <HAL_DMA_Abort_IT+0x3dc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a27      	ldr	r2, [pc, #156]	; (80067d4 <HAL_DMA_Abort_IT+0x3e0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_DMA_Abort_IT+0x3e4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a24      	ldr	r2, [pc, #144]	; (80067dc <HAL_DMA_Abort_IT+0x3e8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_DMA_Abort_IT+0x3ec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a21      	ldr	r2, [pc, #132]	; (80067e4 <HAL_DMA_Abort_IT+0x3f0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_DMA_Abort_IT+0x3f4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1e      	ldr	r2, [pc, #120]	; (80067ec <HAL_DMA_Abort_IT+0x3f8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <HAL_DMA_Abort_IT+0x3fc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <HAL_DMA_Abort_IT+0x400>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_Abort_IT+0x3a2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_DMA_Abort_IT+0x404>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d132      	bne.n	80067fc <HAL_DMA_Abort_IT+0x408>
 8006796:	2301      	movs	r3, #1
 8006798:	e031      	b.n	80067fe <HAL_DMA_Abort_IT+0x40a>
 800679a:	bf00      	nop
 800679c:	40020010 	.word	0x40020010
 80067a0:	40020028 	.word	0x40020028
 80067a4:	40020040 	.word	0x40020040
 80067a8:	40020058 	.word	0x40020058
 80067ac:	40020070 	.word	0x40020070
 80067b0:	40020088 	.word	0x40020088
 80067b4:	400200a0 	.word	0x400200a0
 80067b8:	400200b8 	.word	0x400200b8
 80067bc:	40020410 	.word	0x40020410
 80067c0:	40020428 	.word	0x40020428
 80067c4:	40020440 	.word	0x40020440
 80067c8:	40020458 	.word	0x40020458
 80067cc:	40020470 	.word	0x40020470
 80067d0:	40020488 	.word	0x40020488
 80067d4:	400204a0 	.word	0x400204a0
 80067d8:	400204b8 	.word	0x400204b8
 80067dc:	58025408 	.word	0x58025408
 80067e0:	5802541c 	.word	0x5802541c
 80067e4:	58025430 	.word	0x58025430
 80067e8:	58025444 	.word	0x58025444
 80067ec:	58025458 	.word	0x58025458
 80067f0:	5802546c 	.word	0x5802546c
 80067f4:	58025480 	.word	0x58025480
 80067f8:	58025494 	.word	0x58025494
 80067fc:	2300      	movs	r3, #0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d028      	beq.n	8006854 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2201      	movs	r2, #1
 8006822:	409a      	lsls	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006830:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006848:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006852:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop

08006880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800688c:	4b67      	ldr	r3, [pc, #412]	; (8006a2c <HAL_DMA_IRQHandler+0x1ac>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a67      	ldr	r2, [pc, #412]	; (8006a30 <HAL_DMA_IRQHandler+0x1b0>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	0a9b      	lsrs	r3, r3, #10
 8006898:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a5f      	ldr	r2, [pc, #380]	; (8006a34 <HAL_DMA_IRQHandler+0x1b4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d04a      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a5d      	ldr	r2, [pc, #372]	; (8006a38 <HAL_DMA_IRQHandler+0x1b8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d045      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5c      	ldr	r2, [pc, #368]	; (8006a3c <HAL_DMA_IRQHandler+0x1bc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d040      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a5a      	ldr	r2, [pc, #360]	; (8006a40 <HAL_DMA_IRQHandler+0x1c0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d03b      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a59      	ldr	r2, [pc, #356]	; (8006a44 <HAL_DMA_IRQHandler+0x1c4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d036      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a57      	ldr	r2, [pc, #348]	; (8006a48 <HAL_DMA_IRQHandler+0x1c8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d031      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a56      	ldr	r2, [pc, #344]	; (8006a4c <HAL_DMA_IRQHandler+0x1cc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d02c      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a54      	ldr	r2, [pc, #336]	; (8006a50 <HAL_DMA_IRQHandler+0x1d0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d027      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a53      	ldr	r2, [pc, #332]	; (8006a54 <HAL_DMA_IRQHandler+0x1d4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d022      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a51      	ldr	r2, [pc, #324]	; (8006a58 <HAL_DMA_IRQHandler+0x1d8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01d      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a50      	ldr	r2, [pc, #320]	; (8006a5c <HAL_DMA_IRQHandler+0x1dc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d018      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a4e      	ldr	r2, [pc, #312]	; (8006a60 <HAL_DMA_IRQHandler+0x1e0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4d      	ldr	r2, [pc, #308]	; (8006a64 <HAL_DMA_IRQHandler+0x1e4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a4b      	ldr	r2, [pc, #300]	; (8006a68 <HAL_DMA_IRQHandler+0x1e8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <HAL_DMA_IRQHandler+0x1ec>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_DMA_IRQHandler+0xd2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a48      	ldr	r2, [pc, #288]	; (8006a70 <HAL_DMA_IRQHandler+0x1f0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_DMA_IRQHandler+0xd6>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <HAL_DMA_IRQHandler+0xd8>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 842b 	beq.w	80071b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2208      	movs	r2, #8
 8006968:	409a      	lsls	r2, r3
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80a2 	beq.w	8006ab8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <HAL_DMA_IRQHandler+0x1b4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d04a      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <HAL_DMA_IRQHandler+0x1b8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d045      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <HAL_DMA_IRQHandler+0x1bc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d040      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <HAL_DMA_IRQHandler+0x1c0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d03b      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <HAL_DMA_IRQHandler+0x1c4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d036      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <HAL_DMA_IRQHandler+0x1c8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d031      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <HAL_DMA_IRQHandler+0x1cc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d02c      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a24      	ldr	r2, [pc, #144]	; (8006a50 <HAL_DMA_IRQHandler+0x1d0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d027      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <HAL_DMA_IRQHandler+0x1d4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d022      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_DMA_IRQHandler+0x1d8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d01d      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <HAL_DMA_IRQHandler+0x1dc>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <HAL_DMA_IRQHandler+0x1e0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <HAL_DMA_IRQHandler+0x1e4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <HAL_DMA_IRQHandler+0x1e8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <HAL_DMA_IRQHandler+0x1ec>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x194>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <HAL_DMA_IRQHandler+0x1f0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d12f      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x1f4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	e02e      	b.n	8006a88 <HAL_DMA_IRQHandler+0x208>
 8006a2a:	bf00      	nop
 8006a2c:	240001a0 	.word	0x240001a0
 8006a30:	1b4e81b5 	.word	0x1b4e81b5
 8006a34:	40020010 	.word	0x40020010
 8006a38:	40020028 	.word	0x40020028
 8006a3c:	40020040 	.word	0x40020040
 8006a40:	40020058 	.word	0x40020058
 8006a44:	40020070 	.word	0x40020070
 8006a48:	40020088 	.word	0x40020088
 8006a4c:	400200a0 	.word	0x400200a0
 8006a50:	400200b8 	.word	0x400200b8
 8006a54:	40020410 	.word	0x40020410
 8006a58:	40020428 	.word	0x40020428
 8006a5c:	40020440 	.word	0x40020440
 8006a60:	40020458 	.word	0x40020458
 8006a64:	40020470 	.word	0x40020470
 8006a68:	40020488 	.word	0x40020488
 8006a6c:	400204a0 	.word	0x400204a0
 8006a70:	400204b8 	.word	0x400204b8
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bf14      	ite	ne
 8006a82:	2301      	movne	r3, #1
 8006a84:	2300      	moveq	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d015      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0204 	bic.w	r2, r2, #4
 8006a9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	f043 0201 	orr.w	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d06e      	beq.n	8006bac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a69      	ldr	r2, [pc, #420]	; (8006c78 <HAL_DMA_IRQHandler+0x3f8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a67      	ldr	r2, [pc, #412]	; (8006c7c <HAL_DMA_IRQHandler+0x3fc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a66      	ldr	r2, [pc, #408]	; (8006c80 <HAL_DMA_IRQHandler+0x400>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a64      	ldr	r2, [pc, #400]	; (8006c84 <HAL_DMA_IRQHandler+0x404>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_DMA_IRQHandler+0x408>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a61      	ldr	r2, [pc, #388]	; (8006c8c <HAL_DMA_IRQHandler+0x40c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a60      	ldr	r2, [pc, #384]	; (8006c90 <HAL_DMA_IRQHandler+0x410>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	; (8006c94 <HAL_DMA_IRQHandler+0x414>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5d      	ldr	r2, [pc, #372]	; (8006c98 <HAL_DMA_IRQHandler+0x418>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5b      	ldr	r2, [pc, #364]	; (8006c9c <HAL_DMA_IRQHandler+0x41c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a5a      	ldr	r2, [pc, #360]	; (8006ca0 <HAL_DMA_IRQHandler+0x420>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a58      	ldr	r2, [pc, #352]	; (8006ca4 <HAL_DMA_IRQHandler+0x424>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a57      	ldr	r2, [pc, #348]	; (8006ca8 <HAL_DMA_IRQHandler+0x428>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a55      	ldr	r2, [pc, #340]	; (8006cac <HAL_DMA_IRQHandler+0x42c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a54      	ldr	r2, [pc, #336]	; (8006cb0 <HAL_DMA_IRQHandler+0x430>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x2ee>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a52      	ldr	r2, [pc, #328]	; (8006cb4 <HAL_DMA_IRQHandler+0x434>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d10a      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x304>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e003      	b.n	8006b8c <HAL_DMA_IRQHandler+0x30c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f043 0202 	orr.w	r2, r3, #2
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 808f 	beq.w	8006ce0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <HAL_DMA_IRQHandler+0x3f8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d04a      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <HAL_DMA_IRQHandler+0x3fc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d045      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <HAL_DMA_IRQHandler+0x400>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d040      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_DMA_IRQHandler+0x404>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d03b      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_DMA_IRQHandler+0x408>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d036      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <HAL_DMA_IRQHandler+0x40c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d031      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a23      	ldr	r2, [pc, #140]	; (8006c90 <HAL_DMA_IRQHandler+0x410>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d02c      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <HAL_DMA_IRQHandler+0x414>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d027      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <HAL_DMA_IRQHandler+0x418>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d022      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <HAL_DMA_IRQHandler+0x41c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01d      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <HAL_DMA_IRQHandler+0x420>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1b      	ldr	r2, [pc, #108]	; (8006ca4 <HAL_DMA_IRQHandler+0x424>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_DMA_IRQHandler+0x428>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a18      	ldr	r2, [pc, #96]	; (8006cac <HAL_DMA_IRQHandler+0x42c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <HAL_DMA_IRQHandler+0x430>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x3e2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <HAL_DMA_IRQHandler+0x434>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d12a      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0x438>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e023      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x440>
 8006c78:	40020010 	.word	0x40020010
 8006c7c:	40020028 	.word	0x40020028
 8006c80:	40020040 	.word	0x40020040
 8006c84:	40020058 	.word	0x40020058
 8006c88:	40020070 	.word	0x40020070
 8006c8c:	40020088 	.word	0x40020088
 8006c90:	400200a0 	.word	0x400200a0
 8006c94:	400200b8 	.word	0x400200b8
 8006c98:	40020410 	.word	0x40020410
 8006c9c:	40020428 	.word	0x40020428
 8006ca0:	40020440 	.word	0x40020440
 8006ca4:	40020458 	.word	0x40020458
 8006ca8:	40020470 	.word	0x40020470
 8006cac:	40020488 	.word	0x40020488
 8006cb0:	400204a0 	.word	0x400204a0
 8006cb4:	400204b8 	.word	0x400204b8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00d      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2204      	movs	r2, #4
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	f043 0204 	orr.w	r2, r3, #4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	2210      	movs	r2, #16
 8006cea:	409a      	lsls	r2, r3
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80a6 	beq.w	8006e42 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a85      	ldr	r2, [pc, #532]	; (8006f10 <HAL_DMA_IRQHandler+0x690>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d04a      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a83      	ldr	r2, [pc, #524]	; (8006f14 <HAL_DMA_IRQHandler+0x694>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d045      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a82      	ldr	r2, [pc, #520]	; (8006f18 <HAL_DMA_IRQHandler+0x698>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d040      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a80      	ldr	r2, [pc, #512]	; (8006f1c <HAL_DMA_IRQHandler+0x69c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d03b      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a7f      	ldr	r2, [pc, #508]	; (8006f20 <HAL_DMA_IRQHandler+0x6a0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d036      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a7d      	ldr	r2, [pc, #500]	; (8006f24 <HAL_DMA_IRQHandler+0x6a4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d031      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a7c      	ldr	r2, [pc, #496]	; (8006f28 <HAL_DMA_IRQHandler+0x6a8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d02c      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a7a      	ldr	r2, [pc, #488]	; (8006f2c <HAL_DMA_IRQHandler+0x6ac>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d027      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a79      	ldr	r2, [pc, #484]	; (8006f30 <HAL_DMA_IRQHandler+0x6b0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d022      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a77      	ldr	r2, [pc, #476]	; (8006f34 <HAL_DMA_IRQHandler+0x6b4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d01d      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a76      	ldr	r2, [pc, #472]	; (8006f38 <HAL_DMA_IRQHandler+0x6b8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d018      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a74      	ldr	r2, [pc, #464]	; (8006f3c <HAL_DMA_IRQHandler+0x6bc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a73      	ldr	r2, [pc, #460]	; (8006f40 <HAL_DMA_IRQHandler+0x6c0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a71      	ldr	r2, [pc, #452]	; (8006f44 <HAL_DMA_IRQHandler+0x6c4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a70      	ldr	r2, [pc, #448]	; (8006f48 <HAL_DMA_IRQHandler+0x6c8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_DMA_IRQHandler+0x516>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6e      	ldr	r2, [pc, #440]	; (8006f4c <HAL_DMA_IRQHandler+0x6cc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10a      	bne.n	8006dac <HAL_DMA_IRQHandler+0x52c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bf14      	ite	ne
 8006da4:	2301      	movne	r3, #1
 8006da6:	2300      	moveq	r3, #0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e009      	b.n	8006dc0 <HAL_DMA_IRQHandler+0x540>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf14      	ite	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	2300      	moveq	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d03e      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2210      	movs	r2, #16
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d018      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d024      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	e01f      	b.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01b      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
 8006e12:	e016      	b.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0208 	bic.w	r2, r2, #8
 8006e30:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8110 	beq.w	8007078 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <HAL_DMA_IRQHandler+0x690>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d04a      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <HAL_DMA_IRQHandler+0x694>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d045      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <HAL_DMA_IRQHandler+0x698>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d040      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <HAL_DMA_IRQHandler+0x69c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d03b      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a26      	ldr	r2, [pc, #152]	; (8006f20 <HAL_DMA_IRQHandler+0x6a0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d036      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a25      	ldr	r2, [pc, #148]	; (8006f24 <HAL_DMA_IRQHandler+0x6a4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d031      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a23      	ldr	r2, [pc, #140]	; (8006f28 <HAL_DMA_IRQHandler+0x6a8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02c      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <HAL_DMA_IRQHandler+0x6ac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d027      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <HAL_DMA_IRQHandler+0x6b0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d022      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <HAL_DMA_IRQHandler+0x6b4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d01d      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <HAL_DMA_IRQHandler+0x6b8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d018      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <HAL_DMA_IRQHandler+0x6bc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1a      	ldr	r2, [pc, #104]	; (8006f40 <HAL_DMA_IRQHandler+0x6c0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00e      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <HAL_DMA_IRQHandler+0x6c4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <HAL_DMA_IRQHandler+0x6c8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x678>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <HAL_DMA_IRQHandler+0x6cc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d12b      	bne.n	8006f50 <HAL_DMA_IRQHandler+0x6d0>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	e02a      	b.n	8006f64 <HAL_DMA_IRQHandler+0x6e4>
 8006f0e:	bf00      	nop
 8006f10:	40020010 	.word	0x40020010
 8006f14:	40020028 	.word	0x40020028
 8006f18:	40020040 	.word	0x40020040
 8006f1c:	40020058 	.word	0x40020058
 8006f20:	40020070 	.word	0x40020070
 8006f24:	40020088 	.word	0x40020088
 8006f28:	400200a0 	.word	0x400200a0
 8006f2c:	400200b8 	.word	0x400200b8
 8006f30:	40020410 	.word	0x40020410
 8006f34:	40020428 	.word	0x40020428
 8006f38:	40020440 	.word	0x40020440
 8006f3c:	40020458 	.word	0x40020458
 8006f40:	40020470 	.word	0x40020470
 8006f44:	40020488 	.word	0x40020488
 8006f48:	400204a0 	.word	0x400204a0
 8006f4c:	400204b8 	.word	0x400204b8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bf14      	ite	ne
 8006f5e:	2301      	movne	r3, #1
 8006f60:	2300      	moveq	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8087 	beq.w	8007078 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2220      	movs	r2, #32
 8006f74:	409a      	lsls	r2, r3
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d139      	bne.n	8006ffa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0216 	bic.w	r2, r2, #22
 8006f94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <HAL_DMA_IRQHandler+0x736>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0208 	bic.w	r2, r2, #8
 8006fc4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	223f      	movs	r2, #63	; 0x3f
 8006fd0:	409a      	lsls	r2, r3
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 834a 	beq.w	8007684 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
          }
          return;
 8006ff8:	e344      	b.n	8007684 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d018      	beq.n	800703a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d108      	bne.n	8007028 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	2b00      	cmp	r3, #0
 800701c:	d02c      	beq.n	8007078 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	e027      	b.n	8007078 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d023      	beq.n	8007078 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
 8007038:	e01e      	b.n	8007078 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10f      	bne.n	8007068 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0210 	bic.w	r2, r2, #16
 8007056:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8306 	beq.w	800768e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8088 	beq.w	80071a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2204      	movs	r2, #4
 8007094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a7a      	ldr	r2, [pc, #488]	; (8007288 <HAL_DMA_IRQHandler+0xa08>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d04a      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a79      	ldr	r2, [pc, #484]	; (800728c <HAL_DMA_IRQHandler+0xa0c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d045      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a77      	ldr	r2, [pc, #476]	; (8007290 <HAL_DMA_IRQHandler+0xa10>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d040      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a76      	ldr	r2, [pc, #472]	; (8007294 <HAL_DMA_IRQHandler+0xa14>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d03b      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a74      	ldr	r2, [pc, #464]	; (8007298 <HAL_DMA_IRQHandler+0xa18>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d036      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a73      	ldr	r2, [pc, #460]	; (800729c <HAL_DMA_IRQHandler+0xa1c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d031      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a71      	ldr	r2, [pc, #452]	; (80072a0 <HAL_DMA_IRQHandler+0xa20>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02c      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a70      	ldr	r2, [pc, #448]	; (80072a4 <HAL_DMA_IRQHandler+0xa24>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d027      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a6e      	ldr	r2, [pc, #440]	; (80072a8 <HAL_DMA_IRQHandler+0xa28>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <HAL_DMA_IRQHandler+0xa2c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01d      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a6b      	ldr	r2, [pc, #428]	; (80072b0 <HAL_DMA_IRQHandler+0xa30>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a6a      	ldr	r2, [pc, #424]	; (80072b4 <HAL_DMA_IRQHandler+0xa34>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a68      	ldr	r2, [pc, #416]	; (80072b8 <HAL_DMA_IRQHandler+0xa38>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a67      	ldr	r2, [pc, #412]	; (80072bc <HAL_DMA_IRQHandler+0xa3c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <HAL_DMA_IRQHandler+0xa40>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_DMA_IRQHandler+0x8b8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a64      	ldr	r2, [pc, #400]	; (80072c4 <HAL_DMA_IRQHandler+0xa44>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d108      	bne.n	800714a <HAL_DMA_IRQHandler+0x8ca>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e007      	b.n	800715a <HAL_DMA_IRQHandler+0x8da>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0201 	bic.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	429a      	cmp	r2, r3
 8007164:	d307      	bcc.n	8007176 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1f2      	bne.n	800715a <HAL_DMA_IRQHandler+0x8da>
 8007174:	e000      	b.n	8007178 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007176:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2203      	movs	r2, #3
 800718a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800718e:	e003      	b.n	8007198 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8272 	beq.w	800768e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
 80071b2:	e26c      	b.n	800768e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <HAL_DMA_IRQHandler+0xa48>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d022      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a42      	ldr	r2, [pc, #264]	; (80072cc <HAL_DMA_IRQHandler+0xa4c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01d      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a40      	ldr	r2, [pc, #256]	; (80072d0 <HAL_DMA_IRQHandler+0xa50>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a3f      	ldr	r2, [pc, #252]	; (80072d4 <HAL_DMA_IRQHandler+0xa54>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a3d      	ldr	r2, [pc, #244]	; (80072d8 <HAL_DMA_IRQHandler+0xa58>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3c      	ldr	r2, [pc, #240]	; (80072dc <HAL_DMA_IRQHandler+0xa5c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a3a      	ldr	r2, [pc, #232]	; (80072e0 <HAL_DMA_IRQHandler+0xa60>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_DMA_IRQHandler+0x984>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a39      	ldr	r2, [pc, #228]	; (80072e4 <HAL_DMA_IRQHandler+0xa64>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_DMA_IRQHandler+0x988>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_DMA_IRQHandler+0x98a>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 823f 	beq.w	800768e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2204      	movs	r2, #4
 8007222:	409a      	lsls	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80cd 	beq.w	80073c8 <HAL_DMA_IRQHandler+0xb48>
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80c7 	beq.w	80073c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2204      	movs	r2, #4
 8007244:	409a      	lsls	r2, r3
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d049      	beq.n	80072e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8210 	beq.w	8007688 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007270:	e20a      	b.n	8007688 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8206 	beq.w	8007688 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007284:	e200      	b.n	8007688 <HAL_DMA_IRQHandler+0xe08>
 8007286:	bf00      	nop
 8007288:	40020010 	.word	0x40020010
 800728c:	40020028 	.word	0x40020028
 8007290:	40020040 	.word	0x40020040
 8007294:	40020058 	.word	0x40020058
 8007298:	40020070 	.word	0x40020070
 800729c:	40020088 	.word	0x40020088
 80072a0:	400200a0 	.word	0x400200a0
 80072a4:	400200b8 	.word	0x400200b8
 80072a8:	40020410 	.word	0x40020410
 80072ac:	40020428 	.word	0x40020428
 80072b0:	40020440 	.word	0x40020440
 80072b4:	40020458 	.word	0x40020458
 80072b8:	40020470 	.word	0x40020470
 80072bc:	40020488 	.word	0x40020488
 80072c0:	400204a0 	.word	0x400204a0
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	58025408 	.word	0x58025408
 80072cc:	5802541c 	.word	0x5802541c
 80072d0:	58025430 	.word	0x58025430
 80072d4:	58025444 	.word	0x58025444
 80072d8:	58025458 	.word	0x58025458
 80072dc:	5802546c 	.word	0x5802546c
 80072e0:	58025480 	.word	0x58025480
 80072e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d160      	bne.n	80073b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a7f      	ldr	r2, [pc, #508]	; (80074f4 <HAL_DMA_IRQHandler+0xc74>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d04a      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a7d      	ldr	r2, [pc, #500]	; (80074f8 <HAL_DMA_IRQHandler+0xc78>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d045      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7c      	ldr	r2, [pc, #496]	; (80074fc <HAL_DMA_IRQHandler+0xc7c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d040      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7a      	ldr	r2, [pc, #488]	; (8007500 <HAL_DMA_IRQHandler+0xc80>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d03b      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a79      	ldr	r2, [pc, #484]	; (8007504 <HAL_DMA_IRQHandler+0xc84>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d036      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a77      	ldr	r2, [pc, #476]	; (8007508 <HAL_DMA_IRQHandler+0xc88>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d031      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a76      	ldr	r2, [pc, #472]	; (800750c <HAL_DMA_IRQHandler+0xc8c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d02c      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a74      	ldr	r2, [pc, #464]	; (8007510 <HAL_DMA_IRQHandler+0xc90>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d027      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a73      	ldr	r2, [pc, #460]	; (8007514 <HAL_DMA_IRQHandler+0xc94>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d022      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a71      	ldr	r2, [pc, #452]	; (8007518 <HAL_DMA_IRQHandler+0xc98>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01d      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a70      	ldr	r2, [pc, #448]	; (800751c <HAL_DMA_IRQHandler+0xc9c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d018      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a6e      	ldr	r2, [pc, #440]	; (8007520 <HAL_DMA_IRQHandler+0xca0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6d      	ldr	r2, [pc, #436]	; (8007524 <HAL_DMA_IRQHandler+0xca4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6b      	ldr	r2, [pc, #428]	; (8007528 <HAL_DMA_IRQHandler+0xca8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a6a      	ldr	r2, [pc, #424]	; (800752c <HAL_DMA_IRQHandler+0xcac>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_DMA_IRQHandler+0xb12>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a68      	ldr	r2, [pc, #416]	; (8007530 <HAL_DMA_IRQHandler+0xcb0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <HAL_DMA_IRQHandler+0xb24>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0208 	bic.w	r2, r2, #8
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e007      	b.n	80073b4 <HAL_DMA_IRQHandler+0xb34>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0204 	bic.w	r2, r2, #4
 80073b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8165 	beq.w	8007688 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073c6:	e15f      	b.n	8007688 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	2202      	movs	r2, #2
 80073d2:	409a      	lsls	r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80c5 	beq.w	8007568 <HAL_DMA_IRQHandler+0xce8>
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 80bf 	beq.w	8007568 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2202      	movs	r2, #2
 80073f4:	409a      	lsls	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d018      	beq.n	8007436 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 813a 	beq.w	800768c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007420:	e134      	b.n	800768c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8130 	beq.w	800768c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007434:	e12a      	b.n	800768c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 8089 	bne.w	8007554 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2b      	ldr	r2, [pc, #172]	; (80074f4 <HAL_DMA_IRQHandler+0xc74>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d04a      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <HAL_DMA_IRQHandler+0xc78>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d045      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a28      	ldr	r2, [pc, #160]	; (80074fc <HAL_DMA_IRQHandler+0xc7c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d040      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a26      	ldr	r2, [pc, #152]	; (8007500 <HAL_DMA_IRQHandler+0xc80>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d03b      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a25      	ldr	r2, [pc, #148]	; (8007504 <HAL_DMA_IRQHandler+0xc84>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d036      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <HAL_DMA_IRQHandler+0xc88>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d031      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_DMA_IRQHandler+0xc8c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d02c      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <HAL_DMA_IRQHandler+0xc90>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d027      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <HAL_DMA_IRQHandler+0xc94>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d022      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_DMA_IRQHandler+0xc98>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01d      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_DMA_IRQHandler+0xc9c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d018      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1a      	ldr	r2, [pc, #104]	; (8007520 <HAL_DMA_IRQHandler+0xca0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d013      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a19      	ldr	r2, [pc, #100]	; (8007524 <HAL_DMA_IRQHandler+0xca4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00e      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a17      	ldr	r2, [pc, #92]	; (8007528 <HAL_DMA_IRQHandler+0xca8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d009      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a16      	ldr	r2, [pc, #88]	; (800752c <HAL_DMA_IRQHandler+0xcac>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d004      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xc62>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a14      	ldr	r2, [pc, #80]	; (8007530 <HAL_DMA_IRQHandler+0xcb0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d128      	bne.n	8007534 <HAL_DMA_IRQHandler+0xcb4>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0214 	bic.w	r2, r2, #20
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e027      	b.n	8007544 <HAL_DMA_IRQHandler+0xcc4>
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 020a 	bic.w	r2, r2, #10
 8007542:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8097 	beq.w	800768c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007566:	e091      	b.n	800768c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2208      	movs	r2, #8
 8007572:	409a      	lsls	r2, r3
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8088 	beq.w	800768e <HAL_DMA_IRQHandler+0xe0e>
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8082 	beq.w	800768e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a41      	ldr	r2, [pc, #260]	; (8007694 <HAL_DMA_IRQHandler+0xe14>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d04a      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3f      	ldr	r2, [pc, #252]	; (8007698 <HAL_DMA_IRQHandler+0xe18>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d045      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3e      	ldr	r2, [pc, #248]	; (800769c <HAL_DMA_IRQHandler+0xe1c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d040      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3c      	ldr	r2, [pc, #240]	; (80076a0 <HAL_DMA_IRQHandler+0xe20>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d03b      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3b      	ldr	r2, [pc, #236]	; (80076a4 <HAL_DMA_IRQHandler+0xe24>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d036      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a39      	ldr	r2, [pc, #228]	; (80076a8 <HAL_DMA_IRQHandler+0xe28>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d031      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a38      	ldr	r2, [pc, #224]	; (80076ac <HAL_DMA_IRQHandler+0xe2c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d02c      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a36      	ldr	r2, [pc, #216]	; (80076b0 <HAL_DMA_IRQHandler+0xe30>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d027      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a35      	ldr	r2, [pc, #212]	; (80076b4 <HAL_DMA_IRQHandler+0xe34>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d022      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a33      	ldr	r2, [pc, #204]	; (80076b8 <HAL_DMA_IRQHandler+0xe38>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01d      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a32      	ldr	r2, [pc, #200]	; (80076bc <HAL_DMA_IRQHandler+0xe3c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d018      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <HAL_DMA_IRQHandler+0xe40>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <HAL_DMA_IRQHandler+0xe44>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2d      	ldr	r2, [pc, #180]	; (80076c8 <HAL_DMA_IRQHandler+0xe48>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2c      	ldr	r2, [pc, #176]	; (80076cc <HAL_DMA_IRQHandler+0xe4c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_DMA_IRQHandler+0xdaa>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2a      	ldr	r2, [pc, #168]	; (80076d0 <HAL_DMA_IRQHandler+0xe50>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d108      	bne.n	800763c <HAL_DMA_IRQHandler+0xdbc>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 021c 	bic.w	r2, r2, #28
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e007      	b.n	800764c <HAL_DMA_IRQHandler+0xdcc>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 020e 	bic.w	r2, r2, #14
 800764a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2201      	movs	r2, #1
 8007656:	409a      	lsls	r2, r3
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	e004      	b.n	800768e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007684:	bf00      	nop
 8007686:	e002      	b.n	800768e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007688:	bf00      	nop
 800768a:	e000      	b.n	800768e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800768c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800768e:	3728      	adds	r7, #40	; 0x28
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40020010 	.word	0x40020010
 8007698:	40020028 	.word	0x40020028
 800769c:	40020040 	.word	0x40020040
 80076a0:	40020058 	.word	0x40020058
 80076a4:	40020070 	.word	0x40020070
 80076a8:	40020088 	.word	0x40020088
 80076ac:	400200a0 	.word	0x400200a0
 80076b0:	400200b8 	.word	0x400200b8
 80076b4:	40020410 	.word	0x40020410
 80076b8:	40020428 	.word	0x40020428
 80076bc:	40020440 	.word	0x40020440
 80076c0:	40020458 	.word	0x40020458
 80076c4:	40020470 	.word	0x40020470
 80076c8:	40020488 	.word	0x40020488
 80076cc:	400204a0 	.word	0x400204a0
 80076d0:	400204b8 	.word	0x400204b8

080076d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a7f      	ldr	r2, [pc, #508]	; (80078f0 <DMA_SetConfig+0x21c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d072      	beq.n	80077de <DMA_SetConfig+0x10a>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a7d      	ldr	r2, [pc, #500]	; (80078f4 <DMA_SetConfig+0x220>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d06d      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7c      	ldr	r2, [pc, #496]	; (80078f8 <DMA_SetConfig+0x224>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d068      	beq.n	80077de <DMA_SetConfig+0x10a>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a7a      	ldr	r2, [pc, #488]	; (80078fc <DMA_SetConfig+0x228>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d063      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a79      	ldr	r2, [pc, #484]	; (8007900 <DMA_SetConfig+0x22c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d05e      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a77      	ldr	r2, [pc, #476]	; (8007904 <DMA_SetConfig+0x230>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d059      	beq.n	80077de <DMA_SetConfig+0x10a>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a76      	ldr	r2, [pc, #472]	; (8007908 <DMA_SetConfig+0x234>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d054      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a74      	ldr	r2, [pc, #464]	; (800790c <DMA_SetConfig+0x238>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d04f      	beq.n	80077de <DMA_SetConfig+0x10a>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a73      	ldr	r2, [pc, #460]	; (8007910 <DMA_SetConfig+0x23c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d04a      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a71      	ldr	r2, [pc, #452]	; (8007914 <DMA_SetConfig+0x240>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d045      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a70      	ldr	r2, [pc, #448]	; (8007918 <DMA_SetConfig+0x244>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d040      	beq.n	80077de <DMA_SetConfig+0x10a>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a6e      	ldr	r2, [pc, #440]	; (800791c <DMA_SetConfig+0x248>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d03b      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a6d      	ldr	r2, [pc, #436]	; (8007920 <DMA_SetConfig+0x24c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d036      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a6b      	ldr	r2, [pc, #428]	; (8007924 <DMA_SetConfig+0x250>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d031      	beq.n	80077de <DMA_SetConfig+0x10a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a6a      	ldr	r2, [pc, #424]	; (8007928 <DMA_SetConfig+0x254>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d02c      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a68      	ldr	r2, [pc, #416]	; (800792c <DMA_SetConfig+0x258>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d027      	beq.n	80077de <DMA_SetConfig+0x10a>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a67      	ldr	r2, [pc, #412]	; (8007930 <DMA_SetConfig+0x25c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d022      	beq.n	80077de <DMA_SetConfig+0x10a>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a65      	ldr	r2, [pc, #404]	; (8007934 <DMA_SetConfig+0x260>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01d      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a64      	ldr	r2, [pc, #400]	; (8007938 <DMA_SetConfig+0x264>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d018      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a62      	ldr	r2, [pc, #392]	; (800793c <DMA_SetConfig+0x268>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a61      	ldr	r2, [pc, #388]	; (8007940 <DMA_SetConfig+0x26c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00e      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a5f      	ldr	r2, [pc, #380]	; (8007944 <DMA_SetConfig+0x270>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d009      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a5e      	ldr	r2, [pc, #376]	; (8007948 <DMA_SetConfig+0x274>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <DMA_SetConfig+0x10a>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a5c      	ldr	r2, [pc, #368]	; (800794c <DMA_SetConfig+0x278>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d101      	bne.n	80077e2 <DMA_SetConfig+0x10e>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <DMA_SetConfig+0x110>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007802:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a39      	ldr	r2, [pc, #228]	; (80078f0 <DMA_SetConfig+0x21c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d04a      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a38      	ldr	r2, [pc, #224]	; (80078f4 <DMA_SetConfig+0x220>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d045      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a36      	ldr	r2, [pc, #216]	; (80078f8 <DMA_SetConfig+0x224>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d040      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a35      	ldr	r2, [pc, #212]	; (80078fc <DMA_SetConfig+0x228>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d03b      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a33      	ldr	r2, [pc, #204]	; (8007900 <DMA_SetConfig+0x22c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d036      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a32      	ldr	r2, [pc, #200]	; (8007904 <DMA_SetConfig+0x230>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d031      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a30      	ldr	r2, [pc, #192]	; (8007908 <DMA_SetConfig+0x234>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d02c      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a2f      	ldr	r2, [pc, #188]	; (800790c <DMA_SetConfig+0x238>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d027      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <DMA_SetConfig+0x23c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d022      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a2c      	ldr	r2, [pc, #176]	; (8007914 <DMA_SetConfig+0x240>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d01d      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <DMA_SetConfig+0x244>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d018      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a29      	ldr	r2, [pc, #164]	; (800791c <DMA_SetConfig+0x248>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d013      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a27      	ldr	r2, [pc, #156]	; (8007920 <DMA_SetConfig+0x24c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00e      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a26      	ldr	r2, [pc, #152]	; (8007924 <DMA_SetConfig+0x250>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d009      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a24      	ldr	r2, [pc, #144]	; (8007928 <DMA_SetConfig+0x254>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d004      	beq.n	80078a4 <DMA_SetConfig+0x1d0>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a23      	ldr	r2, [pc, #140]	; (800792c <DMA_SetConfig+0x258>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d101      	bne.n	80078a8 <DMA_SetConfig+0x1d4>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <DMA_SetConfig+0x1d6>
 80078a8:	2300      	movs	r3, #0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d059      	beq.n	8007962 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	223f      	movs	r2, #63	; 0x3f
 80078b8:	409a      	lsls	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d138      	bne.n	8007950 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078ee:	e086      	b.n	80079fe <DMA_SetConfig+0x32a>
 80078f0:	40020010 	.word	0x40020010
 80078f4:	40020028 	.word	0x40020028
 80078f8:	40020040 	.word	0x40020040
 80078fc:	40020058 	.word	0x40020058
 8007900:	40020070 	.word	0x40020070
 8007904:	40020088 	.word	0x40020088
 8007908:	400200a0 	.word	0x400200a0
 800790c:	400200b8 	.word	0x400200b8
 8007910:	40020410 	.word	0x40020410
 8007914:	40020428 	.word	0x40020428
 8007918:	40020440 	.word	0x40020440
 800791c:	40020458 	.word	0x40020458
 8007920:	40020470 	.word	0x40020470
 8007924:	40020488 	.word	0x40020488
 8007928:	400204a0 	.word	0x400204a0
 800792c:	400204b8 	.word	0x400204b8
 8007930:	58025408 	.word	0x58025408
 8007934:	5802541c 	.word	0x5802541c
 8007938:	58025430 	.word	0x58025430
 800793c:	58025444 	.word	0x58025444
 8007940:	58025458 	.word	0x58025458
 8007944:	5802546c 	.word	0x5802546c
 8007948:	58025480 	.word	0x58025480
 800794c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
}
 8007960:	e04d      	b.n	80079fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <DMA_SetConfig+0x338>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d022      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a27      	ldr	r2, [pc, #156]	; (8007a10 <DMA_SetConfig+0x33c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01d      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <DMA_SetConfig+0x340>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d018      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a24      	ldr	r2, [pc, #144]	; (8007a18 <DMA_SetConfig+0x344>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a23      	ldr	r2, [pc, #140]	; (8007a1c <DMA_SetConfig+0x348>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a21      	ldr	r2, [pc, #132]	; (8007a20 <DMA_SetConfig+0x34c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <DMA_SetConfig+0x350>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <DMA_SetConfig+0x2de>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <DMA_SetConfig+0x354>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <DMA_SetConfig+0x2e2>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <DMA_SetConfig+0x2e4>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d020      	beq.n	80079fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	2201      	movs	r2, #1
 80079c6:	409a      	lsls	r2, r3
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d108      	bne.n	80079ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	60da      	str	r2, [r3, #12]
}
 80079ec:	e007      	b.n	80079fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	60da      	str	r2, [r3, #12]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58025408 	.word	0x58025408
 8007a10:	5802541c 	.word	0x5802541c
 8007a14:	58025430 	.word	0x58025430
 8007a18:	58025444 	.word	0x58025444
 8007a1c:	58025458 	.word	0x58025458
 8007a20:	5802546c 	.word	0x5802546c
 8007a24:	58025480 	.word	0x58025480
 8007a28:	58025494 	.word	0x58025494

08007a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a42      	ldr	r2, [pc, #264]	; (8007b44 <DMA_CalcBaseAndBitshift+0x118>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d04a      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a41      	ldr	r2, [pc, #260]	; (8007b48 <DMA_CalcBaseAndBitshift+0x11c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d045      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a3f      	ldr	r2, [pc, #252]	; (8007b4c <DMA_CalcBaseAndBitshift+0x120>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d040      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a3e      	ldr	r2, [pc, #248]	; (8007b50 <DMA_CalcBaseAndBitshift+0x124>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d03b      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a3c      	ldr	r2, [pc, #240]	; (8007b54 <DMA_CalcBaseAndBitshift+0x128>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d036      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a3b      	ldr	r2, [pc, #236]	; (8007b58 <DMA_CalcBaseAndBitshift+0x12c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d031      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a39      	ldr	r2, [pc, #228]	; (8007b5c <DMA_CalcBaseAndBitshift+0x130>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d02c      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a38      	ldr	r2, [pc, #224]	; (8007b60 <DMA_CalcBaseAndBitshift+0x134>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d027      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a36      	ldr	r2, [pc, #216]	; (8007b64 <DMA_CalcBaseAndBitshift+0x138>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a35      	ldr	r2, [pc, #212]	; (8007b68 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01d      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a33      	ldr	r2, [pc, #204]	; (8007b6c <DMA_CalcBaseAndBitshift+0x140>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a32      	ldr	r2, [pc, #200]	; (8007b70 <DMA_CalcBaseAndBitshift+0x144>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a30      	ldr	r2, [pc, #192]	; (8007b74 <DMA_CalcBaseAndBitshift+0x148>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a2f      	ldr	r2, [pc, #188]	; (8007b78 <DMA_CalcBaseAndBitshift+0x14c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	; (8007b7c <DMA_CalcBaseAndBitshift+0x150>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <DMA_CalcBaseAndBitshift+0xa8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2c      	ldr	r2, [pc, #176]	; (8007b80 <DMA_CalcBaseAndBitshift+0x154>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d101      	bne.n	8007ad8 <DMA_CalcBaseAndBitshift+0xac>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <DMA_CalcBaseAndBitshift+0xae>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d024      	beq.n	8007b28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3b10      	subs	r3, #16
 8007ae6:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <DMA_CalcBaseAndBitshift+0x158>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	091b      	lsrs	r3, r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	4a24      	ldr	r2, [pc, #144]	; (8007b88 <DMA_CalcBaseAndBitshift+0x15c>)
 8007af8:	5cd3      	ldrb	r3, [r2, r3]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d908      	bls.n	8007b18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <DMA_CalcBaseAndBitshift+0x160>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	1d1a      	adds	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	659a      	str	r2, [r3, #88]	; 0x58
 8007b16:	e00d      	b.n	8007b34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b1b      	ldr	r3, [pc, #108]	; (8007b8c <DMA_CalcBaseAndBitshift+0x160>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	e005      	b.n	8007b34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40020010 	.word	0x40020010
 8007b48:	40020028 	.word	0x40020028
 8007b4c:	40020040 	.word	0x40020040
 8007b50:	40020058 	.word	0x40020058
 8007b54:	40020070 	.word	0x40020070
 8007b58:	40020088 	.word	0x40020088
 8007b5c:	400200a0 	.word	0x400200a0
 8007b60:	400200b8 	.word	0x400200b8
 8007b64:	40020410 	.word	0x40020410
 8007b68:	40020428 	.word	0x40020428
 8007b6c:	40020440 	.word	0x40020440
 8007b70:	40020458 	.word	0x40020458
 8007b74:	40020470 	.word	0x40020470
 8007b78:	40020488 	.word	0x40020488
 8007b7c:	400204a0 	.word	0x400204a0
 8007b80:	400204b8 	.word	0x400204b8
 8007b84:	aaaaaaab 	.word	0xaaaaaaab
 8007b88:	0800ebb0 	.word	0x0800ebb0
 8007b8c:	fffffc00 	.word	0xfffffc00

08007b90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d120      	bne.n	8007be6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d858      	bhi.n	8007c5e <DMA_CheckFifoParam+0xce>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <DMA_CheckFifoParam+0x24>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bd7 	.word	0x08007bd7
 8007bbc:	08007bc5 	.word	0x08007bc5
 8007bc0:	08007c5f 	.word	0x08007c5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d048      	beq.n	8007c62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bd4:	e045      	b.n	8007c62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bde:	d142      	bne.n	8007c66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007be4:	e03f      	b.n	8007c66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bee:	d123      	bne.n	8007c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d838      	bhi.n	8007c6a <DMA_CheckFifoParam+0xda>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <DMA_CheckFifoParam+0x70>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c17 	.word	0x08007c17
 8007c08:	08007c11 	.word	0x08007c11
 8007c0c:	08007c29 	.word	0x08007c29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	73fb      	strb	r3, [r7, #15]
        break;
 8007c14:	e030      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d025      	beq.n	8007c6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c26:	e022      	b.n	8007c6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c30:	d11f      	bne.n	8007c72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c36:	e01c      	b.n	8007c72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d902      	bls.n	8007c46 <DMA_CheckFifoParam+0xb6>
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d003      	beq.n	8007c4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007c44:	e018      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
        break;
 8007c4a:	e015      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5c:	e00b      	b.n	8007c76 <DMA_CheckFifoParam+0xe6>
        break;
 8007c5e:	bf00      	nop
 8007c60:	e00a      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        break;
 8007c62:	bf00      	nop
 8007c64:	e008      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        break;
 8007c66:	bf00      	nop
 8007c68:	e006      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6a:	bf00      	nop
 8007c6c:	e004      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
        break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <DMA_CheckFifoParam+0xe8>
    break;
 8007c76:	bf00      	nop
    }
  }

  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop

08007c88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a38      	ldr	r2, [pc, #224]	; (8007d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d022      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a36      	ldr	r2, [pc, #216]	; (8007d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01d      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a35      	ldr	r2, [pc, #212]	; (8007d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d018      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a32      	ldr	r2, [pc, #200]	; (8007d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00e      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d009      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a2f      	ldr	r2, [pc, #188]	; (8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d004      	beq.n	8007ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	; (8007d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01a      	beq.n	8007d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	3b08      	subs	r3, #8
 8007cf8:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a24      	ldr	r2, [pc, #144]	; (8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007d14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007d24:	e024      	b.n	8007d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	3b10      	subs	r3, #16
 8007d2e:	4a1e      	ldr	r2, [pc, #120]	; (8007da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007d30:	fba2 2303 	umull	r2, r3, r2, r3
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d806      	bhi.n	8007d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d902      	bls.n	8007d4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4b18      	ldr	r3, [pc, #96]	; (8007db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a16      	ldr	r2, [pc, #88]	; (8007db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	58025408 	.word	0x58025408
 8007d80:	5802541c 	.word	0x5802541c
 8007d84:	58025430 	.word	0x58025430
 8007d88:	58025444 	.word	0x58025444
 8007d8c:	58025458 	.word	0x58025458
 8007d90:	5802546c 	.word	0x5802546c
 8007d94:	58025480 	.word	0x58025480
 8007d98:	58025494 	.word	0x58025494
 8007d9c:	cccccccd 	.word	0xcccccccd
 8007da0:	16009600 	.word	0x16009600
 8007da4:	58025880 	.word	0x58025880
 8007da8:	aaaaaaab 	.word	0xaaaaaaab
 8007dac:	400204b8 	.word	0x400204b8
 8007db0:	4002040f 	.word	0x4002040f
 8007db4:	10008200 	.word	0x10008200
 8007db8:	40020880 	.word	0x40020880

08007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d04a      	beq.n	8007e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d847      	bhi.n	8007e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a25      	ldr	r2, [pc, #148]	; (8007e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d022      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a24      	ldr	r2, [pc, #144]	; (8007e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d01d      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d018      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d013      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00e      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	; (8007e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d009      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d004      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d101      	bne.n	8007e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4b17      	ldr	r3, [pc, #92]	; (8007e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007e44:	671a      	str	r2, [r3, #112]	; 0x70
 8007e46:	e009      	b.n	8007e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	461a      	mov	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a11      	ldr	r2, [pc, #68]	; (8007ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	58025408 	.word	0x58025408
 8007e78:	5802541c 	.word	0x5802541c
 8007e7c:	58025430 	.word	0x58025430
 8007e80:	58025444 	.word	0x58025444
 8007e84:	58025458 	.word	0x58025458
 8007e88:	5802546c 	.word	0x5802546c
 8007e8c:	58025480 	.word	0x58025480
 8007e90:	58025494 	.word	0x58025494
 8007e94:	1600963f 	.word	0x1600963f
 8007e98:	58025940 	.word	0x58025940
 8007e9c:	1000823f 	.word	0x1000823f
 8007ea0:	40020940 	.word	0x40020940

08007ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007eb2:	4b86      	ldr	r3, [pc, #536]	; (80080cc <HAL_GPIO_Init+0x228>)
 8007eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eb6:	e18c      	b.n	80081d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 817e 	beq.w	80081cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d005      	beq.n	8007ee8 <HAL_GPIO_Init+0x44>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d130      	bne.n	8007f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4013      	ands	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f1e:	2201      	movs	r2, #1
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	091b      	lsrs	r3, r3, #4
 8007f34:	f003 0201 	and.w	r2, r3, #1
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d017      	beq.n	8007f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	2203      	movs	r2, #3
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43db      	mvns	r3, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d123      	bne.n	8007fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	08da      	lsrs	r2, r3, #3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3208      	adds	r2, #8
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	220f      	movs	r2, #15
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	08da      	lsrs	r2, r3, #3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3208      	adds	r2, #8
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	43db      	mvns	r3, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f003 0203 	and.w	r2, r3, #3
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80d8 	beq.w	80081cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800801c:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <HAL_GPIO_Init+0x22c>)
 800801e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008022:	4a2b      	ldr	r2, [pc, #172]	; (80080d0 <HAL_GPIO_Init+0x22c>)
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800802c:	4b28      	ldr	r3, [pc, #160]	; (80080d0 <HAL_GPIO_Init+0x22c>)
 800802e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800803a:	4a26      	ldr	r2, [pc, #152]	; (80080d4 <HAL_GPIO_Init+0x230>)
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	089b      	lsrs	r3, r3, #2
 8008040:	3302      	adds	r3, #2
 8008042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	220f      	movs	r2, #15
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	43db      	mvns	r3, r3
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	4013      	ands	r3, r2
 800805c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <HAL_GPIO_Init+0x234>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d04a      	beq.n	80080fc <HAL_GPIO_Init+0x258>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <HAL_GPIO_Init+0x238>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d02b      	beq.n	80080c6 <HAL_GPIO_Init+0x222>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1b      	ldr	r2, [pc, #108]	; (80080e0 <HAL_GPIO_Init+0x23c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d025      	beq.n	80080c2 <HAL_GPIO_Init+0x21e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <HAL_GPIO_Init+0x240>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d01f      	beq.n	80080be <HAL_GPIO_Init+0x21a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <HAL_GPIO_Init+0x244>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d019      	beq.n	80080ba <HAL_GPIO_Init+0x216>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a18      	ldr	r2, [pc, #96]	; (80080ec <HAL_GPIO_Init+0x248>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_GPIO_Init+0x212>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a17      	ldr	r2, [pc, #92]	; (80080f0 <HAL_GPIO_Init+0x24c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00d      	beq.n	80080b2 <HAL_GPIO_Init+0x20e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <HAL_GPIO_Init+0x250>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d007      	beq.n	80080ae <HAL_GPIO_Init+0x20a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <HAL_GPIO_Init+0x254>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_GPIO_Init+0x206>
 80080a6:	2309      	movs	r3, #9
 80080a8:	e029      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080aa:	230a      	movs	r3, #10
 80080ac:	e027      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080ae:	2307      	movs	r3, #7
 80080b0:	e025      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080b2:	2306      	movs	r3, #6
 80080b4:	e023      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080b6:	2305      	movs	r3, #5
 80080b8:	e021      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080ba:	2304      	movs	r3, #4
 80080bc:	e01f      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080be:	2303      	movs	r3, #3
 80080c0:	e01d      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e01b      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e019      	b.n	80080fe <HAL_GPIO_Init+0x25a>
 80080ca:	bf00      	nop
 80080cc:	58000080 	.word	0x58000080
 80080d0:	58024400 	.word	0x58024400
 80080d4:	58000400 	.word	0x58000400
 80080d8:	58020000 	.word	0x58020000
 80080dc:	58020400 	.word	0x58020400
 80080e0:	58020800 	.word	0x58020800
 80080e4:	58020c00 	.word	0x58020c00
 80080e8:	58021000 	.word	0x58021000
 80080ec:	58021400 	.word	0x58021400
 80080f0:	58021800 	.word	0x58021800
 80080f4:	58021c00 	.word	0x58021c00
 80080f8:	58022400 	.word	0x58022400
 80080fc:	2300      	movs	r3, #0
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	f002 0203 	and.w	r2, r2, #3
 8008104:	0092      	lsls	r2, r2, #2
 8008106:	4093      	lsls	r3, r2
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4313      	orrs	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800810e:	4938      	ldr	r1, [pc, #224]	; (80081f0 <HAL_GPIO_Init+0x34c>)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	3302      	adds	r3, #2
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800811c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800814a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	43db      	mvns	r3, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4013      	ands	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f ae6b 	bne.w	8007eb8 <HAL_GPIO_Init+0x14>
  }
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	3724      	adds	r7, #36	; 0x24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	58000400 	.word	0x58000400

080081f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008202:	4b72      	ldr	r3, [pc, #456]	; (80083cc <HAL_GPIO_DeInit+0x1d8>)
 8008204:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008206:	e0d3      	b.n	80083b0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008208:	2201      	movs	r2, #1
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	fa02 f303 	lsl.w	r3, r2, r3
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	4013      	ands	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80c6 	beq.w	80083aa <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800821e:	4a6c      	ldr	r2, [pc, #432]	; (80083d0 <HAL_GPIO_DeInit+0x1dc>)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	3302      	adds	r3, #2
 8008226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800822a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	220f      	movs	r2, #15
 8008236:	fa02 f303 	lsl.w	r3, r2, r3
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4013      	ands	r3, r2
 800823e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a64      	ldr	r2, [pc, #400]	; (80083d4 <HAL_GPIO_DeInit+0x1e0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d031      	beq.n	80082ac <HAL_GPIO_DeInit+0xb8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a63      	ldr	r2, [pc, #396]	; (80083d8 <HAL_GPIO_DeInit+0x1e4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d02b      	beq.n	80082a8 <HAL_GPIO_DeInit+0xb4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a62      	ldr	r2, [pc, #392]	; (80083dc <HAL_GPIO_DeInit+0x1e8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d025      	beq.n	80082a4 <HAL_GPIO_DeInit+0xb0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a61      	ldr	r2, [pc, #388]	; (80083e0 <HAL_GPIO_DeInit+0x1ec>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d01f      	beq.n	80082a0 <HAL_GPIO_DeInit+0xac>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a60      	ldr	r2, [pc, #384]	; (80083e4 <HAL_GPIO_DeInit+0x1f0>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d019      	beq.n	800829c <HAL_GPIO_DeInit+0xa8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a5f      	ldr	r2, [pc, #380]	; (80083e8 <HAL_GPIO_DeInit+0x1f4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d013      	beq.n	8008298 <HAL_GPIO_DeInit+0xa4>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a5e      	ldr	r2, [pc, #376]	; (80083ec <HAL_GPIO_DeInit+0x1f8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00d      	beq.n	8008294 <HAL_GPIO_DeInit+0xa0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a5d      	ldr	r2, [pc, #372]	; (80083f0 <HAL_GPIO_DeInit+0x1fc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <HAL_GPIO_DeInit+0x9c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a5c      	ldr	r2, [pc, #368]	; (80083f4 <HAL_GPIO_DeInit+0x200>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d101      	bne.n	800828c <HAL_GPIO_DeInit+0x98>
 8008288:	2309      	movs	r3, #9
 800828a:	e010      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 800828c:	230a      	movs	r3, #10
 800828e:	e00e      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 8008290:	2307      	movs	r3, #7
 8008292:	e00c      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 8008294:	2306      	movs	r3, #6
 8008296:	e00a      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 8008298:	2305      	movs	r3, #5
 800829a:	e008      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 800829c:	2304      	movs	r3, #4
 800829e:	e006      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 80082a0:	2303      	movs	r3, #3
 80082a2:	e004      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e002      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <HAL_GPIO_DeInit+0xba>
 80082ac:	2300      	movs	r3, #0
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	f002 0203 	and.w	r2, r2, #3
 80082b4:	0092      	lsls	r2, r2, #2
 80082b6:	4093      	lsls	r3, r2
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d136      	bne.n	800832c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	43db      	mvns	r3, r3
 80082c6:	401a      	ands	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	43db      	mvns	r3, r3
 80082d4:	401a      	ands	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80082da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	43db      	mvns	r3, r3
 80082e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082e8:	4013      	ands	r3, r2
 80082ea:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80082ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	43db      	mvns	r3, r3
 80082f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fa:	4013      	ands	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	220f      	movs	r2, #15
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800830e:	4a30      	ldr	r2, [pc, #192]	; (80083d0 <HAL_GPIO_DeInit+0x1dc>)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	089b      	lsrs	r3, r3, #2
 8008314:	3302      	adds	r3, #2
 8008316:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	43da      	mvns	r2, r3
 800831e:	482c      	ldr	r0, [pc, #176]	; (80083d0 <HAL_GPIO_DeInit+0x1dc>)
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	400a      	ands	r2, r1
 8008326:	3302      	adds	r3, #2
 8008328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	2103      	movs	r1, #3
 8008336:	fa01 f303 	lsl.w	r3, r1, r3
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	08da      	lsrs	r2, r3, #3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3208      	adds	r2, #8
 8008348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	220f      	movs	r2, #15
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	08d2      	lsrs	r2, r2, #3
 8008360:	4019      	ands	r1, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3208      	adds	r2, #8
 8008366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	2103      	movs	r1, #3
 8008374:	fa01 f303 	lsl.w	r3, r1, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	401a      	ands	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	2101      	movs	r1, #1
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	fa01 f303 	lsl.w	r3, r1, r3
 800838c:	43db      	mvns	r3, r3
 800838e:	401a      	ands	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	2103      	movs	r1, #3
 800839e:	fa01 f303 	lsl.w	r3, r1, r3
 80083a2:	43db      	mvns	r3, r3
 80083a4:	401a      	ands	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	3301      	adds	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	fa22 f303 	lsr.w	r3, r2, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f af25 	bne.w	8008208 <HAL_GPIO_DeInit+0x14>
  }
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	58000080 	.word	0x58000080
 80083d0:	58000400 	.word	0x58000400
 80083d4:	58020000 	.word	0x58020000
 80083d8:	58020400 	.word	0x58020400
 80083dc:	58020800 	.word	0x58020800
 80083e0:	58020c00 	.word	0x58020c00
 80083e4:	58021000 	.word	0x58021000
 80083e8:	58021400 	.word	0x58021400
 80083ec:	58021800 	.word	0x58021800
 80083f0:	58021c00 	.word	0x58021c00
 80083f4:	58022400 	.word	0x58022400

080083f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008408:	787b      	ldrb	r3, [r7, #1]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800840e:	887a      	ldrh	r2, [r7, #2]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008414:	e003      	b.n	800841e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	041a      	lsls	r2, r3, #16
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	619a      	str	r2, [r3, #24]
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	4603      	mov	r3, r0
 8008432:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008438:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	4013      	ands	r3, r2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d008      	beq.n	8008456 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f804 	bl	800845e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	4603      	mov	r3, r0
 8008466:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800847c:	4b19      	ldr	r3, [pc, #100]	; (80084e4 <HAL_PWREx_ConfigSupply+0x70>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b04      	cmp	r3, #4
 8008486:	d00a      	beq.n	800849e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008488:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <HAL_PWREx_ConfigSupply+0x70>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	429a      	cmp	r2, r3
 8008494:	d001      	beq.n	800849a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e01f      	b.n	80084da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e01d      	b.n	80084da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800849e:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <HAL_PWREx_ConfigSupply+0x70>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f023 0207 	bic.w	r2, r3, #7
 80084a6:	490f      	ldr	r1, [pc, #60]	; (80084e4 <HAL_PWREx_ConfigSupply+0x70>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084ae:	f7fc fbbb 	bl	8004c28 <HAL_GetTick>
 80084b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084b4:	e009      	b.n	80084ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084b6:	f7fc fbb7 	bl	8004c28 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084c4:	d901      	bls.n	80084ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e007      	b.n	80084da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <HAL_PWREx_ConfigSupply+0x70>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d6:	d1ee      	bne.n	80084b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	58024800 	.word	0x58024800

080084e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e39d      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8087 	beq.w	8008616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008508:	4b88      	ldr	r3, [pc, #544]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008512:	4b86      	ldr	r3, [pc, #536]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b10      	cmp	r3, #16
 800851c:	d007      	beq.n	800852e <HAL_RCC_OscConfig+0x46>
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	2b18      	cmp	r3, #24
 8008522:	d110      	bne.n	8008546 <HAL_RCC_OscConfig+0x5e>
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d10b      	bne.n	8008546 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800852e:	4b7f      	ldr	r3, [pc, #508]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d06c      	beq.n	8008614 <HAL_RCC_OscConfig+0x12c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d168      	bne.n	8008614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e377      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800854e:	d106      	bne.n	800855e <HAL_RCC_OscConfig+0x76>
 8008550:	4b76      	ldr	r3, [pc, #472]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a75      	ldr	r2, [pc, #468]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	e02e      	b.n	80085bc <HAL_RCC_OscConfig+0xd4>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10c      	bne.n	8008580 <HAL_RCC_OscConfig+0x98>
 8008566:	4b71      	ldr	r3, [pc, #452]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a70      	ldr	r2, [pc, #448]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800856c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	4b6e      	ldr	r3, [pc, #440]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a6d      	ldr	r2, [pc, #436]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	e01d      	b.n	80085bc <HAL_RCC_OscConfig+0xd4>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008588:	d10c      	bne.n	80085a4 <HAL_RCC_OscConfig+0xbc>
 800858a:	4b68      	ldr	r3, [pc, #416]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a67      	ldr	r2, [pc, #412]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4b65      	ldr	r3, [pc, #404]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a64      	ldr	r2, [pc, #400]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800859c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e00b      	b.n	80085bc <HAL_RCC_OscConfig+0xd4>
 80085a4:	4b61      	ldr	r3, [pc, #388]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a60      	ldr	r2, [pc, #384]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80085aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4b5e      	ldr	r3, [pc, #376]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a5d      	ldr	r2, [pc, #372]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80085b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d013      	beq.n	80085ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c4:	f7fc fb30 	bl	8004c28 <HAL_GetTick>
 80085c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085cc:	f7fc fb2c 	bl	8004c28 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b64      	cmp	r3, #100	; 0x64
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e32b      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085de:	4b53      	ldr	r3, [pc, #332]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f0      	beq.n	80085cc <HAL_RCC_OscConfig+0xe4>
 80085ea:	e014      	b.n	8008616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ec:	f7fc fb1c 	bl	8004c28 <HAL_GetTick>
 80085f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085f4:	f7fc fb18 	bl	8004c28 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b64      	cmp	r3, #100	; 0x64
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e317      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008606:	4b49      	ldr	r3, [pc, #292]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f0      	bne.n	80085f4 <HAL_RCC_OscConfig+0x10c>
 8008612:	e000      	b.n	8008616 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 808c 	beq.w	800873c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008624:	4b41      	ldr	r3, [pc, #260]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <HAL_RCC_OscConfig+0x162>
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	2b18      	cmp	r3, #24
 800863e:	d137      	bne.n	80086b0 <HAL_RCC_OscConfig+0x1c8>
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d132      	bne.n	80086b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800864a:	4b38      	ldr	r3, [pc, #224]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_RCC_OscConfig+0x17a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e2e9      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008662:	4b32      	ldr	r3, [pc, #200]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f023 0219 	bic.w	r2, r3, #25
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	492f      	ldr	r1, [pc, #188]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008670:	4313      	orrs	r3, r2
 8008672:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008674:	f7fc fad8 	bl	8004c28 <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800867c:	f7fc fad4 	bl	8004c28 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e2d3      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800868e:	4b27      	ldr	r3, [pc, #156]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f0      	beq.n	800867c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800869a:	4b24      	ldr	r3, [pc, #144]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	061b      	lsls	r3, r3, #24
 80086a8:	4920      	ldr	r1, [pc, #128]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086ae:	e045      	b.n	800873c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d026      	beq.n	8008706 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086b8:	4b1c      	ldr	r3, [pc, #112]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f023 0219 	bic.w	r2, r3, #25
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	4919      	ldr	r1, [pc, #100]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ca:	f7fc faad 	bl	8004c28 <HAL_GetTick>
 80086ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086d2:	f7fc faa9 	bl	8004c28 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e2a8      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086e4:	4b11      	ldr	r3, [pc, #68]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f0:	4b0e      	ldr	r3, [pc, #56]	; (800872c <HAL_RCC_OscConfig+0x244>)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	061b      	lsls	r3, r3, #24
 80086fe:	490b      	ldr	r1, [pc, #44]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008700:	4313      	orrs	r3, r2
 8008702:	604b      	str	r3, [r1, #4]
 8008704:	e01a      	b.n	800873c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008706:	4b09      	ldr	r3, [pc, #36]	; (800872c <HAL_RCC_OscConfig+0x244>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a08      	ldr	r2, [pc, #32]	; (800872c <HAL_RCC_OscConfig+0x244>)
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008712:	f7fc fa89 	bl	8004c28 <HAL_GetTick>
 8008716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008718:	e00a      	b.n	8008730 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800871a:	f7fc fa85 	bl	8004c28 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d903      	bls.n	8008730 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e284      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
 800872c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008730:	4b96      	ldr	r3, [pc, #600]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1ee      	bne.n	800871a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d06a      	beq.n	800881e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008748:	4b90      	ldr	r3, [pc, #576]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008750:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008752:	4b8e      	ldr	r3, [pc, #568]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b08      	cmp	r3, #8
 800875c:	d007      	beq.n	800876e <HAL_RCC_OscConfig+0x286>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b18      	cmp	r3, #24
 8008762:	d11b      	bne.n	800879c <HAL_RCC_OscConfig+0x2b4>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	2b01      	cmp	r3, #1
 800876c:	d116      	bne.n	800879c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800876e:	4b87      	ldr	r3, [pc, #540]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <HAL_RCC_OscConfig+0x29e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d001      	beq.n	8008786 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e257      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008786:	4b81      	ldr	r3, [pc, #516]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	497d      	ldr	r1, [pc, #500]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008796:	4313      	orrs	r3, r2
 8008798:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800879a:	e040      	b.n	800881e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d023      	beq.n	80087ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087a4:	4b79      	ldr	r3, [pc, #484]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a78      	ldr	r2, [pc, #480]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fc fa3a 	bl	8004c28 <HAL_GetTick>
 80087b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087b8:	f7fc fa36 	bl	8004c28 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e235      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087ca:	4b70      	ldr	r3, [pc, #448]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f0      	beq.n	80087b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087d6:	4b6d      	ldr	r3, [pc, #436]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	061b      	lsls	r3, r3, #24
 80087e4:	4969      	ldr	r1, [pc, #420]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60cb      	str	r3, [r1, #12]
 80087ea:	e018      	b.n	800881e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087ec:	4b67      	ldr	r3, [pc, #412]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a66      	ldr	r2, [pc, #408]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80087f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f8:	f7fc fa16 	bl	8004c28 <HAL_GetTick>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008800:	f7fc fa12 	bl	8004c28 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e211      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008812:	4b5e      	ldr	r3, [pc, #376]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f0      	bne.n	8008800 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d036      	beq.n	8008898 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d019      	beq.n	8008866 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008832:	4b56      	ldr	r3, [pc, #344]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008836:	4a55      	ldr	r2, [pc, #340]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883e:	f7fc f9f3 	bl	8004c28 <HAL_GetTick>
 8008842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008846:	f7fc f9ef 	bl	8004c28 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e1ee      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008858:	4b4c      	ldr	r3, [pc, #304]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800885a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0x35e>
 8008864:	e018      	b.n	8008898 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008866:	4b49      	ldr	r3, [pc, #292]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886a:	4a48      	ldr	r2, [pc, #288]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800886c:	f023 0301 	bic.w	r3, r3, #1
 8008870:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008872:	f7fc f9d9 	bl	8004c28 <HAL_GetTick>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800887a:	f7fc f9d5 	bl	8004c28 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e1d4      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800888c:	4b3f      	ldr	r3, [pc, #252]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800888e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d036      	beq.n	8008912 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088ac:	4b37      	ldr	r3, [pc, #220]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a36      	ldr	r2, [pc, #216]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80088b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088b8:	f7fc f9b6 	bl	8004c28 <HAL_GetTick>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088c0:	f7fc f9b2 	bl	8004c28 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e1b1      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088d2:	4b2e      	ldr	r3, [pc, #184]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f0      	beq.n	80088c0 <HAL_RCC_OscConfig+0x3d8>
 80088de:	e018      	b.n	8008912 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088e0:	4b2a      	ldr	r3, [pc, #168]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a29      	ldr	r2, [pc, #164]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 80088e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088ec:	f7fc f99c 	bl	8004c28 <HAL_GetTick>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088f4:	f7fc f998 	bl	8004c28 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e197      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f0      	bne.n	80088f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8086 	beq.w	8008a2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008920:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <HAL_RCC_OscConfig+0x4a8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <HAL_RCC_OscConfig+0x4a8>)
 8008926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800892a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800892c:	f7fc f97c 	bl	8004c28 <HAL_GetTick>
 8008930:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008932:	e008      	b.n	8008946 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008934:	f7fc f978 	bl	8004c28 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b64      	cmp	r3, #100	; 0x64
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e177      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008946:	4b12      	ldr	r3, [pc, #72]	; (8008990 <HAL_RCC_OscConfig+0x4a8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f0      	beq.n	8008934 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d106      	bne.n	8008968 <HAL_RCC_OscConfig+0x480>
 800895a:	4b0c      	ldr	r3, [pc, #48]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	4a0b      	ldr	r2, [pc, #44]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008960:	f043 0301 	orr.w	r3, r3, #1
 8008964:	6713      	str	r3, [r2, #112]	; 0x70
 8008966:	e032      	b.n	80089ce <HAL_RCC_OscConfig+0x4e6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d111      	bne.n	8008994 <HAL_RCC_OscConfig+0x4ac>
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	4a05      	ldr	r2, [pc, #20]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	4a02      	ldr	r2, [pc, #8]	; (800898c <HAL_RCC_OscConfig+0x4a4>)
 8008982:	f023 0304 	bic.w	r3, r3, #4
 8008986:	6713      	str	r3, [r2, #112]	; 0x70
 8008988:	e021      	b.n	80089ce <HAL_RCC_OscConfig+0x4e6>
 800898a:	bf00      	nop
 800898c:	58024400 	.word	0x58024400
 8008990:	58024800 	.word	0x58024800
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b05      	cmp	r3, #5
 800899a:	d10c      	bne.n	80089b6 <HAL_RCC_OscConfig+0x4ce>
 800899c:	4b83      	ldr	r3, [pc, #524]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 800899e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a0:	4a82      	ldr	r2, [pc, #520]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089a2:	f043 0304 	orr.w	r3, r3, #4
 80089a6:	6713      	str	r3, [r2, #112]	; 0x70
 80089a8:	4b80      	ldr	r3, [pc, #512]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ac:	4a7f      	ldr	r2, [pc, #508]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089ae:	f043 0301 	orr.w	r3, r3, #1
 80089b2:	6713      	str	r3, [r2, #112]	; 0x70
 80089b4:	e00b      	b.n	80089ce <HAL_RCC_OscConfig+0x4e6>
 80089b6:	4b7d      	ldr	r3, [pc, #500]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	4a7c      	ldr	r2, [pc, #496]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089bc:	f023 0301 	bic.w	r3, r3, #1
 80089c0:	6713      	str	r3, [r2, #112]	; 0x70
 80089c2:	4b7a      	ldr	r3, [pc, #488]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c6:	4a79      	ldr	r2, [pc, #484]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089c8:	f023 0304 	bic.w	r3, r3, #4
 80089cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d015      	beq.n	8008a02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d6:	f7fc f927 	bl	8004c28 <HAL_GetTick>
 80089da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089dc:	e00a      	b.n	80089f4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089de:	f7fc f923 	bl	8004c28 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d901      	bls.n	80089f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e120      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089f4:	4b6d      	ldr	r3, [pc, #436]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 80089f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0ee      	beq.n	80089de <HAL_RCC_OscConfig+0x4f6>
 8008a00:	e014      	b.n	8008a2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a02:	f7fc f911 	bl	8004c28 <HAL_GetTick>
 8008a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a08:	e00a      	b.n	8008a20 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a0a:	f7fc f90d 	bl	8004c28 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e10a      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a20:	4b62      	ldr	r3, [pc, #392]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1ee      	bne.n	8008a0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80ff 	beq.w	8008c34 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a36:	4b5d      	ldr	r3, [pc, #372]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a3e:	2b18      	cmp	r3, #24
 8008a40:	f000 80ba 	beq.w	8008bb8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	f040 8095 	bne.w	8008b78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a4e:	4b57      	ldr	r3, [pc, #348]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a56      	ldr	r2, [pc, #344]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5a:	f7fc f8e5 	bl	8004c28 <HAL_GetTick>
 8008a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a62:	f7fc f8e1 	bl	8004c28 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e0e0      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a74:	4b4d      	ldr	r3, [pc, #308]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f0      	bne.n	8008a62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a80:	4b4a      	ldr	r3, [pc, #296]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a84:	4b4a      	ldr	r3, [pc, #296]	; (8008bb0 <HAL_RCC_OscConfig+0x6c8>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a90:	0112      	lsls	r2, r2, #4
 8008a92:	430a      	orrs	r2, r1
 8008a94:	4945      	ldr	r1, [pc, #276]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	628b      	str	r3, [r1, #40]	; 0x28
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	025b      	lsls	r3, r3, #9
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	061b      	lsls	r3, r3, #24
 8008ac6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008aca:	4938      	ldr	r1, [pc, #224]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ad0:	4b36      	ldr	r3, [pc, #216]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a35      	ldr	r2, [pc, #212]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008ad6:	f023 0301 	bic.w	r3, r3, #1
 8008ada:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008adc:	4b33      	ldr	r3, [pc, #204]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae0:	4b34      	ldr	r3, [pc, #208]	; (8008bb4 <HAL_RCC_OscConfig+0x6cc>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ae8:	00d2      	lsls	r2, r2, #3
 8008aea:	4930      	ldr	r1, [pc, #192]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008af0:	4b2e      	ldr	r3, [pc, #184]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	f023 020c 	bic.w	r2, r3, #12
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	492b      	ldr	r1, [pc, #172]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b02:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	f023 0202 	bic.w	r2, r3, #2
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0e:	4927      	ldr	r1, [pc, #156]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4a24      	ldr	r2, [pc, #144]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b20:	4b22      	ldr	r3, [pc, #136]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a21      	ldr	r2, [pc, #132]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b2c:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b30:	4a1e      	ldr	r2, [pc, #120]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b38:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	4a1b      	ldr	r2, [pc, #108]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b44:	4b19      	ldr	r3, [pc, #100]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a18      	ldr	r2, [pc, #96]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fc f86a 	bl	8004c28 <HAL_GetTick>
 8008b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b58:	f7fc f866 	bl	8004c28 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e065      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b6a:	4b10      	ldr	r3, [pc, #64]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f0      	beq.n	8008b58 <HAL_RCC_OscConfig+0x670>
 8008b76:	e05d      	b.n	8008c34 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b78:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a0b      	ldr	r2, [pc, #44]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b84:	f7fc f850 	bl	8004c28 <HAL_GetTick>
 8008b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b8c:	f7fc f84c 	bl	8004c28 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e04b      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b9e:	4b03      	ldr	r3, [pc, #12]	; (8008bac <HAL_RCC_OscConfig+0x6c4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f0      	bne.n	8008b8c <HAL_RCC_OscConfig+0x6a4>
 8008baa:	e043      	b.n	8008c34 <HAL_RCC_OscConfig+0x74c>
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	fffffc0c 	.word	0xfffffc0c
 8008bb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bb8:	4b21      	ldr	r3, [pc, #132]	; (8008c40 <HAL_RCC_OscConfig+0x758>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bbe:	4b20      	ldr	r3, [pc, #128]	; (8008c40 <HAL_RCC_OscConfig+0x758>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d031      	beq.n	8008c30 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f003 0203 	and.w	r2, r3, #3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d12a      	bne.n	8008c30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d122      	bne.n	8008c30 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d11a      	bne.n	8008c30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	0a5b      	lsrs	r3, r3, #9
 8008bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d111      	bne.n	8008c30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	0c1b      	lsrs	r3, r3, #16
 8008c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d108      	bne.n	8008c30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	0e1b      	lsrs	r3, r3, #24
 8008c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e000      	b.n	8008c36 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3730      	adds	r7, #48	; 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	58024400 	.word	0x58024400

08008c44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e19c      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c58:	4b8a      	ldr	r3, [pc, #552]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d910      	bls.n	8008c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c66:	4b87      	ldr	r3, [pc, #540]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 020f 	bic.w	r2, r3, #15
 8008c6e:	4985      	ldr	r1, [pc, #532]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c76:	4b83      	ldr	r3, [pc, #524]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d001      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e184      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d010      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	4b7b      	ldr	r3, [pc, #492]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d908      	bls.n	8008cb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ca4:	4b78      	ldr	r3, [pc, #480]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	4975      	ldr	r1, [pc, #468]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d010      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	4b70      	ldr	r3, [pc, #448]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d908      	bls.n	8008ce4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cd2:	4b6d      	ldr	r3, [pc, #436]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	496a      	ldr	r1, [pc, #424]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d010      	beq.n	8008d12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699a      	ldr	r2, [r3, #24]
 8008cf4:	4b64      	ldr	r3, [pc, #400]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d908      	bls.n	8008d12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d00:	4b61      	ldr	r3, [pc, #388]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	495e      	ldr	r1, [pc, #376]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	4b59      	ldr	r3, [pc, #356]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d908      	bls.n	8008d40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d2e:	4b56      	ldr	r3, [pc, #344]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	4953      	ldr	r1, [pc, #332]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d010      	beq.n	8008d6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	4b4d      	ldr	r3, [pc, #308]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d908      	bls.n	8008d6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d5c:	4b4a      	ldr	r3, [pc, #296]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f023 020f 	bic.w	r2, r3, #15
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4947      	ldr	r1, [pc, #284]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d055      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d7a:	4b43      	ldr	r3, [pc, #268]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	4940      	ldr	r1, [pc, #256]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d107      	bne.n	8008da4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d94:	4b3c      	ldr	r3, [pc, #240]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d121      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e0f6      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d107      	bne.n	8008dbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d115      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0ea      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d107      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dc4:	4b30      	ldr	r3, [pc, #192]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d109      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0de      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dd4:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e0d6      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008de4:	4b28      	ldr	r3, [pc, #160]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f023 0207 	bic.w	r2, r3, #7
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4925      	ldr	r1, [pc, #148]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df6:	f7fb ff17 	bl	8004c28 <HAL_GetTick>
 8008dfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dfc:	e00a      	b.n	8008e14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dfe:	f7fb ff13 	bl	8004c28 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e0be      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e14:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d1eb      	bne.n	8008dfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d010      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d208      	bcs.n	8008e54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f023 020f 	bic.w	r2, r3, #15
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	490e      	ldr	r1, [pc, #56]	; (8008e88 <HAL_RCC_ClockConfig+0x244>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e54:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 030f 	and.w	r3, r3, #15
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d214      	bcs.n	8008e8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e62:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f023 020f 	bic.w	r2, r3, #15
 8008e6a:	4906      	ldr	r1, [pc, #24]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e72:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <HAL_RCC_ClockConfig+0x240>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d005      	beq.n	8008e8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e086      	b.n	8008f92 <HAL_RCC_ClockConfig+0x34e>
 8008e84:	52002000 	.word	0x52002000
 8008e88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	4b3f      	ldr	r3, [pc, #252]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d208      	bcs.n	8008eba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ea8:	4b3c      	ldr	r3, [pc, #240]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	4939      	ldr	r1, [pc, #228]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d010      	beq.n	8008ee8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	695a      	ldr	r2, [r3, #20]
 8008eca:	4b34      	ldr	r3, [pc, #208]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d208      	bcs.n	8008ee8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ed6:	4b31      	ldr	r3, [pc, #196]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	492e      	ldr	r1, [pc, #184]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	699a      	ldr	r2, [r3, #24]
 8008ef8:	4b28      	ldr	r3, [pc, #160]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d208      	bcs.n	8008f16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f04:	4b25      	ldr	r3, [pc, #148]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	4922      	ldr	r1, [pc, #136]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0320 	and.w	r3, r3, #32
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d010      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69da      	ldr	r2, [r3, #28]
 8008f26:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d208      	bcs.n	8008f44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f32:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	4917      	ldr	r1, [pc, #92]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f44:	f000 f834 	bl	8008fb0 <HAL_RCC_GetSysClockFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	0a1b      	lsrs	r3, r3, #8
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	4912      	ldr	r1, [pc, #72]	; (8008fa0 <HAL_RCC_ClockConfig+0x35c>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	f003 031f 	and.w	r3, r3, #31
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f62:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <HAL_RCC_ClockConfig+0x358>)
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <HAL_RCC_ClockConfig+0x35c>)
 8008f6c:	5cd3      	ldrb	r3, [r2, r3]
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
 8008f78:	4a0a      	ldr	r2, [pc, #40]	; (8008fa4 <HAL_RCC_ClockConfig+0x360>)
 8008f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f7c:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <HAL_RCC_ClockConfig+0x364>)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <HAL_RCC_ClockConfig+0x368>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fb fe04 	bl	8004b94 <HAL_InitTick>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	0800eba0 	.word	0x0800eba0
 8008fa4:	240001a4 	.word	0x240001a4
 8008fa8:	240001a0 	.word	0x240001a0
 8008fac:	240001a8 	.word	0x240001a8

08008fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b089      	sub	sp, #36	; 0x24
 8008fb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fb6:	4bb3      	ldr	r3, [pc, #716]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fbe:	2b18      	cmp	r3, #24
 8008fc0:	f200 8155 	bhi.w	800926e <HAL_RCC_GetSysClockFreq+0x2be>
 8008fc4:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fca:	bf00      	nop
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	0800926f 	.word	0x0800926f
 8008fd4:	0800926f 	.word	0x0800926f
 8008fd8:	0800926f 	.word	0x0800926f
 8008fdc:	0800926f 	.word	0x0800926f
 8008fe0:	0800926f 	.word	0x0800926f
 8008fe4:	0800926f 	.word	0x0800926f
 8008fe8:	0800926f 	.word	0x0800926f
 8008fec:	08009057 	.word	0x08009057
 8008ff0:	0800926f 	.word	0x0800926f
 8008ff4:	0800926f 	.word	0x0800926f
 8008ff8:	0800926f 	.word	0x0800926f
 8008ffc:	0800926f 	.word	0x0800926f
 8009000:	0800926f 	.word	0x0800926f
 8009004:	0800926f 	.word	0x0800926f
 8009008:	0800926f 	.word	0x0800926f
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800926f 	.word	0x0800926f
 8009014:	0800926f 	.word	0x0800926f
 8009018:	0800926f 	.word	0x0800926f
 800901c:	0800926f 	.word	0x0800926f
 8009020:	0800926f 	.word	0x0800926f
 8009024:	0800926f 	.word	0x0800926f
 8009028:	0800926f 	.word	0x0800926f
 800902c:	08009063 	.word	0x08009063
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009030:	4b94      	ldr	r3, [pc, #592]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800903c:	4b91      	ldr	r3, [pc, #580]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a90      	ldr	r2, [pc, #576]	; (8009288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800904e:	e111      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009050:	4b8d      	ldr	r3, [pc, #564]	; (8009288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009052:	61bb      	str	r3, [r7, #24]
    break;
 8009054:	e10e      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009056:	4b8d      	ldr	r3, [pc, #564]	; (800928c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009058:	61bb      	str	r3, [r7, #24]
    break;
 800905a:	e10b      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800905c:	4b8c      	ldr	r3, [pc, #560]	; (8009290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800905e:	61bb      	str	r3, [r7, #24]
    break;
 8009060:	e108      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009062:	4b88      	ldr	r3, [pc, #544]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800906c:	4b85      	ldr	r3, [pc, #532]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	091b      	lsrs	r3, r3, #4
 8009072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009076:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009078:	4b82      	ldr	r3, [pc, #520]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009082:	4b80      	ldr	r3, [pc, #512]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	08db      	lsrs	r3, r3, #3
 8009088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	fb02 f303 	mul.w	r3, r2, r3
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 80e1 	beq.w	8009268 <HAL_RCC_GetSysClockFreq+0x2b8>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	f000 8083 	beq.w	80091b4 <HAL_RCC_GetSysClockFreq+0x204>
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	f200 80a1 	bhi.w	80091f8 <HAL_RCC_GetSysClockFreq+0x248>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <HAL_RCC_GetSysClockFreq+0x114>
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d056      	beq.n	8009170 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090c2:	e099      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c4:	4b6f      	ldr	r3, [pc, #444]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d02d      	beq.n	800912c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090d0:	4b6c      	ldr	r3, [pc, #432]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	08db      	lsrs	r3, r3, #3
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	4a6b      	ldr	r2, [pc, #428]	; (8009288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
 80090e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fa:	4b62      	ldr	r3, [pc, #392]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910a:	ed97 6a02 	vldr	s12, [r7, #8]
 800910e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009126:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800912a:	e087      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b51      	ldr	r3, [pc, #324]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009152:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916e:	e065      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800929c <HAL_RCC_GetSysClockFreq+0x2ec>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b40      	ldr	r3, [pc, #256]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a02 	vldr	s12, [r7, #8]
 8009196:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b2:	e043      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c6:	4b2f      	ldr	r3, [pc, #188]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009294 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f6:	e021      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eddf 6a26 	vldr	s13, [pc, #152]	; 800929c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920a:	4b1e      	ldr	r3, [pc, #120]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	ed97 6a02 	vldr	s12, [r7, #8]
 800921e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800922e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800923a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800923c:	4b11      	ldr	r3, [pc, #68]	; (8009284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800923e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009240:	0a5b      	lsrs	r3, r3, #9
 8009242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009246:	3301      	adds	r3, #1
 8009248:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009254:	edd7 6a07 	vldr	s13, [r7, #28]
 8009258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800925c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009260:	ee17 3a90 	vmov	r3, s15
 8009264:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009266:	e005      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
    break;
 800926c:	e002      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009270:	61bb      	str	r3, [r7, #24]
    break;
 8009272:	bf00      	nop
  }

  return sysclockfreq;
 8009274:	69bb      	ldr	r3, [r7, #24]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3724      	adds	r7, #36	; 0x24
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
 8009288:	03d09000 	.word	0x03d09000
 800928c:	003d0900 	.word	0x003d0900
 8009290:	007a1200 	.word	0x007a1200
 8009294:	46000000 	.word	0x46000000
 8009298:	4c742400 	.word	0x4c742400
 800929c:	4a742400 	.word	0x4a742400
 80092a0:	4af42400 	.word	0x4af42400

080092a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092aa:	f7ff fe81 	bl	8008fb0 <HAL_RCC_GetSysClockFreq>
 80092ae:	4602      	mov	r2, r0
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	0a1b      	lsrs	r3, r3, #8
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	490f      	ldr	r1, [pc, #60]	; (80092f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80092bc:	5ccb      	ldrb	r3, [r1, r3]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092c8:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80092d2:	5cd3      	ldrb	r3, [r2, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	fa22 f303 	lsr.w	r3, r2, r3
 80092de:	4a07      	ldr	r2, [pc, #28]	; (80092fc <HAL_RCC_GetHCLKFreq+0x58>)
 80092e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092e2:	4a07      	ldr	r2, [pc, #28]	; (8009300 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <HAL_RCC_GetHCLKFreq+0x58>)
 80092ea:	681b      	ldr	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	58024400 	.word	0x58024400
 80092f8:	0800eba0 	.word	0x0800eba0
 80092fc:	240001a4 	.word	0x240001a4
 8009300:	240001a0 	.word	0x240001a0

08009304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009308:	f7ff ffcc 	bl	80092a4 <HAL_RCC_GetHCLKFreq>
 800930c:	4602      	mov	r2, r0
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	091b      	lsrs	r3, r3, #4
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	4904      	ldr	r1, [pc, #16]	; (800932c <HAL_RCC_GetPCLK1Freq+0x28>)
 800931a:	5ccb      	ldrb	r3, [r1, r3]
 800931c:	f003 031f 	and.w	r3, r3, #31
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009324:	4618      	mov	r0, r3
 8009326:	bd80      	pop	{r7, pc}
 8009328:	58024400 	.word	0x58024400
 800932c:	0800eba0 	.word	0x0800eba0

08009330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009334:	f7ff ffb6 	bl	80092a4 <HAL_RCC_GetHCLKFreq>
 8009338:	4602      	mov	r2, r0
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	4904      	ldr	r1, [pc, #16]	; (8009358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009346:	5ccb      	ldrb	r3, [r1, r3]
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009350:	4618      	mov	r0, r3
 8009352:	bd80      	pop	{r7, pc}
 8009354:	58024400 	.word	0x58024400
 8009358:	0800eba0 	.word	0x0800eba0

0800935c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009368:	2300      	movs	r3, #0
 800936a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d03f      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009380:	d02a      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009386:	d824      	bhi.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938c:	d018      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800938e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009392:	d81e      	bhi.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939c:	d007      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800939e:	e018      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a0:	4ba4      	ldr	r3, [pc, #656]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4aa3      	ldr	r2, [pc, #652]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093ac:	e015      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3304      	adds	r3, #4
 80093b2:	2102      	movs	r1, #2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f989 	bl	800a6cc <RCCEx_PLL2_Config>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093be:	e00c      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3324      	adds	r3, #36	; 0x24
 80093c4:	2102      	movs	r1, #2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fa32 	bl	800a830 <RCCEx_PLL3_Config>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
      break;
 80093d6:	e000      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093e0:	4b94      	ldr	r3, [pc, #592]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ec:	4991      	ldr	r1, [pc, #580]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	650b      	str	r3, [r1, #80]	; 0x50
 80093f2:	e001      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009400:	2b00      	cmp	r3, #0
 8009402:	d03d      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	2b04      	cmp	r3, #4
 800940a:	d826      	bhi.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800940c:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009412:	bf00      	nop
 8009414:	08009429 	.word	0x08009429
 8009418:	08009437 	.word	0x08009437
 800941c:	08009449 	.word	0x08009449
 8009420:	08009461 	.word	0x08009461
 8009424:	08009461 	.word	0x08009461
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009428:	4b82      	ldr	r3, [pc, #520]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	4a81      	ldr	r2, [pc, #516]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800942e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009434:	e015      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3304      	adds	r3, #4
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f001 f945 	bl	800a6cc <RCCEx_PLL2_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009446:	e00c      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3324      	adds	r3, #36	; 0x24
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f001 f9ee 	bl	800a830 <RCCEx_PLL3_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009458:	e003      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	75fb      	strb	r3, [r7, #23]
      break;
 800945e:	e000      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009468:	4b72      	ldr	r3, [pc, #456]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800946a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946c:	f023 0207 	bic.w	r2, r3, #7
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009474:	496f      	ldr	r1, [pc, #444]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009476:	4313      	orrs	r3, r2
 8009478:	650b      	str	r3, [r1, #80]	; 0x50
 800947a:	e001      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009488:	2b00      	cmp	r3, #0
 800948a:	d051      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009492:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009496:	d036      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009498:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800949c:	d830      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800949e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a2:	d032      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80094a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a8:	d82a      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094ae:	d02e      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80094b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094b4:	d824      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ba:	d018      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 80094bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c0:	d81e      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 80094c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094ca:	d007      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80094cc:	e018      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ce:	4b59      	ldr	r3, [pc, #356]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4a58      	ldr	r2, [pc, #352]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094da:	e019      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f8f2 	bl	800a6cc <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ec:	e010      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3324      	adds	r3, #36	; 0x24
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 f99b 	bl	800a830 <RCCEx_PLL3_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094fe:	e007      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e004      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800950e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009516:	4b47      	ldr	r3, [pc, #284]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009524:	4943      	ldr	r1, [pc, #268]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009526:	4313      	orrs	r3, r2
 8009528:	658b      	str	r3, [r1, #88]	; 0x58
 800952a:	e001      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009538:	2b00      	cmp	r3, #0
 800953a:	d051      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009542:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009546:	d036      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009548:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800954c:	d830      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800954e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009552:	d032      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009558:	d82a      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800955a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800955e:	d02e      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009560:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009564:	d824      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956a:	d018      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800956c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009570:	d81e      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009576:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800957a:	d007      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800957c:	e018      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800957e:	4b2d      	ldr	r3, [pc, #180]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	4a2c      	ldr	r2, [pc, #176]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800958a:	e019      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3304      	adds	r3, #4
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f89a 	bl	800a6cc <RCCEx_PLL2_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800959c:	e010      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3324      	adds	r3, #36	; 0x24
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 f943 	bl	800a830 <RCCEx_PLL3_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095ae:	e007      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	75fb      	strb	r3, [r7, #23]
      break;
 80095b4:	e004      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095c6:	4b1b      	ldr	r3, [pc, #108]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095d4:	4917      	ldr	r1, [pc, #92]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	658b      	str	r3, [r1, #88]	; 0x58
 80095da:	e001      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d035      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	2b30      	cmp	r3, #48	; 0x30
 80095f2:	d01c      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80095f4:	2b30      	cmp	r3, #48	; 0x30
 80095f6:	d817      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d00c      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d813      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009600:	2b00      	cmp	r3, #0
 8009602:	d019      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009604:	2b10      	cmp	r3, #16
 8009606:	d10f      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	4a09      	ldr	r2, [pc, #36]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009614:	e011      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	2102      	movs	r1, #2
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f855 	bl	800a6cc <RCCEx_PLL2_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009626:	e008      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
      break;
 800962c:	e005      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800962e:	bf00      	nop
 8009630:	e003      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009632:	bf00      	nop
 8009634:	58024400 	.word	0x58024400
      break;
 8009638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009640:	4ba3      	ldr	r3, [pc, #652]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009644:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964c:	49a0      	ldr	r1, [pc, #640]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800964e:	4313      	orrs	r3, r2
 8009650:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009652:	e001      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d047      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800966c:	d030      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800966e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009672:	d82a      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009678:	d02c      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800967a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800967e:	d824      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009684:	d018      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800968a:	d81e      	bhi.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d003      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009694:	d007      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009696:	e018      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009698:	4b8d      	ldr	r3, [pc, #564]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	4a8c      	ldr	r2, [pc, #560]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800969e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a4:	e017      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3304      	adds	r3, #4
 80096aa:	2100      	movs	r1, #0
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 f80d 	bl	800a6cc <RCCEx_PLL2_Config>
 80096b2:	4603      	mov	r3, r0
 80096b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096b6:	e00e      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3324      	adds	r3, #36	; 0x24
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 f8b6 	bl	800a830 <RCCEx_PLL3_Config>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096c8:	e005      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
      break;
 80096ce:	e002      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096d0:	bf00      	nop
 80096d2:	e000      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096dc:	4b7c      	ldr	r3, [pc, #496]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e8:	4979      	ldr	r1, [pc, #484]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	650b      	str	r3, [r1, #80]	; 0x50
 80096ee:	e001      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d049      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009708:	d02e      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800970a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800970e:	d828      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009714:	d02a      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009716:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800971a:	d822      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800971c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009720:	d026      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009726:	d81c      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800972c:	d010      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800972e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009732:	d816      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01d      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973c:	d111      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3304      	adds	r3, #4
 8009742:	2101      	movs	r1, #1
 8009744:	4618      	mov	r0, r3
 8009746:	f000 ffc1 	bl	800a6cc <RCCEx_PLL2_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800974e:	e012      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	2101      	movs	r1, #1
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f86a 	bl	800a830 <RCCEx_PLL3_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009760:	e009      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
      break;
 8009766:	e006      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009768:	bf00      	nop
 800976a:	e004      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800976c:	bf00      	nop
 800976e:	e002      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009770:	bf00      	nop
 8009772:	e000      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800977c:	4b54      	ldr	r3, [pc, #336]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800977e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009780:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009788:	4951      	ldr	r1, [pc, #324]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800978a:	4313      	orrs	r3, r2
 800978c:	650b      	str	r3, [r1, #80]	; 0x50
 800978e:	e001      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d04b      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097aa:	d02e      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80097ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b0:	d828      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d02a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80097b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097bc:	d822      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097c2:	d026      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80097c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097c8:	d81c      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ce:	d010      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80097d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097d4:	d816      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01d      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80097da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097de:	d111      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	2101      	movs	r1, #1
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 ff70 	bl	800a6cc <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097f0:	e012      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3324      	adds	r3, #36	; 0x24
 80097f6:	2101      	movs	r1, #1
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 f819 	bl	800a830 <RCCEx_PLL3_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009802:	e009      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
      break;
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800980a:	bf00      	nop
 800980c:	e004      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009818:	7dfb      	ldrb	r3, [r7, #23]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10a      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800981e:	4b2c      	ldr	r3, [pc, #176]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009822:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800982c:	4928      	ldr	r1, [pc, #160]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800982e:	4313      	orrs	r3, r2
 8009830:	658b      	str	r3, [r1, #88]	; 0x58
 8009832:	e001      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d02f      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984c:	d00e      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800984e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009852:	d814      	bhi.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d015      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800985c:	d10f      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800985e:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800986a:	e00c      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3304      	adds	r3, #4
 8009870:	2101      	movs	r1, #1
 8009872:	4618      	mov	r0, r3
 8009874:	f000 ff2a 	bl	800a6cc <RCCEx_PLL2_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800987c:	e003      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	75fb      	strb	r3, [r7, #23]
      break;
 8009882:	e000      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800988e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009890:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009898:	490d      	ldr	r1, [pc, #52]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800989a:	4313      	orrs	r3, r2
 800989c:	650b      	str	r3, [r1, #80]	; 0x50
 800989e:	e001      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d034      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d81d      	bhi.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098fb 	.word	0x080098fb
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e3 	.word	0x080098e3
 80098cc:	080098fb 	.word	0x080098fb
 80098d0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d4:	4bb1      	ldr	r3, [pc, #708]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	4ab0      	ldr	r2, [pc, #704]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098e0:	e00c      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	2102      	movs	r1, #2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 feef 	bl	800a6cc <RCCEx_PLL2_Config>
 80098ee:	4603      	mov	r3, r0
 80098f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098f2:	e003      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
      break;
 80098f8:	e000      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80098fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009902:	4ba6      	ldr	r3, [pc, #664]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	f023 0203 	bic.w	r2, r3, #3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990e:	49a3      	ldr	r1, [pc, #652]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009910:	4313      	orrs	r3, r2
 8009912:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009914:	e001      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8086 	beq.w	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009928:	4b9d      	ldr	r3, [pc, #628]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a9c      	ldr	r2, [pc, #624]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800992e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009934:	f7fb f978 	bl	8004c28 <HAL_GetTick>
 8009938:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800993a:	e009      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800993c:	f7fb f974 	bl	8004c28 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b64      	cmp	r3, #100	; 0x64
 8009948:	d902      	bls.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	75fb      	strb	r3, [r7, #23]
        break;
 800994e:	e005      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009950:	4b93      	ldr	r3, [pc, #588]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0ef      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d166      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009962:	4b8e      	ldr	r3, [pc, #568]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800996c:	4053      	eors	r3, r2
 800996e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009972:	2b00      	cmp	r3, #0
 8009974:	d013      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009976:	4b89      	ldr	r3, [pc, #548]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009980:	4b86      	ldr	r3, [pc, #536]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009984:	4a85      	ldr	r2, [pc, #532]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800998a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800998c:	4b83      	ldr	r3, [pc, #524]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800998e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009990:	4a82      	ldr	r2, [pc, #520]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009996:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009998:	4a80      	ldr	r2, [pc, #512]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a8:	d115      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099aa:	f7fb f93d 	bl	8004c28 <HAL_GetTick>
 80099ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b0:	e00b      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b2:	f7fb f939 	bl	8004c28 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d902      	bls.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	75fb      	strb	r3, [r7, #23]
            break;
 80099c8:	e005      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099ca:	4b74      	ldr	r3, [pc, #464]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0ed      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d126      	bne.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ea:	d10d      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80099ec:	4b6b      	ldr	r3, [pc, #428]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099fa:	0919      	lsrs	r1, r3, #4
 80099fc:	4b69      	ldr	r3, [pc, #420]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099fe:	400b      	ands	r3, r1
 8009a00:	4966      	ldr	r1, [pc, #408]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	610b      	str	r3, [r1, #16]
 8009a06:	e005      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009a08:	4b64      	ldr	r3, [pc, #400]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	4a63      	ldr	r2, [pc, #396]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a12:	6113      	str	r3, [r2, #16]
 8009a14:	4b61      	ldr	r3, [pc, #388]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a22:	495e      	ldr	r1, [pc, #376]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	670b      	str	r3, [r1, #112]	; 0x70
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	75bb      	strb	r3, [r7, #22]
 8009a2e:	e001      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d07e      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a44:	2b28      	cmp	r3, #40	; 0x28
 8009a46:	d867      	bhi.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009a48:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4e:	bf00      	nop
 8009a50:	08009b1f 	.word	0x08009b1f
 8009a54:	08009b19 	.word	0x08009b19
 8009a58:	08009b19 	.word	0x08009b19
 8009a5c:	08009b19 	.word	0x08009b19
 8009a60:	08009b19 	.word	0x08009b19
 8009a64:	08009b19 	.word	0x08009b19
 8009a68:	08009b19 	.word	0x08009b19
 8009a6c:	08009b19 	.word	0x08009b19
 8009a70:	08009af5 	.word	0x08009af5
 8009a74:	08009b19 	.word	0x08009b19
 8009a78:	08009b19 	.word	0x08009b19
 8009a7c:	08009b19 	.word	0x08009b19
 8009a80:	08009b19 	.word	0x08009b19
 8009a84:	08009b19 	.word	0x08009b19
 8009a88:	08009b19 	.word	0x08009b19
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b07 	.word	0x08009b07
 8009a94:	08009b19 	.word	0x08009b19
 8009a98:	08009b19 	.word	0x08009b19
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b19 	.word	0x08009b19
 8009aa8:	08009b19 	.word	0x08009b19
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b1f 	.word	0x08009b1f
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b19 	.word	0x08009b19
 8009abc:	08009b19 	.word	0x08009b19
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b19 	.word	0x08009b19
 8009ac8:	08009b19 	.word	0x08009b19
 8009acc:	08009b19 	.word	0x08009b19
 8009ad0:	08009b1f 	.word	0x08009b1f
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b19 	.word	0x08009b19
 8009adc:	08009b19 	.word	0x08009b19
 8009ae0:	08009b19 	.word	0x08009b19
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009b19 	.word	0x08009b19
 8009aec:	08009b19 	.word	0x08009b19
 8009af0:	08009b1f 	.word	0x08009b1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	2101      	movs	r1, #1
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fde6 	bl	800a6cc <RCCEx_PLL2_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b04:	e00c      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3324      	adds	r3, #36	; 0x24
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fe8f 	bl	800a830 <RCCEx_PLL3_Config>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b16:	e003      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1c:	e000      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b26:	4b1d      	ldr	r3, [pc, #116]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b32:	491a      	ldr	r1, [pc, #104]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	654b      	str	r3, [r1, #84]	; 0x54
 8009b38:	e001      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d03e      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d820      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009ba9 	.word	0x08009ba9
 8009b5c:	08009b71 	.word	0x08009b71
 8009b60:	08009b83 	.word	0x08009b83
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009ba9 	.word	0x08009ba9
 8009b6c:	08009ba9 	.word	0x08009ba9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	2101      	movs	r1, #1
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fda8 	bl	800a6cc <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b80:	e013      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2101      	movs	r1, #1
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 fe51 	bl	800a830 <RCCEx_PLL3_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b92:	e00a      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e007      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009b9a:	bf00      	nop
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	58024800 	.word	0x58024800
 8009ba4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bb0:	4b9f      	ldr	r3, [pc, #636]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb4:	f023 0207 	bic.w	r2, r3, #7
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbc:	499c      	ldr	r1, [pc, #624]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	654b      	str	r3, [r1, #84]	; 0x54
 8009bc2:	e001      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d039      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d820      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009bde:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009c27 	.word	0x08009c27
 8009be8:	08009bfd 	.word	0x08009bfd
 8009bec:	08009c0f 	.word	0x08009c0f
 8009bf0:	08009c27 	.word	0x08009c27
 8009bf4:	08009c27 	.word	0x08009c27
 8009bf8:	08009c27 	.word	0x08009c27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fd62 	bl	800a6cc <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c0c:	e00c      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3324      	adds	r3, #36	; 0x24
 8009c12:	2101      	movs	r1, #1
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 fe0b 	bl	800a830 <RCCEx_PLL3_Config>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c1e:	e003      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e000      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c2e:	4b80      	ldr	r3, [pc, #512]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	f023 0207 	bic.w	r2, r3, #7
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3c:	497c      	ldr	r1, [pc, #496]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	658b      	str	r3, [r1, #88]	; 0x58
 8009c42:	e001      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d04b      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c5e:	d02e      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c64:	d828      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6a:	d02a      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c70:	d822      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c76:	d026      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c7c:	d81c      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c82:	d010      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c88:	d816      	bhi.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01d      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c92:	d111      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fd16 	bl	800a6cc <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ca4:	e012      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3324      	adds	r3, #36	; 0x24
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fdbf 	bl	800a830 <RCCEx_PLL3_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cb6:	e009      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbc:	e006      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cbe:	bf00      	nop
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cd2:	4b57      	ldr	r3, [pc, #348]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	4953      	ldr	r1, [pc, #332]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ce6:	e001      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d04b      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d02:	d02e      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009d04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d08:	d828      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0e:	d02a      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d14:	d822      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d1a:	d026      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d20:	d81c      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d26:	d010      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d2c:	d816      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d01d      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d36:	d111      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fcc4 	bl	800a6cc <RCCEx_PLL2_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d48:	e012      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3324      	adds	r3, #36	; 0x24
 8009d4e:	2102      	movs	r1, #2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fd6d 	bl	800a830 <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d5a:	e009      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d60:	e006      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d62:	bf00      	nop
 8009d64:	e004      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d66:	bf00      	nop
 8009d68:	e002      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d6a:	bf00      	nop
 8009d6c:	e000      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d84:	492a      	ldr	r1, [pc, #168]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	658b      	str	r3, [r1, #88]	; 0x58
 8009d8a:	e001      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d04d      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009da2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009da6:	d02e      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009da8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dac:	d828      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db2:	d02a      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db8:	d822      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dbe:	d026      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009dc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dc4:	d81c      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dca:	d010      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd0:	d816      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01d      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dda:	d111      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3304      	adds	r3, #4
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fc72 	bl	800a6cc <RCCEx_PLL2_Config>
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dec:	e012      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3324      	adds	r3, #36	; 0x24
 8009df2:	2102      	movs	r1, #2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fd1b 	bl	800a830 <RCCEx_PLL3_Config>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dfe:	e009      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	75fb      	strb	r3, [r7, #23]
      break;
 8009e04:	e006      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e06:	bf00      	nop
 8009e08:	e004      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e002      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10c      	bne.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e28:	4901      	ldr	r1, [pc, #4]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e2e:	e003      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d018      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4c:	d10a      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3324      	adds	r3, #36	; 0x24
 8009e52:	2102      	movs	r1, #2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fceb 	bl	800a830 <RCCEx_PLL3_Config>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009e64:	4b8a      	ldr	r3, [pc, #552]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e70:	4987      	ldr	r1, [pc, #540]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0310 	and.w	r3, r3, #16
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01a      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e8c:	d10a      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3324      	adds	r3, #36	; 0x24
 8009e92:	2102      	movs	r1, #2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fccb 	bl	800a830 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ea4:	4b7a      	ldr	r3, [pc, #488]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb2:	4977      	ldr	r1, [pc, #476]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d034      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ece:	d01d      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed4:	d817      	bhi.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ede:	d009      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ee0:	e011      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fbef 	bl	800a6cc <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ef2:	e00c      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3324      	adds	r3, #36	; 0x24
 8009ef8:	2102      	movs	r1, #2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fc98 	bl	800a830 <RCCEx_PLL3_Config>
 8009f00:	4603      	mov	r3, r0
 8009f02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f04:	e003      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0a:	e000      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f14:	4b5e      	ldr	r3, [pc, #376]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f22:	495b      	ldr	r1, [pc, #364]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	658b      	str	r3, [r1, #88]	; 0x58
 8009f28:	e001      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d033      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f44:	d01c      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009f46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f4a:	d816      	bhi.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f50:	d003      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f56:	d007      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009f58:	e00f      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f5a:	4b4d      	ldr	r3, [pc, #308]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	4a4c      	ldr	r2, [pc, #304]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f66:	e00c      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3324      	adds	r3, #36	; 0x24
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fc5e 	bl	800a830 <RCCEx_PLL3_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f78:	e003      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f7e:	e000      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f88:	4b41      	ldr	r3, [pc, #260]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f96:	493e      	ldr	r1, [pc, #248]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f9c:	e001      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d029      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fba:	d007      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fbc:	e00f      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fbe:	4b34      	ldr	r3, [pc, #208]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	4a33      	ldr	r2, [pc, #204]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fca:	e00b      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	2102      	movs	r1, #2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fb7a 	bl	800a6cc <RCCEx_PLL2_Config>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fea:	4b29      	ldr	r3, [pc, #164]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff6:	4926      	ldr	r1, [pc, #152]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ffc:	e001      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3324      	adds	r3, #36	; 0x24
 800a012:	2102      	movs	r1, #2
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fc0b 	bl	800a830 <RCCEx_PLL3_Config>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d033      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a038:	d017      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a03a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a03e:	d811      	bhi.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d013      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04a:	d80b      	bhi.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d010      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a054:	d106      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4a0d      	ldr	r2, [pc, #52]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a062:	e007      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
      break;
 800a068:	e004      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a06a:	bf00      	nop
 800a06c:	e002      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a072:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10c      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a086:	4902      	ldr	r1, [pc, #8]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	654b      	str	r3, [r1, #84]	; 0x54
 800a08c:	e004      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a08e:	bf00      	nop
 800a090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0a4:	4b29      	ldr	r3, [pc, #164]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b0:	4926      	ldr	r1, [pc, #152]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0c2:	4b22      	ldr	r3, [pc, #136]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ce:	491f      	ldr	r1, [pc, #124]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	4a19      	ldr	r2, [pc, #100]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0ea:	6113      	str	r3, [r2, #16]
 800a0ec:	4b17      	ldr	r3, [pc, #92]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0f6:	4915      	ldr	r1, [pc, #84]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	da08      	bge.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a108:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a110:	490e      	ldr	r1, [pc, #56]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a112:	4313      	orrs	r3, r2
 800a114:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d009      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a130:	4906      	ldr	r1, [pc, #24]	; (800a14c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a132:	4313      	orrs	r3, r2
 800a134:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a136:	7dbb      	ldrb	r3, [r7, #22]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e000      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400

0800a150 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a154:	f7ff f8a6 	bl	80092a4 <HAL_RCC_GetHCLKFreq>
 800a158:	4602      	mov	r2, r0
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	091b      	lsrs	r3, r3, #4
 800a160:	f003 0307 	and.w	r3, r3, #7
 800a164:	4904      	ldr	r1, [pc, #16]	; (800a178 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a166:	5ccb      	ldrb	r3, [r1, r3]
 800a168:	f003 031f 	and.w	r3, r3, #31
 800a16c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a170:	4618      	mov	r0, r3
 800a172:	bd80      	pop	{r7, pc}
 800a174:	58024400 	.word	0x58024400
 800a178:	0800eba0 	.word	0x0800eba0

0800a17c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b089      	sub	sp, #36	; 0x24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a184:	4ba1      	ldr	r3, [pc, #644]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a188:	f003 0303 	and.w	r3, r3, #3
 800a18c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a18e:	4b9f      	ldr	r3, [pc, #636]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a192:	0b1b      	lsrs	r3, r3, #12
 800a194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a198:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a19a:	4b9c      	ldr	r3, [pc, #624]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	091b      	lsrs	r3, r3, #4
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a1a6:	4b99      	ldr	r3, [pc, #612]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1aa:	08db      	lsrs	r3, r3, #3
 800a1ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	fb02 f303 	mul.w	r3, r2, r3
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 8111 	beq.w	800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	f000 8083 	beq.w	800a2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	f200 80a1 	bhi.w	800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d056      	beq.n	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a1e6:	e099      	b.n	800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1e8:	4b88      	ldr	r3, [pc, #544]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0320 	and.w	r3, r3, #32
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d02d      	beq.n	800a250 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1f4:	4b85      	ldr	r3, [pc, #532]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	08db      	lsrs	r3, r3, #3
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	4a84      	ldr	r2, [pc, #528]	; (800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
 800a204:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21e:	4b7b      	ldr	r3, [pc, #492]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a232:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a24e:	e087      	b.n	800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a418 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a262:	4b6a      	ldr	r3, [pc, #424]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a272:	ed97 6a03 	vldr	s12, [r7, #12]
 800a276:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a292:	e065      	b.n	800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a6:	4b59      	ldr	r3, [pc, #356]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2d6:	e043      	b.n	800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ea:	4b48      	ldr	r3, [pc, #288]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f2:	ee07 3a90 	vmov	s15, r3
 800a2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a31a:	e021      	b.n	800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a41c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32e:	4b37      	ldr	r3, [pc, #220]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a342:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a35e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a360:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	0a5b      	lsrs	r3, r3, #9
 800a366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a37a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a37e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a386:	ee17 2a90 	vmov	r2, s15
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a38e:	4b1f      	ldr	r3, [pc, #124]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b4:	ee17 2a90 	vmov	r2, s15
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a3bc:	4b13      	ldr	r3, [pc, #76]	; (800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	0e1b      	lsrs	r3, r3, #24
 800a3c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e2:	ee17 2a90 	vmov	r2, s15
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3ea:	e008      	b.n	800a3fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	609a      	str	r2, [r3, #8]
}
 800a3fe:	bf00      	nop
 800a400:	3724      	adds	r7, #36	; 0x24
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	58024400 	.word	0x58024400
 800a410:	03d09000 	.word	0x03d09000
 800a414:	46000000 	.word	0x46000000
 800a418:	4c742400 	.word	0x4c742400
 800a41c:	4a742400 	.word	0x4a742400
 800a420:	4af42400 	.word	0x4af42400

0800a424 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a424:	b480      	push	{r7}
 800a426:	b089      	sub	sp, #36	; 0x24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a42c:	4ba1      	ldr	r3, [pc, #644]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a430:	f003 0303 	and.w	r3, r3, #3
 800a434:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a436:	4b9f      	ldr	r3, [pc, #636]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	0d1b      	lsrs	r3, r3, #20
 800a43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a440:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a442:	4b9c      	ldr	r3, [pc, #624]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	0a1b      	lsrs	r3, r3, #8
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a44e:	4b99      	ldr	r3, [pc, #612]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8111 	beq.w	800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	2b02      	cmp	r3, #2
 800a476:	f000 8083 	beq.w	800a580 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f200 80a1 	bhi.w	800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d056      	beq.n	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a48e:	e099      	b.n	800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a490:	4b88      	ldr	r3, [pc, #544]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d02d      	beq.n	800a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a49c:	4b85      	ldr	r3, [pc, #532]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	08db      	lsrs	r3, r3, #3
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	4a84      	ldr	r2, [pc, #528]	; (800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	4b7b      	ldr	r3, [pc, #492]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a4f6:	e087      	b.n	800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50a:	4b6a      	ldr	r3, [pc, #424]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a51e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a53a:	e065      	b.n	800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54e:	4b59      	ldr	r3, [pc, #356]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a562:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a57e:	e043      	b.n	800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a592:	4b48      	ldr	r3, [pc, #288]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5c2:	e021      	b.n	800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b37      	ldr	r3, [pc, #220]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a606:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a608:	4b2a      	ldr	r3, [pc, #168]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a61e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a622:	edd7 6a07 	vldr	s13, [r7, #28]
 800a626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a62a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a62e:	ee17 2a90 	vmov	r2, s15
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a636:	4b1f      	ldr	r3, [pc, #124]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	0c1b      	lsrs	r3, r3, #16
 800a63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a64c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a650:	edd7 6a07 	vldr	s13, [r7, #28]
 800a654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a65c:	ee17 2a90 	vmov	r2, s15
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a664:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	0e1b      	lsrs	r3, r3, #24
 800a66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a68a:	ee17 2a90 	vmov	r2, s15
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a692:	e008      	b.n	800a6a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	609a      	str	r2, [r3, #8]
}
 800a6a6:	bf00      	nop
 800a6a8:	3724      	adds	r7, #36	; 0x24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	58024400 	.word	0x58024400
 800a6b8:	03d09000 	.word	0x03d09000
 800a6bc:	46000000 	.word	0x46000000
 800a6c0:	4c742400 	.word	0x4c742400
 800a6c4:	4a742400 	.word	0x4a742400
 800a6c8:	4af42400 	.word	0x4af42400

0800a6cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6da:	4b53      	ldr	r3, [pc, #332]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d101      	bne.n	800a6ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e099      	b.n	800a81e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6ea:	4b4f      	ldr	r3, [pc, #316]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a4e      	ldr	r2, [pc, #312]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a6f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f6:	f7fa fa97 	bl	8004c28 <HAL_GetTick>
 800a6fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6fc:	e008      	b.n	800a710 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6fe:	f7fa fa93 	bl	8004c28 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d901      	bls.n	800a710 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e086      	b.n	800a81e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a710:	4b45      	ldr	r3, [pc, #276]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f0      	bne.n	800a6fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a71c:	4b42      	ldr	r3, [pc, #264]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	031b      	lsls	r3, r3, #12
 800a72a:	493f      	ldr	r1, [pc, #252]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	628b      	str	r3, [r1, #40]	; 0x28
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	3b01      	subs	r3, #1
 800a736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	3b01      	subs	r3, #1
 800a740:	025b      	lsls	r3, r3, #9
 800a742:	b29b      	uxth	r3, r3
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	061b      	lsls	r3, r3, #24
 800a75c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a760:	4931      	ldr	r1, [pc, #196]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a762:	4313      	orrs	r3, r2
 800a764:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a766:	4b30      	ldr	r3, [pc, #192]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	492d      	ldr	r1, [pc, #180]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a774:	4313      	orrs	r3, r2
 800a776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a778:	4b2b      	ldr	r3, [pc, #172]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f023 0220 	bic.w	r2, r3, #32
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	4928      	ldr	r1, [pc, #160]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a786:	4313      	orrs	r3, r2
 800a788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a78a:	4b27      	ldr	r3, [pc, #156]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	4a26      	ldr	r2, [pc, #152]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a790:	f023 0310 	bic.w	r3, r3, #16
 800a794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a796:	4b24      	ldr	r3, [pc, #144]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79a:	4b24      	ldr	r3, [pc, #144]	; (800a82c <RCCEx_PLL2_Config+0x160>)
 800a79c:	4013      	ands	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	69d2      	ldr	r2, [r2, #28]
 800a7a2:	00d2      	lsls	r2, r2, #3
 800a7a4:	4920      	ldr	r1, [pc, #128]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	4a1e      	ldr	r2, [pc, #120]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7b0:	f043 0310 	orr.w	r3, r3, #16
 800a7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a19      	ldr	r2, [pc, #100]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c8:	e00f      	b.n	800a7ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d106      	bne.n	800a7de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7d0:	4b15      	ldr	r3, [pc, #84]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a14      	ldr	r2, [pc, #80]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7dc:	e005      	b.n	800a7ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a11      	ldr	r2, [pc, #68]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a0e      	ldr	r2, [pc, #56]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a7f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7f6:	f7fa fa17 	bl	8004c28 <HAL_GetTick>
 800a7fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7fc:	e008      	b.n	800a810 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a7fe:	f7fa fa13 	bl	8004c28 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d901      	bls.n	800a810 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e006      	b.n	800a81e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <RCCEx_PLL2_Config+0x15c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0f0      	beq.n	800a7fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	58024400 	.word	0x58024400
 800a82c:	ffff0007 	.word	0xffff0007

0800a830 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a83e:	4b53      	ldr	r3, [pc, #332]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b03      	cmp	r3, #3
 800a848:	d101      	bne.n	800a84e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e099      	b.n	800a982 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a84e:	4b4f      	ldr	r3, [pc, #316]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a4e      	ldr	r2, [pc, #312]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a85a:	f7fa f9e5 	bl	8004c28 <HAL_GetTick>
 800a85e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a860:	e008      	b.n	800a874 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a862:	f7fa f9e1 	bl	8004c28 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d901      	bls.n	800a874 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e086      	b.n	800a982 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a874:	4b45      	ldr	r3, [pc, #276]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1f0      	bne.n	800a862 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a880:	4b42      	ldr	r3, [pc, #264]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a884:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	051b      	lsls	r3, r3, #20
 800a88e:	493f      	ldr	r1, [pc, #252]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a890:	4313      	orrs	r3, r2
 800a892:	628b      	str	r3, [r1, #40]	; 0x28
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	3b01      	subs	r3, #1
 800a89a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	025b      	lsls	r3, r3, #9
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	041b      	lsls	r3, r3, #16
 800a8b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8b6:	431a      	orrs	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	061b      	lsls	r3, r3, #24
 800a8c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8c4:	4931      	ldr	r1, [pc, #196]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8ca:	4b30      	ldr	r3, [pc, #192]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	492d      	ldr	r1, [pc, #180]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8dc:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	4928      	ldr	r1, [pc, #160]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8ee:	4b27      	ldr	r3, [pc, #156]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4a26      	ldr	r2, [pc, #152]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a8fa:	4b24      	ldr	r3, [pc, #144]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a8fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8fe:	4b24      	ldr	r3, [pc, #144]	; (800a990 <RCCEx_PLL3_Config+0x160>)
 800a900:	4013      	ands	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	69d2      	ldr	r2, [r2, #28]
 800a906:	00d2      	lsls	r2, r2, #3
 800a908:	4920      	ldr	r1, [pc, #128]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a90e:	4b1f      	ldr	r3, [pc, #124]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	4a1e      	ldr	r2, [pc, #120]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d106      	bne.n	800a92e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a920:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	4a19      	ldr	r2, [pc, #100]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a92a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a92c:	e00f      	b.n	800a94e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d106      	bne.n	800a942 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a934:	4b15      	ldr	r3, [pc, #84]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	4a14      	ldr	r2, [pc, #80]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a93a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a93e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a940:	e005      	b.n	800a94e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a942:	4b12      	ldr	r3, [pc, #72]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	4a11      	ldr	r2, [pc, #68]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a94c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a0e      	ldr	r2, [pc, #56]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a95a:	f7fa f965 	bl	8004c28 <HAL_GetTick>
 800a95e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a960:	e008      	b.n	800a974 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a962:	f7fa f961 	bl	8004c28 <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d901      	bls.n	800a974 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a970:	2303      	movs	r3, #3
 800a972:	e006      	b.n	800a982 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <RCCEx_PLL3_Config+0x15c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0f0      	beq.n	800a962 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	58024400 	.word	0x58024400
 800a990:	ffff0007 	.word	0xffff0007

0800a994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e049      	b.n	800aa3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7f9 fa54 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f000 feb8 	bl	800b748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d001      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e05e      	b.n	800ab1a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a2b      	ldr	r2, [pc, #172]	; (800ab28 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d02c      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa86:	d027      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a27      	ldr	r2, [pc, #156]	; (800ab2c <HAL_TIM_Base_Start_IT+0xe8>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d022      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a26      	ldr	r2, [pc, #152]	; (800ab30 <HAL_TIM_Base_Start_IT+0xec>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d01d      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a24      	ldr	r2, [pc, #144]	; (800ab34 <HAL_TIM_Base_Start_IT+0xf0>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d018      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a23      	ldr	r2, [pc, #140]	; (800ab38 <HAL_TIM_Base_Start_IT+0xf4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d013      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a21      	ldr	r2, [pc, #132]	; (800ab3c <HAL_TIM_Base_Start_IT+0xf8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00e      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a20      	ldr	r2, [pc, #128]	; (800ab40 <HAL_TIM_Base_Start_IT+0xfc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d009      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1e      	ldr	r2, [pc, #120]	; (800ab44 <HAL_TIM_Base_Start_IT+0x100>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <HAL_TIM_Base_Start_IT+0x94>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1d      	ldr	r2, [pc, #116]	; (800ab48 <HAL_TIM_Base_Start_IT+0x104>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d115      	bne.n	800ab04 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <HAL_TIM_Base_Start_IT+0x108>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b06      	cmp	r3, #6
 800aae8:	d015      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0xd2>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	d011      	beq.n	800ab16 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f042 0201 	orr.w	r2, r2, #1
 800ab00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab02:	e008      	b.n	800ab16 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e000      	b.n	800ab18 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40010000 	.word	0x40010000
 800ab2c:	40000400 	.word	0x40000400
 800ab30:	40000800 	.word	0x40000800
 800ab34:	40000c00 	.word	0x40000c00
 800ab38:	40010400 	.word	0x40010400
 800ab3c:	40001800 	.word	0x40001800
 800ab40:	40014000 	.word	0x40014000
 800ab44:	4000e000 	.word	0x4000e000
 800ab48:	4000e400 	.word	0x4000e400
 800ab4c:	00010007 	.word	0x00010007

0800ab50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e049      	b.n	800abf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d106      	bne.n	800ab7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7f9 faae 	bl	80040d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f000 fdda 	bl	800b748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d109      	bne.n	800ac24 <HAL_TIM_PWM_Start+0x24>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	bf14      	ite	ne
 800ac1c:	2301      	movne	r3, #1
 800ac1e:	2300      	moveq	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	e03c      	b.n	800ac9e <HAL_TIM_PWM_Start+0x9e>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d109      	bne.n	800ac3e <HAL_TIM_PWM_Start+0x3e>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e02f      	b.n	800ac9e <HAL_TIM_PWM_Start+0x9e>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d109      	bne.n	800ac58 <HAL_TIM_PWM_Start+0x58>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	e022      	b.n	800ac9e <HAL_TIM_PWM_Start+0x9e>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b0c      	cmp	r3, #12
 800ac5c:	d109      	bne.n	800ac72 <HAL_TIM_PWM_Start+0x72>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	bf14      	ite	ne
 800ac6a:	2301      	movne	r3, #1
 800ac6c:	2300      	moveq	r3, #0
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	e015      	b.n	800ac9e <HAL_TIM_PWM_Start+0x9e>
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	2b10      	cmp	r3, #16
 800ac76:	d109      	bne.n	800ac8c <HAL_TIM_PWM_Start+0x8c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	e008      	b.n	800ac9e <HAL_TIM_PWM_Start+0x9e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	bf14      	ite	ne
 800ac98:	2301      	movne	r3, #1
 800ac9a:	2300      	moveq	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e0ab      	b.n	800adfe <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d104      	bne.n	800acb6 <HAL_TIM_PWM_Start+0xb6>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acb4:	e023      	b.n	800acfe <HAL_TIM_PWM_Start+0xfe>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d104      	bne.n	800acc6 <HAL_TIM_PWM_Start+0xc6>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2202      	movs	r2, #2
 800acc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acc4:	e01b      	b.n	800acfe <HAL_TIM_PWM_Start+0xfe>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d104      	bne.n	800acd6 <HAL_TIM_PWM_Start+0xd6>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2202      	movs	r2, #2
 800acd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acd4:	e013      	b.n	800acfe <HAL_TIM_PWM_Start+0xfe>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b0c      	cmp	r3, #12
 800acda:	d104      	bne.n	800ace6 <HAL_TIM_PWM_Start+0xe6>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ace4:	e00b      	b.n	800acfe <HAL_TIM_PWM_Start+0xfe>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b10      	cmp	r3, #16
 800acea:	d104      	bne.n	800acf6 <HAL_TIM_PWM_Start+0xf6>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acf4:	e003      	b.n	800acfe <HAL_TIM_PWM_Start+0xfe>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2202      	movs	r2, #2
 800acfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2201      	movs	r2, #1
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 f938 	bl	800bf7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a3d      	ldr	r2, [pc, #244]	; (800ae08 <HAL_TIM_PWM_Start+0x208>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x13e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a3c      	ldr	r2, [pc, #240]	; (800ae0c <HAL_TIM_PWM_Start+0x20c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00e      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x13e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a3a      	ldr	r2, [pc, #232]	; (800ae10 <HAL_TIM_PWM_Start+0x210>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d009      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x13e>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a39      	ldr	r2, [pc, #228]	; (800ae14 <HAL_TIM_PWM_Start+0x214>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d004      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x13e>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a37      	ldr	r2, [pc, #220]	; (800ae18 <HAL_TIM_PWM_Start+0x218>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d101      	bne.n	800ad42 <HAL_TIM_PWM_Start+0x142>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e000      	b.n	800ad44 <HAL_TIM_PWM_Start+0x144>
 800ad42:	2300      	movs	r3, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d007      	beq.n	800ad58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a2a      	ldr	r2, [pc, #168]	; (800ae08 <HAL_TIM_PWM_Start+0x208>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d02c      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad6a:	d027      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <HAL_TIM_PWM_Start+0x21c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d022      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a29      	ldr	r2, [pc, #164]	; (800ae20 <HAL_TIM_PWM_Start+0x220>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d01d      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a27      	ldr	r2, [pc, #156]	; (800ae24 <HAL_TIM_PWM_Start+0x224>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d018      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a1f      	ldr	r2, [pc, #124]	; (800ae0c <HAL_TIM_PWM_Start+0x20c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d013      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a23      	ldr	r2, [pc, #140]	; (800ae28 <HAL_TIM_PWM_Start+0x228>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d00e      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a1b      	ldr	r2, [pc, #108]	; (800ae10 <HAL_TIM_PWM_Start+0x210>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d009      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a1f      	ldr	r2, [pc, #124]	; (800ae2c <HAL_TIM_PWM_Start+0x22c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d004      	beq.n	800adbc <HAL_TIM_PWM_Start+0x1bc>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <HAL_TIM_PWM_Start+0x230>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d115      	bne.n	800ade8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <HAL_TIM_PWM_Start+0x234>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b06      	cmp	r3, #6
 800adcc:	d015      	beq.n	800adfa <HAL_TIM_PWM_Start+0x1fa>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add4:	d011      	beq.n	800adfa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f042 0201 	orr.w	r2, r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade6:	e008      	b.n	800adfa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f042 0201 	orr.w	r2, r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	e000      	b.n	800adfc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40010400 	.word	0x40010400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40014400 	.word	0x40014400
 800ae18:	40014800 	.word	0x40014800
 800ae1c:	40000400 	.word	0x40000400
 800ae20:	40000800 	.word	0x40000800
 800ae24:	40000c00 	.word	0x40000c00
 800ae28:	40001800 	.word	0x40001800
 800ae2c:	4000e000 	.word	0x4000e000
 800ae30:	4000e400 	.word	0x4000e400
 800ae34:	00010007 	.word	0x00010007

0800ae38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e08f      	b.n	800af6c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7f9 f847 	bl	8003ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6899      	ldr	r1, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	4b3e      	ldr	r3, [pc, #248]	; (800af74 <HAL_TIM_Encoder_Init+0x13c>)
 800ae7a:	400b      	ands	r3, r1
 800ae7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f000 fc5d 	bl	800b748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	4b31      	ldr	r3, [pc, #196]	; (800af78 <HAL_TIM_Encoder_Init+0x140>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	021b      	lsls	r3, r3, #8
 800aec2:	4313      	orrs	r3, r2
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4b2b      	ldr	r3, [pc, #172]	; (800af7c <HAL_TIM_Encoder_Init+0x144>)
 800aece:	4013      	ands	r3, r2
 800aed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <HAL_TIM_Encoder_Init+0x148>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	021b      	lsls	r3, r3, #8
 800aee4:	4313      	orrs	r3, r2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	011a      	lsls	r2, r3, #4
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	031b      	lsls	r3, r3, #12
 800aef8:	4313      	orrs	r3, r2
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	4313      	orrs	r3, r2
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	fffebff8 	.word	0xfffebff8
 800af78:	fffffcfc 	.word	0xfffffcfc
 800af7c:	fffff3f3 	.word	0xfffff3f3
 800af80:	ffff0f0f 	.word	0xffff0f0f

0800af84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d110      	bne.n	800afd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d102      	bne.n	800afc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afba:	7b7b      	ldrb	r3, [r7, #13]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d001      	beq.n	800afc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e069      	b.n	800b098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd4:	e031      	b.n	800b03a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d110      	bne.n	800affe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d102      	bne.n	800afe8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afe2:	7b3b      	ldrb	r3, [r7, #12]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d001      	beq.n	800afec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e055      	b.n	800b098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800affc:	e01d      	b.n	800b03a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d108      	bne.n	800b016 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d105      	bne.n	800b016 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b00a:	7b7b      	ldrb	r3, [r7, #13]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d102      	bne.n	800b016 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b010:	7b3b      	ldrb	r3, [r7, #12]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d001      	beq.n	800b01a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e03e      	b.n	800b098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2202      	movs	r2, #2
 800b01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2202      	movs	r2, #2
 800b02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2202      	movs	r2, #2
 800b036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <HAL_TIM_Encoder_Start+0xc4>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b04      	cmp	r3, #4
 800b044:	d008      	beq.n	800b058 <HAL_TIM_Encoder_Start+0xd4>
 800b046:	e00f      	b.n	800b068 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2201      	movs	r2, #1
 800b04e:	2100      	movs	r1, #0
 800b050:	4618      	mov	r0, r3
 800b052:	f000 ff93 	bl	800bf7c <TIM_CCxChannelCmd>
      break;
 800b056:	e016      	b.n	800b086 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2201      	movs	r2, #1
 800b05e:	2104      	movs	r1, #4
 800b060:	4618      	mov	r0, r3
 800b062:	f000 ff8b 	bl	800bf7c <TIM_CCxChannelCmd>
      break;
 800b066:	e00e      	b.n	800b086 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2201      	movs	r2, #1
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f000 ff83 	bl	800bf7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2201      	movs	r2, #1
 800b07c:	2104      	movs	r1, #4
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 ff7c 	bl	800bf7c <TIM_CCxChannelCmd>
      break;
 800b084:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d122      	bne.n	800b0fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f003 0302 	and.w	r3, r3, #2
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d11b      	bne.n	800b0fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f06f 0202 	mvn.w	r2, #2
 800b0cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fb12 	bl	800b70c <HAL_TIM_IC_CaptureCallback>
 800b0e8:	e005      	b.n	800b0f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fb04 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fb15 	bl	800b720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0304 	and.w	r3, r3, #4
 800b106:	2b04      	cmp	r3, #4
 800b108:	d122      	bne.n	800b150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b04      	cmp	r3, #4
 800b116:	d11b      	bne.n	800b150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f06f 0204 	mvn.w	r2, #4
 800b120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2202      	movs	r2, #2
 800b126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fae8 	bl	800b70c <HAL_TIM_IC_CaptureCallback>
 800b13c:	e005      	b.n	800b14a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fada 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 faeb 	bl	800b720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d122      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	f003 0308 	and.w	r3, r3, #8
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d11b      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f06f 0208 	mvn.w	r2, #8
 800b174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2204      	movs	r2, #4
 800b17a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fabe 	bl	800b70c <HAL_TIM_IC_CaptureCallback>
 800b190:	e005      	b.n	800b19e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fab0 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fac1 	bl	800b720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0310 	and.w	r3, r3, #16
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d122      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0310 	and.w	r3, r3, #16
 800b1bc:	2b10      	cmp	r3, #16
 800b1be:	d11b      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f06f 0210 	mvn.w	r2, #16
 800b1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2208      	movs	r2, #8
 800b1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa94 	bl	800b70c <HAL_TIM_IC_CaptureCallback>
 800b1e4:	e005      	b.n	800b1f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fa86 	bl	800b6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fa97 	bl	800b720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b01      	cmp	r3, #1
 800b204:	d10e      	bne.n	800b224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b01      	cmp	r3, #1
 800b212:	d107      	bne.n	800b224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0201 	mvn.w	r2, #1
 800b21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7f9 fa6a 	bl	80046f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22e:	2b80      	cmp	r3, #128	; 0x80
 800b230:	d10e      	bne.n	800b250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23c:	2b80      	cmp	r3, #128	; 0x80
 800b23e:	d107      	bne.n	800b250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 f802 	bl	800c254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b25e:	d10e      	bne.n	800b27e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b26a:	2b80      	cmp	r3, #128	; 0x80
 800b26c:	d107      	bne.n	800b27e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fff5 	bl	800c268 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b288:	2b40      	cmp	r3, #64	; 0x40
 800b28a:	d10e      	bne.n	800b2aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b296:	2b40      	cmp	r3, #64	; 0x40
 800b298:	d107      	bne.n	800b2aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fa45 	bl	800b734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	f003 0320 	and.w	r3, r3, #32
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d10e      	bne.n	800b2d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b20      	cmp	r3, #32
 800b2c4:	d107      	bne.n	800b2d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f06f 0220 	mvn.w	r2, #32
 800b2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 ffb5 	bl	800c240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d101      	bne.n	800b2fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e0ff      	b.n	800b4fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b14      	cmp	r3, #20
 800b30a:	f200 80f0 	bhi.w	800b4ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b369 	.word	0x0800b369
 800b318:	0800b4ef 	.word	0x0800b4ef
 800b31c:	0800b4ef 	.word	0x0800b4ef
 800b320:	0800b4ef 	.word	0x0800b4ef
 800b324:	0800b3a9 	.word	0x0800b3a9
 800b328:	0800b4ef 	.word	0x0800b4ef
 800b32c:	0800b4ef 	.word	0x0800b4ef
 800b330:	0800b4ef 	.word	0x0800b4ef
 800b334:	0800b3eb 	.word	0x0800b3eb
 800b338:	0800b4ef 	.word	0x0800b4ef
 800b33c:	0800b4ef 	.word	0x0800b4ef
 800b340:	0800b4ef 	.word	0x0800b4ef
 800b344:	0800b42b 	.word	0x0800b42b
 800b348:	0800b4ef 	.word	0x0800b4ef
 800b34c:	0800b4ef 	.word	0x0800b4ef
 800b350:	0800b4ef 	.word	0x0800b4ef
 800b354:	0800b46d 	.word	0x0800b46d
 800b358:	0800b4ef 	.word	0x0800b4ef
 800b35c:	0800b4ef 	.word	0x0800b4ef
 800b360:	0800b4ef 	.word	0x0800b4ef
 800b364:	0800b4ad 	.word	0x0800b4ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68b9      	ldr	r1, [r7, #8]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fa90 	bl	800b894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699a      	ldr	r2, [r3, #24]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f042 0208 	orr.w	r2, r2, #8
 800b382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	699a      	ldr	r2, [r3, #24]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f022 0204 	bic.w	r2, r2, #4
 800b392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6999      	ldr	r1, [r3, #24]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	691a      	ldr	r2, [r3, #16]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	619a      	str	r2, [r3, #24]
      break;
 800b3a6:	e0a5      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68b9      	ldr	r1, [r7, #8]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 fb00 	bl	800b9b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	699a      	ldr	r2, [r3, #24]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6999      	ldr	r1, [r3, #24]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	021a      	lsls	r2, r3, #8
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	619a      	str	r2, [r3, #24]
      break;
 800b3e8:	e084      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68b9      	ldr	r1, [r7, #8]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fb69 	bl	800bac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69da      	ldr	r2, [r3, #28]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0208 	orr.w	r2, r2, #8
 800b404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69da      	ldr	r2, [r3, #28]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f022 0204 	bic.w	r2, r2, #4
 800b414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	69d9      	ldr	r1, [r3, #28]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	61da      	str	r2, [r3, #28]
      break;
 800b428:	e064      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fbd1 	bl	800bbd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	69da      	ldr	r2, [r3, #28]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	69d9      	ldr	r1, [r3, #28]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	021a      	lsls	r2, r3, #8
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	430a      	orrs	r2, r1
 800b468:	61da      	str	r2, [r3, #28]
      break;
 800b46a:	e043      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	4618      	mov	r0, r3
 800b474:	f000 fc1a 	bl	800bcac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0208 	orr.w	r2, r2, #8
 800b486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 0204 	bic.w	r2, r2, #4
 800b496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	691a      	ldr	r2, [r3, #16]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4aa:	e023      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68b9      	ldr	r1, [r7, #8]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fc5e 	bl	800bd74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	021a      	lsls	r2, r3, #8
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4ec:	e002      	b.n	800b4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop

0800b508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d101      	bne.n	800b524 <HAL_TIM_ConfigClockSource+0x1c>
 800b520:	2302      	movs	r3, #2
 800b522:	e0dc      	b.n	800b6de <HAL_TIM_ConfigClockSource+0x1d6>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4b6a      	ldr	r3, [pc, #424]	; (800b6e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b540:	4013      	ands	r3, r2
 800b542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b54a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a64      	ldr	r2, [pc, #400]	; (800b6ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	f000 80a9 	beq.w	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b560:	4a62      	ldr	r2, [pc, #392]	; (800b6ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f200 80ae 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b568:	4a61      	ldr	r2, [pc, #388]	; (800b6f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	f000 80a1 	beq.w	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b570:	4a5f      	ldr	r2, [pc, #380]	; (800b6f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	f200 80a6 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b578:	4a5e      	ldr	r2, [pc, #376]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	f000 8099 	beq.w	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b580:	4a5c      	ldr	r2, [pc, #368]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b582:	4293      	cmp	r3, r2
 800b584:	f200 809e 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b588:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b58c:	f000 8091 	beq.w	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b590:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b594:	f200 8096 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b59c:	f000 8089 	beq.w	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a4:	f200 808e 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ac:	d03e      	beq.n	800b62c <HAL_TIM_ConfigClockSource+0x124>
 800b5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b2:	f200 8087 	bhi.w	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ba:	f000 8086 	beq.w	800b6ca <HAL_TIM_ConfigClockSource+0x1c2>
 800b5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c2:	d87f      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5c4:	2b70      	cmp	r3, #112	; 0x70
 800b5c6:	d01a      	beq.n	800b5fe <HAL_TIM_ConfigClockSource+0xf6>
 800b5c8:	2b70      	cmp	r3, #112	; 0x70
 800b5ca:	d87b      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5cc:	2b60      	cmp	r3, #96	; 0x60
 800b5ce:	d050      	beq.n	800b672 <HAL_TIM_ConfigClockSource+0x16a>
 800b5d0:	2b60      	cmp	r3, #96	; 0x60
 800b5d2:	d877      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d4:	2b50      	cmp	r3, #80	; 0x50
 800b5d6:	d03c      	beq.n	800b652 <HAL_TIM_ConfigClockSource+0x14a>
 800b5d8:	2b50      	cmp	r3, #80	; 0x50
 800b5da:	d873      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5dc:	2b40      	cmp	r3, #64	; 0x40
 800b5de:	d058      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x18a>
 800b5e0:	2b40      	cmp	r3, #64	; 0x40
 800b5e2:	d86f      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5e4:	2b30      	cmp	r3, #48	; 0x30
 800b5e6:	d064      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5e8:	2b30      	cmp	r3, #48	; 0x30
 800b5ea:	d86b      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d060      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	d867      	bhi.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d05c      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f8:	2b10      	cmp	r3, #16
 800b5fa:	d05a      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5fc:	e062      	b.n	800b6c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	6899      	ldr	r1, [r3, #8]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f000 fc95 	bl	800bf3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	609a      	str	r2, [r3, #8]
      break;
 800b62a:	e04f      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	6899      	ldr	r1, [r3, #8]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f000 fc7e 	bl	800bf3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689a      	ldr	r2, [r3, #8]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b64e:	609a      	str	r2, [r3, #8]
      break;
 800b650:	e03c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6859      	ldr	r1, [r3, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	f000 fbee 	bl	800be40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2150      	movs	r1, #80	; 0x50
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fc48 	bl	800bf00 <TIM_ITRx_SetConfig>
      break;
 800b670:	e02c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6859      	ldr	r1, [r3, #4]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	461a      	mov	r2, r3
 800b680:	f000 fc0d 	bl	800be9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2160      	movs	r1, #96	; 0x60
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fc38 	bl	800bf00 <TIM_ITRx_SetConfig>
      break;
 800b690:	e01c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6818      	ldr	r0, [r3, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	6859      	ldr	r1, [r3, #4]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f000 fbce 	bl	800be40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2140      	movs	r1, #64	; 0x40
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fc28 	bl	800bf00 <TIM_ITRx_SetConfig>
      break;
 800b6b0:	e00c      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f000 fc1f 	bl	800bf00 <TIM_ITRx_SetConfig>
      break;
 800b6c2:	e003      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c8:	e000      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b6ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	ffceff88 	.word	0xffceff88
 800b6ec:	00100040 	.word	0x00100040
 800b6f0:	00100030 	.word	0x00100030
 800b6f4:	00100020 	.word	0x00100020

0800b6f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a44      	ldr	r2, [pc, #272]	; (800b86c <TIM_Base_SetConfig+0x124>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d013      	beq.n	800b788 <TIM_Base_SetConfig+0x40>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b766:	d00f      	beq.n	800b788 <TIM_Base_SetConfig+0x40>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a41      	ldr	r2, [pc, #260]	; (800b870 <TIM_Base_SetConfig+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d00b      	beq.n	800b788 <TIM_Base_SetConfig+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a40      	ldr	r2, [pc, #256]	; (800b874 <TIM_Base_SetConfig+0x12c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d007      	beq.n	800b788 <TIM_Base_SetConfig+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a3f      	ldr	r2, [pc, #252]	; (800b878 <TIM_Base_SetConfig+0x130>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d003      	beq.n	800b788 <TIM_Base_SetConfig+0x40>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a3e      	ldr	r2, [pc, #248]	; (800b87c <TIM_Base_SetConfig+0x134>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d108      	bne.n	800b79a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a33      	ldr	r2, [pc, #204]	; (800b86c <TIM_Base_SetConfig+0x124>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d027      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a8:	d023      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a30      	ldr	r2, [pc, #192]	; (800b870 <TIM_Base_SetConfig+0x128>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d01f      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a2f      	ldr	r2, [pc, #188]	; (800b874 <TIM_Base_SetConfig+0x12c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d01b      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a2e      	ldr	r2, [pc, #184]	; (800b878 <TIM_Base_SetConfig+0x130>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d017      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2d      	ldr	r2, [pc, #180]	; (800b87c <TIM_Base_SetConfig+0x134>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d013      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a2c      	ldr	r2, [pc, #176]	; (800b880 <TIM_Base_SetConfig+0x138>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d00f      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a2b      	ldr	r2, [pc, #172]	; (800b884 <TIM_Base_SetConfig+0x13c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00b      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a2a      	ldr	r2, [pc, #168]	; (800b888 <TIM_Base_SetConfig+0x140>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d007      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a29      	ldr	r2, [pc, #164]	; (800b88c <TIM_Base_SetConfig+0x144>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d003      	beq.n	800b7f2 <TIM_Base_SetConfig+0xaa>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a28      	ldr	r2, [pc, #160]	; (800b890 <TIM_Base_SetConfig+0x148>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d108      	bne.n	800b804 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a10      	ldr	r2, [pc, #64]	; (800b86c <TIM_Base_SetConfig+0x124>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00f      	beq.n	800b850 <TIM_Base_SetConfig+0x108>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a12      	ldr	r2, [pc, #72]	; (800b87c <TIM_Base_SetConfig+0x134>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00b      	beq.n	800b850 <TIM_Base_SetConfig+0x108>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a11      	ldr	r2, [pc, #68]	; (800b880 <TIM_Base_SetConfig+0x138>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d007      	beq.n	800b850 <TIM_Base_SetConfig+0x108>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a10      	ldr	r2, [pc, #64]	; (800b884 <TIM_Base_SetConfig+0x13c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d003      	beq.n	800b850 <TIM_Base_SetConfig+0x108>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a0f      	ldr	r2, [pc, #60]	; (800b888 <TIM_Base_SetConfig+0x140>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d103      	bne.n	800b858 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	691a      	ldr	r2, [r3, #16]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	615a      	str	r2, [r3, #20]
}
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	40010000 	.word	0x40010000
 800b870:	40000400 	.word	0x40000400
 800b874:	40000800 	.word	0x40000800
 800b878:	40000c00 	.word	0x40000c00
 800b87c:	40010400 	.word	0x40010400
 800b880:	40014000 	.word	0x40014000
 800b884:	40014400 	.word	0x40014400
 800b888:	40014800 	.word	0x40014800
 800b88c:	4000e000 	.word	0x4000e000
 800b890:	4000e400 	.word	0x4000e400

0800b894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	f023 0201 	bic.w	r2, r3, #1
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4b37      	ldr	r3, [pc, #220]	; (800b99c <TIM_OC1_SetConfig+0x108>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f023 0302 	bic.w	r3, r3, #2
 800b8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a2d      	ldr	r2, [pc, #180]	; (800b9a0 <TIM_OC1_SetConfig+0x10c>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_OC1_SetConfig+0x7c>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a2c      	ldr	r2, [pc, #176]	; (800b9a4 <TIM_OC1_SetConfig+0x110>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_OC1_SetConfig+0x7c>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a2b      	ldr	r2, [pc, #172]	; (800b9a8 <TIM_OC1_SetConfig+0x114>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_OC1_SetConfig+0x7c>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a2a      	ldr	r2, [pc, #168]	; (800b9ac <TIM_OC1_SetConfig+0x118>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_OC1_SetConfig+0x7c>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a29      	ldr	r2, [pc, #164]	; (800b9b0 <TIM_OC1_SetConfig+0x11c>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d10c      	bne.n	800b92a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f023 0308 	bic.w	r3, r3, #8
 800b916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	4313      	orrs	r3, r2
 800b920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f023 0304 	bic.w	r3, r3, #4
 800b928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a1c      	ldr	r2, [pc, #112]	; (800b9a0 <TIM_OC1_SetConfig+0x10c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00f      	beq.n	800b952 <TIM_OC1_SetConfig+0xbe>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <TIM_OC1_SetConfig+0x110>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00b      	beq.n	800b952 <TIM_OC1_SetConfig+0xbe>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <TIM_OC1_SetConfig+0x114>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d007      	beq.n	800b952 <TIM_OC1_SetConfig+0xbe>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a19      	ldr	r2, [pc, #100]	; (800b9ac <TIM_OC1_SetConfig+0x118>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d003      	beq.n	800b952 <TIM_OC1_SetConfig+0xbe>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a18      	ldr	r2, [pc, #96]	; (800b9b0 <TIM_OC1_SetConfig+0x11c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d111      	bne.n	800b976 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	4313      	orrs	r3, r2
 800b974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	621a      	str	r2, [r3, #32]
}
 800b990:	bf00      	nop
 800b992:	371c      	adds	r7, #28
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	fffeff8f 	.word	0xfffeff8f
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	40010400 	.word	0x40010400
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	40014400 	.word	0x40014400
 800b9b0:	40014800 	.word	0x40014800

0800b9b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	f023 0210 	bic.w	r2, r3, #16
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	4b34      	ldr	r3, [pc, #208]	; (800bab0 <TIM_OC2_SetConfig+0xfc>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	021b      	lsls	r3, r3, #8
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f023 0320 	bic.w	r3, r3, #32
 800b9fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a29      	ldr	r2, [pc, #164]	; (800bab4 <TIM_OC2_SetConfig+0x100>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d003      	beq.n	800ba1c <TIM_OC2_SetConfig+0x68>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a28      	ldr	r2, [pc, #160]	; (800bab8 <TIM_OC2_SetConfig+0x104>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d10d      	bne.n	800ba38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	011b      	lsls	r3, r3, #4
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a1e      	ldr	r2, [pc, #120]	; (800bab4 <TIM_OC2_SetConfig+0x100>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00f      	beq.n	800ba60 <TIM_OC2_SetConfig+0xac>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a1d      	ldr	r2, [pc, #116]	; (800bab8 <TIM_OC2_SetConfig+0x104>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00b      	beq.n	800ba60 <TIM_OC2_SetConfig+0xac>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a1c      	ldr	r2, [pc, #112]	; (800babc <TIM_OC2_SetConfig+0x108>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d007      	beq.n	800ba60 <TIM_OC2_SetConfig+0xac>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <TIM_OC2_SetConfig+0x10c>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d003      	beq.n	800ba60 <TIM_OC2_SetConfig+0xac>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1a      	ldr	r2, [pc, #104]	; (800bac4 <TIM_OC2_SetConfig+0x110>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d113      	bne.n	800ba88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	621a      	str	r2, [r3, #32]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	feff8fff 	.word	0xfeff8fff
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40010400 	.word	0x40010400
 800babc:	40014000 	.word	0x40014000
 800bac0:	40014400 	.word	0x40014400
 800bac4:	40014800 	.word	0x40014800

0800bac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4b33      	ldr	r3, [pc, #204]	; (800bbc0 <TIM_OC3_SetConfig+0xf8>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 0303 	bic.w	r3, r3, #3
 800bafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a28      	ldr	r2, [pc, #160]	; (800bbc4 <TIM_OC3_SetConfig+0xfc>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d003      	beq.n	800bb2e <TIM_OC3_SetConfig+0x66>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a27      	ldr	r2, [pc, #156]	; (800bbc8 <TIM_OC3_SetConfig+0x100>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d10d      	bne.n	800bb4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a1d      	ldr	r2, [pc, #116]	; (800bbc4 <TIM_OC3_SetConfig+0xfc>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d00f      	beq.n	800bb72 <TIM_OC3_SetConfig+0xaa>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a1c      	ldr	r2, [pc, #112]	; (800bbc8 <TIM_OC3_SetConfig+0x100>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00b      	beq.n	800bb72 <TIM_OC3_SetConfig+0xaa>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a1b      	ldr	r2, [pc, #108]	; (800bbcc <TIM_OC3_SetConfig+0x104>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d007      	beq.n	800bb72 <TIM_OC3_SetConfig+0xaa>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a1a      	ldr	r2, [pc, #104]	; (800bbd0 <TIM_OC3_SetConfig+0x108>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d003      	beq.n	800bb72 <TIM_OC3_SetConfig+0xaa>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a19      	ldr	r2, [pc, #100]	; (800bbd4 <TIM_OC3_SetConfig+0x10c>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d113      	bne.n	800bb9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	621a      	str	r2, [r3, #32]
}
 800bbb4:	bf00      	nop
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	fffeff8f 	.word	0xfffeff8f
 800bbc4:	40010000 	.word	0x40010000
 800bbc8:	40010400 	.word	0x40010400
 800bbcc:	40014000 	.word	0x40014000
 800bbd0:	40014400 	.word	0x40014400
 800bbd4:	40014800 	.word	0x40014800

0800bbd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <TIM_OC4_SetConfig+0xbc>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	031b      	lsls	r3, r3, #12
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a19      	ldr	r2, [pc, #100]	; (800bc98 <TIM_OC4_SetConfig+0xc0>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00f      	beq.n	800bc58 <TIM_OC4_SetConfig+0x80>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a18      	ldr	r2, [pc, #96]	; (800bc9c <TIM_OC4_SetConfig+0xc4>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00b      	beq.n	800bc58 <TIM_OC4_SetConfig+0x80>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a17      	ldr	r2, [pc, #92]	; (800bca0 <TIM_OC4_SetConfig+0xc8>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d007      	beq.n	800bc58 <TIM_OC4_SetConfig+0x80>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a16      	ldr	r2, [pc, #88]	; (800bca4 <TIM_OC4_SetConfig+0xcc>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d003      	beq.n	800bc58 <TIM_OC4_SetConfig+0x80>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <TIM_OC4_SetConfig+0xd0>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d109      	bne.n	800bc6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	019b      	lsls	r3, r3, #6
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	621a      	str	r2, [r3, #32]
}
 800bc86:	bf00      	nop
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	feff8fff 	.word	0xfeff8fff
 800bc98:	40010000 	.word	0x40010000
 800bc9c:	40010400 	.word	0x40010400
 800bca0:	40014000 	.word	0x40014000
 800bca4:	40014400 	.word	0x40014400
 800bca8:	40014800 	.word	0x40014800

0800bcac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4b21      	ldr	r3, [pc, #132]	; (800bd5c <TIM_OC5_SetConfig+0xb0>)
 800bcd8:	4013      	ands	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bcec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	041b      	lsls	r3, r3, #16
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a18      	ldr	r2, [pc, #96]	; (800bd60 <TIM_OC5_SetConfig+0xb4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d00f      	beq.n	800bd22 <TIM_OC5_SetConfig+0x76>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a17      	ldr	r2, [pc, #92]	; (800bd64 <TIM_OC5_SetConfig+0xb8>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00b      	beq.n	800bd22 <TIM_OC5_SetConfig+0x76>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a16      	ldr	r2, [pc, #88]	; (800bd68 <TIM_OC5_SetConfig+0xbc>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d007      	beq.n	800bd22 <TIM_OC5_SetConfig+0x76>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <TIM_OC5_SetConfig+0xc0>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d003      	beq.n	800bd22 <TIM_OC5_SetConfig+0x76>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a14      	ldr	r2, [pc, #80]	; (800bd70 <TIM_OC5_SetConfig+0xc4>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d109      	bne.n	800bd36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	021b      	lsls	r3, r3, #8
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	621a      	str	r2, [r3, #32]
}
 800bd50:	bf00      	nop
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	fffeff8f 	.word	0xfffeff8f
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40010400 	.word	0x40010400
 800bd68:	40014000 	.word	0x40014000
 800bd6c:	40014400 	.word	0x40014400
 800bd70:	40014800 	.word	0x40014800

0800bd74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4b22      	ldr	r3, [pc, #136]	; (800be28 <TIM_OC6_SetConfig+0xb4>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	021b      	lsls	r3, r3, #8
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bdb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	051b      	lsls	r3, r3, #20
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a19      	ldr	r2, [pc, #100]	; (800be2c <TIM_OC6_SetConfig+0xb8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00f      	beq.n	800bdec <TIM_OC6_SetConfig+0x78>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a18      	ldr	r2, [pc, #96]	; (800be30 <TIM_OC6_SetConfig+0xbc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00b      	beq.n	800bdec <TIM_OC6_SetConfig+0x78>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a17      	ldr	r2, [pc, #92]	; (800be34 <TIM_OC6_SetConfig+0xc0>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d007      	beq.n	800bdec <TIM_OC6_SetConfig+0x78>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a16      	ldr	r2, [pc, #88]	; (800be38 <TIM_OC6_SetConfig+0xc4>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d003      	beq.n	800bdec <TIM_OC6_SetConfig+0x78>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a15      	ldr	r2, [pc, #84]	; (800be3c <TIM_OC6_SetConfig+0xc8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d109      	bne.n	800be00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	029b      	lsls	r3, r3, #10
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	621a      	str	r2, [r3, #32]
}
 800be1a:	bf00      	nop
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	feff8fff 	.word	0xfeff8fff
 800be2c:	40010000 	.word	0x40010000
 800be30:	40010400 	.word	0x40010400
 800be34:	40014000 	.word	0x40014000
 800be38:	40014400 	.word	0x40014400
 800be3c:	40014800 	.word	0x40014800

0800be40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	f023 0201 	bic.w	r2, r3, #1
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	011b      	lsls	r3, r3, #4
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4313      	orrs	r3, r2
 800be74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f023 030a 	bic.w	r3, r3, #10
 800be7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4313      	orrs	r3, r2
 800be84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	621a      	str	r2, [r3, #32]
}
 800be92:	bf00      	nop
 800be94:	371c      	adds	r7, #28
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b087      	sub	sp, #28
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f023 0210 	bic.w	r2, r3, #16
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	031b      	lsls	r3, r3, #12
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800beda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	011b      	lsls	r3, r3, #4
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	621a      	str	r2, [r3, #32]
}
 800bef2:	bf00      	nop
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
	...

0800bf00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <TIM_ITRx_SetConfig+0x38>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	f043 0307 	orr.w	r3, r3, #7
 800bf22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	609a      	str	r2, [r3, #8]
}
 800bf2a:	bf00      	nop
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	ffcfff8f 	.word	0xffcfff8f

0800bf3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	021a      	lsls	r2, r3, #8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	609a      	str	r2, [r3, #8]
}
 800bf70:	bf00      	nop
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	2201      	movs	r2, #1
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1a      	ldr	r2, [r3, #32]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	43db      	mvns	r3, r3
 800bf9e:	401a      	ands	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a1a      	ldr	r2, [r3, #32]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f003 031f 	and.w	r3, r3, #31
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	621a      	str	r2, [r3, #32]
}
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d101      	bne.n	800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e077      	b.n	800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2202      	movs	r2, #2
 800bfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a35      	ldr	r2, [pc, #212]	; (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d004      	beq.n	800c014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a34      	ldr	r2, [pc, #208]	; (800c0e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d108      	bne.n	800c026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c01a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a25      	ldr	r2, [pc, #148]	; (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d02c      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c052:	d027      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a22      	ldr	r2, [pc, #136]	; (800c0e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d022      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a21      	ldr	r2, [pc, #132]	; (800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d01d      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a1f      	ldr	r2, [pc, #124]	; (800c0ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d018      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a1a      	ldr	r2, [pc, #104]	; (800c0e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d013      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a1b      	ldr	r2, [pc, #108]	; (800c0f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d00e      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a1a      	ldr	r2, [pc, #104]	; (800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d009      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a18      	ldr	r2, [pc, #96]	; (800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d004      	beq.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a17      	ldr	r2, [pc, #92]	; (800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d10c      	bne.n	800c0be <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	40010000 	.word	0x40010000
 800c0e0:	40010400 	.word	0x40010400
 800c0e4:	40000400 	.word	0x40000400
 800c0e8:	40000800 	.word	0x40000800
 800c0ec:	40000c00 	.word	0x40000c00
 800c0f0:	40001800 	.word	0x40001800
 800c0f4:	40014000 	.word	0x40014000
 800c0f8:	4000e000 	.word	0x4000e000
 800c0fc:	4000e400 	.word	0x4000e400

0800c100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c118:	2302      	movs	r3, #2
 800c11a:	e087      	b.n	800c22c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	4313      	orrs	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c182:	4313      	orrs	r3, r2
 800c184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	041b      	lsls	r3, r3, #16
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a27      	ldr	r2, [pc, #156]	; (800c238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d004      	beq.n	800c1aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a25      	ldr	r2, [pc, #148]	; (800c23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d106      	bne.n	800c1b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a1e      	ldr	r2, [pc, #120]	; (800c238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d004      	beq.n	800c1cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a1d      	ldr	r2, [pc, #116]	; (800c23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d126      	bne.n	800c21a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	051b      	lsls	r3, r3, #20
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a0e      	ldr	r2, [pc, #56]	; (800c238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d004      	beq.n	800c20c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a0d      	ldr	r2, [pc, #52]	; (800c23c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d106      	bne.n	800c21a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	4313      	orrs	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	40010000 	.word	0x40010000
 800c23c:	40010400 	.word	0x40010400

0800c240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e042      	b.n	800c314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c294:	2b00      	cmp	r3, #0
 800c296:	d106      	bne.n	800c2a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7f7 ffd9 	bl	8004258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2224      	movs	r2, #36	; 0x24
 800c2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f022 0201 	bic.w	r2, r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fd0e 	bl	800cce0 <UART_SetConfig>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d101      	bne.n	800c2ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e022      	b.n	800c314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fb6e 	bl	800d9b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689a      	ldr	r2, [r3, #8]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0201 	orr.w	r2, r2, #1
 800c30a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 fbf5 	bl	800dafc <UART_CheckIdleState>
 800c312:	4603      	mov	r3, r0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e02e      	b.n	800c38c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2224      	movs	r2, #36	; 0x24
 800c332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f022 0201 	bic.w	r2, r2, #1
 800c344:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7f8 f862 	bl	8004428 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b08a      	sub	sp, #40	; 0x28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a8:	2b20      	cmp	r3, #32
 800c3aa:	d17a      	bne.n	800c4a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <HAL_UART_Transmit_DMA+0x24>
 800c3b2:	88fb      	ldrh	r3, [r7, #6]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e073      	b.n	800c4a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d101      	bne.n	800c3ca <HAL_UART_Transmit_DMA+0x36>
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	e06c      	b.n	800c4a4 <HAL_UART_Transmit_DMA+0x110>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	88fa      	ldrh	r2, [r7, #6]
 800c3dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2221      	movs	r2, #33	; 0x21
 800c3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d02c      	beq.n	800c45a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c404:	4a29      	ldr	r2, [pc, #164]	; (800c4ac <HAL_UART_Transmit_DMA+0x118>)
 800c406:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c40c:	4a28      	ldr	r2, [pc, #160]	; (800c4b0 <HAL_UART_Transmit_DMA+0x11c>)
 800c40e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c414:	4a27      	ldr	r2, [pc, #156]	; (800c4b4 <HAL_UART_Transmit_DMA+0x120>)
 800c416:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c41c:	2200      	movs	r2, #0
 800c41e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c428:	4619      	mov	r1, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3328      	adds	r3, #40	; 0x28
 800c430:	461a      	mov	r2, r3
 800c432:	88fb      	ldrh	r3, [r7, #6]
 800c434:	f7f9 fa56 	bl	80058e4 <HAL_DMA_Start_IT>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00d      	beq.n	800c45a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2210      	movs	r2, #16
 800c442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2220      	movs	r2, #32
 800c452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e024      	b.n	800c4a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2240      	movs	r2, #64	; 0x40
 800c460:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	613b      	str	r3, [r7, #16]
   return(result);
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c480:	627b      	str	r3, [r7, #36]	; 0x24
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3308      	adds	r3, #8
 800c488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c48a:	623a      	str	r2, [r7, #32]
 800c48c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	69f9      	ldr	r1, [r7, #28]
 800c490:	6a3a      	ldr	r2, [r7, #32]
 800c492:	e841 2300 	strex	r3, r2, [r1]
 800c496:	61bb      	str	r3, [r7, #24]
   return(result);
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e5      	bne.n	800c46a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e000      	b.n	800c4a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c4a2:	2302      	movs	r3, #2
  }
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3728      	adds	r7, #40	; 0x28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	0800dfc5 	.word	0x0800dfc5
 800c4b0:	0800e05b 	.word	0x0800e05b
 800c4b4:	0800e1d1 	.word	0x0800e1d1

0800c4b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08a      	sub	sp, #40	; 0x28
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d142      	bne.n	800c556 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <HAL_UART_Receive_DMA+0x24>
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d101      	bne.n	800c4e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e03b      	b.n	800c558 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d101      	bne.n	800c4ee <HAL_UART_Receive_DMA+0x36>
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	e034      	b.n	800c558 <HAL_UART_Receive_DMA+0xa0>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a17      	ldr	r2, [pc, #92]	; (800c560 <HAL_UART_Receive_DMA+0xa8>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d01f      	beq.n	800c546 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c510:	2b00      	cmp	r3, #0
 800c512:	d018      	beq.n	800c546 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	e853 3f00 	ldrex	r3, [r3]
 800c520:	613b      	str	r3, [r7, #16]
   return(result);
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	623b      	str	r3, [r7, #32]
 800c534:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c536:	69f9      	ldr	r1, [r7, #28]
 800c538:	6a3a      	ldr	r2, [r7, #32]
 800c53a:	e841 2300 	strex	r3, r2, [r1]
 800c53e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1e6      	bne.n	800c514 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c546:	88fb      	ldrh	r3, [r7, #6]
 800c548:	461a      	mov	r2, r3
 800c54a:	68b9      	ldr	r1, [r7, #8]
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f001 fbe9 	bl	800dd24 <UART_Start_Receive_DMA>
 800c552:	4603      	mov	r3, r0
 800c554:	e000      	b.n	800c558 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c556:	2302      	movs	r3, #2
  }
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3728      	adds	r7, #40	; 0x28
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	58000c00 	.word	0x58000c00

0800c564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b0ba      	sub	sp, #232	; 0xe8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c58a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c58e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c592:	4013      	ands	r3, r2
 800c594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11b      	bne.n	800c5d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5a4:	f003 0320 	and.w	r3, r3, #32
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d015      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5b0:	f003 0320 	and.w	r3, r3, #32
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d009      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 835a 	beq.w	800cc82 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	4798      	blx	r3
      }
      return;
 800c5d6:	e354      	b.n	800cc82 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 811f 	beq.w	800c820 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c5e6:	4b8b      	ldr	r3, [pc, #556]	; (800c814 <HAL_UART_IRQHandler+0x2b0>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d106      	bne.n	800c5fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c5ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5f2:	4b89      	ldr	r3, [pc, #548]	; (800c818 <HAL_UART_IRQHandler+0x2b4>)
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 8112 	beq.w	800c820 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d011      	beq.n	800c62c <HAL_UART_IRQHandler+0xc8>
 800c608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2201      	movs	r2, #1
 800c61a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c622:	f043 0201 	orr.w	r2, r3, #1
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d011      	beq.n	800c65c <HAL_UART_IRQHandler+0xf8>
 800c638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2202      	movs	r2, #2
 800c64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c652:	f043 0204 	orr.w	r2, r3, #4
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d011      	beq.n	800c68c <HAL_UART_IRQHandler+0x128>
 800c668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00b      	beq.n	800c68c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2204      	movs	r2, #4
 800c67a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c682:	f043 0202 	orr.w	r2, r3, #2
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c690:	f003 0308 	and.w	r3, r3, #8
 800c694:	2b00      	cmp	r3, #0
 800c696:	d017      	beq.n	800c6c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c69c:	f003 0320 	and.w	r3, r3, #32
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d105      	bne.n	800c6b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6a8:	4b5a      	ldr	r3, [pc, #360]	; (800c814 <HAL_UART_IRQHandler+0x2b0>)
 800c6aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2208      	movs	r2, #8
 800c6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6be:	f043 0208 	orr.w	r2, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d012      	beq.n	800c6fa <HAL_UART_IRQHandler+0x196>
 800c6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00c      	beq.n	800c6fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f0:	f043 0220 	orr.w	r2, r3, #32
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 82c0 	beq.w	800cc86 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0320 	and.w	r3, r3, #32
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d013      	beq.n	800c73a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c716:	f003 0320 	and.w	r3, r3, #32
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d105      	bne.n	800c72a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d007      	beq.n	800c73a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74e:	2b40      	cmp	r3, #64	; 0x40
 800c750:	d005      	beq.n	800c75e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d04f      	beq.n	800c7fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f001 fbca 	bl	800def8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76e:	2b40      	cmp	r3, #64	; 0x40
 800c770:	d141      	bne.n	800c7f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c780:	e853 3f00 	ldrex	r3, [r3]
 800c784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c788:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c78c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3308      	adds	r3, #8
 800c79a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c79e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c7a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c7aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c7ae:	e841 2300 	strex	r3, r2, [r1]
 800c7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c7b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1d9      	bne.n	800c772 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ca:	4a14      	ldr	r2, [pc, #80]	; (800c81c <HAL_UART_IRQHandler+0x2b8>)
 800c7cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f9 fe0e 	bl	80063f4 <HAL_DMA_Abort_IT>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d017      	beq.n	800c80e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ec:	e00f      	b.n	800c80e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f6 fcb2 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f4:	e00b      	b.n	800c80e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7f6 fcae 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fc:	e007      	b.n	800c80e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7f6 fcaa 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c80c:	e23b      	b.n	800cc86 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c80e:	bf00      	nop
    return;
 800c810:	e239      	b.n	800cc86 <HAL_UART_IRQHandler+0x722>
 800c812:	bf00      	nop
 800c814:	10000001 	.word	0x10000001
 800c818:	04000120 	.word	0x04000120
 800c81c:	0800e251 	.word	0x0800e251

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c824:	2b01      	cmp	r3, #1
 800c826:	f040 81ce 	bne.w	800cbc6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c82e:	f003 0310 	and.w	r3, r3, #16
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 81c7 	beq.w	800cbc6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 81c0 	beq.w	800cbc6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2210      	movs	r2, #16
 800c84c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c858:	2b40      	cmp	r3, #64	; 0x40
 800c85a:	f040 813b 	bne.w	800cad4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a8b      	ldr	r2, [pc, #556]	; (800ca94 <HAL_UART_IRQHandler+0x530>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d059      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a89      	ldr	r2, [pc, #548]	; (800ca98 <HAL_UART_IRQHandler+0x534>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d053      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a87      	ldr	r2, [pc, #540]	; (800ca9c <HAL_UART_IRQHandler+0x538>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d04d      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a85      	ldr	r2, [pc, #532]	; (800caa0 <HAL_UART_IRQHandler+0x53c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d047      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a83      	ldr	r2, [pc, #524]	; (800caa4 <HAL_UART_IRQHandler+0x540>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d041      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a81      	ldr	r2, [pc, #516]	; (800caa8 <HAL_UART_IRQHandler+0x544>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d03b      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a7f      	ldr	r2, [pc, #508]	; (800caac <HAL_UART_IRQHandler+0x548>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d035      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a7d      	ldr	r2, [pc, #500]	; (800cab0 <HAL_UART_IRQHandler+0x54c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d02f      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a7b      	ldr	r2, [pc, #492]	; (800cab4 <HAL_UART_IRQHandler+0x550>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d029      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a79      	ldr	r2, [pc, #484]	; (800cab8 <HAL_UART_IRQHandler+0x554>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d023      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a77      	ldr	r2, [pc, #476]	; (800cabc <HAL_UART_IRQHandler+0x558>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d01d      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a75      	ldr	r2, [pc, #468]	; (800cac0 <HAL_UART_IRQHandler+0x55c>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d017      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a73      	ldr	r2, [pc, #460]	; (800cac4 <HAL_UART_IRQHandler+0x560>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d011      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a71      	ldr	r2, [pc, #452]	; (800cac8 <HAL_UART_IRQHandler+0x564>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00b      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a6f      	ldr	r2, [pc, #444]	; (800cacc <HAL_UART_IRQHandler+0x568>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d005      	beq.n	800c91e <HAL_UART_IRQHandler+0x3ba>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a6d      	ldr	r2, [pc, #436]	; (800cad0 <HAL_UART_IRQHandler+0x56c>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d105      	bne.n	800c92a <HAL_UART_IRQHandler+0x3c6>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	b29b      	uxth	r3, r3
 800c928:	e004      	b.n	800c934 <HAL_UART_IRQHandler+0x3d0>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	b29b      	uxth	r3, r3
 800c934:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 81a4 	beq.w	800cc8a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c948:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c94c:	429a      	cmp	r2, r3
 800c94e:	f080 819c 	bcs.w	800cc8a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c966:	f000 8086 	beq.w	800ca76 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c976:	e853 3f00 	ldrex	r3, [r3]
 800c97a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c97e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c998:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c9a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1da      	bne.n	800c96a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9c6:	f023 0301 	bic.w	r3, r3, #1
 800c9ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9e4:	e841 2300 	strex	r3, r2, [r1]
 800c9e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e1      	bne.n	800c9b4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9fa:	e853 3f00 	ldrex	r3, [r3]
 800c9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3308      	adds	r3, #8
 800ca10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca14:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e3      	bne.n	800c9f0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca3e:	e853 3f00 	ldrex	r3, [r3]
 800ca42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca46:	f023 0310 	bic.w	r3, r3, #16
 800ca4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca58:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca60:	e841 2300 	strex	r3, r2, [r1]
 800ca64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1e4      	bne.n	800ca36 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7f9 f9a1 	bl	8005db8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f91c 	bl	800ccc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca90:	e0fb      	b.n	800cc8a <HAL_UART_IRQHandler+0x726>
 800ca92:	bf00      	nop
 800ca94:	40020010 	.word	0x40020010
 800ca98:	40020028 	.word	0x40020028
 800ca9c:	40020040 	.word	0x40020040
 800caa0:	40020058 	.word	0x40020058
 800caa4:	40020070 	.word	0x40020070
 800caa8:	40020088 	.word	0x40020088
 800caac:	400200a0 	.word	0x400200a0
 800cab0:	400200b8 	.word	0x400200b8
 800cab4:	40020410 	.word	0x40020410
 800cab8:	40020428 	.word	0x40020428
 800cabc:	40020440 	.word	0x40020440
 800cac0:	40020458 	.word	0x40020458
 800cac4:	40020470 	.word	0x40020470
 800cac8:	40020488 	.word	0x40020488
 800cacc:	400204a0 	.word	0x400204a0
 800cad0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caee:	b29b      	uxth	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 80cc 	beq.w	800cc8e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800caf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 80c7 	beq.w	800cc8e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb22:	647b      	str	r3, [r7, #68]	; 0x44
 800cb24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e4      	bne.n	800cb00 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	623b      	str	r3, [r7, #32]
   return(result);
 800cb46:	6a3a      	ldr	r2, [r7, #32]
 800cb48:	4b54      	ldr	r3, [pc, #336]	; (800cc9c <HAL_UART_IRQHandler+0x738>)
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3308      	adds	r3, #8
 800cb56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb5a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e3      	bne.n	800cb36 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	e853 3f00 	ldrex	r3, [r3]
 800cb8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 0310 	bic.w	r3, r3, #16
 800cb96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cba4:	61fb      	str	r3, [r7, #28]
 800cba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba8:	69b9      	ldr	r1, [r7, #24]
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	e841 2300 	strex	r3, r2, [r1]
 800cbb0:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e4      	bne.n	800cb82 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f882 	bl	800ccc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbc4:	e063      	b.n	800cc8e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00e      	beq.n	800cbf0 <HAL_UART_IRQHandler+0x68c>
 800cbd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d008      	beq.n	800cbf0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cbe6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f001 fb72 	bl	800e2d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbee:	e051      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d014      	beq.n	800cc26 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d105      	bne.n	800cc14 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cc08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d008      	beq.n	800cc26 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d03a      	beq.n	800cc92 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	4798      	blx	r3
    }
    return;
 800cc24:	e035      	b.n	800cc92 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d009      	beq.n	800cc46 <HAL_UART_IRQHandler+0x6e2>
 800cc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f001 fb1c 	bl	800e27c <UART_EndTransmit_IT>
    return;
 800cc44:	e026      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d009      	beq.n	800cc66 <HAL_UART_IRQHandler+0x702>
 800cc52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 fb4b 	bl	800e2fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc64:	e016      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d010      	beq.n	800cc94 <HAL_UART_IRQHandler+0x730>
 800cc72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	da0c      	bge.n	800cc94 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f001 fb33 	bl	800e2e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc80:	e008      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
      return;
 800cc82:	bf00      	nop
 800cc84:	e006      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
    return;
 800cc86:	bf00      	nop
 800cc88:	e004      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
      return;
 800cc8a:	bf00      	nop
 800cc8c:	e002      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
      return;
 800cc8e:	bf00      	nop
 800cc90:	e000      	b.n	800cc94 <HAL_UART_IRQHandler+0x730>
    return;
 800cc92:	bf00      	nop
  }
}
 800cc94:	37e8      	adds	r7, #232	; 0xe8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	effffffe 	.word	0xeffffffe

0800cca0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cca8:	bf00      	nop
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cce4:	b092      	sub	sp, #72	; 0x48
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	431a      	orrs	r2, r3
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	695b      	ldr	r3, [r3, #20]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	69db      	ldr	r3, [r3, #28]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	4bbe      	ldr	r3, [pc, #760]	; (800d008 <UART_SetConfig+0x328>)
 800cd10:	4013      	ands	r3, r2
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	6812      	ldr	r2, [r2, #0]
 800cd16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4ab3      	ldr	r2, [pc, #716]	; (800d00c <UART_SetConfig+0x32c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d004      	beq.n	800cd4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	4baf      	ldr	r3, [pc, #700]	; (800d010 <UART_SetConfig+0x330>)
 800cd54:	4013      	ands	r3, r2
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	6812      	ldr	r2, [r2, #0]
 800cd5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd5c:	430b      	orrs	r3, r1
 800cd5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	f023 010f 	bic.w	r1, r3, #15
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	430a      	orrs	r2, r1
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4aa6      	ldr	r2, [pc, #664]	; (800d014 <UART_SetConfig+0x334>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d177      	bne.n	800ce70 <UART_SetConfig+0x190>
 800cd80:	4ba5      	ldr	r3, [pc, #660]	; (800d018 <UART_SetConfig+0x338>)
 800cd82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd88:	2b28      	cmp	r3, #40	; 0x28
 800cd8a:	d86d      	bhi.n	800ce68 <UART_SetConfig+0x188>
 800cd8c:	a201      	add	r2, pc, #4	; (adr r2, 800cd94 <UART_SetConfig+0xb4>)
 800cd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd92:	bf00      	nop
 800cd94:	0800ce39 	.word	0x0800ce39
 800cd98:	0800ce69 	.word	0x0800ce69
 800cd9c:	0800ce69 	.word	0x0800ce69
 800cda0:	0800ce69 	.word	0x0800ce69
 800cda4:	0800ce69 	.word	0x0800ce69
 800cda8:	0800ce69 	.word	0x0800ce69
 800cdac:	0800ce69 	.word	0x0800ce69
 800cdb0:	0800ce69 	.word	0x0800ce69
 800cdb4:	0800ce41 	.word	0x0800ce41
 800cdb8:	0800ce69 	.word	0x0800ce69
 800cdbc:	0800ce69 	.word	0x0800ce69
 800cdc0:	0800ce69 	.word	0x0800ce69
 800cdc4:	0800ce69 	.word	0x0800ce69
 800cdc8:	0800ce69 	.word	0x0800ce69
 800cdcc:	0800ce69 	.word	0x0800ce69
 800cdd0:	0800ce69 	.word	0x0800ce69
 800cdd4:	0800ce49 	.word	0x0800ce49
 800cdd8:	0800ce69 	.word	0x0800ce69
 800cddc:	0800ce69 	.word	0x0800ce69
 800cde0:	0800ce69 	.word	0x0800ce69
 800cde4:	0800ce69 	.word	0x0800ce69
 800cde8:	0800ce69 	.word	0x0800ce69
 800cdec:	0800ce69 	.word	0x0800ce69
 800cdf0:	0800ce69 	.word	0x0800ce69
 800cdf4:	0800ce51 	.word	0x0800ce51
 800cdf8:	0800ce69 	.word	0x0800ce69
 800cdfc:	0800ce69 	.word	0x0800ce69
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800ce69 	.word	0x0800ce69
 800ce08:	0800ce69 	.word	0x0800ce69
 800ce0c:	0800ce69 	.word	0x0800ce69
 800ce10:	0800ce69 	.word	0x0800ce69
 800ce14:	0800ce59 	.word	0x0800ce59
 800ce18:	0800ce69 	.word	0x0800ce69
 800ce1c:	0800ce69 	.word	0x0800ce69
 800ce20:	0800ce69 	.word	0x0800ce69
 800ce24:	0800ce69 	.word	0x0800ce69
 800ce28:	0800ce69 	.word	0x0800ce69
 800ce2c:	0800ce69 	.word	0x0800ce69
 800ce30:	0800ce69 	.word	0x0800ce69
 800ce34:	0800ce61 	.word	0x0800ce61
 800ce38:	2301      	movs	r3, #1
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3e:	e326      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce40:	2304      	movs	r3, #4
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce46:	e322      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4e:	e31e      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce50:	2310      	movs	r3, #16
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e31a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e316      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce60:	2340      	movs	r3, #64	; 0x40
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e312      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce68:	2380      	movs	r3, #128	; 0x80
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e30e      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a69      	ldr	r2, [pc, #420]	; (800d01c <UART_SetConfig+0x33c>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d130      	bne.n	800cedc <UART_SetConfig+0x1fc>
 800ce7a:	4b67      	ldr	r3, [pc, #412]	; (800d018 <UART_SetConfig+0x338>)
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7e:	f003 0307 	and.w	r3, r3, #7
 800ce82:	2b05      	cmp	r3, #5
 800ce84:	d826      	bhi.n	800ced4 <UART_SetConfig+0x1f4>
 800ce86:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <UART_SetConfig+0x1ac>)
 800ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8c:	0800cea5 	.word	0x0800cea5
 800ce90:	0800cead 	.word	0x0800cead
 800ce94:	0800ceb5 	.word	0x0800ceb5
 800ce98:	0800cebd 	.word	0x0800cebd
 800ce9c:	0800cec5 	.word	0x0800cec5
 800cea0:	0800cecd 	.word	0x0800cecd
 800cea4:	2300      	movs	r3, #0
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceaa:	e2f0      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ceac:	2304      	movs	r3, #4
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb2:	e2ec      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ceb4:	2308      	movs	r3, #8
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceba:	e2e8      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cebc:	2310      	movs	r3, #16
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e2e4      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cec4:	2320      	movs	r3, #32
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e2e0      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cecc:	2340      	movs	r3, #64	; 0x40
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e2dc      	b.n	800d48e <UART_SetConfig+0x7ae>
 800ced4:	2380      	movs	r3, #128	; 0x80
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e2d8      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a4f      	ldr	r2, [pc, #316]	; (800d020 <UART_SetConfig+0x340>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d130      	bne.n	800cf48 <UART_SetConfig+0x268>
 800cee6:	4b4c      	ldr	r3, [pc, #304]	; (800d018 <UART_SetConfig+0x338>)
 800cee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	2b05      	cmp	r3, #5
 800cef0:	d826      	bhi.n	800cf40 <UART_SetConfig+0x260>
 800cef2:	a201      	add	r2, pc, #4	; (adr r2, 800cef8 <UART_SetConfig+0x218>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800cf11 	.word	0x0800cf11
 800cefc:	0800cf19 	.word	0x0800cf19
 800cf00:	0800cf21 	.word	0x0800cf21
 800cf04:	0800cf29 	.word	0x0800cf29
 800cf08:	0800cf31 	.word	0x0800cf31
 800cf0c:	0800cf39 	.word	0x0800cf39
 800cf10:	2300      	movs	r3, #0
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf16:	e2ba      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf18:	2304      	movs	r3, #4
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1e:	e2b6      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf20:	2308      	movs	r3, #8
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf26:	e2b2      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf28:	2310      	movs	r3, #16
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2e:	e2ae      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf30:	2320      	movs	r3, #32
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf36:	e2aa      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf38:	2340      	movs	r3, #64	; 0x40
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3e:	e2a6      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf40:	2380      	movs	r3, #128	; 0x80
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e2a2      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a35      	ldr	r2, [pc, #212]	; (800d024 <UART_SetConfig+0x344>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d130      	bne.n	800cfb4 <UART_SetConfig+0x2d4>
 800cf52:	4b31      	ldr	r3, [pc, #196]	; (800d018 <UART_SetConfig+0x338>)
 800cf54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	d826      	bhi.n	800cfac <UART_SetConfig+0x2cc>
 800cf5e:	a201      	add	r2, pc, #4	; (adr r2, 800cf64 <UART_SetConfig+0x284>)
 800cf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf64:	0800cf7d 	.word	0x0800cf7d
 800cf68:	0800cf85 	.word	0x0800cf85
 800cf6c:	0800cf8d 	.word	0x0800cf8d
 800cf70:	0800cf95 	.word	0x0800cf95
 800cf74:	0800cf9d 	.word	0x0800cf9d
 800cf78:	0800cfa5 	.word	0x0800cfa5
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf82:	e284      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf84:	2304      	movs	r3, #4
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e280      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf8c:	2308      	movs	r3, #8
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e27c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf94:	2310      	movs	r3, #16
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e278      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cf9c:	2320      	movs	r3, #32
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa2:	e274      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cfa4:	2340      	movs	r3, #64	; 0x40
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfaa:	e270      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cfac:	2380      	movs	r3, #128	; 0x80
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb2:	e26c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a1b      	ldr	r2, [pc, #108]	; (800d028 <UART_SetConfig+0x348>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d142      	bne.n	800d044 <UART_SetConfig+0x364>
 800cfbe:	4b16      	ldr	r3, [pc, #88]	; (800d018 <UART_SetConfig+0x338>)
 800cfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b05      	cmp	r3, #5
 800cfc8:	d838      	bhi.n	800d03c <UART_SetConfig+0x35c>
 800cfca:	a201      	add	r2, pc, #4	; (adr r2, 800cfd0 <UART_SetConfig+0x2f0>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800cfe9 	.word	0x0800cfe9
 800cfd4:	0800cff1 	.word	0x0800cff1
 800cfd8:	0800cff9 	.word	0x0800cff9
 800cfdc:	0800d001 	.word	0x0800d001
 800cfe0:	0800d02d 	.word	0x0800d02d
 800cfe4:	0800d035 	.word	0x0800d035
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfee:	e24e      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cff0:	2304      	movs	r3, #4
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e24a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800cff8:	2308      	movs	r3, #8
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e246      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d000:	2310      	movs	r3, #16
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e242      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d008:	cfff69f3 	.word	0xcfff69f3
 800d00c:	58000c00 	.word	0x58000c00
 800d010:	11fff4ff 	.word	0x11fff4ff
 800d014:	40011000 	.word	0x40011000
 800d018:	58024400 	.word	0x58024400
 800d01c:	40004400 	.word	0x40004400
 800d020:	40004800 	.word	0x40004800
 800d024:	40004c00 	.word	0x40004c00
 800d028:	40005000 	.word	0x40005000
 800d02c:	2320      	movs	r3, #32
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d032:	e22c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d034:	2340      	movs	r3, #64	; 0x40
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e228      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d03c:	2380      	movs	r3, #128	; 0x80
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e224      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4ab1      	ldr	r2, [pc, #708]	; (800d310 <UART_SetConfig+0x630>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d176      	bne.n	800d13c <UART_SetConfig+0x45c>
 800d04e:	4bb1      	ldr	r3, [pc, #708]	; (800d314 <UART_SetConfig+0x634>)
 800d050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d056:	2b28      	cmp	r3, #40	; 0x28
 800d058:	d86c      	bhi.n	800d134 <UART_SetConfig+0x454>
 800d05a:	a201      	add	r2, pc, #4	; (adr r2, 800d060 <UART_SetConfig+0x380>)
 800d05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d060:	0800d105 	.word	0x0800d105
 800d064:	0800d135 	.word	0x0800d135
 800d068:	0800d135 	.word	0x0800d135
 800d06c:	0800d135 	.word	0x0800d135
 800d070:	0800d135 	.word	0x0800d135
 800d074:	0800d135 	.word	0x0800d135
 800d078:	0800d135 	.word	0x0800d135
 800d07c:	0800d135 	.word	0x0800d135
 800d080:	0800d10d 	.word	0x0800d10d
 800d084:	0800d135 	.word	0x0800d135
 800d088:	0800d135 	.word	0x0800d135
 800d08c:	0800d135 	.word	0x0800d135
 800d090:	0800d135 	.word	0x0800d135
 800d094:	0800d135 	.word	0x0800d135
 800d098:	0800d135 	.word	0x0800d135
 800d09c:	0800d135 	.word	0x0800d135
 800d0a0:	0800d115 	.word	0x0800d115
 800d0a4:	0800d135 	.word	0x0800d135
 800d0a8:	0800d135 	.word	0x0800d135
 800d0ac:	0800d135 	.word	0x0800d135
 800d0b0:	0800d135 	.word	0x0800d135
 800d0b4:	0800d135 	.word	0x0800d135
 800d0b8:	0800d135 	.word	0x0800d135
 800d0bc:	0800d135 	.word	0x0800d135
 800d0c0:	0800d11d 	.word	0x0800d11d
 800d0c4:	0800d135 	.word	0x0800d135
 800d0c8:	0800d135 	.word	0x0800d135
 800d0cc:	0800d135 	.word	0x0800d135
 800d0d0:	0800d135 	.word	0x0800d135
 800d0d4:	0800d135 	.word	0x0800d135
 800d0d8:	0800d135 	.word	0x0800d135
 800d0dc:	0800d135 	.word	0x0800d135
 800d0e0:	0800d125 	.word	0x0800d125
 800d0e4:	0800d135 	.word	0x0800d135
 800d0e8:	0800d135 	.word	0x0800d135
 800d0ec:	0800d135 	.word	0x0800d135
 800d0f0:	0800d135 	.word	0x0800d135
 800d0f4:	0800d135 	.word	0x0800d135
 800d0f8:	0800d135 	.word	0x0800d135
 800d0fc:	0800d135 	.word	0x0800d135
 800d100:	0800d12d 	.word	0x0800d12d
 800d104:	2301      	movs	r3, #1
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10a:	e1c0      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d10c:	2304      	movs	r3, #4
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e1bc      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d114:	2308      	movs	r3, #8
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e1b8      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d11c:	2310      	movs	r3, #16
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e1b4      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d124:	2320      	movs	r3, #32
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e1b0      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d12c:	2340      	movs	r3, #64	; 0x40
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e1ac      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e1a8      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a75      	ldr	r2, [pc, #468]	; (800d318 <UART_SetConfig+0x638>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d130      	bne.n	800d1a8 <UART_SetConfig+0x4c8>
 800d146:	4b73      	ldr	r3, [pc, #460]	; (800d314 <UART_SetConfig+0x634>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14a:	f003 0307 	and.w	r3, r3, #7
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d826      	bhi.n	800d1a0 <UART_SetConfig+0x4c0>
 800d152:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <UART_SetConfig+0x478>)
 800d154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d158:	0800d171 	.word	0x0800d171
 800d15c:	0800d179 	.word	0x0800d179
 800d160:	0800d181 	.word	0x0800d181
 800d164:	0800d189 	.word	0x0800d189
 800d168:	0800d191 	.word	0x0800d191
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	2300      	movs	r3, #0
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d176:	e18a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d178:	2304      	movs	r3, #4
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e186      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d180:	2308      	movs	r3, #8
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e182      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d188:	2310      	movs	r3, #16
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e17e      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d190:	2320      	movs	r3, #32
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e17a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e176      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1a0:	2380      	movs	r3, #128	; 0x80
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e172      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a5b      	ldr	r2, [pc, #364]	; (800d31c <UART_SetConfig+0x63c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d130      	bne.n	800d214 <UART_SetConfig+0x534>
 800d1b2:	4b58      	ldr	r3, [pc, #352]	; (800d314 <UART_SetConfig+0x634>)
 800d1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d826      	bhi.n	800d20c <UART_SetConfig+0x52c>
 800d1be:	a201      	add	r2, pc, #4	; (adr r2, 800d1c4 <UART_SetConfig+0x4e4>)
 800d1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c4:	0800d1dd 	.word	0x0800d1dd
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	0800d1ed 	.word	0x0800d1ed
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d1fd 	.word	0x0800d1fd
 800d1d8:	0800d205 	.word	0x0800d205
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e154      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e150      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1ec:	2308      	movs	r3, #8
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e14c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1f4:	2310      	movs	r3, #16
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e148      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e144      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d204:	2340      	movs	r3, #64	; 0x40
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e140      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d20c:	2380      	movs	r3, #128	; 0x80
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e13c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a41      	ldr	r2, [pc, #260]	; (800d320 <UART_SetConfig+0x640>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	f040 8082 	bne.w	800d324 <UART_SetConfig+0x644>
 800d220:	4b3c      	ldr	r3, [pc, #240]	; (800d314 <UART_SetConfig+0x634>)
 800d222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d228:	2b28      	cmp	r3, #40	; 0x28
 800d22a:	d86d      	bhi.n	800d308 <UART_SetConfig+0x628>
 800d22c:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <UART_SetConfig+0x554>)
 800d22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d232:	bf00      	nop
 800d234:	0800d2d9 	.word	0x0800d2d9
 800d238:	0800d309 	.word	0x0800d309
 800d23c:	0800d309 	.word	0x0800d309
 800d240:	0800d309 	.word	0x0800d309
 800d244:	0800d309 	.word	0x0800d309
 800d248:	0800d309 	.word	0x0800d309
 800d24c:	0800d309 	.word	0x0800d309
 800d250:	0800d309 	.word	0x0800d309
 800d254:	0800d2e1 	.word	0x0800d2e1
 800d258:	0800d309 	.word	0x0800d309
 800d25c:	0800d309 	.word	0x0800d309
 800d260:	0800d309 	.word	0x0800d309
 800d264:	0800d309 	.word	0x0800d309
 800d268:	0800d309 	.word	0x0800d309
 800d26c:	0800d309 	.word	0x0800d309
 800d270:	0800d309 	.word	0x0800d309
 800d274:	0800d2e9 	.word	0x0800d2e9
 800d278:	0800d309 	.word	0x0800d309
 800d27c:	0800d309 	.word	0x0800d309
 800d280:	0800d309 	.word	0x0800d309
 800d284:	0800d309 	.word	0x0800d309
 800d288:	0800d309 	.word	0x0800d309
 800d28c:	0800d309 	.word	0x0800d309
 800d290:	0800d309 	.word	0x0800d309
 800d294:	0800d2f1 	.word	0x0800d2f1
 800d298:	0800d309 	.word	0x0800d309
 800d29c:	0800d309 	.word	0x0800d309
 800d2a0:	0800d309 	.word	0x0800d309
 800d2a4:	0800d309 	.word	0x0800d309
 800d2a8:	0800d309 	.word	0x0800d309
 800d2ac:	0800d309 	.word	0x0800d309
 800d2b0:	0800d309 	.word	0x0800d309
 800d2b4:	0800d2f9 	.word	0x0800d2f9
 800d2b8:	0800d309 	.word	0x0800d309
 800d2bc:	0800d309 	.word	0x0800d309
 800d2c0:	0800d309 	.word	0x0800d309
 800d2c4:	0800d309 	.word	0x0800d309
 800d2c8:	0800d309 	.word	0x0800d309
 800d2cc:	0800d309 	.word	0x0800d309
 800d2d0:	0800d309 	.word	0x0800d309
 800d2d4:	0800d301 	.word	0x0800d301
 800d2d8:	2301      	movs	r3, #1
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e0d6      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d2e0:	2304      	movs	r3, #4
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e0d2      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d2e8:	2308      	movs	r3, #8
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ee:	e0ce      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d2f0:	2310      	movs	r3, #16
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f6:	e0ca      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d2f8:	2320      	movs	r3, #32
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fe:	e0c6      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d300:	2340      	movs	r3, #64	; 0x40
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d306:	e0c2      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d308:	2380      	movs	r3, #128	; 0x80
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30e:	e0be      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d310:	40011400 	.word	0x40011400
 800d314:	58024400 	.word	0x58024400
 800d318:	40007800 	.word	0x40007800
 800d31c:	40007c00 	.word	0x40007c00
 800d320:	40011800 	.word	0x40011800
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4aad      	ldr	r2, [pc, #692]	; (800d5e0 <UART_SetConfig+0x900>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d176      	bne.n	800d41c <UART_SetConfig+0x73c>
 800d32e:	4bad      	ldr	r3, [pc, #692]	; (800d5e4 <UART_SetConfig+0x904>)
 800d330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d336:	2b28      	cmp	r3, #40	; 0x28
 800d338:	d86c      	bhi.n	800d414 <UART_SetConfig+0x734>
 800d33a:	a201      	add	r2, pc, #4	; (adr r2, 800d340 <UART_SetConfig+0x660>)
 800d33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d340:	0800d3e5 	.word	0x0800d3e5
 800d344:	0800d415 	.word	0x0800d415
 800d348:	0800d415 	.word	0x0800d415
 800d34c:	0800d415 	.word	0x0800d415
 800d350:	0800d415 	.word	0x0800d415
 800d354:	0800d415 	.word	0x0800d415
 800d358:	0800d415 	.word	0x0800d415
 800d35c:	0800d415 	.word	0x0800d415
 800d360:	0800d3ed 	.word	0x0800d3ed
 800d364:	0800d415 	.word	0x0800d415
 800d368:	0800d415 	.word	0x0800d415
 800d36c:	0800d415 	.word	0x0800d415
 800d370:	0800d415 	.word	0x0800d415
 800d374:	0800d415 	.word	0x0800d415
 800d378:	0800d415 	.word	0x0800d415
 800d37c:	0800d415 	.word	0x0800d415
 800d380:	0800d3f5 	.word	0x0800d3f5
 800d384:	0800d415 	.word	0x0800d415
 800d388:	0800d415 	.word	0x0800d415
 800d38c:	0800d415 	.word	0x0800d415
 800d390:	0800d415 	.word	0x0800d415
 800d394:	0800d415 	.word	0x0800d415
 800d398:	0800d415 	.word	0x0800d415
 800d39c:	0800d415 	.word	0x0800d415
 800d3a0:	0800d3fd 	.word	0x0800d3fd
 800d3a4:	0800d415 	.word	0x0800d415
 800d3a8:	0800d415 	.word	0x0800d415
 800d3ac:	0800d415 	.word	0x0800d415
 800d3b0:	0800d415 	.word	0x0800d415
 800d3b4:	0800d415 	.word	0x0800d415
 800d3b8:	0800d415 	.word	0x0800d415
 800d3bc:	0800d415 	.word	0x0800d415
 800d3c0:	0800d405 	.word	0x0800d405
 800d3c4:	0800d415 	.word	0x0800d415
 800d3c8:	0800d415 	.word	0x0800d415
 800d3cc:	0800d415 	.word	0x0800d415
 800d3d0:	0800d415 	.word	0x0800d415
 800d3d4:	0800d415 	.word	0x0800d415
 800d3d8:	0800d415 	.word	0x0800d415
 800d3dc:	0800d415 	.word	0x0800d415
 800d3e0:	0800d40d 	.word	0x0800d40d
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e050      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e04c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e048      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e044      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d404:	2320      	movs	r3, #32
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e040      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d40c:	2340      	movs	r3, #64	; 0x40
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e03c      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d414:	2380      	movs	r3, #128	; 0x80
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e038      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a71      	ldr	r2, [pc, #452]	; (800d5e8 <UART_SetConfig+0x908>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d130      	bne.n	800d488 <UART_SetConfig+0x7a8>
 800d426:	4b6f      	ldr	r3, [pc, #444]	; (800d5e4 <UART_SetConfig+0x904>)
 800d428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d42a:	f003 0307 	and.w	r3, r3, #7
 800d42e:	2b05      	cmp	r3, #5
 800d430:	d826      	bhi.n	800d480 <UART_SetConfig+0x7a0>
 800d432:	a201      	add	r2, pc, #4	; (adr r2, 800d438 <UART_SetConfig+0x758>)
 800d434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d438:	0800d451 	.word	0x0800d451
 800d43c:	0800d459 	.word	0x0800d459
 800d440:	0800d461 	.word	0x0800d461
 800d444:	0800d469 	.word	0x0800d469
 800d448:	0800d471 	.word	0x0800d471
 800d44c:	0800d479 	.word	0x0800d479
 800d450:	2302      	movs	r3, #2
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e01a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d458:	2304      	movs	r3, #4
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e016      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d460:	2308      	movs	r3, #8
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e012      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d468:	2310      	movs	r3, #16
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e00e      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d470:	2320      	movs	r3, #32
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e00a      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e006      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d480:	2380      	movs	r3, #128	; 0x80
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d486:	e002      	b.n	800d48e <UART_SetConfig+0x7ae>
 800d488:	2380      	movs	r3, #128	; 0x80
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a55      	ldr	r2, [pc, #340]	; (800d5e8 <UART_SetConfig+0x908>)
 800d494:	4293      	cmp	r3, r2
 800d496:	f040 80f8 	bne.w	800d68a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d49a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d49e:	2b20      	cmp	r3, #32
 800d4a0:	dc46      	bgt.n	800d530 <UART_SetConfig+0x850>
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	db75      	blt.n	800d592 <UART_SetConfig+0x8b2>
 800d4a6:	3b02      	subs	r3, #2
 800d4a8:	2b1e      	cmp	r3, #30
 800d4aa:	d872      	bhi.n	800d592 <UART_SetConfig+0x8b2>
 800d4ac:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <UART_SetConfig+0x7d4>)
 800d4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b2:	bf00      	nop
 800d4b4:	0800d537 	.word	0x0800d537
 800d4b8:	0800d593 	.word	0x0800d593
 800d4bc:	0800d53f 	.word	0x0800d53f
 800d4c0:	0800d593 	.word	0x0800d593
 800d4c4:	0800d593 	.word	0x0800d593
 800d4c8:	0800d593 	.word	0x0800d593
 800d4cc:	0800d54f 	.word	0x0800d54f
 800d4d0:	0800d593 	.word	0x0800d593
 800d4d4:	0800d593 	.word	0x0800d593
 800d4d8:	0800d593 	.word	0x0800d593
 800d4dc:	0800d593 	.word	0x0800d593
 800d4e0:	0800d593 	.word	0x0800d593
 800d4e4:	0800d593 	.word	0x0800d593
 800d4e8:	0800d593 	.word	0x0800d593
 800d4ec:	0800d55f 	.word	0x0800d55f
 800d4f0:	0800d593 	.word	0x0800d593
 800d4f4:	0800d593 	.word	0x0800d593
 800d4f8:	0800d593 	.word	0x0800d593
 800d4fc:	0800d593 	.word	0x0800d593
 800d500:	0800d593 	.word	0x0800d593
 800d504:	0800d593 	.word	0x0800d593
 800d508:	0800d593 	.word	0x0800d593
 800d50c:	0800d593 	.word	0x0800d593
 800d510:	0800d593 	.word	0x0800d593
 800d514:	0800d593 	.word	0x0800d593
 800d518:	0800d593 	.word	0x0800d593
 800d51c:	0800d593 	.word	0x0800d593
 800d520:	0800d593 	.word	0x0800d593
 800d524:	0800d593 	.word	0x0800d593
 800d528:	0800d593 	.word	0x0800d593
 800d52c:	0800d585 	.word	0x0800d585
 800d530:	2b40      	cmp	r3, #64	; 0x40
 800d532:	d02a      	beq.n	800d58a <UART_SetConfig+0x8aa>
 800d534:	e02d      	b.n	800d592 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d536:	f7fc fe0b 	bl	800a150 <HAL_RCCEx_GetD3PCLK1Freq>
 800d53a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d53c:	e02f      	b.n	800d59e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d542:	4618      	mov	r0, r3
 800d544:	f7fc fe1a 	bl	800a17c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d54c:	e027      	b.n	800d59e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d54e:	f107 0318 	add.w	r3, r7, #24
 800d552:	4618      	mov	r0, r3
 800d554:	f7fc ff66 	bl	800a424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d55c:	e01f      	b.n	800d59e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d55e:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <UART_SetConfig+0x904>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f003 0320 	and.w	r3, r3, #32
 800d566:	2b00      	cmp	r3, #0
 800d568:	d009      	beq.n	800d57e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d56a:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <UART_SetConfig+0x904>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	08db      	lsrs	r3, r3, #3
 800d570:	f003 0303 	and.w	r3, r3, #3
 800d574:	4a1d      	ldr	r2, [pc, #116]	; (800d5ec <UART_SetConfig+0x90c>)
 800d576:	fa22 f303 	lsr.w	r3, r2, r3
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d57c:	e00f      	b.n	800d59e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d57e:	4b1b      	ldr	r3, [pc, #108]	; (800d5ec <UART_SetConfig+0x90c>)
 800d580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d582:	e00c      	b.n	800d59e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d584:	4b1a      	ldr	r3, [pc, #104]	; (800d5f0 <UART_SetConfig+0x910>)
 800d586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d588:	e009      	b.n	800d59e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d590:	e005      	b.n	800d59e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d592:	2300      	movs	r3, #0
 800d594:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d59c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 81ee 	beq.w	800d982 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5aa:	4a12      	ldr	r2, [pc, #72]	; (800d5f4 <UART_SetConfig+0x914>)
 800d5ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5b8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d305      	bcc.n	800d5d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d910      	bls.n	800d5f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5dc:	e1d1      	b.n	800d982 <UART_SetConfig+0xca2>
 800d5de:	bf00      	nop
 800d5e0:	40011c00 	.word	0x40011c00
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	58000c00 	.word	0x58000c00
 800d5ec:	03d09000 	.word	0x03d09000
 800d5f0:	003d0900 	.word	0x003d0900
 800d5f4:	0800ebb8 	.word	0x0800ebb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	60bb      	str	r3, [r7, #8]
 800d5fe:	60fa      	str	r2, [r7, #12]
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	4ac0      	ldr	r2, [pc, #768]	; (800d908 <UART_SetConfig+0xc28>)
 800d606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	2200      	movs	r2, #0
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	607a      	str	r2, [r7, #4]
 800d612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d61a:	f7f2 fe81 	bl	8000320 <__aeabi_uldivmod>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4610      	mov	r0, r2
 800d624:	4619      	mov	r1, r3
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	f04f 0300 	mov.w	r3, #0
 800d62e:	020b      	lsls	r3, r1, #8
 800d630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d634:	0202      	lsls	r2, r0, #8
 800d636:	6979      	ldr	r1, [r7, #20]
 800d638:	6849      	ldr	r1, [r1, #4]
 800d63a:	0849      	lsrs	r1, r1, #1
 800d63c:	2000      	movs	r0, #0
 800d63e:	460c      	mov	r4, r1
 800d640:	4605      	mov	r5, r0
 800d642:	eb12 0804 	adds.w	r8, r2, r4
 800d646:	eb43 0905 	adc.w	r9, r3, r5
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	469a      	mov	sl, r3
 800d652:	4693      	mov	fp, r2
 800d654:	4652      	mov	r2, sl
 800d656:	465b      	mov	r3, fp
 800d658:	4640      	mov	r0, r8
 800d65a:	4649      	mov	r1, r9
 800d65c:	f7f2 fe60 	bl	8000320 <__aeabi_uldivmod>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4613      	mov	r3, r2
 800d666:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d66e:	d308      	bcc.n	800d682 <UART_SetConfig+0x9a2>
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d676:	d204      	bcs.n	800d682 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d67e:	60da      	str	r2, [r3, #12]
 800d680:	e17f      	b.n	800d982 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d682:	2301      	movs	r3, #1
 800d684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d688:	e17b      	b.n	800d982 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d692:	f040 80bd 	bne.w	800d810 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d696:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	dc48      	bgt.n	800d730 <UART_SetConfig+0xa50>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	db7b      	blt.n	800d79a <UART_SetConfig+0xaba>
 800d6a2:	2b20      	cmp	r3, #32
 800d6a4:	d879      	bhi.n	800d79a <UART_SetConfig+0xaba>
 800d6a6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ac <UART_SetConfig+0x9cc>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d737 	.word	0x0800d737
 800d6b0:	0800d73f 	.word	0x0800d73f
 800d6b4:	0800d79b 	.word	0x0800d79b
 800d6b8:	0800d79b 	.word	0x0800d79b
 800d6bc:	0800d747 	.word	0x0800d747
 800d6c0:	0800d79b 	.word	0x0800d79b
 800d6c4:	0800d79b 	.word	0x0800d79b
 800d6c8:	0800d79b 	.word	0x0800d79b
 800d6cc:	0800d757 	.word	0x0800d757
 800d6d0:	0800d79b 	.word	0x0800d79b
 800d6d4:	0800d79b 	.word	0x0800d79b
 800d6d8:	0800d79b 	.word	0x0800d79b
 800d6dc:	0800d79b 	.word	0x0800d79b
 800d6e0:	0800d79b 	.word	0x0800d79b
 800d6e4:	0800d79b 	.word	0x0800d79b
 800d6e8:	0800d79b 	.word	0x0800d79b
 800d6ec:	0800d767 	.word	0x0800d767
 800d6f0:	0800d79b 	.word	0x0800d79b
 800d6f4:	0800d79b 	.word	0x0800d79b
 800d6f8:	0800d79b 	.word	0x0800d79b
 800d6fc:	0800d79b 	.word	0x0800d79b
 800d700:	0800d79b 	.word	0x0800d79b
 800d704:	0800d79b 	.word	0x0800d79b
 800d708:	0800d79b 	.word	0x0800d79b
 800d70c:	0800d79b 	.word	0x0800d79b
 800d710:	0800d79b 	.word	0x0800d79b
 800d714:	0800d79b 	.word	0x0800d79b
 800d718:	0800d79b 	.word	0x0800d79b
 800d71c:	0800d79b 	.word	0x0800d79b
 800d720:	0800d79b 	.word	0x0800d79b
 800d724:	0800d79b 	.word	0x0800d79b
 800d728:	0800d79b 	.word	0x0800d79b
 800d72c:	0800d78d 	.word	0x0800d78d
 800d730:	2b40      	cmp	r3, #64	; 0x40
 800d732:	d02e      	beq.n	800d792 <UART_SetConfig+0xab2>
 800d734:	e031      	b.n	800d79a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d736:	f7fb fde5 	bl	8009304 <HAL_RCC_GetPCLK1Freq>
 800d73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d73c:	e033      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d73e:	f7fb fdf7 	bl	8009330 <HAL_RCC_GetPCLK2Freq>
 800d742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d744:	e02f      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fc fd16 	bl	800a17c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d754:	e027      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d756:	f107 0318 	add.w	r3, r7, #24
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fc fe62 	bl	800a424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d764:	e01f      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d766:	4b69      	ldr	r3, [pc, #420]	; (800d90c <UART_SetConfig+0xc2c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 0320 	and.w	r3, r3, #32
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d009      	beq.n	800d786 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d772:	4b66      	ldr	r3, [pc, #408]	; (800d90c <UART_SetConfig+0xc2c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	08db      	lsrs	r3, r3, #3
 800d778:	f003 0303 	and.w	r3, r3, #3
 800d77c:	4a64      	ldr	r2, [pc, #400]	; (800d910 <UART_SetConfig+0xc30>)
 800d77e:	fa22 f303 	lsr.w	r3, r2, r3
 800d782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d784:	e00f      	b.n	800d7a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d786:	4b62      	ldr	r3, [pc, #392]	; (800d910 <UART_SetConfig+0xc30>)
 800d788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d78a:	e00c      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d78c:	4b61      	ldr	r3, [pc, #388]	; (800d914 <UART_SetConfig+0xc34>)
 800d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d790:	e009      	b.n	800d7a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d798:	e005      	b.n	800d7a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d79a:	2300      	movs	r3, #0
 800d79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 80ea 	beq.w	800d982 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b2:	4a55      	ldr	r2, [pc, #340]	; (800d908 <UART_SetConfig+0xc28>)
 800d7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c0:	005a      	lsls	r2, r3, #1
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	085b      	lsrs	r3, r3, #1
 800d7c8:	441a      	add	r2, r3
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	2b0f      	cmp	r3, #15
 800d7d8:	d916      	bls.n	800d808 <UART_SetConfig+0xb28>
 800d7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7e0:	d212      	bcs.n	800d808 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f023 030f 	bic.w	r3, r3, #15
 800d7ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	085b      	lsrs	r3, r3, #1
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d804:	60da      	str	r2, [r3, #12]
 800d806:	e0bc      	b.n	800d982 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d80e:	e0b8      	b.n	800d982 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d810:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d814:	2b20      	cmp	r3, #32
 800d816:	dc4b      	bgt.n	800d8b0 <UART_SetConfig+0xbd0>
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f2c0 8087 	blt.w	800d92c <UART_SetConfig+0xc4c>
 800d81e:	2b20      	cmp	r3, #32
 800d820:	f200 8084 	bhi.w	800d92c <UART_SetConfig+0xc4c>
 800d824:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <UART_SetConfig+0xb4c>)
 800d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d8b7 	.word	0x0800d8b7
 800d830:	0800d8bf 	.word	0x0800d8bf
 800d834:	0800d92d 	.word	0x0800d92d
 800d838:	0800d92d 	.word	0x0800d92d
 800d83c:	0800d8c7 	.word	0x0800d8c7
 800d840:	0800d92d 	.word	0x0800d92d
 800d844:	0800d92d 	.word	0x0800d92d
 800d848:	0800d92d 	.word	0x0800d92d
 800d84c:	0800d8d7 	.word	0x0800d8d7
 800d850:	0800d92d 	.word	0x0800d92d
 800d854:	0800d92d 	.word	0x0800d92d
 800d858:	0800d92d 	.word	0x0800d92d
 800d85c:	0800d92d 	.word	0x0800d92d
 800d860:	0800d92d 	.word	0x0800d92d
 800d864:	0800d92d 	.word	0x0800d92d
 800d868:	0800d92d 	.word	0x0800d92d
 800d86c:	0800d8e7 	.word	0x0800d8e7
 800d870:	0800d92d 	.word	0x0800d92d
 800d874:	0800d92d 	.word	0x0800d92d
 800d878:	0800d92d 	.word	0x0800d92d
 800d87c:	0800d92d 	.word	0x0800d92d
 800d880:	0800d92d 	.word	0x0800d92d
 800d884:	0800d92d 	.word	0x0800d92d
 800d888:	0800d92d 	.word	0x0800d92d
 800d88c:	0800d92d 	.word	0x0800d92d
 800d890:	0800d92d 	.word	0x0800d92d
 800d894:	0800d92d 	.word	0x0800d92d
 800d898:	0800d92d 	.word	0x0800d92d
 800d89c:	0800d92d 	.word	0x0800d92d
 800d8a0:	0800d92d 	.word	0x0800d92d
 800d8a4:	0800d92d 	.word	0x0800d92d
 800d8a8:	0800d92d 	.word	0x0800d92d
 800d8ac:	0800d91f 	.word	0x0800d91f
 800d8b0:	2b40      	cmp	r3, #64	; 0x40
 800d8b2:	d037      	beq.n	800d924 <UART_SetConfig+0xc44>
 800d8b4:	e03a      	b.n	800d92c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8b6:	f7fb fd25 	bl	8009304 <HAL_RCC_GetPCLK1Freq>
 800d8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8bc:	e03c      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8be:	f7fb fd37 	bl	8009330 <HAL_RCC_GetPCLK2Freq>
 800d8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8c4:	e038      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fc fc56 	bl	800a17c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8d4:	e030      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8d6:	f107 0318 	add.w	r3, r7, #24
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fc fda2 	bl	800a424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8e4:	e028      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <UART_SetConfig+0xc2c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d012      	beq.n	800d918 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8f2:	4b06      	ldr	r3, [pc, #24]	; (800d90c <UART_SetConfig+0xc2c>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	08db      	lsrs	r3, r3, #3
 800d8f8:	f003 0303 	and.w	r3, r3, #3
 800d8fc:	4a04      	ldr	r2, [pc, #16]	; (800d910 <UART_SetConfig+0xc30>)
 800d8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d904:	e018      	b.n	800d938 <UART_SetConfig+0xc58>
 800d906:	bf00      	nop
 800d908:	0800ebb8 	.word	0x0800ebb8
 800d90c:	58024400 	.word	0x58024400
 800d910:	03d09000 	.word	0x03d09000
 800d914:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d918:	4b24      	ldr	r3, [pc, #144]	; (800d9ac <UART_SetConfig+0xccc>)
 800d91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d91c:	e00c      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d91e:	4b24      	ldr	r3, [pc, #144]	; (800d9b0 <UART_SetConfig+0xcd0>)
 800d920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d922:	e009      	b.n	800d938 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d92a:	e005      	b.n	800d938 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d936:	bf00      	nop
    }

    if (pclk != 0U)
 800d938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d021      	beq.n	800d982 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	4a1c      	ldr	r2, [pc, #112]	; (800d9b4 <UART_SetConfig+0xcd4>)
 800d944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d948:	461a      	mov	r2, r3
 800d94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	441a      	add	r2, r3
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	2b0f      	cmp	r3, #15
 800d966:	d909      	bls.n	800d97c <UART_SetConfig+0xc9c>
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d96e:	d205      	bcs.n	800d97c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	b29a      	uxth	r2, r3
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60da      	str	r2, [r3, #12]
 800d97a:	e002      	b.n	800d982 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2201      	movs	r2, #1
 800d986:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2200      	movs	r2, #0
 800d996:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	2200      	movs	r2, #0
 800d99c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d99e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3748      	adds	r7, #72	; 0x48
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9ac:	03d09000 	.word	0x03d09000
 800d9b0:	003d0900 	.word	0x003d0900
 800d9b4:	0800ebb8 	.word	0x0800ebb8

0800d9b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	430a      	orrs	r2, r1
 800d9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00a      	beq.n	800da04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da08:	f003 0304 	and.w	r3, r3, #4
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00a      	beq.n	800da26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2a:	f003 0308 	and.w	r3, r3, #8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00a      	beq.n	800da48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4c:	f003 0310 	and.w	r3, r3, #16
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00a      	beq.n	800da6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	430a      	orrs	r2, r1
 800da68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6e:	f003 0320 	and.w	r3, r3, #32
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00a      	beq.n	800da8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	430a      	orrs	r2, r1
 800da8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01a      	beq.n	800dace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dab6:	d10a      	bne.n	800dace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	430a      	orrs	r2, r1
 800dacc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00a      	beq.n	800daf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	430a      	orrs	r2, r1
 800daee:	605a      	str	r2, [r3, #4]
  }
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af02      	add	r7, sp, #8
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db0c:	f7f7 f88c 	bl	8004c28 <HAL_GetTick>
 800db10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f003 0308 	and.w	r3, r3, #8
 800db1c:	2b08      	cmp	r3, #8
 800db1e:	d10e      	bne.n	800db3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f82f 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e025      	b.n	800db8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 0304 	and.w	r3, r3, #4
 800db48:	2b04      	cmp	r3, #4
 800db4a:	d10e      	bne.n	800db6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f819 	bl	800db92 <UART_WaitOnFlagUntilTimeout>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e00f      	b.n	800db8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2220      	movs	r2, #32
 800db6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b09c      	sub	sp, #112	; 0x70
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	603b      	str	r3, [r7, #0]
 800db9e:	4613      	mov	r3, r2
 800dba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dba2:	e0a9      	b.n	800dcf8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbaa:	f000 80a5 	beq.w	800dcf8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbae:	f7f7 f83b 	bl	8004c28 <HAL_GetTick>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d302      	bcc.n	800dbc4 <UART_WaitOnFlagUntilTimeout+0x32>
 800dbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d140      	bne.n	800dc46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbcc:	e853 3f00 	ldrex	r3, [r3]
 800dbd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbd8:	667b      	str	r3, [r7, #100]	; 0x64
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbe4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e6      	bne.n	800dbc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	f023 0301 	bic.w	r3, r3, #1
 800dc0c:	663b      	str	r3, [r7, #96]	; 0x60
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3308      	adds	r3, #8
 800dc14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc16:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e5      	bne.n	800dbf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc42:	2303      	movs	r3, #3
 800dc44:	e069      	b.n	800dd1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d051      	beq.n	800dcf8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc62:	d149      	bne.n	800dcf8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	e853 3f00 	ldrex	r3, [r3]
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc94:	e841 2300 	strex	r3, r2, [r1]
 800dc98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e6      	bne.n	800dc6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3308      	adds	r3, #8
 800dca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	e853 3f00 	ldrex	r3, [r3]
 800dcae:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	f023 0301 	bic.w	r3, r3, #1
 800dcb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcc0:	623a      	str	r2, [r7, #32]
 800dcc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc4:	69f9      	ldr	r1, [r7, #28]
 800dcc6:	6a3a      	ldr	r2, [r7, #32]
 800dcc8:	e841 2300 	strex	r3, r2, [r1]
 800dccc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1e5      	bne.n	800dca0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2220      	movs	r2, #32
 800dce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2220      	movs	r2, #32
 800dce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e010      	b.n	800dd1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	69da      	ldr	r2, [r3, #28]
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	4013      	ands	r3, r2
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	bf0c      	ite	eq
 800dd08:	2301      	moveq	r3, #1
 800dd0a:	2300      	movne	r3, #0
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	461a      	mov	r2, r3
 800dd10:	79fb      	ldrb	r3, [r7, #7]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	f43f af46 	beq.w	800dba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3770      	adds	r7, #112	; 0x70
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b096      	sub	sp, #88	; 0x58
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	88fa      	ldrh	r2, [r7, #6]
 800dd3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2222      	movs	r2, #34	; 0x22
 800dd4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d02c      	beq.n	800ddb2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd5c:	4a42      	ldr	r2, [pc, #264]	; (800de68 <UART_Start_Receive_DMA+0x144>)
 800dd5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd64:	4a41      	ldr	r2, [pc, #260]	; (800de6c <UART_Start_Receive_DMA+0x148>)
 800dd66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd6c:	4a40      	ldr	r2, [pc, #256]	; (800de70 <UART_Start_Receive_DMA+0x14c>)
 800dd6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd74:	2200      	movs	r2, #0
 800dd76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	3324      	adds	r3, #36	; 0x24
 800dd82:	4619      	mov	r1, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd88:	461a      	mov	r2, r3
 800dd8a:	88fb      	ldrh	r3, [r7, #6]
 800dd8c:	f7f7 fdaa 	bl	80058e4 <HAL_DMA_Start_IT>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00d      	beq.n	800ddb2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2210      	movs	r2, #16
 800dd9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2220      	movs	r2, #32
 800ddaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e055      	b.n	800de5e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d018      	beq.n	800ddf4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddca:	e853 3f00 	ldrex	r3, [r3]
 800ddce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd6:	657b      	str	r3, [r7, #84]	; 0x54
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	461a      	mov	r2, r3
 800ddde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dde0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dde2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dde6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dde8:	e841 2300 	strex	r3, r2, [r1]
 800ddec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ddee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1e6      	bne.n	800ddc2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	e853 3f00 	ldrex	r3, [r3]
 800de02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	f043 0301 	orr.w	r3, r3, #1
 800de0a:	653b      	str	r3, [r7, #80]	; 0x50
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3308      	adds	r3, #8
 800de12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de14:	637a      	str	r2, [r7, #52]	; 0x34
 800de16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de1c:	e841 2300 	strex	r3, r2, [r1]
 800de20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d1e5      	bne.n	800ddf4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3308      	adds	r3, #8
 800de2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	e853 3f00 	ldrex	r3, [r3]
 800de36:	613b      	str	r3, [r7, #16]
   return(result);
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3308      	adds	r3, #8
 800de46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de48:	623a      	str	r2, [r7, #32]
 800de4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4c:	69f9      	ldr	r1, [r7, #28]
 800de4e:	6a3a      	ldr	r2, [r7, #32]
 800de50:	e841 2300 	strex	r3, r2, [r1]
 800de54:	61bb      	str	r3, [r7, #24]
   return(result);
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e5      	bne.n	800de28 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3758      	adds	r7, #88	; 0x58
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	0800e077 	.word	0x0800e077
 800de6c:	0800e199 	.word	0x0800e199
 800de70:	0800e1d1 	.word	0x0800e1d1

0800de74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de74:	b480      	push	{r7}
 800de76:	b08f      	sub	sp, #60	; 0x3c
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	e853 3f00 	ldrex	r3, [r3]
 800de88:	61fb      	str	r3, [r7, #28]
   return(result);
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800de90:	637b      	str	r3, [r7, #52]	; 0x34
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	461a      	mov	r2, r3
 800de98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dea2:	e841 2300 	strex	r3, r2, [r1]
 800dea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1e6      	bne.n	800de7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3308      	adds	r3, #8
 800deb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	e853 3f00 	ldrex	r3, [r3]
 800debc:	60bb      	str	r3, [r7, #8]
   return(result);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dec4:	633b      	str	r3, [r7, #48]	; 0x30
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	3308      	adds	r3, #8
 800decc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dece:	61ba      	str	r2, [r7, #24]
 800ded0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded2:	6979      	ldr	r1, [r7, #20]
 800ded4:	69ba      	ldr	r2, [r7, #24]
 800ded6:	e841 2300 	strex	r3, r2, [r1]
 800deda:	613b      	str	r3, [r7, #16]
   return(result);
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e5      	bne.n	800deae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2220      	movs	r2, #32
 800dee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800deea:	bf00      	nop
 800deec:	373c      	adds	r7, #60	; 0x3c
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800def8:	b480      	push	{r7}
 800defa:	b095      	sub	sp, #84	; 0x54
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df08:	e853 3f00 	ldrex	r3, [r3]
 800df0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	461a      	mov	r2, r3
 800df1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1e:	643b      	str	r3, [r7, #64]	; 0x40
 800df20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df26:	e841 2300 	strex	r3, r2, [r1]
 800df2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e6      	bne.n	800df00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3308      	adds	r3, #8
 800df38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	61fb      	str	r3, [r7, #28]
   return(result);
 800df42:	69fa      	ldr	r2, [r7, #28]
 800df44:	4b1e      	ldr	r3, [pc, #120]	; (800dfc0 <UART_EndRxTransfer+0xc8>)
 800df46:	4013      	ands	r3, r2
 800df48:	64bb      	str	r3, [r7, #72]	; 0x48
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3308      	adds	r3, #8
 800df50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df5a:	e841 2300 	strex	r3, r2, [r1]
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1e5      	bne.n	800df32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d118      	bne.n	800dfa0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	e853 3f00 	ldrex	r3, [r3]
 800df7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	f023 0310 	bic.w	r3, r3, #16
 800df82:	647b      	str	r3, [r7, #68]	; 0x44
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	461a      	mov	r2, r3
 800df8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df8c:	61bb      	str	r3, [r7, #24]
 800df8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df90:	6979      	ldr	r1, [r7, #20]
 800df92:	69ba      	ldr	r2, [r7, #24]
 800df94:	e841 2300 	strex	r3, r2, [r1]
 800df98:	613b      	str	r3, [r7, #16]
   return(result);
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e6      	bne.n	800df6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dfb4:	bf00      	nop
 800dfb6:	3754      	adds	r7, #84	; 0x54
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	effffffe 	.word	0xeffffffe

0800dfc4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b090      	sub	sp, #64	; 0x40
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfda:	d037      	beq.n	800e04c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800dfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3308      	adds	r3, #8
 800dfea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	e853 3f00 	ldrex	r3, [r3]
 800dff2:	623b      	str	r3, [r7, #32]
   return(result);
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dffa:	63bb      	str	r3, [r7, #56]	; 0x38
 800dffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3308      	adds	r3, #8
 800e002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e004:	633a      	str	r2, [r7, #48]	; 0x30
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e00c:	e841 2300 	strex	r3, r2, [r1]
 800e010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1e5      	bne.n	800dfe4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	e853 3f00 	ldrex	r3, [r3]
 800e024:	60fb      	str	r3, [r7, #12]
   return(result);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e02c:	637b      	str	r3, [r7, #52]	; 0x34
 800e02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	69b9      	ldr	r1, [r7, #24]
 800e03c:	69fa      	ldr	r2, [r7, #28]
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	617b      	str	r3, [r7, #20]
   return(result);
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e6      	bne.n	800e018 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e04a:	e002      	b.n	800e052 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e04c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e04e:	f7f4 ffd9 	bl	8003004 <HAL_UART_TxCpltCallback>
}
 800e052:	bf00      	nop
 800e054:	3740      	adds	r7, #64	; 0x40
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b084      	sub	sp, #16
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f7fe fe19 	bl	800cca0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e06e:	bf00      	nop
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b09c      	sub	sp, #112	; 0x70
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e082:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e08c:	d071      	beq.n	800e172 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e090:	2200      	movs	r2, #0
 800e092:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e09e:	e853 3f00 	ldrex	r3, [r3]
 800e0a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0bc:	e841 2300 	strex	r3, r2, [r1]
 800e0c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1e6      	bne.n	800e096 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	e853 3f00 	ldrex	r3, [r3]
 800e0d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0da:	f023 0301 	bic.w	r3, r3, #1
 800e0de:	667b      	str	r3, [r7, #100]	; 0x64
 800e0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0e8:	647a      	str	r2, [r7, #68]	; 0x44
 800e0ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0f0:	e841 2300 	strex	r3, r2, [r1]
 800e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1e5      	bne.n	800e0c8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3308      	adds	r3, #8
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	e853 3f00 	ldrex	r3, [r3]
 800e10a:	623b      	str	r3, [r7, #32]
   return(result);
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e112:	663b      	str	r3, [r7, #96]	; 0x60
 800e114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3308      	adds	r3, #8
 800e11a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e11c:	633a      	str	r2, [r7, #48]	; 0x30
 800e11e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e124:	e841 2300 	strex	r3, r2, [r1]
 800e128:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1e5      	bne.n	800e0fc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e132:	2220      	movs	r2, #32
 800e134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d118      	bne.n	800e172 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f023 0310 	bic.w	r3, r3, #16
 800e154:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	461a      	mov	r2, r3
 800e15c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e162:	69b9      	ldr	r1, [r7, #24]
 800e164:	69fa      	ldr	r2, [r7, #28]
 800e166:	e841 2300 	strex	r3, r2, [r1]
 800e16a:	617b      	str	r3, [r7, #20]
   return(result);
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1e6      	bne.n	800e140 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e176:	2b01      	cmp	r3, #1
 800e178:	d107      	bne.n	800e18a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e180:	4619      	mov	r1, r3
 800e182:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e184:	f7fe fda0 	bl	800ccc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e188:	e002      	b.n	800e190 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e18a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e18c:	f7f4 ff4c 	bl	8003028 <HAL_UART_RxCpltCallback>
}
 800e190:	bf00      	nop
 800e192:	3770      	adds	r7, #112	; 0x70
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d109      	bne.n	800e1c2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1b4:	085b      	lsrs	r3, r3, #1
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f7fe fd84 	bl	800ccc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1c0:	e002      	b.n	800e1c8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7fe fd76 	bl	800ccb4 <HAL_UART_RxHalfCpltCallback>
}
 800e1c8:	bf00      	nop
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1f8:	2b80      	cmp	r3, #128	; 0x80
 800e1fa:	d109      	bne.n	800e210 <UART_DMAError+0x40>
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	2b21      	cmp	r3, #33	; 0x21
 800e200:	d106      	bne.n	800e210 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2200      	movs	r2, #0
 800e206:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e20a:	6978      	ldr	r0, [r7, #20]
 800e20c:	f7ff fe32 	bl	800de74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21a:	2b40      	cmp	r3, #64	; 0x40
 800e21c:	d109      	bne.n	800e232 <UART_DMAError+0x62>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b22      	cmp	r3, #34	; 0x22
 800e222:	d106      	bne.n	800e232 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2200      	movs	r2, #0
 800e228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e22c:	6978      	ldr	r0, [r7, #20]
 800e22e:	f7ff fe63 	bl	800def8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e238:	f043 0210 	orr.w	r2, r3, #16
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e242:	6978      	ldr	r0, [r7, #20]
 800e244:	f7f4 ff88 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e248:	bf00      	nop
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f7f4 ff72 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e274:	bf00      	nop
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b088      	sub	sp, #32
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	e853 3f00 	ldrex	r3, [r3]
 800e290:	60bb      	str	r3, [r7, #8]
   return(result);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e298:	61fb      	str	r3, [r7, #28]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	61bb      	str	r3, [r7, #24]
 800e2a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a6:	6979      	ldr	r1, [r7, #20]
 800e2a8:	69ba      	ldr	r2, [r7, #24]
 800e2aa:	e841 2300 	strex	r3, r2, [r1]
 800e2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e6      	bne.n	800e284 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2220      	movs	r2, #32
 800e2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7f4 fe9d 	bl	8003004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2ca:	bf00      	nop
 800e2cc:	3720      	adds	r7, #32
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b083      	sub	sp, #12
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2da:	bf00      	nop
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2ee:	bf00      	nop
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b083      	sub	sp, #12
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e302:	bf00      	nop
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e30e:	b480      	push	{r7}
 800e310:	b085      	sub	sp, #20
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d101      	bne.n	800e324 <HAL_UARTEx_DisableFifoMode+0x16>
 800e320:	2302      	movs	r3, #2
 800e322:	e027      	b.n	800e374 <HAL_UARTEx_DisableFifoMode+0x66>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2224      	movs	r2, #36	; 0x24
 800e330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f022 0201 	bic.w	r2, r2, #1
 800e34a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e352:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2220      	movs	r2, #32
 800e366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e390:	2b01      	cmp	r3, #1
 800e392:	d101      	bne.n	800e398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e394:	2302      	movs	r3, #2
 800e396:	e02d      	b.n	800e3f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2224      	movs	r2, #36	; 0x24
 800e3a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f022 0201 	bic.w	r2, r2, #1
 800e3be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	430a      	orrs	r2, r1
 800e3d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f84f 	bl	800e478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2220      	movs	r2, #32
 800e3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d101      	bne.n	800e414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e410:	2302      	movs	r3, #2
 800e412:	e02d      	b.n	800e470 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2224      	movs	r2, #36	; 0x24
 800e420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f022 0201 	bic.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	430a      	orrs	r2, r1
 800e44e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f811 	bl	800e478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e484:	2b00      	cmp	r3, #0
 800e486:	d108      	bne.n	800e49a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2201      	movs	r2, #1
 800e494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e498:	e031      	b.n	800e4fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e49a:	2310      	movs	r3, #16
 800e49c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e49e:	2310      	movs	r3, #16
 800e4a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	0e5b      	lsrs	r3, r3, #25
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	f003 0307 	and.w	r3, r3, #7
 800e4b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	0f5b      	lsrs	r3, r3, #29
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f003 0307 	and.w	r3, r3, #7
 800e4c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	7b3a      	ldrb	r2, [r7, #12]
 800e4c6:	4911      	ldr	r1, [pc, #68]	; (800e50c <UARTEx_SetNbDataToProcess+0x94>)
 800e4c8:	5c8a      	ldrb	r2, [r1, r2]
 800e4ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e4ce:	7b3a      	ldrb	r2, [r7, #12]
 800e4d0:	490f      	ldr	r1, [pc, #60]	; (800e510 <UARTEx_SetNbDataToProcess+0x98>)
 800e4d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
 800e4e2:	7b7a      	ldrb	r2, [r7, #13]
 800e4e4:	4909      	ldr	r1, [pc, #36]	; (800e50c <UARTEx_SetNbDataToProcess+0x94>)
 800e4e6:	5c8a      	ldrb	r2, [r1, r2]
 800e4e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4ec:	7b7a      	ldrb	r2, [r7, #13]
 800e4ee:	4908      	ldr	r1, [pc, #32]	; (800e510 <UARTEx_SetNbDataToProcess+0x98>)
 800e4f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	0800ebd0 	.word	0x0800ebd0
 800e510:	0800ebd8 	.word	0x0800ebd8

0800e514 <__cxa_pure_virtual>:
 800e514:	b508      	push	{r3, lr}
 800e516:	f000 f80d 	bl	800e534 <_ZSt9terminatev>

0800e51a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e51a:	b508      	push	{r3, lr}
 800e51c:	4780      	blx	r0
 800e51e:	f000 f80e 	bl	800e53e <abort>
	...

0800e524 <_ZSt13get_terminatev>:
 800e524:	4b02      	ldr	r3, [pc, #8]	; (800e530 <_ZSt13get_terminatev+0xc>)
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	f3bf 8f5b 	dmb	ish
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	240001b0 	.word	0x240001b0

0800e534 <_ZSt9terminatev>:
 800e534:	b508      	push	{r3, lr}
 800e536:	f7ff fff5 	bl	800e524 <_ZSt13get_terminatev>
 800e53a:	f7ff ffee 	bl	800e51a <_ZN10__cxxabiv111__terminateEPFvvE>

0800e53e <abort>:
 800e53e:	b508      	push	{r3, lr}
 800e540:	2006      	movs	r0, #6
 800e542:	f000 f873 	bl	800e62c <raise>
 800e546:	2001      	movs	r0, #1
 800e548:	f7f6 f81e 	bl	8004588 <_exit>

0800e54c <__errno>:
 800e54c:	4b01      	ldr	r3, [pc, #4]	; (800e554 <__errno+0x8>)
 800e54e:	6818      	ldr	r0, [r3, #0]
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	240001b4 	.word	0x240001b4

0800e558 <__libc_init_array>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	4d0d      	ldr	r5, [pc, #52]	; (800e590 <__libc_init_array+0x38>)
 800e55c:	4c0d      	ldr	r4, [pc, #52]	; (800e594 <__libc_init_array+0x3c>)
 800e55e:	1b64      	subs	r4, r4, r5
 800e560:	10a4      	asrs	r4, r4, #2
 800e562:	2600      	movs	r6, #0
 800e564:	42a6      	cmp	r6, r4
 800e566:	d109      	bne.n	800e57c <__libc_init_array+0x24>
 800e568:	4d0b      	ldr	r5, [pc, #44]	; (800e598 <__libc_init_array+0x40>)
 800e56a:	4c0c      	ldr	r4, [pc, #48]	; (800e59c <__libc_init_array+0x44>)
 800e56c:	f000 f9b0 	bl	800e8d0 <_init>
 800e570:	1b64      	subs	r4, r4, r5
 800e572:	10a4      	asrs	r4, r4, #2
 800e574:	2600      	movs	r6, #0
 800e576:	42a6      	cmp	r6, r4
 800e578:	d105      	bne.n	800e586 <__libc_init_array+0x2e>
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e580:	4798      	blx	r3
 800e582:	3601      	adds	r6, #1
 800e584:	e7ee      	b.n	800e564 <__libc_init_array+0xc>
 800e586:	f855 3b04 	ldr.w	r3, [r5], #4
 800e58a:	4798      	blx	r3
 800e58c:	3601      	adds	r6, #1
 800e58e:	e7f2      	b.n	800e576 <__libc_init_array+0x1e>
 800e590:	0800ebe8 	.word	0x0800ebe8
 800e594:	0800ebe8 	.word	0x0800ebe8
 800e598:	0800ebe8 	.word	0x0800ebe8
 800e59c:	0800ebf0 	.word	0x0800ebf0

0800e5a0 <memcpy>:
 800e5a0:	440a      	add	r2, r1
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a8:	d100      	bne.n	800e5ac <memcpy+0xc>
 800e5aa:	4770      	bx	lr
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b6:	4291      	cmp	r1, r2
 800e5b8:	d1f9      	bne.n	800e5ae <memcpy+0xe>
 800e5ba:	bd10      	pop	{r4, pc}

0800e5bc <memset>:
 800e5bc:	4402      	add	r2, r0
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d100      	bne.n	800e5c6 <memset+0xa>
 800e5c4:	4770      	bx	lr
 800e5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ca:	e7f9      	b.n	800e5c0 <memset+0x4>

0800e5cc <realloc>:
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <realloc+0xc>)
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	6818      	ldr	r0, [r3, #0]
 800e5d4:	f000 b8da 	b.w	800e78c <_realloc_r>
 800e5d8:	240001b4 	.word	0x240001b4

0800e5dc <_raise_r>:
 800e5dc:	291f      	cmp	r1, #31
 800e5de:	b538      	push	{r3, r4, r5, lr}
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	d904      	bls.n	800e5f0 <_raise_r+0x14>
 800e5e6:	2316      	movs	r3, #22
 800e5e8:	6003      	str	r3, [r0, #0]
 800e5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5f2:	b112      	cbz	r2, 800e5fa <_raise_r+0x1e>
 800e5f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5f8:	b94b      	cbnz	r3, 800e60e <_raise_r+0x32>
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 f830 	bl	800e660 <_getpid_r>
 800e600:	462a      	mov	r2, r5
 800e602:	4601      	mov	r1, r0
 800e604:	4620      	mov	r0, r4
 800e606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e60a:	f000 b817 	b.w	800e63c <_kill_r>
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d00a      	beq.n	800e628 <_raise_r+0x4c>
 800e612:	1c59      	adds	r1, r3, #1
 800e614:	d103      	bne.n	800e61e <_raise_r+0x42>
 800e616:	2316      	movs	r3, #22
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	2001      	movs	r0, #1
 800e61c:	e7e7      	b.n	800e5ee <_raise_r+0x12>
 800e61e:	2400      	movs	r4, #0
 800e620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e624:	4628      	mov	r0, r5
 800e626:	4798      	blx	r3
 800e628:	2000      	movs	r0, #0
 800e62a:	e7e0      	b.n	800e5ee <_raise_r+0x12>

0800e62c <raise>:
 800e62c:	4b02      	ldr	r3, [pc, #8]	; (800e638 <raise+0xc>)
 800e62e:	4601      	mov	r1, r0
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	f7ff bfd3 	b.w	800e5dc <_raise_r>
 800e636:	bf00      	nop
 800e638:	240001b4 	.word	0x240001b4

0800e63c <_kill_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d07      	ldr	r5, [pc, #28]	; (800e65c <_kill_r+0x20>)
 800e640:	2300      	movs	r3, #0
 800e642:	4604      	mov	r4, r0
 800e644:	4608      	mov	r0, r1
 800e646:	4611      	mov	r1, r2
 800e648:	602b      	str	r3, [r5, #0]
 800e64a:	f7f5 ff8d 	bl	8004568 <_kill>
 800e64e:	1c43      	adds	r3, r0, #1
 800e650:	d102      	bne.n	800e658 <_kill_r+0x1c>
 800e652:	682b      	ldr	r3, [r5, #0]
 800e654:	b103      	cbz	r3, 800e658 <_kill_r+0x1c>
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	bd38      	pop	{r3, r4, r5, pc}
 800e65a:	bf00      	nop
 800e65c:	24001060 	.word	0x24001060

0800e660 <_getpid_r>:
 800e660:	f7f5 bf7a 	b.w	8004558 <_getpid>

0800e664 <sbrk_aligned>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4e0e      	ldr	r6, [pc, #56]	; (800e6a0 <sbrk_aligned+0x3c>)
 800e668:	460c      	mov	r4, r1
 800e66a:	6831      	ldr	r1, [r6, #0]
 800e66c:	4605      	mov	r5, r0
 800e66e:	b911      	cbnz	r1, 800e676 <sbrk_aligned+0x12>
 800e670:	f000 f8bc 	bl	800e7ec <_sbrk_r>
 800e674:	6030      	str	r0, [r6, #0]
 800e676:	4621      	mov	r1, r4
 800e678:	4628      	mov	r0, r5
 800e67a:	f000 f8b7 	bl	800e7ec <_sbrk_r>
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	d00a      	beq.n	800e698 <sbrk_aligned+0x34>
 800e682:	1cc4      	adds	r4, r0, #3
 800e684:	f024 0403 	bic.w	r4, r4, #3
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d007      	beq.n	800e69c <sbrk_aligned+0x38>
 800e68c:	1a21      	subs	r1, r4, r0
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 f8ac 	bl	800e7ec <_sbrk_r>
 800e694:	3001      	adds	r0, #1
 800e696:	d101      	bne.n	800e69c <sbrk_aligned+0x38>
 800e698:	f04f 34ff 	mov.w	r4, #4294967295
 800e69c:	4620      	mov	r0, r4
 800e69e:	bd70      	pop	{r4, r5, r6, pc}
 800e6a0:	2400105c 	.word	0x2400105c

0800e6a4 <_malloc_r>:
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	1ccd      	adds	r5, r1, #3
 800e6aa:	f025 0503 	bic.w	r5, r5, #3
 800e6ae:	3508      	adds	r5, #8
 800e6b0:	2d0c      	cmp	r5, #12
 800e6b2:	bf38      	it	cc
 800e6b4:	250c      	movcc	r5, #12
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	db01      	blt.n	800e6c0 <_malloc_r+0x1c>
 800e6bc:	42a9      	cmp	r1, r5
 800e6be:	d905      	bls.n	800e6cc <_malloc_r+0x28>
 800e6c0:	230c      	movs	r3, #12
 800e6c2:	603b      	str	r3, [r7, #0]
 800e6c4:	2600      	movs	r6, #0
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	4e2e      	ldr	r6, [pc, #184]	; (800e788 <_malloc_r+0xe4>)
 800e6ce:	f000 f89d 	bl	800e80c <__malloc_lock>
 800e6d2:	6833      	ldr	r3, [r6, #0]
 800e6d4:	461c      	mov	r4, r3
 800e6d6:	bb34      	cbnz	r4, 800e726 <_malloc_r+0x82>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	4638      	mov	r0, r7
 800e6dc:	f7ff ffc2 	bl	800e664 <sbrk_aligned>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	d14d      	bne.n	800e782 <_malloc_r+0xde>
 800e6e6:	6834      	ldr	r4, [r6, #0]
 800e6e8:	4626      	mov	r6, r4
 800e6ea:	2e00      	cmp	r6, #0
 800e6ec:	d140      	bne.n	800e770 <_malloc_r+0xcc>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	4631      	mov	r1, r6
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	eb04 0803 	add.w	r8, r4, r3
 800e6f8:	f000 f878 	bl	800e7ec <_sbrk_r>
 800e6fc:	4580      	cmp	r8, r0
 800e6fe:	d13a      	bne.n	800e776 <_malloc_r+0xd2>
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	3503      	adds	r5, #3
 800e704:	1a6d      	subs	r5, r5, r1
 800e706:	f025 0503 	bic.w	r5, r5, #3
 800e70a:	3508      	adds	r5, #8
 800e70c:	2d0c      	cmp	r5, #12
 800e70e:	bf38      	it	cc
 800e710:	250c      	movcc	r5, #12
 800e712:	4629      	mov	r1, r5
 800e714:	4638      	mov	r0, r7
 800e716:	f7ff ffa5 	bl	800e664 <sbrk_aligned>
 800e71a:	3001      	adds	r0, #1
 800e71c:	d02b      	beq.n	800e776 <_malloc_r+0xd2>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	442b      	add	r3, r5
 800e722:	6023      	str	r3, [r4, #0]
 800e724:	e00e      	b.n	800e744 <_malloc_r+0xa0>
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	1b52      	subs	r2, r2, r5
 800e72a:	d41e      	bmi.n	800e76a <_malloc_r+0xc6>
 800e72c:	2a0b      	cmp	r2, #11
 800e72e:	d916      	bls.n	800e75e <_malloc_r+0xba>
 800e730:	1961      	adds	r1, r4, r5
 800e732:	42a3      	cmp	r3, r4
 800e734:	6025      	str	r5, [r4, #0]
 800e736:	bf18      	it	ne
 800e738:	6059      	strne	r1, [r3, #4]
 800e73a:	6863      	ldr	r3, [r4, #4]
 800e73c:	bf08      	it	eq
 800e73e:	6031      	streq	r1, [r6, #0]
 800e740:	5162      	str	r2, [r4, r5]
 800e742:	604b      	str	r3, [r1, #4]
 800e744:	4638      	mov	r0, r7
 800e746:	f104 060b 	add.w	r6, r4, #11
 800e74a:	f000 f865 	bl	800e818 <__malloc_unlock>
 800e74e:	f026 0607 	bic.w	r6, r6, #7
 800e752:	1d23      	adds	r3, r4, #4
 800e754:	1af2      	subs	r2, r6, r3
 800e756:	d0b6      	beq.n	800e6c6 <_malloc_r+0x22>
 800e758:	1b9b      	subs	r3, r3, r6
 800e75a:	50a3      	str	r3, [r4, r2]
 800e75c:	e7b3      	b.n	800e6c6 <_malloc_r+0x22>
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	42a3      	cmp	r3, r4
 800e762:	bf0c      	ite	eq
 800e764:	6032      	streq	r2, [r6, #0]
 800e766:	605a      	strne	r2, [r3, #4]
 800e768:	e7ec      	b.n	800e744 <_malloc_r+0xa0>
 800e76a:	4623      	mov	r3, r4
 800e76c:	6864      	ldr	r4, [r4, #4]
 800e76e:	e7b2      	b.n	800e6d6 <_malloc_r+0x32>
 800e770:	4634      	mov	r4, r6
 800e772:	6876      	ldr	r6, [r6, #4]
 800e774:	e7b9      	b.n	800e6ea <_malloc_r+0x46>
 800e776:	230c      	movs	r3, #12
 800e778:	603b      	str	r3, [r7, #0]
 800e77a:	4638      	mov	r0, r7
 800e77c:	f000 f84c 	bl	800e818 <__malloc_unlock>
 800e780:	e7a1      	b.n	800e6c6 <_malloc_r+0x22>
 800e782:	6025      	str	r5, [r4, #0]
 800e784:	e7de      	b.n	800e744 <_malloc_r+0xa0>
 800e786:	bf00      	nop
 800e788:	24001058 	.word	0x24001058

0800e78c <_realloc_r>:
 800e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e790:	4680      	mov	r8, r0
 800e792:	4614      	mov	r4, r2
 800e794:	460e      	mov	r6, r1
 800e796:	b921      	cbnz	r1, 800e7a2 <_realloc_r+0x16>
 800e798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e79c:	4611      	mov	r1, r2
 800e79e:	f7ff bf81 	b.w	800e6a4 <_malloc_r>
 800e7a2:	b92a      	cbnz	r2, 800e7b0 <_realloc_r+0x24>
 800e7a4:	f000 f83e 	bl	800e824 <_free_r>
 800e7a8:	4625      	mov	r5, r4
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b0:	f000 f884 	bl	800e8bc <_malloc_usable_size_r>
 800e7b4:	4284      	cmp	r4, r0
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	d802      	bhi.n	800e7c0 <_realloc_r+0x34>
 800e7ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7be:	d812      	bhi.n	800e7e6 <_realloc_r+0x5a>
 800e7c0:	4621      	mov	r1, r4
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7ff ff6e 	bl	800e6a4 <_malloc_r>
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d0ed      	beq.n	800e7aa <_realloc_r+0x1e>
 800e7ce:	42bc      	cmp	r4, r7
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	bf28      	it	cs
 800e7d6:	463a      	movcs	r2, r7
 800e7d8:	f7ff fee2 	bl	800e5a0 <memcpy>
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4640      	mov	r0, r8
 800e7e0:	f000 f820 	bl	800e824 <_free_r>
 800e7e4:	e7e1      	b.n	800e7aa <_realloc_r+0x1e>
 800e7e6:	4635      	mov	r5, r6
 800e7e8:	e7df      	b.n	800e7aa <_realloc_r+0x1e>
	...

0800e7ec <_sbrk_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_sbrk_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f5 fed0 	bl	800459c <_sbrk>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_sbrk_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_sbrk_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	24001060 	.word	0x24001060

0800e80c <__malloc_lock>:
 800e80c:	4801      	ldr	r0, [pc, #4]	; (800e814 <__malloc_lock+0x8>)
 800e80e:	f000 b85d 	b.w	800e8cc <__retarget_lock_acquire_recursive>
 800e812:	bf00      	nop
 800e814:	24001064 	.word	0x24001064

0800e818 <__malloc_unlock>:
 800e818:	4801      	ldr	r0, [pc, #4]	; (800e820 <__malloc_unlock+0x8>)
 800e81a:	f000 b858 	b.w	800e8ce <__retarget_lock_release_recursive>
 800e81e:	bf00      	nop
 800e820:	24001064 	.word	0x24001064

0800e824 <_free_r>:
 800e824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e826:	2900      	cmp	r1, #0
 800e828:	d044      	beq.n	800e8b4 <_free_r+0x90>
 800e82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e82e:	9001      	str	r0, [sp, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f1a1 0404 	sub.w	r4, r1, #4
 800e836:	bfb8      	it	lt
 800e838:	18e4      	addlt	r4, r4, r3
 800e83a:	f7ff ffe7 	bl	800e80c <__malloc_lock>
 800e83e:	4a1e      	ldr	r2, [pc, #120]	; (800e8b8 <_free_r+0x94>)
 800e840:	9801      	ldr	r0, [sp, #4]
 800e842:	6813      	ldr	r3, [r2, #0]
 800e844:	b933      	cbnz	r3, 800e854 <_free_r+0x30>
 800e846:	6063      	str	r3, [r4, #4]
 800e848:	6014      	str	r4, [r2, #0]
 800e84a:	b003      	add	sp, #12
 800e84c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e850:	f7ff bfe2 	b.w	800e818 <__malloc_unlock>
 800e854:	42a3      	cmp	r3, r4
 800e856:	d908      	bls.n	800e86a <_free_r+0x46>
 800e858:	6825      	ldr	r5, [r4, #0]
 800e85a:	1961      	adds	r1, r4, r5
 800e85c:	428b      	cmp	r3, r1
 800e85e:	bf01      	itttt	eq
 800e860:	6819      	ldreq	r1, [r3, #0]
 800e862:	685b      	ldreq	r3, [r3, #4]
 800e864:	1949      	addeq	r1, r1, r5
 800e866:	6021      	streq	r1, [r4, #0]
 800e868:	e7ed      	b.n	800e846 <_free_r+0x22>
 800e86a:	461a      	mov	r2, r3
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	b10b      	cbz	r3, 800e874 <_free_r+0x50>
 800e870:	42a3      	cmp	r3, r4
 800e872:	d9fa      	bls.n	800e86a <_free_r+0x46>
 800e874:	6811      	ldr	r1, [r2, #0]
 800e876:	1855      	adds	r5, r2, r1
 800e878:	42a5      	cmp	r5, r4
 800e87a:	d10b      	bne.n	800e894 <_free_r+0x70>
 800e87c:	6824      	ldr	r4, [r4, #0]
 800e87e:	4421      	add	r1, r4
 800e880:	1854      	adds	r4, r2, r1
 800e882:	42a3      	cmp	r3, r4
 800e884:	6011      	str	r1, [r2, #0]
 800e886:	d1e0      	bne.n	800e84a <_free_r+0x26>
 800e888:	681c      	ldr	r4, [r3, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	6053      	str	r3, [r2, #4]
 800e88e:	4421      	add	r1, r4
 800e890:	6011      	str	r1, [r2, #0]
 800e892:	e7da      	b.n	800e84a <_free_r+0x26>
 800e894:	d902      	bls.n	800e89c <_free_r+0x78>
 800e896:	230c      	movs	r3, #12
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	e7d6      	b.n	800e84a <_free_r+0x26>
 800e89c:	6825      	ldr	r5, [r4, #0]
 800e89e:	1961      	adds	r1, r4, r5
 800e8a0:	428b      	cmp	r3, r1
 800e8a2:	bf04      	itt	eq
 800e8a4:	6819      	ldreq	r1, [r3, #0]
 800e8a6:	685b      	ldreq	r3, [r3, #4]
 800e8a8:	6063      	str	r3, [r4, #4]
 800e8aa:	bf04      	itt	eq
 800e8ac:	1949      	addeq	r1, r1, r5
 800e8ae:	6021      	streq	r1, [r4, #0]
 800e8b0:	6054      	str	r4, [r2, #4]
 800e8b2:	e7ca      	b.n	800e84a <_free_r+0x26>
 800e8b4:	b003      	add	sp, #12
 800e8b6:	bd30      	pop	{r4, r5, pc}
 800e8b8:	24001058 	.word	0x24001058

0800e8bc <_malloc_usable_size_r>:
 800e8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c0:	1f18      	subs	r0, r3, #4
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bfbc      	itt	lt
 800e8c6:	580b      	ldrlt	r3, [r1, r0]
 800e8c8:	18c0      	addlt	r0, r0, r3
 800e8ca:	4770      	bx	lr

0800e8cc <__retarget_lock_acquire_recursive>:
 800e8cc:	4770      	bx	lr

0800e8ce <__retarget_lock_release_recursive>:
 800e8ce:	4770      	bx	lr

0800e8d0 <_init>:
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d2:	bf00      	nop
 800e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d6:	bc08      	pop	{r3}
 800e8d8:	469e      	mov	lr, r3
 800e8da:	4770      	bx	lr

0800e8dc <_fini>:
 800e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8de:	bf00      	nop
 800e8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e2:	bc08      	pop	{r3}
 800e8e4:	469e      	mov	lr, r3
 800e8e6:	4770      	bx	lr
