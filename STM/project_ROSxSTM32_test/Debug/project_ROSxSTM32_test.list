
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e94c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800ec1c  0800ec1c  0001ec1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ef14  0800ef14  0001ef14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0800ef28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ff4  24000090  0800efb8  00020090  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001084  0800efb8  00021084  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f26b  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003361  00000000  00000000  0003f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001470  00000000  00000000  00042690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001380  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c96  00000000  00000000  00044e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a713  00000000  00000000  00079b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153646  00000000  00000000  00094229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e786f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bfc  00000000  00000000  001e78c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ec04 	.word	0x0800ec04

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0800ec04 	.word	0x0800ec04

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <SV_Limit>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void SV_Limit(double SV[], double max){
 800067c:	b480      	push	{r7}
 800067e:	b08b      	sub	sp, #44	; 0x2c
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	ed87 0b00 	vstr	d0, [r7]
	double temp_SV;
	for (int i = 0; i < 4; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
 800068c:	e06b      	b.n	8000766 <SV_Limit+0xea>
		if (SV[i] > max){
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	ed93 7b00 	vldr	d7, [r3]
 800069a:	ed97 6b00 	vldr	d6, [r7]
 800069e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	d525      	bpl.n	80006f4 <SV_Limit+0x78>
			temp_SV = max / SV[i];
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	ed93 6b00 	vldr	d6, [r3]
 80006b4:	ed97 5b00 	vldr	d5, [r7]
 80006b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006bc:	ed87 7b04 	vstr	d7, [r7, #16]
			for (int j = 0; j < 4; j++) SV[j] *= temp_SV;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
 80006c4:	e012      	b.n	80006ec <SV_Limit+0x70>
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	ed93 6b00 	vldr	d6, [r3]
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	4413      	add	r3, r2
 80006da:	ed97 7b04 	vldr	d7, [r7, #16]
 80006de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80006e2:	ed83 7b00 	vstr	d7, [r3]
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	3301      	adds	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	dde9      	ble.n	80006c6 <SV_Limit+0x4a>
 80006f2:	e035      	b.n	8000760 <SV_Limit+0xe4>
		}else if (SV[i] < (max * -1)){
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	ed93 6b00 	vldr	d6, [r3]
 8000700:	ed97 7b00 	vldr	d7, [r7]
 8000704:	eeb1 7b47 	vneg.f64	d7, d7
 8000708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000710:	d526      	bpl.n	8000760 <SV_Limit+0xe4>
			temp_SV = (max * -1) / SV[i];
 8000712:	ed97 7b00 	vldr	d7, [r7]
 8000716:	eeb1 5b47 	vneg.f64	d5, d7
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	ed93 6b00 	vldr	d6, [r3]
 8000726:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800072a:	ed87 7b04 	vstr	d7, [r7, #16]
			for (int j = 0; j < 4; j++) SV[j] *= temp_SV;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	e012      	b.n	800075a <SV_Limit+0xde>
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	ed93 6b00 	vldr	d6, [r3]
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	ed97 7b04 	vldr	d7, [r7, #16]
 800074c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000750:	ed83 7b00 	vstr	d7, [r3]
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3301      	adds	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b03      	cmp	r3, #3
 800075e:	dde9      	ble.n	8000734 <SV_Limit+0xb8>
	for (int i = 0; i < 4; i++) {
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	3301      	adds	r3, #1
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	2b03      	cmp	r3, #3
 800076a:	dd90      	ble.n	800068e <SV_Limit+0x12>
		}
	}
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	372c      	adds	r7, #44	; 0x2c
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	0000      	movs	r0, r0
 800077c:	0000      	movs	r0, r0
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f004 fb59 	bl	8004e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f9bb 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 fdc1 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8000792:	f000 fd97 	bl	80012c4 <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000796:	f000 fd49 	bl	800122c <MX_USART10_UART_Init>
  MX_TIM3_Init();
 800079a:	f000 fa73 	bl	8000c84 <MX_TIM3_Init>
  MX_TIM4_Init();
 800079e:	f000 fac7 	bl	8000d30 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007a2:	f000 fb1b 	bl	8000ddc <MX_TIM5_Init>
  MX_TIM8_Init();
 80007a6:	f000 fb67 	bl	8000e78 <MX_TIM8_Init>
  MX_TIM15_Init();
 80007aa:	f000 fc01 	bl	8000fb0 <MX_TIM15_Init>
  MX_TIM23_Init();
 80007ae:	f000 fc91 	bl	80010d4 <MX_TIM23_Init>
  MX_TIM24_Init();
 80007b2:	f000 fce5 	bl	8001180 <MX_TIM24_Init>
  MX_TIM2_Init();
 80007b6:	f000 fa17 	bl	8000be8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80007ba:	48af      	ldr	r0, [pc, #700]	; (8000a78 <main+0x2f8>)
 80007bc:	f00a fad2 	bl	800ad64 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80007c0:	48ae      	ldr	r0, [pc, #696]	; (8000a7c <main+0x2fc>)
 80007c2:	f00a facf 	bl	800ad64 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80007c6:	2108      	movs	r1, #8
 80007c8:	48ad      	ldr	r0, [pc, #692]	; (8000a80 <main+0x300>)
 80007ca:	f00a fba9 	bl	800af20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007ce:	210c      	movs	r1, #12
 80007d0:	48ab      	ldr	r0, [pc, #684]	; (8000a80 <main+0x300>)
 80007d2:	f00a fba5 	bl	800af20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80007d6:	2100      	movs	r1, #0
 80007d8:	48aa      	ldr	r0, [pc, #680]	; (8000a84 <main+0x304>)
 80007da:	f00a fba1 	bl	800af20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80007de:	2104      	movs	r1, #4
 80007e0:	48a8      	ldr	r0, [pc, #672]	; (8000a84 <main+0x304>)
 80007e2:	f00a fb9d 	bl	800af20 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80007e6:	2100      	movs	r1, #0
 80007e8:	48a7      	ldr	r0, [pc, #668]	; (8000a88 <main+0x308>)
 80007ea:	f00a fd5b 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80007ee:	2104      	movs	r1, #4
 80007f0:	48a5      	ldr	r0, [pc, #660]	; (8000a88 <main+0x308>)
 80007f2:	f00a fd57 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80007f6:	2100      	movs	r1, #0
 80007f8:	48a4      	ldr	r0, [pc, #656]	; (8000a8c <main+0x30c>)
 80007fa:	f00a fd53 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80007fe:	2104      	movs	r1, #4
 8000800:	48a2      	ldr	r0, [pc, #648]	; (8000a8c <main+0x30c>)
 8000802:	f00a fd4f 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000806:	2100      	movs	r1, #0
 8000808:	48a1      	ldr	r0, [pc, #644]	; (8000a90 <main+0x310>)
 800080a:	f00a fd4b 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800080e:	2104      	movs	r1, #4
 8000810:	489f      	ldr	r0, [pc, #636]	; (8000a90 <main+0x310>)
 8000812:	f00a fd47 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 8000816:	2100      	movs	r1, #0
 8000818:	489e      	ldr	r0, [pc, #632]	; (8000a94 <main+0x314>)
 800081a:	f00a fd43 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 800081e:	2104      	movs	r1, #4
 8000820:	489c      	ldr	r0, [pc, #624]	; (8000a94 <main+0x314>)
 8000822:	f00a fd3f 	bl	800b2a4 <HAL_TIM_Encoder_Start>
    run2 = 0;
 8000826:	4b9c      	ldr	r3, [pc, #624]	; (8000a98 <main+0x318>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
    run = 0;
 800082c:	4b9b      	ldr	r3, [pc, #620]	; (8000a9c <main+0x31c>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
//    imax4 = 1;
//    enc1 = 0;
//    enc2 = 0;
//    enc3 = 0;
//    enc4 = 0;
    Kp[0] = 0.380348545974888	;
 8000832:	499b      	ldr	r1, [pc, #620]	; (8000aa0 <main+0x320>)
 8000834:	a378      	add	r3, pc, #480	; (adr r3, 8000a18 <main+0x298>)
 8000836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800083a:	e9c1 2300 	strd	r2, r3, [r1]
    Ki[0] = 8.64014455617426;
 800083e:	4999      	ldr	r1, [pc, #612]	; (8000aa4 <main+0x324>)
 8000840:	a377      	add	r3, pc, #476	; (adr r3, 8000a20 <main+0x2a0>)
 8000842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000846:	e9c1 2300 	strd	r2, r3, [r1]
    Kd[0] = 0.00158359752468666;
 800084a:	4997      	ldr	r1, [pc, #604]	; (8000aa8 <main+0x328>)
 800084c:	a376      	add	r3, pc, #472	; (adr r3, 8000a28 <main+0x2a8>)
 800084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
    Kp[1] = 0.398598965511759	;
 8000856:	4992      	ldr	r1, [pc, #584]	; (8000aa0 <main+0x320>)
 8000858:	a375      	add	r3, pc, #468	; (adr r3, 8000a30 <main+0x2b0>)
 800085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Ki[1] = 8.83255513394513;
 8000862:	4990      	ldr	r1, [pc, #576]	; (8000aa4 <main+0x324>)
 8000864:	a374      	add	r3, pc, #464	; (adr r3, 8000a38 <main+0x2b8>)
 8000866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800086a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Kd[1] = 0.00182236328290195;
 800086e:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <main+0x328>)
 8000870:	a373      	add	r3, pc, #460	; (adr r3, 8000a40 <main+0x2c0>)
 8000872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000876:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Kp[2] = 0.383938106220696;
 800087a:	4989      	ldr	r1, [pc, #548]	; (8000aa0 <main+0x320>)
 800087c:	a372      	add	r3, pc, #456	; (adr r3, 8000a48 <main+0x2c8>)
 800087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000882:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Ki[2] = 8.67125871485857;
 8000886:	4987      	ldr	r1, [pc, #540]	; (8000aa4 <main+0x324>)
 8000888:	a371      	add	r3, pc, #452	; (adr r3, 8000a50 <main+0x2d0>)
 800088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Kd[2] = 0.00163533883823194;
 8000892:	4985      	ldr	r1, [pc, #532]	; (8000aa8 <main+0x328>)
 8000894:	a370      	add	r3, pc, #448	; (adr r3, 8000a58 <main+0x2d8>)
 8000896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Kp[3] = 0.395936692858645;
 800089e:	4980      	ldr	r1, [pc, #512]	; (8000aa0 <main+0x320>)
 80008a0:	a36f      	add	r3, pc, #444	; (adr r3, 8000a60 <main+0x2e0>)
 80008a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Ki[3] = 8.79655800062044;
 80008aa:	497e      	ldr	r1, [pc, #504]	; (8000aa4 <main+0x324>)
 80008ac:	a36e      	add	r3, pc, #440	; (adr r3, 8000a68 <main+0x2e8>)
 80008ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kd[3] = 0.00179332179214608;
 80008b6:	497c      	ldr	r1, [pc, #496]	; (8000aa8 <main+0x328>)
 80008b8:	a36d      	add	r3, pc, #436	; (adr r3, 8000a70 <main+0x2f0>)
 80008ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008be:	e9c1 2306 	strd	r2, r3, [r1, #24]
    for (int i = 0; i < 4; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e061      	b.n	800098c <main+0x20c>
    	ut[i] = 0;
 80008c8:	4a78      	ldr	r2, [pc, #480]	; (8000aac <main+0x32c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	18d1      	adds	r1, r2, r3
 80008d0:	f04f 0200 	mov.w	r2, #0
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	e9c1 2300 	strd	r2, r3, [r1]
    	up[i] = 0;
 80008dc:	4a74      	ldr	r2, [pc, #464]	; (8000ab0 <main+0x330>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	18d1      	adds	r1, r2, r3
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e9c1 2300 	strd	r2, r3, [r1]
    	ui[i] = 0;
 80008f0:	4a70      	ldr	r2, [pc, #448]	; (8000ab4 <main+0x334>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	18d1      	adds	r1, r2, r3
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
    	ud[i] = 0;
 8000904:	4a6c      	ldr	r2, [pc, #432]	; (8000ab8 <main+0x338>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	18d1      	adds	r1, r2, r3
 800090c:	f04f 0200 	mov.w	r2, #0
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	e9c1 2300 	strd	r2, r3, [r1]
    	SV[i] = 0;
 8000918:	4a68      	ldr	r2, [pc, #416]	; (8000abc <main+0x33c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	18d1      	adds	r1, r2, r3
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	e9c1 2300 	strd	r2, r3, [r1]
    	PV[i] = 0;
 800092c:	4a64      	ldr	r2, [pc, #400]	; (8000ac0 <main+0x340>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	18d1      	adds	r1, r2, r3
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9c1 2300 	strd	r2, r3, [r1]
    	et[i] = 0;
 8000940:	4a60      	ldr	r2, [pc, #384]	; (8000ac4 <main+0x344>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	18d1      	adds	r1, r2, r3
 8000948:	f04f 0200 	mov.w	r2, #0
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	e9c1 2300 	strd	r2, r3, [r1]
    	pulse[i] = 0;
 8000954:	4a5c      	ldr	r2, [pc, #368]	; (8000ac8 <main+0x348>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	18d1      	adds	r1, r2, r3
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e9c1 2300 	strd	r2, r3, [r1]
    	it[i] = 0;
 8000968:	4a58      	ldr	r2, [pc, #352]	; (8000acc <main+0x34c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	18d1      	adds	r1, r2, r3
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	e9c1 2300 	strd	r2, r3, [r1]
    	enc[i] = 0;
 800097c:	4a54      	ldr	r2, [pc, #336]	; (8000ad0 <main+0x350>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2100      	movs	r1, #0
 8000982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b03      	cmp	r3, #3
 8000990:	dd9a      	ble.n	80008c8 <main+0x148>
    }
    imax = 1;
 8000992:	4950      	ldr	r1, [pc, #320]	; (8000ad4 <main+0x354>)
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <main+0x358>)
 800099a:	e9c1 2300 	strd	r2, r3, [r1]
    Vx = 0;
 800099e:	494f      	ldr	r1, [pc, #316]	; (8000adc <main+0x35c>)
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e9c1 2300 	strd	r2, r3, [r1]
    Vy = 0;
 80009ac:	494c      	ldr	r1, [pc, #304]	; (8000ae0 <main+0x360>)
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	e9c1 2300 	strd	r2, r3, [r1]
    W = 0;
 80009ba:	494a      	ldr	r1, [pc, #296]	; (8000ae4 <main+0x364>)
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c1 2300 	strd	r2, r3, [r1]
    cont = 0;
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <main+0x368>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
    max_rps = 5;
 80009ce:	4947      	ldr	r1, [pc, #284]	; (8000aec <main+0x36c>)
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <main+0x370>)
 80009d6:	e9c1 2300 	strd	r2, r3, [r1]
//    amax_rps = -1 * max_rps;
    map = 0;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <main+0x374>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
    rVy = 0;
 80009e0:	4945      	ldr	r1, [pc, #276]	; (8000af8 <main+0x378>)
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	e9c1 2300 	strd	r2, r3, [r1]
    rVx = 0;
 80009ee:	4943      	ldr	r1, [pc, #268]	; (8000afc <main+0x37c>)
 80009f0:	f04f 0200 	mov.w	r2, #0
 80009f4:	f04f 0300 	mov.w	r3, #0
 80009f8:	e9c1 2300 	strd	r2, r3, [r1]
    rW = 0;
 80009fc:	4940      	ldr	r1, [pc, #256]	; (8000b00 <main+0x380>)
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	e9c1 2300 	strd	r2, r3, [r1]
    setup();
 8000a0a:	f002 ff35 	bl	8003878 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000a0e:	f002 ff49 	bl	80038a4 <loop>
 8000a12:	e7fc      	b.n	8000a0e <main+0x28e>
 8000a14:	f3af 8000 	nop.w
 8000a18:	6d82c55e 	.word	0x6d82c55e
 8000a1c:	3fd857a1 	.word	0x3fd857a1
 8000a20:	06faf636 	.word	0x06faf636
 8000a24:	402147c1 	.word	0x402147c1
 8000a28:	e5070eba 	.word	0xe5070eba
 8000a2c:	3f59f216 	.word	0x3f59f216
 8000a30:	3c45ea7c 	.word	0x3c45ea7c
 8000a34:	3fd982a5 	.word	0x3fd982a5
 8000a38:	aaa0d28d 	.word	0xaaa0d28d
 8000a3c:	4021aa44 	.word	0x4021aa44
 8000a40:	ace54b95 	.word	0xace54b95
 8000a44:	3f5ddb8b 	.word	0x3f5ddb8b
 8000a48:	2279fcf2 	.word	0x2279fcf2
 8000a4c:	3fd89271 	.word	0x3fd89271
 8000a50:	38e6f1f2 	.word	0x38e6f1f2
 8000a54:	402157af 	.word	0x402157af
 8000a58:	b4ff5776 	.word	0xb4ff5776
 8000a5c:	3f5acb1b 	.word	0x3f5acb1b
 8000a60:	dac75051 	.word	0xdac75051
 8000a64:	3fd95706 	.word	0x3fd95706
 8000a68:	7344105a 	.word	0x7344105a
 8000a6c:	402197d6 	.word	0x402197d6
 8000a70:	9cb3c1e7 	.word	0x9cb3c1e7
 8000a74:	3f5d61bc 	.word	0x3f5d61bc
 8000a78:	24000190 	.word	0x24000190
 8000a7c:	240000ac 	.word	0x240000ac
 8000a80:	240001dc 	.word	0x240001dc
 8000a84:	24000228 	.word	0x24000228
 8000a88:	240002c0 	.word	0x240002c0
 8000a8c:	240000f8 	.word	0x240000f8
 8000a90:	24000144 	.word	0x24000144
 8000a94:	24000274 	.word	0x24000274
 8000a98:	24000630 	.word	0x24000630
 8000a9c:	2400062c 	.word	0x2400062c
 8000aa0:	24000550 	.word	0x24000550
 8000aa4:	24000570 	.word	0x24000570
 8000aa8:	24000590 	.word	0x24000590
 8000aac:	24000490 	.word	0x24000490
 8000ab0:	240004b0 	.word	0x240004b0
 8000ab4:	240004d0 	.word	0x240004d0
 8000ab8:	240004f0 	.word	0x240004f0
 8000abc:	24000510 	.word	0x24000510
 8000ac0:	24000530 	.word	0x24000530
 8000ac4:	240005b0 	.word	0x240005b0
 8000ac8:	240005d0 	.word	0x240005d0
 8000acc:	240005f0 	.word	0x240005f0
 8000ad0:	24000610 	.word	0x24000610
 8000ad4:	24000618 	.word	0x24000618
 8000ad8:	3ff00000 	.word	0x3ff00000
 8000adc:	24000640 	.word	0x24000640
 8000ae0:	24000648 	.word	0x24000648
 8000ae4:	24000650 	.word	0x24000650
 8000ae8:	24000634 	.word	0x24000634
 8000aec:	24000620 	.word	0x24000620
 8000af0:	40140000 	.word	0x40140000
 8000af4:	24000628 	.word	0x24000628
 8000af8:	24000660 	.word	0x24000660
 8000afc:	24000658 	.word	0x24000658
 8000b00:	24000668 	.word	0x24000668

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09c      	sub	sp, #112	; 0x70
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	224c      	movs	r2, #76	; 0x4c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00d feec 	bl	800e8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00d fee6 	bl	800e8f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f007 fe35 	bl	8008794 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b4a:	bf00      	nop
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <SystemClock_Config+0xe0>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b58:	d1f8      	bne.n	8000b4c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000b72:	2315      	movs	r3, #21
 8000b74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fe38 	bl	8008808 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b9e:	f000 ffcd 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	233f      	movs	r3, #63	; 0x3f
 8000ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 f9ca 	bl	8008f64 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000bd6:	f000 ffb1 	bl	8001b3c <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3770      	adds	r7, #112	; 0x70
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58024800 	.word	0x58024800

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c10:	223f      	movs	r2, #63	; 0x3f
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c30:	f00a f840 	bl	800acb4 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c3a:	f000 ff7f 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c4c:	f00a fdec 	bl	800b828 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c56:	f000 ff71 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_TIM2_Init+0x98>)
 8000c68:	f00b fb3e 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c72:	f000 ff63 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	240000ac 	.word	0x240000ac

08000c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	; 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00d fe2c 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <MX_TIM3_Init+0xa8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cf4:	f00a fa30 	bl	800b158 <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 ff1d 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000d10:	f00b faea 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 ff0f 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	240000f8 	.word	0x240000f8
 8000d2c:	40000400 	.word	0x40000400

08000d30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	; 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00d fdd6 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_TIM4_Init+0xa8>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d74:	2303      	movs	r3, #3
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000da0:	f00a f9da 	bl	800b158 <HAL_TIM_Encoder_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000daa:	f000 fec7 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_TIM4_Init+0xa4>)
 8000dbc:	f00b fa94 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000dc6:	f000 feb9 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	24000144 	.word	0x24000144
 8000dd8:	40000800 	.word	0x40000800

08000ddc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_TIM5_Init+0x98>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e02:	223f      	movs	r2, #63	; 0x3f
 8000e04:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e22:	f009 ff47 	bl	800acb4 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e2c:	f000 fe86 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e3e:	f00a fcf3 	bl	800b828 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e48:	f000 fe78 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM5_Init+0x94>)
 8000e5a:	f00b fa45 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 fe6a 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000190 	.word	0x24000190
 8000e74:	40000c00 	.word	0x40000c00

08000e78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b098      	sub	sp, #96	; 0x60
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2234      	movs	r2, #52	; 0x34
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00d fd23 	bl	800e8f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000eac:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <MX_TIM8_Init+0x134>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000eb0:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000ebc:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000ebe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000ec2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ed6:	4834      	ldr	r0, [pc, #208]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000ed8:	f009 ffca 	bl	800ae70 <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fe2b 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000efa:	f00b f9f5 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000f04:	f000 fe1a 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f28:	2208      	movs	r2, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000f2e:	f00a fb67 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f38:	f000 fe00 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f40:	220c      	movs	r2, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000f46:	f00a fb5b 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000f50:	f000 fdf4 	bl	8001b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000f8a:	f00b fa49 	bl	800c420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000f94:	f000 fdd2 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <MX_TIM8_Init+0x130>)
 8000f9a:	f003 fc4f 	bl	800483c <HAL_TIM_MspPostInit>

}
 8000f9e:	bf00      	nop
 8000fa0:	3760      	adds	r7, #96	; 0x60
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	240001dc 	.word	0x240001dc
 8000fac:	40010400 	.word	0x40010400

08000fb0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b098      	sub	sp, #96	; 0x60
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2234      	movs	r2, #52	; 0x34
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00d fc87 	bl	800e8f0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <MX_TIM15_Init+0x11c>)
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <MX_TIM15_Init+0x120>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_TIM15_Init+0x11c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <MX_TIM15_Init+0x11c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_TIM15_Init+0x11c>)
 8000ff6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000ffa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_TIM15_Init+0x11c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <MX_TIM15_Init+0x11c>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_TIM15_Init+0x11c>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800100e:	482f      	ldr	r0, [pc, #188]	; (80010cc <MX_TIM15_Init+0x11c>)
 8001010:	f009 ff2e 	bl	800ae70 <HAL_TIM_PWM_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 fd8f 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800102a:	4619      	mov	r1, r3
 800102c:	4827      	ldr	r0, [pc, #156]	; (80010cc <MX_TIM15_Init+0x11c>)
 800102e:	f00b f95b 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 fd80 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103c:	2360      	movs	r3, #96	; 0x60
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001058:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <MX_TIM15_Init+0x11c>)
 8001062:	f00a facd 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800106c:	f000 fd66 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001074:	2204      	movs	r2, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <MX_TIM15_Init+0x11c>)
 800107a:	f00a fac1 	bl	800b600 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001084:	f000 fd5a 	bl	8001b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_TIM15_Init+0x11c>)
 80010b0:	f00b f9b6 	bl	800c420 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80010ba:	f000 fd3f 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <MX_TIM15_Init+0x11c>)
 80010c0:	f003 fbbc 	bl	800483c <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3760      	adds	r7, #96	; 0x60
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	24000228 	.word	0x24000228
 80010d0:	40014000 	.word	0x40014000

080010d4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2224      	movs	r2, #36	; 0x24
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d fc04 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_TIM23_Init+0xa4>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_TIM23_Init+0xa8>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_TIM23_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_TIM23_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_TIM23_Init+0xa4>)
 8001106:	f04f 32ff 	mov.w	r2, #4294967295
 800110a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM23_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_TIM23_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001118:	2303      	movs	r3, #3
 800111a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_TIM23_Init+0xa4>)
 8001144:	f00a f808 	bl	800b158 <HAL_TIM_Encoder_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800114e:	f000 fcf5 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_TIM23_Init+0xa4>)
 8001160:	f00b f8c2 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800116a:	f000 fce7 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	; 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000274 	.word	0x24000274
 800117c:	4000e000 	.word	0x4000e000

08001180 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00d fbae 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_TIM24_Init+0xa8>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c4:	2303      	movs	r3, #3
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011dc:	2301      	movs	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM24_Init+0xa4>)
 80011f0:	f009 ffb2 	bl	800b158 <HAL_TIM_Encoder_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80011fa:	f000 fc9f 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM24_Init+0xa4>)
 800120c:	f00b f86c 	bl	800c2e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001216:	f000 fc91 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240002c0 	.word	0x240002c0
 8001228:	4000e400 	.word	0x4000e400

0800122c <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <MX_USART10_UART_Init+0x94>)
 8001234:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_USART10_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_USART10_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_USART10_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001274:	4811      	ldr	r0, [pc, #68]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001276:	f00b f991 	bl	800c59c <HAL_UART_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 fc5c 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_USART10_UART_Init+0x90>)
 8001288:	f00d fa14 	bl	800e6b4 <HAL_UARTEx_SetTxFifoThreshold>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001292:	f000 fc53 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <MX_USART10_UART_Init+0x90>)
 800129a:	f00d fa49 	bl	800e730 <HAL_UARTEx_SetRxFifoThreshold>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 fc4a 	bl	8001b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_USART10_UART_Init+0x90>)
 80012aa:	f00d f9ca 	bl	800e642 <HAL_UARTEx_DisableFifoMode>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 fc42 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2400030c 	.word	0x2400030c
 80012c0:	40011c00 	.word	0x40011c00

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_DMA_Init+0x4c>)
 80012cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_DMA_Init+0x4c>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_DMA_Init+0x4c>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	200b      	movs	r0, #11
 80012ee:	f003 ff36 	bl	800515e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012f2:	200b      	movs	r0, #11
 80012f4:	f003 ff4d 	bl	8005192 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	200c      	movs	r0, #12
 80012fe:	f003 ff2e 	bl	800515e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001302:	200c      	movs	r0, #12
 8001304:	f003 ff45 	bl	8005192 <HAL_NVIC_EnableIRQ>

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <MX_GPIO_Init+0x170>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <MX_GPIO_Init+0x170>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b52      	ldr	r3, [pc, #328]	; (8001484 <MX_GPIO_Init+0x170>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <MX_GPIO_Init+0x170>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <MX_GPIO_Init+0x170>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <MX_GPIO_Init+0x170>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <MX_GPIO_Init+0x170>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a45      	ldr	r2, [pc, #276]	; (8001484 <MX_GPIO_Init+0x170>)
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b43      	ldr	r3, [pc, #268]	; (8001484 <MX_GPIO_Init+0x170>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <MX_GPIO_Init+0x170>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4a3e      	ldr	r2, [pc, #248]	; (8001484 <MX_GPIO_Init+0x170>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <MX_GPIO_Init+0x170>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <MX_GPIO_Init+0x170>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4a36      	ldr	r2, [pc, #216]	; (8001484 <MX_GPIO_Init+0x170>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <MX_GPIO_Init+0x170>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_GPIO_Init+0x170>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <MX_GPIO_Init+0x170>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_GPIO_Init+0x170>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_GPIO_Init+0x170>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <MX_GPIO_Init+0x170>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_GPIO_Init+0x170>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80013fc:	2200      	movs	r2, #0
 80013fe:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001402:	4821      	ldr	r0, [pc, #132]	; (8001488 <MX_GPIO_Init+0x174>)
 8001404:	f007 f988 	bl	8008718 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0x178>)
 8001410:	f007 f982 	bl	8008718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001414:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001418:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <MX_GPIO_Init+0x174>)
 800142e:	f006 fec9 	bl	80081c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <MX_GPIO_Init+0x17c>)
 800144a:	f006 febb 	bl	80081c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800144e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4809      	ldr	r0, [pc, #36]	; (800148c <MX_GPIO_Init+0x178>)
 8001468:	f006 feac 	bl	80081c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2028      	movs	r0, #40	; 0x28
 8001472:	f003 fe74 	bl	800515e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f003 fe8b 	bl	8005192 <HAL_NVIC_EnableIRQ>

}
 800147c:	bf00      	nop
 800147e:	3730      	adds	r7, #48	; 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400
 8001488:	58021000 	.word	0x58021000
 800148c:	58020400 	.word	0x58020400
 8001490:	58020800 	.word	0x58020800
 8001494:	00000000 	.word	0x00000000

08001498 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
//	run++;
//	if (htim->Instance == TIM2) {
//		inttt ++;
//		inter();
//	}
	if (htim->Instance == TIM5) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4ab0      	ldr	r2, [pc, #704]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f040 8338 	bne.w	8001b1c <HAL_TIM_PeriodElapsedCallback+0x684>

		run2++;
 80014ac:	4baf      	ldr	r3, [pc, #700]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4aae      	ldr	r2, [pc, #696]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014b4:	6013      	str	r3, [r2, #0]
//		SV1 = Vy + Vx + (W * 0.152767);
//		SV2 = Vy - Vx - (W * 0.152844);
//		SV3 = Vy + Vx - (W * 0.152998);
//		SV4 = Vy - Vx + (W * 0.154852);
		SV[0] = Vy + Vx + (W * 0.152767);
 80014b6:	4bae      	ldr	r3, [pc, #696]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80014b8:	ed93 6b00 	vldr	d6, [r3]
 80014bc:	4bad      	ldr	r3, [pc, #692]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014be:	ed93 7b00 	vldr	d7, [r3]
 80014c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014c6:	4bac      	ldr	r3, [pc, #688]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014c8:	ed93 7b00 	vldr	d7, [r3]
 80014cc:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8001730 <HAL_TIM_PeriodElapsedCallback+0x298>
 80014d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014d8:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014da:	ed83 7b00 	vstr	d7, [r3]
		SV[1] = Vy - Vx - (W * 0.152844);
 80014de:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80014e0:	ed93 6b00 	vldr	d6, [r3]
 80014e4:	4ba3      	ldr	r3, [pc, #652]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014e6:	ed93 7b00 	vldr	d7, [r3]
 80014ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014ee:	4ba2      	ldr	r3, [pc, #648]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014f0:	ed93 7b00 	vldr	d7, [r3]
 80014f4:	ed9f 5b90 	vldr	d5, [pc, #576]	; 8001738 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80014f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001500:	4b9e      	ldr	r3, [pc, #632]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001502:	ed83 7b02 	vstr	d7, [r3, #8]
		SV[2] = Vy + Vx - (W * 0.152998);
 8001506:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001508:	ed93 6b00 	vldr	d6, [r3]
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800150e:	ed93 7b00 	vldr	d7, [r3]
 8001512:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001516:	4b98      	ldr	r3, [pc, #608]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001518:	ed93 7b00 	vldr	d7, [r3]
 800151c:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001740 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8001520:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001524:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001528:	4b94      	ldr	r3, [pc, #592]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800152a:	ed83 7b04 	vstr	d7, [r3, #16]
		SV[3] = Vy - Vx + (W * 0.154852);
 800152e:	4b90      	ldr	r3, [pc, #576]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001530:	ed93 6b00 	vldr	d6, [r3]
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001536:	ed93 7b00 	vldr	d7, [r3]
 800153a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800153e:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001540:	ed93 7b00 	vldr	d7, [r3]
 8001544:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8001748 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8001548:	ee27 7b05 	vmul.f64	d7, d7, d5
 800154c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001552:	ed83 7b06 	vstr	d7, [r3, #24]
//			SV4 *= temp_SV;
//			SV1 *= temp_SV;
//			SV2 *= temp_SV;
//			SV3 *= temp_SV;
//		}
		SV_Limit(SV, max_rps);
 8001556:	4b8a      	ldr	r3, [pc, #552]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001558:	ed93 7b00 	vldr	d7, [r3]
 800155c:	eeb0 0b47 	vmov.f64	d0, d7
 8001560:	4886      	ldr	r0, [pc, #536]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001562:	f7ff f88b 	bl	800067c <SV_Limit>

		enc[0] = __HAL_TIM_GetCounter(&htim23);
 8001566:	4b87      	ldr	r3, [pc, #540]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b86      	ldr	r3, [pc, #536]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001570:	801a      	strh	r2, [r3, #0]
		enc[1] = __HAL_TIM_GetCounter(&htim4) * -1;
 8001572:	4b86      	ldr	r3, [pc, #536]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	b29b      	uxth	r3, r3
 800157a:	425b      	negs	r3, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001582:	805a      	strh	r2, [r3, #2]
		enc[2] = __HAL_TIM_GetCounter(&htim24);
 8001584:	4b82      	ldr	r3, [pc, #520]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800158e:	809a      	strh	r2, [r3, #4]
		enc[3] = __HAL_TIM_GetCounter(&htim3);
 8001590:	4b80      	ldr	r3, [pc, #512]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800159a:	80da      	strh	r2, [r3, #6]
		__HAL_TIM_SetCounter(&htim24, 0);
 800159c:	4b7c      	ldr	r3, [pc, #496]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 80015a4:	4b77      	ldr	r3, [pc, #476]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 80015ac:	4b79      	ldr	r3, [pc, #484]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 80015b4:	4b75      	ldr	r3, [pc, #468]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
//		}
//		if(pulse1 > 3200) pulse1 = 3200;
//		if(pulse2 > 3200) pulse2 = 3200;
//		if(pulse3 > 3200) pulse3 = 3200;
//		if(pulse4 > 3200) pulse4 = 3200;
		for (int i = 0; i < 4; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e180      	b.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x42c>
			it[i] = et[i];
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	4873      	ldr	r0, [pc, #460]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	00c9      	lsls	r1, r1, #3
 80015d4:	4401      	add	r1, r0
 80015d6:	e9c1 2300 	strd	r2, r3, [r1]
			PV[i] = (double) enc[i] * PI * 0.0996 / (4 * resolution * reduction_ratio) * frequency;
 80015da:	4a6b      	ldr	r2, [pc, #428]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015ea:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001750 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80015ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015f2:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001758 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 80015f6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80015fc:	ed93 7b00 	vldr	d7, [r3]
 8001600:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001604:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800160a:	ed93 7b00 	vldr	d7, [r3]
 800160e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001612:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001616:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	ed83 7b00 	vstr	d7, [r3]
			et[i] = SV[i] - PV[i];
 800162c:	4a53      	ldr	r2, [pc, #332]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	ed93 6b00 	vldr	d6, [r3]
 8001638:	4a5c      	ldr	r2, [pc, #368]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x314>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	ed93 7b00 	vldr	d7, [r3]
 8001644:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001648:	4a53      	ldr	r2, [pc, #332]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	ed83 7b00 	vstr	d7, [r3]
			up[i] = Kp[i] * et[i];
 8001654:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	ed93 6b00 	vldr	d6, [r3]
 8001660:	4a4d      	ldr	r2, [pc, #308]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	ed93 7b00 	vldr	d7, [r3]
 800166c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	ed83 7b00 	vstr	d7, [r3]
			ui[i] += Ki[i] * it[i] * 0.001;
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	ed93 6b00 	vldr	d6, [r3]
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	ed93 5b00 	vldr	d5, [r3]
 8001694:	4a41      	ldr	r2, [pc, #260]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	ed93 7b00 	vldr	d7, [r3]
 80016a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80016a4:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8001760 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80016a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b0:	4a41      	ldr	r2, [pc, #260]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	ed83 7b00 	vstr	d7, [r3]
			ud[i] = Kd[i] * (et[i] - it[i]) / 0.001;
 80016bc:	4a40      	ldr	r2, [pc, #256]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	ed93 6b00 	vldr	d6, [r3]
 80016c8:	4a33      	ldr	r2, [pc, #204]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	ed93 5b00 	vldr	d5, [r3]
 80016d4:	4a31      	ldr	r2, [pc, #196]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	ed93 7b00 	vldr	d7, [r3]
 80016e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80016e8:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001760 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80016ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016f0:	4a34      	ldr	r2, [pc, #208]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	ed83 7b00 	vstr	d7, [r3]
			if (ui[i] > imax)ui[i] = imax;
 80016fc:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4413      	add	r3, r2
 8001704:	ed93 6b00 	vldr	d6, [r3]
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800170a:	ed93 7b00 	vldr	d7, [r3]
 800170e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd59      	ble.n	80017cc <HAL_TIM_PeriodElapsedCallback+0x334>
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	00c9      	lsls	r1, r1, #3
 8001724:	4401      	add	r1, r0
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
 800172a:	e06a      	b.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x36a>
 800172c:	f3af 8000 	nop.w
 8001730:	7a743a64 	.word	0x7a743a64
 8001734:	3fc38dde 	.word	0x3fc38dde
 8001738:	66b1e5c1 	.word	0x66b1e5c1
 800173c:	3fc39064 	.word	0x3fc39064
 8001740:	3f2d3c79 	.word	0x3f2d3c79
 8001744:	3fc39570 	.word	0x3fc39570
 8001748:	b9dc2f40 	.word	0xb9dc2f40
 800174c:	3fc3d230 	.word	0x3fc3d230
 8001750:	4d12d84a 	.word	0x4d12d84a
 8001754:	400921fb 	.word	0x400921fb
 8001758:	b6ae7d56 	.word	0xb6ae7d56
 800175c:	3fb97f62 	.word	0x3fb97f62
 8001760:	d2f1a9fc 	.word	0xd2f1a9fc
 8001764:	3f50624d 	.word	0x3f50624d
 8001768:	40000c00 	.word	0x40000c00
 800176c:	24000630 	.word	0x24000630
 8001770:	24000648 	.word	0x24000648
 8001774:	24000640 	.word	0x24000640
 8001778:	24000650 	.word	0x24000650
 800177c:	24000510 	.word	0x24000510
 8001780:	24000620 	.word	0x24000620
 8001784:	24000274 	.word	0x24000274
 8001788:	24000610 	.word	0x24000610
 800178c:	24000144 	.word	0x24000144
 8001790:	240002c0 	.word	0x240002c0
 8001794:	240000f8 	.word	0x240000f8
 8001798:	240005b0 	.word	0x240005b0
 800179c:	240005f0 	.word	0x240005f0
 80017a0:	24000000 	.word	0x24000000
 80017a4:	24000008 	.word	0x24000008
 80017a8:	24000010 	.word	0x24000010
 80017ac:	24000530 	.word	0x24000530
 80017b0:	24000550 	.word	0x24000550
 80017b4:	240004b0 	.word	0x240004b0
 80017b8:	240004d0 	.word	0x240004d0
 80017bc:	24000570 	.word	0x24000570
 80017c0:	24000590 	.word	0x24000590
 80017c4:	240004f0 	.word	0x240004f0
 80017c8:	24000618 	.word	0x24000618
			else if (ui[i] < imax * -1)ui[i] = imax * -1;
 80017cc:	4a9c      	ldr	r2, [pc, #624]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	ed93 6b00 	vldr	d6, [r3]
 80017d8:	4b9a      	ldr	r3, [pc, #616]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	eeb1 7b47 	vneg.f64	d7, d7
 80017e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d50a      	bpl.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x36a>
 80017ec:	4b95      	ldr	r3, [pc, #596]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80017ee:	ed93 7b00 	vldr	d7, [r3]
 80017f2:	eeb1 7b47 	vneg.f64	d7, d7
 80017f6:	4a92      	ldr	r2, [pc, #584]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	ed83 7b00 	vstr	d7, [r3]
			ut[i] = up[i] + ui[i] + ud[i];
 8001802:	4a91      	ldr	r2, [pc, #580]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	ed93 6b00 	vldr	d6, [r3]
 800180e:	4a8c      	ldr	r2, [pc, #560]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	ed93 7b00 	vldr	d7, [r3]
 800181a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800181e:	4a8b      	ldr	r2, [pc, #556]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	ed93 7b00 	vldr	d7, [r3]
 800182a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800182e:	4a88      	ldr	r2, [pc, #544]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	ed83 7b00 	vstr	d7, [r3]
			ut[i] > 0 ? (pulse[i] = ut[i] * 3200) : (pulse[i] = ut[i] * -3200);
 800183a:	4a85      	ldr	r2, [pc, #532]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	ed93 7b00 	vldr	d7, [r3]
 8001846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	dd10      	ble.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x3da>
 8001850:	4a7f      	ldr	r2, [pc, #508]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	ed93 7b00 	vldr	d7, [r3]
 800185c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001a30 <HAL_TIM_PeriodElapsedCallback+0x598>
 8001860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001864:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	ed83 7b00 	vstr	d7, [r3]
 8001870:	e00f      	b.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x3fa>
 8001872:	4a77      	ldr	r2, [pc, #476]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	ed93 7b00 	vldr	d7, [r3]
 800187e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x5a0>
 8001882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001886:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	ed83 7b00 	vstr	d7, [r3]
			if(pulse[i] > 3200) pulse[i] = 3200;
 8001892:	4a70      	ldr	r2, [pc, #448]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	ed93 7b00 	vldr	d7, [r3]
 800189e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001a30 <HAL_TIM_PeriodElapsedCallback+0x598>
 80018a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd08      	ble.n	80018be <HAL_TIM_PeriodElapsedCallback+0x426>
 80018ac:	4a69      	ldr	r2, [pc, #420]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	18d1      	adds	r1, r2, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80018ba:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 4; i++) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	f77f ae7b 	ble.w	80015c2 <HAL_TIM_PeriodElapsedCallback+0x12a>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pulse[0]);
 80018cc:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018da:	ee17 2a90 	vmov	r2, s15
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pulse[1]);
 80018e0:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80018e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018ee:	ee17 2a90 	vmov	r2, s15
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pulse[2]);
 80018f4:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80018f6:	ed93 7b04 	vldr	d7, [r3, #16]
 80018fa:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001902:	ee17 2a90 	vmov	r2, s15
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse[3]);
 8001908:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800190a:	ed93 7b06 	vldr	d7, [r3, #24]
 800190e:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001916:	ee17 2a90 	vmov	r2, s15
 800191a:	635a      	str	r2, [r3, #52]	; 0x34
//		}
//		rVy = 0.25 * ( PV1 + PV2 + PV3 + PV4 );
//		rVx = 0.25 * ( PV1 - PV2 + PV3 - PV4 );
//		rW = 0.25 * ( PV1 - PV2 - PV3 + PV4 );

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001922:	4850      	ldr	r0, [pc, #320]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001924:	f006 fef8 	bl	8008718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192e:	484d      	ldr	r0, [pc, #308]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001930:	f006 fef2 	bl	8008718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193a:	484b      	ldr	r0, [pc, #300]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800193c:	f006 feec 	bl	8008718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	4848      	ldr	r0, [pc, #288]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001946:	f006 fee7 	bl	8008718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4845      	ldr	r0, [pc, #276]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001952:	f006 fee1 	bl	8008718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195c:	4842      	ldr	r0, [pc, #264]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800195e:	f006 fedb 	bl	8008718 <HAL_GPIO_WritePin>

		if (ut[0] > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001964:	ed93 7b00 	vldr	d7, [r3]
 8001968:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	dd06      	ble.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	483a      	ldr	r0, [pc, #232]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800197a:	f006 fecd 	bl	8008718 <HAL_GPIO_WritePin>
 800197e:	e00d      	b.n	800199c <HAL_TIM_PeriodElapsedCallback+0x504>
		else if (ut[0] < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001980:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001982:	ed93 7b00 	vldr	d7, [r3]
 8001986:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d505      	bpl.n	800199c <HAL_TIM_PeriodElapsedCallback+0x504>
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001996:	4833      	ldr	r0, [pc, #204]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001998:	f006 febe 	bl	8008718 <HAL_GPIO_WritePin>
		if (ut[1] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800199e:	ed93 7b02 	vldr	d7, [r3, #8]
 80019a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd06      	ble.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x522>
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b2:	482d      	ldr	r0, [pc, #180]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019b4:	f006 feb0 	bl	8008718 <HAL_GPIO_WritePin>
 80019b8:	e00c      	b.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x53c>
		else if (ut[1] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80019bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80019c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d504      	bpl.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x53c>
 80019ca:	2201      	movs	r2, #1
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	4826      	ldr	r0, [pc, #152]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019d0:	f006 fea2 	bl	8008718 <HAL_GPIO_WritePin>
		if (ut[2] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80019d6:	ed93 7b04 	vldr	d7, [r3, #16]
 80019da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dd06      	ble.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x55a>
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ea:	481f      	ldr	r0, [pc, #124]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80019ec:	f006 fe94 	bl	8008718 <HAL_GPIO_WritePin>
 80019f0:	e00d      	b.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x576>
		else if (ut[2] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80019f4:	ed93 7b04 	vldr	d7, [r3, #16]
 80019f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	d505      	bpl.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x576>
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a08:	4817      	ldr	r0, [pc, #92]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001a0a:	f006 fe85 	bl	8008718 <HAL_GPIO_WritePin>
		if (ut[3] > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001a10:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd26      	ble.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x5d4>
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4810      	ldr	r0, [pc, #64]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001a26:	f006 fe77 	bl	8008718 <HAL_GPIO_WritePin>
 8001a2a:	e02c      	b.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x5ee>
 8001a2c:	f3af 8000 	nop.w
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40a90000 	.word	0x40a90000
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	c0a90000 	.word	0xc0a90000
 8001a40:	240004d0 	.word	0x240004d0
 8001a44:	24000618 	.word	0x24000618
 8001a48:	240004b0 	.word	0x240004b0
 8001a4c:	240004f0 	.word	0x240004f0
 8001a50:	24000490 	.word	0x24000490
 8001a54:	240005d0 	.word	0x240005d0
 8001a58:	40a90000 	.word	0x40a90000
 8001a5c:	240001dc 	.word	0x240001dc
 8001a60:	24000228 	.word	0x24000228
 8001a64:	58020400 	.word	0x58020400
 8001a68:	58021000 	.word	0x58021000
		else if (ut[3] < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001a6e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a72:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d504      	bpl.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x5ee>
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4829      	ldr	r0, [pc, #164]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001a82:	f006 fe49 	bl	8008718 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( PV[0] + PV[1] + PV[2] + PV[3] );
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001a88:	ed93 6b00 	vldr	d6, [r3]
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001a8e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001a98:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001aa2:	ed93 7b06 	vldr	d7, [r3, #24]
 8001aa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aaa:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ab4:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( PV[0] - PV[1] + PV[2] - PV[3] );
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001aba:	ed93 6b00 	vldr	d6, [r3]
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ac0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ac4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001aca:	ed93 7b04 	vldr	d7, [r3, #16]
 8001ace:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ad4:	ed93 7b06 	vldr	d7, [r3, #24]
 8001ad8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001adc:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001ae0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001ae6:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( PV[0] - PV[1] - PV[2] + PV[3] );
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001aec:	ed93 6b00 	vldr	d6, [r3]
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001af2:	ed93 7b02 	vldr	d7, [r3, #8]
 8001af6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001afc:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b06:	ed93 7b06 	vldr	d7, [r3, #24]
 8001b0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b0e:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001b12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b18:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24000490 	.word	0x24000490
 8001b28:	58021000 	.word	0x58021000
 8001b2c:	24000530 	.word	0x24000530
 8001b30:	24000660 	.word	0x24000660
 8001b34:	24000658 	.word	0x24000658
 8001b38:	24000668 	.word	0x24000668

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>

08001b46 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	0800eec4 	.word	0x0800eec4

08001b88 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
      data()
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ffe8 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ffcf 	bl	8001b46 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800eeac 	.word	0x0800eeac

08001bb8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2ca      	uxtb	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0a19      	lsrs	r1, r3, #8
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c19      	lsrs	r1, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3302      	adds	r3, #2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0e19      	lsrs	r1, r3, #24
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3303      	adds	r3, #3
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a19      	lsrs	r1, r3, #8
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b2ca      	uxtb	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	0c19      	lsrs	r1, r3, #16
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0e19      	lsrs	r1, r3, #24
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    }
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	440b      	add	r3, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	440b      	add	r3, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	440b      	add	r3, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	440b      	add	r3, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d22:	68fb      	ldr	r3, [r7, #12]
    }
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	0800ec1c 	.word	0x0800ec1c

08001d4c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	0800ec30 	.word	0x0800ec30

08001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fef8 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	809a      	strh	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a06      	ldr	r2, [pc, #24]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
    {
    }
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0800ee94 	.word	0x0800ee94
 8001dac:	0800ec54 	.word	0x0800ec54

08001db0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8899      	ldrh	r1, [r3, #4]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3302      	adds	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa90 	bl	8000310 <strlen>
 8001df0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fd5c 	bl	80038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3304      	adds	r3, #4
 8001e04:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	18d0      	adds	r0, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f00c fd5e 	bl	800e8d4 <memcpy>
      offset += length_topic_name;
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fa73 	bl	8000310 <strlen>
 8001e2a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fd3f 	bl	80038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	18d0      	adds	r0, r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f00c fd41 	bl	800e8d4 <memcpy>
      offset += length_message_type;
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4413      	add	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fa56 	bl	8000310 <strlen>
 8001e64:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fd22 	bl	80038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3304      	adds	r3, #4
 8001e78:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	18d0      	adds	r0, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f00c fd24 	bl	800e8d4 <memcpy>
      offset += length_md5sum;
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0a19      	lsrs	r1, r3, #8
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	0c19      	lsrs	r1, r3, #16
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0e19      	lsrs	r1, r3, #24
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	61fb      	str	r3, [r7, #28]
      return offset;
 8001edc:	69fb      	ldr	r3, [r7, #28]
    }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b08a      	sub	sp, #40	; 0x28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	440b      	add	r3, r1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3302      	adds	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 fcde 	bl	80038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4413      	add	r3, r2
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d20c      	bcs.n	8001f68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	441a      	add	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	440b      	add	r3, r1
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e7ec      	b.n	8001f42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	441a      	add	r2, r3
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fcab 	bl	80038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d20c      	bcs.n	8001fce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	441a      	add	r2, r3
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	e7ec      	b.n	8001fa8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fc78 	bl	80038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3304      	adds	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	441a      	add	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3b01      	subs	r3, #1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	440b      	add	r3, r1
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e7ec      	b.n	800200e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	3b01      	subs	r3, #1
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	3b01      	subs	r3, #1
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	441a      	add	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	440a      	add	r2, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	3301      	adds	r3, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	440b      	add	r3, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	4313      	orrs	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3303      	adds	r3, #3
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	440b      	add	r3, r1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	4313      	orrs	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3304      	adds	r3, #4
 80020aa:	61bb      	str	r3, [r7, #24]
     return offset;
 80020ac:	69bb      	ldr	r3, [r7, #24]
    }
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	0800ec58 	.word	0x0800ec58

080020d4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0800ec74 	.word	0x0800ec74

080020f0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fd34 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	711a      	strb	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002110:	609a      	str	r2, [r3, #8]
    {
    }
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	0800ee7c 	.word	0x0800ee7c
 8002120:	0800ec54 	.word	0x0800ec54

08002124 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	7912      	ldrb	r2, [r2, #4]
 800213c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f8e1 	bl	8000310 <strlen>
 800214e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f001 fbad 	bl	80038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	18d0      	adds	r0, r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4619      	mov	r1, r3
 8002172:	f00c fbaf 	bl	800e8d4 <memcpy>
      offset += length_msg;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
      return offset;
 800217e:	68fb      	ldr	r3, [r7, #12]
    }
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3301      	adds	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	441a      	add	r2, r3
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fb9d 	bl	80038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3304      	adds	r3, #4
 80021be:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d20c      	bcs.n	80021ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	441a      	add	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3b01      	subs	r3, #1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e7ec      	b.n	80021c4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	3b01      	subs	r3, #1
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
     return offset;
 800220e:	693b      	ldr	r3, [r7, #16]
    }
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	0800ec98 	.word	0x0800ec98

08002234 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0800ecac 	.word	0x0800ecac

08002250 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fc84 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	0800ee64 	.word	0x0800ee64

08002298 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0a19      	lsrs	r1, r3, #8
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3301      	adds	r3, #1
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c19      	lsrs	r1, r3, #16
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3302      	adds	r3, #2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0e19      	lsrs	r1, r3, #24
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	3303      	adds	r3, #3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	3304      	adds	r3, #4
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d22b      	bcs.n	8002356 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800230c:	6939      	ldr	r1, [r7, #16]
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	0a19      	lsrs	r1, r3, #8
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	3301      	adds	r3, #1
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	0c19      	lsrs	r1, r3, #16
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3302      	adds	r3, #2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	0e19      	lsrs	r1, r3, #24
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3303      	adds	r3, #3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3304      	adds	r3, #4
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	3301      	adds	r3, #1
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	e7ce      	b.n	80022f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	0a19      	lsrs	r1, r3, #8
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	0c19      	lsrs	r1, r3, #16
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3302      	adds	r3, #2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	0e19      	lsrs	r1, r3, #24
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	3303      	adds	r3, #3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4413      	add	r3, r2
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3304      	adds	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d22b      	bcs.n	8002406 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0a19      	lsrs	r1, r3, #8
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0c19      	lsrs	r1, r3, #16
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3302      	adds	r3, #2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	0e19      	lsrs	r1, r3, #24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	3303      	adds	r3, #3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3304      	adds	r3, #4
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e7ce      	b.n	80023a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69d9      	ldr	r1, [r3, #28]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	0a19      	lsrs	r1, r3, #8
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	0c19      	lsrs	r1, r3, #16
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3302      	adds	r3, #2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	0e19      	lsrs	r1, r3, #24
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3303      	adds	r3, #3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3304      	adds	r3, #4
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d228      	bcs.n	80024b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff50 	bl	8000310 <strlen>
 8002470:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fa1c 	bl	80038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	3304      	adds	r3, #4
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	18d0      	adds	r0, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4619      	mov	r1, r3
 800249c:	f00c fa1a 	bl	800e8d4 <memcpy>
      offset += length_stringsi;
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4413      	add	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e7d1      	b.n	8002454 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024b2:	4618      	mov	r0, r3
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08e      	sub	sp, #56	; 0x38
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	3301      	adds	r3, #1
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	3302      	adds	r3, #2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	3303      	adds	r3, #3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	6a3a      	ldr	r2, [r7, #32]
 8002504:	4313      	orrs	r3, r2
 8002506:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	3304      	adds	r3, #4
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d90a      	bls.n	800252e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f00c f9ec 	bl	800e900 <realloc>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	429a      	cmp	r2, r3
 8002540:	d236      	bcs.n	80025b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	440a      	add	r2, r1
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	3301      	adds	r3, #1
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	3302      	adds	r3, #2
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	440b      	add	r3, r1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	3303      	adds	r3, #3
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	440b      	add	r3, r1
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	3304      	adds	r3, #4
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	3301      	adds	r3, #1
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
 80025ae:	e7c3      	b.n	8002538 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	3301      	adds	r3, #1
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	3302      	adds	r3, #2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	3303      	adds	r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	3304      	adds	r3, #4
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d90a      	bls.n	8002616 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f00c f978 	bl	800e900 <realloc>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	429a      	cmp	r2, r3
 8002628:	d236      	bcs.n	8002698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440a      	add	r2, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	3301      	adds	r3, #1
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3302      	adds	r3, #2
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	440b      	add	r3, r1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	3303      	adds	r3, #3
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	3214      	adds	r2, #20
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	3301      	adds	r3, #1
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	e7c3      	b.n	8002620 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	3301      	adds	r3, #1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	3302      	adds	r3, #2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	3303      	adds	r3, #3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3304      	adds	r3, #4
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d90a      	bls.n	80026fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f00c f904 	bl	800e900 <realloc>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270e:	429a      	cmp	r2, r3
 8002710:	d23f      	bcs.n	8002792 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	441a      	add	r2, r3
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f8e8 	bl	80038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	3304      	adds	r3, #4
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	429a      	cmp	r2, r3
 8002738:	d20c      	bcs.n	8002754 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	441a      	add	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	440b      	add	r3, r1
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e7ec      	b.n	800272e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	3b01      	subs	r3, #1
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	3b01      	subs	r3, #1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	441a      	add	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	3220      	adds	r2, #32
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	3301      	adds	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002790:	e7ba      	b.n	8002708 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002794:	4618      	mov	r0, r3
 8002796:	3738      	adds	r7, #56	; 0x38
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	0800edb8 	.word	0x0800edb8

080027b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	0800ecd0 	.word	0x0800ecd0

080027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
  }
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d068      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d061      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d05a      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3b      	ldr	r2, [pc, #236]	; (8002944 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d053      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d04c      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a36      	ldr	r2, [pc, #216]	; (800294c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d045      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a33      	ldr	r2, [pc, #204]	; (8002950 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d03e      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a31      	ldr	r2, [pc, #196]	; (8002954 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d037      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d030      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2c      	ldr	r2, [pc, #176]	; (800295c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d029      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d022      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d01b      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d014      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00d      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d006      	beq.n	8002904 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d109      	bne.n	8002918 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	e008      	b.n	800292a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40020010 	.word	0x40020010
 800293c:	40020028 	.word	0x40020028
 8002940:	40020040 	.word	0x40020040
 8002944:	40020058 	.word	0x40020058
 8002948:	40020070 	.word	0x40020070
 800294c:	40020088 	.word	0x40020088
 8002950:	400200a0 	.word	0x400200a0
 8002954:	400200b8 	.word	0x400200b8
 8002958:	40020410 	.word	0x40020410
 800295c:	40020428 	.word	0x40020428
 8002960:	40020440 	.word	0x40020440
 8002964:	40020458 	.word	0x40020458
 8002968:	40020470 	.word	0x40020470
 800296c:	40020488 	.word	0x40020488
 8002970:	400204a0 	.word	0x400204a0
 8002974:	400204b8 	.word	0x400204b8

08002978 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <_ZN13STM32HardwareC1Ev+0x34>)
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	2400030c 	.word	0x2400030c

080029b0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f804 	bl	80029c6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	4619      	mov	r1, r3
 80029dc:	f009 fefc 	bl	800c7d8 <HAL_UART_Receive_DMA>
    }
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
      int c = -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff0d 	bl	800281c <_ZN13STM32Hardware10getRdmaIndEv>
 8002a02:	4603      	mov	r3, r0
 8002a04:	429c      	cmp	r4, r3
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d012      	beq.n	8002a38 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a18:	1c59      	adds	r1, r3, #1
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	791b      	ldrb	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a38:	68fb      	ldr	r3, [r7, #12]
    }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
	...

08002a44 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d108      	bne.n	8002a6a <_ZN13STM32Hardware5flushEv+0x26>
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <_ZN13STM32Hardware5flushEv+0x26>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <_ZN13STM32Hardware5flushEv+0x28>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03f      	beq.n	8002af0 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d031      	beq.n	8002aea <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d20a      	bcs.n	8002aac <_ZN13STM32Hardware5flushEv+0x68>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	e006      	b.n	8002aba <_ZN13STM32Hardware5flushEv+0x76>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ac6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	89fa      	ldrh	r2, [r7, #14]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f009 fdef 	bl	800c6b4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002aea:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
      }
    }
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	24000638 	.word	0x24000638

08002afc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b12:	bfa8      	it	ge
 8002b14:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b18:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b20:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4293      	cmp	r3, r2
 8002b28:	bf28      	it	cs
 8002b2a:	4613      	movcs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f00b fec7 	bl	800e8d4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d00b      	beq.n	8002b7a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	18d1      	adds	r1, r2, r3
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	f00b fead 	bl	800e8d4 <memcpy>
      }

      flush();
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff ff62 	bl	8002a44 <_ZN13STM32Hardware5flushEv>
    }
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	f002 f9da 	bl	8004f48 <HAL_GetTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe ffdc 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	0800ee20 	.word	0x0800ee20

08002bf0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bf0:	b480      	push	{r7}
 8002bf2:	b08b      	sub	sp, #44	; 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	4401      	add	r1, r0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	0a02      	lsrs	r2, r0, #8
 8002c24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c28:	0a0b      	lsrs	r3, r1, #8
 8002c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2c:	3101      	adds	r1, #1
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	4401      	add	r1, r0
 8002c32:	b2d3      	uxtb	r3, r2
 8002c34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	0c02      	lsrs	r2, r0, #16
 8002c44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c48:	0c0b      	lsrs	r3, r1, #16
 8002c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4c:	3102      	adds	r1, #2
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	4401      	add	r1, r0
 8002c52:	b2d3      	uxtb	r3, r2
 8002c54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	0e02      	lsrs	r2, r0, #24
 8002c64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c68:	0e0b      	lsrs	r3, r1, #24
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	3103      	adds	r1, #3
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	4401      	add	r1, r0
 8002c72:	b2d3      	uxtb	r3, r2
 8002c74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	000a      	movs	r2, r1
 8002c84:	2300      	movs	r3, #0
 8002c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c88:	3104      	adds	r1, #4
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	4401      	add	r1, r0
 8002c8e:	b2d3      	uxtb	r3, r2
 8002c90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	0a0a      	lsrs	r2, r1, #8
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca4:	3105      	adds	r1, #5
 8002ca6:	6838      	ldr	r0, [r7, #0]
 8002ca8:	4401      	add	r1, r0
 8002caa:	b2d3      	uxtb	r3, r2
 8002cac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	0c0a      	lsrs	r2, r1, #16
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	3106      	adds	r1, #6
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	4401      	add	r1, r0
 8002cc6:	b2d3      	uxtb	r3, r2
 8002cc8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002cca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	0e0a      	lsrs	r2, r1, #24
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cdc:	3107      	adds	r1, #7
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	4401      	add	r1, r0
 8002ce2:	b2d3      	uxtb	r3, r2
 8002ce4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	3308      	adds	r3, #8
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	4401      	add	r1, r0
 8002d00:	b2d3      	uxtb	r3, r2
 8002d02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002d04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	0a02      	lsrs	r2, r0, #8
 8002d12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d16:	0a0b      	lsrs	r3, r1, #8
 8002d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1a:	3101      	adds	r1, #1
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	4401      	add	r1, r0
 8002d20:	b2d3      	uxtb	r3, r2
 8002d22:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	0c02      	lsrs	r2, r0, #16
 8002d32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d36:	0c0b      	lsrs	r3, r1, #16
 8002d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3a:	3102      	adds	r1, #2
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	4401      	add	r1, r0
 8002d40:	b2d3      	uxtb	r3, r2
 8002d42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	0e02      	lsrs	r2, r0, #24
 8002d52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d56:	0e0b      	lsrs	r3, r1, #24
 8002d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5a:	3103      	adds	r1, #3
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	4401      	add	r1, r0
 8002d60:	b2d3      	uxtb	r3, r2
 8002d62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	000a      	movs	r2, r1
 8002d72:	2300      	movs	r3, #0
 8002d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d76:	3104      	adds	r1, #4
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	4401      	add	r1, r0
 8002d7c:	b2d3      	uxtb	r3, r2
 8002d7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	0a0a      	lsrs	r2, r1, #8
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d92:	3105      	adds	r1, #5
 8002d94:	6838      	ldr	r0, [r7, #0]
 8002d96:	4401      	add	r1, r0
 8002d98:	b2d3      	uxtb	r3, r2
 8002d9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	0c0a      	lsrs	r2, r1, #16
 8002daa:	2300      	movs	r3, #0
 8002dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dae:	3106      	adds	r1, #6
 8002db0:	6838      	ldr	r0, [r7, #0]
 8002db2:	4401      	add	r1, r0
 8002db4:	b2d3      	uxtb	r3, r2
 8002db6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002db8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	0e0a      	lsrs	r2, r1, #24
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dca:	3107      	adds	r1, #7
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	4401      	add	r1, r0
 8002dd0:	b2d3      	uxtb	r3, r2
 8002dd2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002de0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	4401      	add	r1, r0
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	0a02      	lsrs	r2, r0, #8
 8002e00:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e04:	0a0b      	lsrs	r3, r1, #8
 8002e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e08:	3101      	adds	r1, #1
 8002e0a:	6838      	ldr	r0, [r7, #0]
 8002e0c:	4401      	add	r1, r0
 8002e0e:	b2d3      	uxtb	r3, r2
 8002e10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	0c02      	lsrs	r2, r0, #16
 8002e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e24:	0c0b      	lsrs	r3, r1, #16
 8002e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e28:	3102      	adds	r1, #2
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	4401      	add	r1, r0
 8002e2e:	b2d3      	uxtb	r3, r2
 8002e30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	0e02      	lsrs	r2, r0, #24
 8002e40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e44:	0e0b      	lsrs	r3, r1, #24
 8002e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e48:	3103      	adds	r1, #3
 8002e4a:	6838      	ldr	r0, [r7, #0]
 8002e4c:	4401      	add	r1, r0
 8002e4e:	b2d3      	uxtb	r3, r2
 8002e50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	000a      	movs	r2, r1
 8002e60:	2300      	movs	r3, #0
 8002e62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e64:	3104      	adds	r1, #4
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	4401      	add	r1, r0
 8002e6a:	b2d3      	uxtb	r3, r2
 8002e6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	0a0a      	lsrs	r2, r1, #8
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e80:	3105      	adds	r1, #5
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	4401      	add	r1, r0
 8002e86:	b2d3      	uxtb	r3, r2
 8002e88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	0c0a      	lsrs	r2, r1, #16
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9c:	3106      	adds	r1, #6
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	4401      	add	r1, r0
 8002ea2:	b2d3      	uxtb	r3, r2
 8002ea4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	0e0a      	lsrs	r2, r1, #24
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb8:	3107      	adds	r1, #7
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	4401      	add	r1, r0
 8002ebe:	b2d3      	uxtb	r3, r2
 8002ec0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002eca:	4618      	mov	r0, r3
 8002ecc:	372c      	adds	r7, #44	; 0x2c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ed6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eda:	b0eb      	sub	sp, #428	; 0x1ac
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002ee2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ef8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002efc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	4615      	mov	r5, r2
 8002f10:	ea40 0804 	orr.w	r8, r0, r4
 8002f14:	ea41 0905 	orr.w	r9, r1, r5
 8002f18:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	469a      	mov	sl, r3
 8002f34:	4693      	mov	fp, r2
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002f42:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002f46:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002f4a:	ea40 0402 	orr.w	r4, r0, r2
 8002f4e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f58:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002f5c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f60:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002f7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002f8a:	464c      	mov	r4, r9
 8002f8c:	0423      	lsls	r3, r4, #16
 8002f8e:	4644      	mov	r4, r8
 8002f90:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f94:	4644      	mov	r4, r8
 8002f96:	0422      	lsls	r2, r4, #16
 8002f98:	ea40 0402 	orr.w	r4, r0, r2
 8002f9c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002fa6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002faa:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fae:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fb6:	1cda      	adds	r2, r3, #3
 8002fb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002fc8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002fcc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002fd8:	4623      	mov	r3, r4
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fe0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	4303      	orrs	r3, r0
 8002fe8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fec:	462b      	mov	r3, r5
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ff4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002ff8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ffc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003000:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003016:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003026:	0023      	movs	r3, r4
 8003028:	2200      	movs	r2, #0
 800302a:	ea40 0402 	orr.w	r4, r0, r2
 800302e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003032:	430b      	orrs	r3, r1
 8003034:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003038:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800303c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003040:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003044:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003048:	1d5a      	adds	r2, r3, #5
 800304a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800304e:	4413      	add	r3, r2
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800305a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800306a:	0223      	lsls	r3, r4, #8
 800306c:	2200      	movs	r2, #0
 800306e:	ea40 0402 	orr.w	r4, r0, r2
 8003072:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003076:	430b      	orrs	r3, r1
 8003078:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800307c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003080:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003084:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003088:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800308c:	1d9a      	adds	r2, r3, #6
 800308e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800309e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80030ae:	0423      	lsls	r3, r4, #16
 80030b0:	2200      	movs	r2, #0
 80030b2:	ea40 0402 	orr.w	r4, r0, r2
 80030b6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80030ba:	430b      	orrs	r3, r1
 80030bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030c0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80030c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030d0:	1dda      	adds	r2, r3, #7
 80030d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030d6:	4413      	add	r3, r2
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80030f2:	0623      	lsls	r3, r4, #24
 80030f4:	2200      	movs	r2, #0
 80030f6:	ea40 0402 	orr.w	r4, r0, r2
 80030fa:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80030fe:	430b      	orrs	r3, r1
 8003100:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003104:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003108:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 800310c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003110:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003114:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003118:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800311c:	3308      	adds	r3, #8
 800311e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800312e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003132:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003136:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003146:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800314a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800314e:	4623      	mov	r3, r4
 8003150:	4303      	orrs	r3, r0
 8003152:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003156:	462b      	mov	r3, r5
 8003158:	430b      	orrs	r3, r1
 800315a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800315e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003162:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003166:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800316a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003180:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003190:	464c      	mov	r4, r9
 8003192:	0223      	lsls	r3, r4, #8
 8003194:	4644      	mov	r4, r8
 8003196:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800319a:	4644      	mov	r4, r8
 800319c:	0222      	lsls	r2, r4, #8
 800319e:	ea40 0402 	orr.w	r4, r0, r2
 80031a2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80031a6:	430b      	orrs	r3, r1
 80031a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80031ac:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80031b0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031b4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80031de:	464c      	mov	r4, r9
 80031e0:	0423      	lsls	r3, r4, #16
 80031e2:	4644      	mov	r4, r8
 80031e4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031e8:	4644      	mov	r4, r8
 80031ea:	0422      	lsls	r2, r4, #16
 80031ec:	ea40 0402 	orr.w	r4, r0, r2
 80031f0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80031f4:	430b      	orrs	r3, r1
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031fa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80031fe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003202:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003206:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800320a:	1cda      	adds	r2, r3, #3
 800320c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003210:	4413      	add	r3, r2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800321c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003220:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003224:	4623      	mov	r3, r4
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800322c:	4623      	mov	r3, r4
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003234:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003238:	4623      	mov	r3, r4
 800323a:	4303      	orrs	r3, r0
 800323c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003240:	462b      	mov	r3, r5
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003248:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800324c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003250:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003254:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003258:	1d1a      	adds	r2, r3, #4
 800325a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2200      	movs	r2, #0
 8003266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800326a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800327a:	0023      	movs	r3, r4
 800327c:	2200      	movs	r2, #0
 800327e:	ea40 0402 	orr.w	r4, r0, r2
 8003282:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003286:	430b      	orrs	r3, r1
 8003288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800328c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003290:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003294:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003298:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800329c:	1d5a      	adds	r2, r3, #5
 800329e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ae:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80032be:	0223      	lsls	r3, r4, #8
 80032c0:	2200      	movs	r2, #0
 80032c2:	ea40 0402 	orr.w	r4, r0, r2
 80032c6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80032ca:	430b      	orrs	r3, r1
 80032cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032d0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80032d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032e0:	1d9a      	adds	r2, r3, #6
 80032e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003302:	0423      	lsls	r3, r4, #16
 8003304:	2200      	movs	r2, #0
 8003306:	ea40 0402 	orr.w	r4, r0, r2
 800330a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800330e:	430b      	orrs	r3, r1
 8003310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003314:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003318:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800331c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003320:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003324:	1dda      	adds	r2, r3, #7
 8003326:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003346:	0623      	lsls	r3, r4, #24
 8003348:	2200      	movs	r2, #0
 800334a:	ea40 0402 	orr.w	r4, r0, r2
 800334e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003352:	430b      	orrs	r3, r1
 8003354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003358:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800335c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003360:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003364:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003368:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800336c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003370:	3308      	adds	r3, #8
 8003372:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003382:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003386:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800338a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800338e:	4413      	add	r3, r2
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800339a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800339e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80033a2:	4623      	mov	r3, r4
 80033a4:	4303      	orrs	r3, r0
 80033a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033a8:	462b      	mov	r3, r5
 80033aa:	430b      	orrs	r3, r1
 80033ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033ae:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80033b2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033c4:	4413      	add	r3, r2
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2200      	movs	r2, #0
 80033cc:	673b      	str	r3, [r7, #112]	; 0x70
 80033ce:	677a      	str	r2, [r7, #116]	; 0x74
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033dc:	464c      	mov	r4, r9
 80033de:	0223      	lsls	r3, r4, #8
 80033e0:	4644      	mov	r4, r8
 80033e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033e6:	4644      	mov	r4, r8
 80033e8:	0222      	lsls	r2, r4, #8
 80033ea:	ea40 0402 	orr.w	r4, r0, r2
 80033ee:	66bc      	str	r4, [r7, #104]	; 0x68
 80033f0:	430b      	orrs	r3, r1
 80033f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80033f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003400:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2200      	movs	r2, #0
 8003412:	663b      	str	r3, [r7, #96]	; 0x60
 8003414:	667a      	str	r2, [r7, #100]	; 0x64
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003422:	464c      	mov	r4, r9
 8003424:	0423      	lsls	r3, r4, #16
 8003426:	4644      	mov	r4, r8
 8003428:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800342c:	4644      	mov	r4, r8
 800342e:	0422      	lsls	r2, r4, #16
 8003430:	ea40 0402 	orr.w	r4, r0, r2
 8003434:	65bc      	str	r4, [r7, #88]	; 0x58
 8003436:	430b      	orrs	r3, r1
 8003438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800343e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003442:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003446:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800344a:	1cda      	adds	r2, r3, #3
 800344c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2200      	movs	r2, #0
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
 800345a:	657a      	str	r2, [r7, #84]	; 0x54
 800345c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003460:	4623      	mov	r3, r4
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003466:	4623      	mov	r3, r4
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
 800346c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003470:	4623      	mov	r3, r4
 8003472:	4303      	orrs	r3, r0
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
 8003476:	462b      	mov	r3, r5
 8003478:	430b      	orrs	r3, r1
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
 800347c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003480:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003484:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003488:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2200      	movs	r2, #0
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
 800349c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80034a8:	0023      	movs	r3, r4
 80034aa:	2200      	movs	r2, #0
 80034ac:	ea40 0402 	orr.w	r4, r0, r2
 80034b0:	633c      	str	r4, [r7, #48]	; 0x30
 80034b2:	430b      	orrs	r3, r1
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
 80034b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034c6:	1d5a      	adds	r2, r3, #5
 80034c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2200      	movs	r2, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80034e2:	0223      	lsls	r3, r4, #8
 80034e4:	2200      	movs	r2, #0
 80034e6:	ea40 0402 	orr.w	r4, r0, r2
 80034ea:	623c      	str	r4, [r7, #32]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034f4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034f8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003500:	3306      	adds	r3, #6
 8003502:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2200      	movs	r2, #0
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	69bc      	ldr	r4, [r7, #24]
 800351c:	0423      	lsls	r3, r4, #16
 800351e:	2200      	movs	r2, #0
 8003520:	ea40 0402 	orr.w	r4, r0, r2
 8003524:	613c      	str	r4, [r7, #16]
 8003526:	430b      	orrs	r3, r1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800352e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003532:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003536:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800353a:	3307      	adds	r3, #7
 800353c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2200      	movs	r2, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	60fa      	str	r2, [r7, #12]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	68bc      	ldr	r4, [r7, #8]
 8003556:	0623      	lsls	r3, r4, #24
 8003558:	2200      	movs	r2, #0
 800355a:	ea40 0402 	orr.w	r4, r0, r2
 800355e:	603c      	str	r4, [r7, #0]
 8003560:	430b      	orrs	r3, r1
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003568:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800356c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003570:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003574:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003578:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800357c:	3308      	adds	r3, #8
 800357e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003582:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003586:	4618      	mov	r0, r3
 8003588:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800358c:	46bd      	mov	sp, r7
 800358e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003592:	4770      	bx	lr

08003594 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	0800ecf4 	.word	0x0800ecf4

080035b0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	0800ed0c 	.word	0x0800ed0c

080035cc <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fac6 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3308      	adds	r3, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fada 	bl	8002ba0 <_ZN13geometry_msgs7Vector3C1Ev>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3328      	adds	r3, #40	; 0x28
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fad5 	bl	8002ba0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	0800ee08 	.word	0x0800ee08

08003604 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 0008 	add.w	r0, r3, #8
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f7ff fae6 	bl	8002bf0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7ff fad9 	bl	8002bf0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
      return offset;
 8003646:	68fb      	ldr	r3, [r7, #12]
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0008 	add.w	r0, r3, #8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4413      	add	r3, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff fc33 	bl	8002ed6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	4619      	mov	r1, r3
 8003686:	f7ff fc26 	bl	8002ed6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
     return offset;
 8003692:	68fb      	ldr	r3, [r7, #12]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	0800ed30 	.word	0x0800ed30

080036b8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	0800ed44 	.word	0x0800ed44

080036d4 <_Z8callbackRKN13geometry_msgs5TwistE>:
		*speed = (double) enc
				/ (4 * resolution * reduction_ratio) * frequency;
}

void callback(const geometry_msgs::Twist &msg)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036e2:	490a      	ldr	r1, [pc, #40]	; (800370c <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 80036e4:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036ee:	4908      	ldr	r1, [pc, #32]	; (8003710 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80036fa:	4906      	ldr	r1, [pc, #24]	; (8003714 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 80036fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	24000640 	.word	0x24000640
 8003710:	24000648 	.word	0x24000648
 8003714:	24000650 	.word	0x24000650

08003718 <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &insVel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800371c:	b672      	cpsid	i
}
 800371e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003720:	e7fe      	b.n	8003720 <_Z13Error_Handlerv+0x8>
	...

08003724 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003728:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <_ZL20MX_USART10_UART_Initv+0xbc>)
 800372c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003734:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800374a:	220c      	movs	r2, #12
 800374c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374e:	4b23      	ldr	r3, [pc, #140]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800375c:	2200      	movs	r2, #0
 800375e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003762:	2200      	movs	r2, #0
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003768:	2200      	movs	r2, #0
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800376c:	481b      	ldr	r0, [pc, #108]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800376e:	f008 ff15 	bl	800c59c <HAL_UART_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8003782:	f7ff ffc9 	bl	8003718 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003786:	2100      	movs	r1, #0
 8003788:	4814      	ldr	r0, [pc, #80]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 800378a:	f00a ff93 	bl	800e6b4 <HAL_UARTEx_SetTxFifoThreshold>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 800379e:	f7ff ffbb 	bl	8003718 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037a2:	2100      	movs	r1, #0
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037a6:	f00a ffc3 	bl	800e730 <HAL_UARTEx_SetRxFifoThreshold>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80037ba:	f7ff ffad 	bl	8003718 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80037be:	4807      	ldr	r0, [pc, #28]	; (80037dc <_ZL20MX_USART10_UART_Initv+0xb8>)
 80037c0:	f00a ff3f 	bl	800e642 <HAL_UARTEx_DisableFifoMode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80037d4:	f7ff ffa0 	bl	8003718 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2400030c 	.word	0x2400030c
 80037e0:	40011c00 	.word	0x40011c00

080037e4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a14      	ldr	r2, [pc, #80]	; (8003840 <HAL_UART_ErrorCallback+0x5c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d120      	bne.n	8003836 <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 80037f4:	4913      	ldr	r1, [pc, #76]	; (8003844 <HAL_UART_ErrorCallback+0x60>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003802:	4911      	ldr	r1, [pc, #68]	; (8003848 <HAL_UART_ErrorCallback+0x64>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003810:	490e      	ldr	r1, [pc, #56]	; (800384c <HAL_UART_ErrorCallback+0x68>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 800381e:	4808      	ldr	r0, [pc, #32]	; (8003840 <HAL_UART_ErrorCallback+0x5c>)
 8003820:	f008 ff0c 	bl	800c63c <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003824:	f7ff ff7e 	bl	8003724 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <HAL_UART_ErrorCallback+0x6c>)
 800382a:	f000 f94d 	bl	8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800382e:	4603      	mov	r3, r0
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f8bd 	bl	80029b0 <_ZN13STM32Hardware4initEv>
    }
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2400030c 	.word	0x2400030c
 8003844:	24000640 	.word	0x24000640
 8003848:	24000648 	.word	0x24000648
 800384c:	24000650 	.word	0x24000650
 8003850:	240006b8 	.word	0x240006b8

08003854 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <HAL_UART_RxCpltCallback+0x20>)
 800385e:	f000 f933 	bl	8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f8ae 	bl	80029c6 <_ZN13STM32Hardware10reset_rbufEv>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	240006b8 	.word	0x240006b8

08003878 <setup>:
void setup(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
    nh.initNode();
 800387c:	4806      	ldr	r0, [pc, #24]	; (8003898 <setup+0x20>)
 800387e:	f000 f92f 	bl	8003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003882:	4906      	ldr	r1, [pc, #24]	; (800389c <setup+0x24>)
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <setup+0x20>)
 8003886:	f000 f948 	bl	8003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 800388a:	4905      	ldr	r1, [pc, #20]	; (80038a0 <setup+0x28>)
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <setup+0x20>)
 800388e:	f000 f96f 	bl	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	240006b8 	.word	0x240006b8
 800389c:	24000ff8 	.word	0x24000ff8
 80038a0:	24001058 	.word	0x24001058

080038a4 <loop>:
void loop(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <loop+0x10>)
 80038aa:	f000 f991 	bl	8003bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	240006b8 	.word	0x240006b8

080038b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d80d      	bhi.n	80038e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	fa22 f103 	lsr.w	r1, r2, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	b2ca      	uxtb	r2, r1
 80038de:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e7ee      	b.n	80038c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d811      	bhi.n	8003932 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	440a      	add	r2, r1
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	4611      	mov	r1, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e7ea      	b.n	8003908 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	0800ee50 	.word	0x0800ee50

08003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ffe8 	bl	8003940 <_ZN3ros15NodeHandleBase_C1Ev>
 8003970:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fffc 	bl	8002978 <_ZN13STM32HardwareC1Ev>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fc5e 	bl	8002250 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b18      	cmp	r3, #24
 800399c:	d80b      	bhi.n	80039b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e7f0      	b.n	8003998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b18      	cmp	r3, #24
 80039be:	d80a      	bhi.n	80039d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039c8:	2100      	movs	r1, #0
 80039ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3301      	adds	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e7f1      	b.n	80039ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d20a      	bcs.n	80039f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e7f0      	b.n	80039da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d20a      	bcs.n	8003a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	e7f0      	b.n	80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	0800edf4 	.word	0x0800edf4

08003a60 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	0800ee38 	.word	0x0800ee38

08003a80 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ffe5 	bl	8003a60 <_ZN3ros11Subscriber_C1Ev>
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fd93 	bl	80035cc <_ZN13geometry_msgs5TwistC1Ev>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
  };
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0800eddc 	.word	0x0800eddc

08003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
  }
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe ff5f 	bl	80029b0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b18      	cmp	r3, #24
 8003b2c:	dc19      	bgt.n	8003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	605a      	str	r2, [r3, #4]
        return true;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e004      	b.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e7e2      	b.n	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003b62:	2300      	movs	r3, #0
  }
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b18      	cmp	r3, #24
 8003b82:	dc1e      	bgt.n	8003bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d111      	bne.n	8003bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
        return true;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e004      	b.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e7dd      	b.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003bc2:	2300      	movs	r3, #0
  }
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe ffd3 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 8003be2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d903      	bls.n	8003bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d903      	bls.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d014      	beq.n	8003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe ffac 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad2      	subs	r2, r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	bf8c      	ite	hi
 8003c40:	2301      	movhi	r3, #1
 8003c42:	2300      	movls	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003c4a:	f06f 0301 	mvn.w	r3, #1
 8003c4e:	e194      	b.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fec7 	bl	80029e8 <_ZN13STM32Hardware4readEv>
 8003c5a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f2c0 8174 	blt.w	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c7a:	2b07      	cmp	r3, #7
 8003c7c:	d11e      	bne.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003c84:	1c59      	adds	r1, r3, #1
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	b2d1      	uxtb	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	460a      	mov	r2, r1
 8003c96:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1b4      	bne.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003cba:	e7af      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d128      	bne.n	8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2bff      	cmp	r3, #255	; 0xff
 8003cca:	d10d      	bne.n	8003ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f103 0214 	add.w	r2, r3, #20
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003ce6:	e799      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe ff4b 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	bf8c      	ite	hi
 8003d00:	2301      	movhi	r3, #1
 8003d02:	2300      	movls	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d088      	beq.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003d12:	f06f 0301 	mvn.w	r3, #1
 8003d16:	e130      	b.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d118      	bne.n	8003d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2bfe      	cmp	r3, #254	; 0xfe
 8003d26:	d107      	bne.n	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d36:	e771      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f47f af68 	bne.w	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f918 	bl	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003d52:	e763      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d113      	bne.n	8003d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003d84:	e74a      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d110      	bne.n	8003db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	441a      	add	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003db0:	e734      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d116      	bne.n	8003dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003dc2:	425a      	negs	r2, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	bf58      	it	pl
 8003dca:	4253      	negpl	r3, r2
 8003dcc:	2bff      	cmp	r3, #255	; 0xff
 8003dce:	d107      	bne.n	8003de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003dde:	e71d      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003de8:	e718      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d10f      	bne.n	8003e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003e12:	e703      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d117      	bne.n	8003e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2207      	movs	r2, #7
 8003e34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f47f aeec 	bne.w	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2208      	movs	r2, #8
 8003e48:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e4c:	e6e6      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	f47f aee1 	bne.w	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e68:	425a      	negs	r2, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	bf58      	it	pl
 8003e70:	4253      	negpl	r3, r2
 8003e72:	2bff      	cmp	r3, #255	; 0xff
 8003e74:	f47f aed2 	bne.w	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d110      	bne.n	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f87d 	bl	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f898 	bl	8003fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e06a      	b.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eaa:	2b0a      	cmp	r3, #10
 8003eac:	d107      	bne.n	8003ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f960 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003ebc:	e6ae      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d10e      	bne.n	8003ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe faef 	bl	80024ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003ee4:	e69a      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eec:	2b0b      	cmp	r3, #11
 8003eee:	d104      	bne.n	8003efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003ef8:	e690      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f00:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f43f ae84 	beq.w	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f1a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f2e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003f46:	4611      	mov	r1, r2
 8003f48:	4798      	blx	r3
    while (true)
 8003f4a:	e667      	b.n	8003c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003f4c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00f      	beq.n	8003f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d906      	bls.n	8003f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f809 	bl	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003f78:	2300      	movs	r3, #0
  }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fdfa 	bl	8001b88 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f107 020c 	add.w	r2, r7, #12
 8003f9e:	210a      	movs	r1, #10
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
    rt_time = hardware_.time();
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fded 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003fbe:	b590      	push	{r4, r7, lr}
 8003fc0:	b08b      	sub	sp, #44	; 0x2c
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003fc6:	f107 030c 	add.w	r3, r7, #12
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd fecc 	bl	8001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	2b18      	cmp	r3, #24
 8003fd8:	dc63      	bgt.n	80040a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d056      	beq.n	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4608      	mov	r0, r1
 800403a:	4798      	blx	r3
 800403c:	4603      	mov	r3, r0
 800403e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4608      	mov	r0, r1
 8004068:	4798      	blx	r3
 800406a:	4603      	mov	r3, r0
 800406c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800406e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004072:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681c      	ldr	r4, [r3, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fbba 	bl	8002802 <_ZN3ros9Publisher15getEndpointTypeEv>
 800408e:	4601      	mov	r1, r0
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	461a      	mov	r2, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	e798      	b.n	8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	2b18      	cmp	r3, #24
 80040aa:	dc5f      	bgt.n	800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d053      	beq.n	8004164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4798      	blx	r3
 8004100:	4603      	mov	r3, r0
 8004102:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	f202 2222 	addw	r2, r2, #546	; 0x222
 800410c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4608      	mov	r0, r1
 8004124:	4798      	blx	r3
 8004126:	4603      	mov	r3, r0
 8004128:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800412a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800412e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681c      	ldr	r4, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800413e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	f202 2222 	addw	r2, r2, #546	; 0x222
 800414a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4608      	mov	r0, r1
 8004156:	4798      	blx	r3
 8004158:	4601      	mov	r1, r0
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	461a      	mov	r2, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	3301      	adds	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
 800416a:	e79c      	b.n	80040a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004174:	bf00      	nop
 8004176:	372c      	adds	r7, #44	; 0x2c
 8004178:	46bd      	mov	sp, r7
 800417a:	bd90      	pop	{r4, r7, pc}

0800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd fcfc 	bl	8001b88 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fcf7 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd fd5b 	bl	8001c68 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4915      	ldr	r1, [pc, #84]	; (800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80041b8:	fba1 1303 	umull	r1, r3, r1, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	4413      	add	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80041c2:	6939      	ldr	r1, [r7, #16]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80041c8:	fba3 0302 	umull	r0, r3, r3, r2
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	440b      	add	r3, r1
 80041e0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8a6 	bl	800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fcc7 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004202:	bf00      	nop
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	10624dd3 	.word	0x10624dd3
 8004210:	000f4240 	.word	0x000f4240

08004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b63      	cmp	r3, #99	; 0x63
 8004224:	dd09      	ble.n	800423a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800422c:	f083 0301 	eor.w	r3, r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004236:	2300      	movs	r3, #0
 8004238:	e079      	b.n	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004246:	3207      	adds	r2, #7
 8004248:	4611      	mov	r1, r2
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	22ff      	movs	r2, #255	; 0xff
 8004254:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	22fe      	movs	r2, #254	; 0xfe
 800425c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	b29b      	uxth	r3, r3
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b29b      	uxth	r3, r3
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004286:	4413      	add	r3, r2
 8004288:	b2db      	uxtb	r3, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	b21b      	sxth	r3, r3
 80042a2:	121b      	asrs	r3, r3, #8
 80042a4:	b21b      	sxth	r3, r3
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80042b2:	2305      	movs	r3, #5
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3306      	adds	r3, #6
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	429a      	cmp	r2, r3
 80042be:	dc0d      	bgt.n	80042dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	4413      	add	r3, r2
 80042c6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	e7ec      	b.n	80042b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3307      	adds	r3, #7
 80042e0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	425a      	negs	r2, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	bf58      	it	pl
 80042ec:	4253      	negpl	r3, r2
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	6179      	str	r1, [r7, #20]
 80042f6:	43d2      	mvns	r2, r2
 80042f8:	b2d1      	uxtb	r1, r2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	460a      	mov	r2, r1
 8004300:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430a:	dc0a      	bgt.n	8004322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1d18      	adds	r0, r3, #4
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4619      	mov	r1, r3
 800431a:	f7fe fbef 	bl	8002afc <_ZN13STM32Hardware5writeEPhi>
      return l;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e005      	b.n	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004322:	4905      	ldr	r1, [pc, #20]	; (8004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f849 	bl	80043bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800432a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	0800ed68 	.word	0x0800ed68

0800433c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fc1c 	bl	8002b88 <_ZN13STM32Hardware4timeEv>
 8004350:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4915      	ldr	r1, [pc, #84]	; (80043b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800435a:	fba1 1303 	umull	r1, r3, r1, r3
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	1e5a      	subs	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004372:	fba3 0302 	umull	r0, r3, r3, r2
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800437c:	fb00 f303 	mul.w	r3, r0, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004384:	fb02 f303 	mul.w	r3, r2, r3
 8004388:	1aca      	subs	r2, r1, r3
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fc f93e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	10624dd3 	.word	0x10624dd3
 80043b4:	000f4240 	.word	0x000f4240
 80043b8:	3b9aca00 	.word	0x3b9aca00

080043bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	2103      	movs	r1, #3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f804 	bl	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	460b      	mov	r3, r1
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80043e6:	f107 0314 	add.w	r3, r7, #20
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fe80 	bl	80020f0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f107 0214 	add.w	r2, r7, #20
 8004402:	2107      	movs	r1, #7
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	4798      	blx	r3
  }
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <_Z41__static_initialization_and_destruction_0ii>:
	insVel.angular.z = rW;
	run_inter0 ++;
	pub.publish(&insVel);

	run_inter1 ++;
}
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d116      	bne.n	800444e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004426:	4293      	cmp	r3, r2
 8004428:	d111      	bne.n	800444e <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist insVel;
 800442a:	480b      	ldr	r0, [pc, #44]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800442c:	f7ff f8ce 	bl	80035cc <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004430:	480a      	ldr	r0, [pc, #40]	; (800445c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004432:	f7ff fa95 	bl	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8004436:	2301      	movs	r3, #1
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800443a:	490a      	ldr	r1, [pc, #40]	; (8004464 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800443c:	480a      	ldr	r0, [pc, #40]	; (8004468 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800443e:	f7ff fb1f 	bl	8003a80 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &insVel);
 8004442:	2300      	movs	r3, #0
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004448:	4809      	ldr	r0, [pc, #36]	; (8004470 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800444a:	f7fe f9c3 	bl	80027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	24000670 	.word	0x24000670
 800445c:	240006b8 	.word	0x240006b8
 8004460:	080036d5 	.word	0x080036d5
 8004464:	0800eda4 	.word	0x0800eda4
 8004468:	24000ff8 	.word	0x24000ff8
 800446c:	0800edac 	.word	0x0800edac
 8004470:	24001058 	.word	0x24001058

08004474 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3310      	adds	r3, #16
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f8e3 	bl	8003650 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	3210      	adds	r2, #16
 8004492:	4610      	mov	r0, r2
 8004494:	4798      	blx	r3
  }
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3310      	adds	r3, #16
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f8ea 	bl	800369c <_ZN13geometry_msgs5Twist7getTypeEv>
 80044c8:	4603      	mov	r3, r0
  }
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3310      	adds	r3, #16
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f8ea 	bl	80036b8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80044e4:	4603      	mov	r3, r0
  }
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
    return configured_;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_GLOBAL__sub_I_count>:
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
 800450c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004510:	2001      	movs	r0, #1
 8004512:	f7ff ff7d 	bl	8004410 <_Z41__static_initialization_and_destruction_0ii>
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_MspInit+0x3c>)
 8004520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <HAL_MspInit+0x3c>)
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_MspInit+0x3c>)
 8004530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	2005      	movs	r0, #5
 8004542:	f000 fe0c 	bl	800515e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004546:	2005      	movs	r0, #5
 8004548:	f000 fe23 	bl	8005192 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	58024400 	.word	0x58024400

08004558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d117      	bne.n	800459a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 800456c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004570:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 800457c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	201c      	movs	r0, #28
 800458e:	f000 fde6 	bl	800515e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004592:	201c      	movs	r0, #28
 8004594:	f000 fdfd 	bl	8005192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004598:	e01b      	b.n	80045d2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <HAL_TIM_Base_MspInit+0x88>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d116      	bne.n	80045d2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 80045a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045aa:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 80045ac:	f043 0308 	orr.w	r3, r3, #8
 80045b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_TIM_Base_MspInit+0x84>)
 80045b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	2032      	movs	r0, #50	; 0x32
 80045c8:	f000 fdc9 	bl	800515e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80045cc:	2032      	movs	r0, #50	; 0x32
 80045ce:	f000 fde0 	bl	8005192 <HAL_NVIC_EnableIRQ>
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	40000c00 	.word	0x40000c00

080045e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b090      	sub	sp, #64	; 0x40
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a69      	ldr	r2, [pc, #420]	; (80047a8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12e      	bne.n	8004664 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004606:	4b69      	ldr	r3, [pc, #420]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800460c:	4a67      	ldr	r2, [pc, #412]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800462a:	4a60      	ldr	r2, [pc, #384]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004634:	4b5d      	ldr	r3, [pc, #372]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004642:	23c0      	movs	r3, #192	; 0xc0
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	2300      	movs	r3, #0
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004652:	2302      	movs	r3, #2
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	4854      	ldr	r0, [pc, #336]	; (80047b0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800465e:	f003 fdb1 	bl	80081c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004662:	e09c      	b.n	800479e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12f      	bne.n	80046ce <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800466e:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004674:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004676:	f043 0304 	orr.w	r3, r3, #4
 800467a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800467e:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800468c:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 800468e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004692:	4a46      	ldr	r2, [pc, #280]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800469c:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 800469e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80046aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	2302      	movs	r3, #2
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046bc:	2302      	movs	r3, #2
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046c4:	4619      	mov	r1, r3
 80046c6:	483c      	ldr	r0, [pc, #240]	; (80047b8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80046c8:	f003 fd7c 	bl	80081c4 <HAL_GPIO_Init>
}
 80046cc:	e067      	b.n	800479e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <HAL_TIM_Encoder_MspInit+0x1d8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d12e      	bne.n	8004736 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046de:	4a33      	ldr	r2, [pc, #204]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80046e8:	4b30      	ldr	r3, [pc, #192]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046fc:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 80046fe:	f043 0320 	orr.w	r3, r3, #32
 8004702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004714:	2303      	movs	r3, #3
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004718:	2302      	movs	r3, #2
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004724:	230d      	movs	r3, #13
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800472c:	4619      	mov	r1, r3
 800472e:	4824      	ldr	r0, [pc, #144]	; (80047c0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004730:	f003 fd48 	bl	80081c4 <HAL_GPIO_Init>
}
 8004734:	e033      	b.n	800479e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d12e      	bne.n	800479e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004746:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800474c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004752:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004766:	f043 0320 	orr.w	r3, r3, #32
 800476a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800477c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800478e:	230e      	movs	r3, #14
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004796:	4619      	mov	r1, r3
 8004798:	4809      	ldr	r0, [pc, #36]	; (80047c0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800479a:	f003 fd13 	bl	80081c4 <HAL_GPIO_Init>
}
 800479e:	bf00      	nop
 80047a0:	3740      	adds	r7, #64	; 0x40
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40000400 	.word	0x40000400
 80047ac:	58024400 	.word	0x58024400
 80047b0:	58020000 	.word	0x58020000
 80047b4:	40000800 	.word	0x40000800
 80047b8:	58020c00 	.word	0x58020c00
 80047bc:	4000e000 	.word	0x4000e000
 80047c0:	58021400 	.word	0x58021400
 80047c4:	4000e400 	.word	0x4000e400

080047c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_PWM_MspInit+0x68>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10f      	bne.n	80047fa <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047da:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 80047dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 80047ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80047f8:	e013      	b.n	8004822 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <HAL_TIM_PWM_MspInit+0x70>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10e      	bne.n	8004822 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 8004806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_TIM_PWM_MspInit+0x6c>)
 8004816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800481a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010400 	.word	0x40010400
 8004834:	58024400 	.word	0x58024400
 8004838:	40014000 	.word	0x40014000

0800483c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a35      	ldr	r2, [pc, #212]	; (8004930 <HAL_TIM_MspPostInit+0xf4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d120      	bne.n	80048a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 8004860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004864:	4a33      	ldr	r2, [pc, #204]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 8004870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800487c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	2302      	movs	r3, #2
 8004884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800488e:	2303      	movs	r3, #3
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004892:	f107 0314 	add.w	r3, r7, #20
 8004896:	4619      	mov	r1, r3
 8004898:	4827      	ldr	r0, [pc, #156]	; (8004938 <HAL_TIM_MspPostInit+0xfc>)
 800489a:	f003 fc93 	bl	80081c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800489e:	e042      	b.n	8004926 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <HAL_TIM_MspPostInit+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d13d      	bne.n	8004926 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048aa:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048b2:	f043 0310 	orr.w	r3, r3, #16
 80048b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048ba:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ce:	4a19      	ldr	r2, [pc, #100]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048d8:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_TIM_MspPostInit+0xf8>)
 80048da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048e6:	2320      	movs	r3, #32
 80048e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80048f6:	2304      	movs	r3, #4
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	480f      	ldr	r0, [pc, #60]	; (8004940 <HAL_TIM_MspPostInit+0x104>)
 8004902:	f003 fc5f 	bl	80081c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004906:	2308      	movs	r3, #8
 8004908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490a:	2302      	movs	r3, #2
 800490c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	2300      	movs	r3, #0
 8004914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004916:	2304      	movs	r3, #4
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491a:	f107 0314 	add.w	r3, r7, #20
 800491e:	4619      	mov	r1, r3
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <HAL_TIM_MspPostInit+0x108>)
 8004922:	f003 fc4f 	bl	80081c4 <HAL_GPIO_Init>
}
 8004926:	bf00      	nop
 8004928:	3728      	adds	r7, #40	; 0x28
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40010400 	.word	0x40010400
 8004934:	58024400 	.word	0x58024400
 8004938:	58020800 	.word	0x58020800
 800493c:	40014000 	.word	0x40014000
 8004940:	58021000 	.word	0x58021000
 8004944:	58020000 	.word	0x58020000

08004948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0b6      	sub	sp, #216	; 0xd8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	22b4      	movs	r2, #180	; 0xb4
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f009 ffc1 	bl	800e8f0 <memset>
  if(huart->Instance==USART10)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a62      	ldr	r2, [pc, #392]	; (8004afc <HAL_UART_MspInit+0x1b4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	f040 80bc 	bne.w	8004af2 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800497a:	2301      	movs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004984:	f107 0310 	add.w	r3, r7, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f004 fe77 	bl	800967c <HAL_RCCEx_PeriphCLKConfig>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004994:	f7fd f8d2 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 800499a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800499e:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049a8:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 80049aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049b6:	4b52      	ldr	r3, [pc, #328]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049bc:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_UART_MspInit+0x1b8>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049d4:	2304      	movs	r3, #4
 80049d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80049ec:	2304      	movs	r3, #4
 80049ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4842      	ldr	r0, [pc, #264]	; (8004b04 <HAL_UART_MspInit+0x1bc>)
 80049fa:	f003 fbe3 	bl	80081c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049fe:	2308      	movs	r3, #8
 8004a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a04:	2302      	movs	r3, #2
 8004a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004a16:	230b      	movs	r3, #11
 8004a18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4838      	ldr	r0, [pc, #224]	; (8004b04 <HAL_UART_MspInit+0x1bc>)
 8004a24:	f003 fbce 	bl	80081c4 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004a28:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a2a:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <HAL_UART_MspInit+0x1c4>)
 8004a2c:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a30:	2276      	movs	r2, #118	; 0x76
 8004a32:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a34:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3a:	4b33      	ldr	r3, [pc, #204]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a40:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a46:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a48:	4b2f      	ldr	r3, [pc, #188]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a4e:	4b2e      	ldr	r3, [pc, #184]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5a:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a62:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 8004a6a:	4827      	ldr	r0, [pc, #156]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a6c:	f000 fbba 	bl	80051e4 <HAL_DMA_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8004a76:	f7fd f861 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004a80:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <HAL_UART_MspInit+0x1c0>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_UART_MspInit+0x1cc>)
 8004a8a:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004a8c:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004a8e:	2277      	movs	r2, #119	; 0x77
 8004a90:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a92:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004a94:	2240      	movs	r2, #64	; 0x40
 8004a96:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aa4:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ab8:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004abe:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8004ac6:	4812      	ldr	r0, [pc, #72]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004ac8:	f000 fb8c 	bl	80051e4 <HAL_DMA_Init>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004ad2:	f7fd f833 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004ada:	679a      	str	r2, [r3, #120]	; 0x78
 8004adc:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <HAL_UART_MspInit+0x1c8>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	209c      	movs	r0, #156	; 0x9c
 8004ae8:	f000 fb39 	bl	800515e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004aec:	209c      	movs	r0, #156	; 0x9c
 8004aee:	f000 fb50 	bl	8005192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004af2:	bf00      	nop
 8004af4:	37d8      	adds	r7, #216	; 0xd8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40011c00 	.word	0x40011c00
 8004b00:	58024400 	.word	0x58024400
 8004b04:	58021000 	.word	0x58021000
 8004b08:	2400039c 	.word	0x2400039c
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	24000414 	.word	0x24000414
 8004b14:	40020028 	.word	0x40020028

08004b18 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <HAL_UART_MspDeInit+0x4c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d118      	bne.n	8004b5c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <HAL_UART_MspDeInit+0x50>)
 8004b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b30:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_UART_MspDeInit+0x50>)
 8004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004b3a:	210c      	movs	r1, #12
 8004b3c:	480b      	ldr	r0, [pc, #44]	; (8004b6c <HAL_UART_MspDeInit+0x54>)
 8004b3e:	f003 fce9 	bl	8008514 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fea6 	bl	8005898 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fea1 	bl	8005898 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004b56:	209c      	movs	r0, #156	; 0x9c
 8004b58:	f000 fb29 	bl	80051ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40011c00 	.word	0x40011c00
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	58021000 	.word	0x58021000

08004b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b74:	e7fe      	b.n	8004b74 <NMI_Handler+0x4>

08004b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b7a:	e7fe      	b.n	8004b7a <HardFault_Handler+0x4>

08004b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b80:	e7fe      	b.n	8004b80 <MemManage_Handler+0x4>

08004b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b86:	e7fe      	b.n	8004b86 <BusFault_Handler+0x4>

08004b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b8c:	e7fe      	b.n	8004b8c <UsageFault_Handler+0x4>

08004b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bbc:	f000 f9b0 	bl	8004f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bc0:	bf00      	nop
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004bd8:	4802      	ldr	r0, [pc, #8]	; (8004be4 <DMA1_Stream0_IRQHandler+0x10>)
 8004bda:	f001 ffe1 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2400039c 	.word	0x2400039c

08004be8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004bec:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <DMA1_Stream1_IRQHandler+0x10>)
 8004bee:	f001 ffd7 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	24000414 	.word	0x24000414

08004bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c00:	4802      	ldr	r0, [pc, #8]	; (8004c0c <TIM2_IRQHandler+0x10>)
 8004c02:	f006 fbdd 	bl	800b3c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	240000ac 	.word	0x240000ac

08004c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c18:	f003 fd97 	bl	800874a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <TIM5_IRQHandler+0x10>)
 8004c26:	f006 fbcb 	bl	800b3c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	24000190 	.word	0x24000190

08004c34 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004c38:	4802      	ldr	r0, [pc, #8]	; (8004c44 <USART10_IRQHandler+0x10>)
 8004c3a:	f007 fe23 	bl	800c884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2400030c 	.word	0x2400030c

08004c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
	return 1;
 8004c4c:	2301      	movs	r3, #1
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_kill>:

int _kill(int pid, int sig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c62:	f009 fe0d 	bl	800e880 <__errno>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2216      	movs	r2, #22
 8004c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <_exit>:

void _exit (int status)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffe7 	bl	8004c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c8a:	e7fe      	b.n	8004c8a <_exit+0x12>

08004c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <_sbrk+0x5c>)
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <_sbrk+0x60>)
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <_sbrk+0x64>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <_sbrk+0x64>)
 8004caa:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <_sbrk+0x68>)
 8004cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <_sbrk+0x64>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d207      	bcs.n	8004ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cbc:	f009 fde0 	bl	800e880 <__errno>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	220c      	movs	r2, #12
 8004cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e009      	b.n	8004ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <_sbrk+0x64>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <_sbrk+0x64>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <_sbrk+0x64>)
 8004cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	24050000 	.word	0x24050000
 8004cec:	00000400 	.word	0x00000400
 8004cf0:	2400106c 	.word	0x2400106c
 8004cf4:	24001088 	.word	0x24001088

08004cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <SystemInit+0xd0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	4a31      	ldr	r2, [pc, #196]	; (8004dc8 <SystemInit+0xd0>)
 8004d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <SystemInit+0xd4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d807      	bhi.n	8004d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d18:	4b2c      	ldr	r3, [pc, #176]	; (8004dcc <SystemInit+0xd4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f023 030f 	bic.w	r3, r3, #15
 8004d20:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <SystemInit+0xd4>)
 8004d22:	f043 0307 	orr.w	r3, r3, #7
 8004d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <SystemInit+0xd8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <SystemInit+0xd8>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d34:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <SystemInit+0xd8>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004d3a:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <SystemInit+0xd8>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4924      	ldr	r1, [pc, #144]	; (8004dd0 <SystemInit+0xd8>)
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <SystemInit+0xdc>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <SystemInit+0xd4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <SystemInit+0xd4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 030f 	bic.w	r3, r3, #15
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <SystemInit+0xd4>)
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <SystemInit+0xd8>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <SystemInit+0xd8>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <SystemInit+0xd8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004d74:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <SystemInit+0xd8>)
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <SystemInit+0xe0>)
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <SystemInit+0xd8>)
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <SystemInit+0xe4>)
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <SystemInit+0xd8>)
 8004d82:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <SystemInit+0xe8>)
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <SystemInit+0xd8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <SystemInit+0xd8>)
 8004d8e:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <SystemInit+0xe8>)
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <SystemInit+0xd8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <SystemInit+0xd8>)
 8004d9a:	4a11      	ldr	r2, [pc, #68]	; (8004de0 <SystemInit+0xe8>)
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <SystemInit+0xd8>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <SystemInit+0xd8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <SystemInit+0xd8>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <SystemInit+0xd8>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <SystemInit+0xec>)
 8004db8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004dbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000ed00 	.word	0xe000ed00
 8004dcc:	52002000 	.word	0x52002000
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8004dd8:	02020200 	.word	0x02020200
 8004ddc:	01ff0000 	.word	0x01ff0000
 8004de0:	01010280 	.word	0x01010280
 8004de4:	52004000 	.word	0x52004000

08004de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004dec:	f7ff ff84 	bl	8004cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004df0:	480c      	ldr	r0, [pc, #48]	; (8004e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004df2:	490d      	ldr	r1, [pc, #52]	; (8004e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004df8:	e002      	b.n	8004e00 <LoopCopyDataInit>

08004dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dfe:	3304      	adds	r3, #4

08004e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e04:	d3f9      	bcc.n	8004dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e08:	4c0a      	ldr	r4, [pc, #40]	; (8004e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e0c:	e001      	b.n	8004e12 <LoopFillZerobss>

08004e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e10:	3204      	adds	r2, #4

08004e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e14:	d3fb      	bcc.n	8004e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e16:	f009 fd39 	bl	800e88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e1a:	f7fb fcb1 	bl	8000780 <main>
  bx  lr
 8004e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004e24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004e28:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8004e2c:	0800ef28 	.word	0x0800ef28
  ldr r2, =_sbss
 8004e30:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8004e34:	24001084 	.word	0x24001084

08004e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e38:	e7fe      	b.n	8004e38 <ADC3_IRQHandler>
	...

08004e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e42:	2003      	movs	r0, #3
 8004e44:	f000 f980 	bl	8005148 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e48:	f004 fa42 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_Init+0x68>)
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	4913      	ldr	r1, [pc, #76]	; (8004ea8 <HAL_Init+0x6c>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_Init+0x68>)
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_Init+0x6c>)
 8004e70:	5cd3      	ldrb	r3, [r2, r3]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <HAL_Init+0x70>)
 8004e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e80:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <HAL_Init+0x74>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e86:	200f      	movs	r0, #15
 8004e88:	f000 f814 	bl	8004eb4 <HAL_InitTick>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e002      	b.n	8004e9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e96:	f7ff fb3f 	bl	8004518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	0800eed4 	.word	0x0800eed4
 8004eac:	2400001c 	.word	0x2400001c
 8004eb0:	24000018 	.word	0x24000018

08004eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ebc:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <HAL_InitTick+0x60>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e021      	b.n	8004f0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ec8:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <HAL_InitTick+0x64>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <HAL_InitTick+0x60>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f973 	bl	80051ca <HAL_SYSTICK_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e00e      	b.n	8004f0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	d80a      	bhi.n	8004f0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	f000 f92f 	bl	800515e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f00:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <HAL_InitTick+0x68>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	24000024 	.word	0x24000024
 8004f18:	24000018 	.word	0x24000018
 8004f1c:	24000020 	.word	0x24000020

08004f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_IncTick+0x20>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_IncTick+0x24>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a04      	ldr	r2, [pc, #16]	; (8004f44 <HAL_IncTick+0x24>)
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	24000024 	.word	0x24000024
 8004f44:	24001070 	.word	0x24001070

08004f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <HAL_GetTick+0x14>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	24001070 	.word	0x24001070

08004f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00
 8004fa4:	05fa0000 	.word	0x05fa0000

08004fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0307 	and.w	r3, r3, #7
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0b      	blt.n	8004fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <__NVIC_EnableIRQ+0x38>)
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800500a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500e:	2b00      	cmp	r3, #0
 8005010:	db12      	blt.n	8005038 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	f003 021f 	and.w	r2, r3, #31
 8005018:	490a      	ldr	r1, [pc, #40]	; (8005044 <__NVIC_DisableIRQ+0x44>)
 800501a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	2001      	movs	r0, #1
 8005022:	fa00 f202 	lsl.w	r2, r0, r2
 8005026:	3320      	adds	r3, #32
 8005028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800502c:	f3bf 8f4f 	dsb	sy
}
 8005030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005032:	f3bf 8f6f 	isb	sy
}
 8005036:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000e100 	.word	0xe000e100

08005048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	db0a      	blt.n	8005072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	490c      	ldr	r1, [pc, #48]	; (8005094 <__NVIC_SetPriority+0x4c>)
 8005062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	440b      	add	r3, r1
 800506c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005070:	e00a      	b.n	8005088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4908      	ldr	r1, [pc, #32]	; (8005098 <__NVIC_SetPriority+0x50>)
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	3b04      	subs	r3, #4
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	440b      	add	r3, r1
 8005086:	761a      	strb	r2, [r3, #24]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000e100 	.word	0xe000e100
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f1c3 0307 	rsb	r3, r3, #7
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	bf28      	it	cs
 80050ba:	2304      	movcs	r3, #4
 80050bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d902      	bls.n	80050cc <NVIC_EncodePriority+0x30>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3b03      	subs	r3, #3
 80050ca:	e000      	b.n	80050ce <NVIC_EncodePriority+0x32>
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43da      	mvns	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	401a      	ands	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	43d9      	mvns	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f4:	4313      	orrs	r3, r2
         );
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3724      	adds	r7, #36	; 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005114:	d301      	bcc.n	800511a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005116:	2301      	movs	r3, #1
 8005118:	e00f      	b.n	800513a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <SysTick_Config+0x40>)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3b01      	subs	r3, #1
 8005120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005122:	210f      	movs	r1, #15
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	f7ff ff8e 	bl	8005048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SysTick_Config+0x40>)
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <SysTick_Config+0x40>)
 8005134:	2207      	movs	r2, #7
 8005136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	e000e010 	.word	0xe000e010

08005148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff05 	bl	8004f60 <__NVIC_SetPriorityGrouping>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800516c:	f7ff ff1c 	bl	8004fa8 <__NVIC_GetPriorityGrouping>
 8005170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff90 	bl	800509c <NVIC_EncodePriority>
 800517c:	4602      	mov	r2, r0
 800517e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff ff5f 	bl	8005048 <__NVIC_SetPriority>
}
 800518a:	bf00      	nop
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ff0f 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80051b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff1f 	bl	8005000 <__NVIC_DisableIRQ>
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ff96 	bl	8005104 <SysTick_Config>
 80051d8:	4603      	mov	r3, r0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80051ec:	f7ff feac 	bl	8004f48 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e314      	b.n	8005826 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a66      	ldr	r2, [pc, #408]	; (800539c <HAL_DMA_Init+0x1b8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04a      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a65      	ldr	r2, [pc, #404]	; (80053a0 <HAL_DMA_Init+0x1bc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d045      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a63      	ldr	r2, [pc, #396]	; (80053a4 <HAL_DMA_Init+0x1c0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d040      	beq.n	800529c <HAL_DMA_Init+0xb8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a62      	ldr	r2, [pc, #392]	; (80053a8 <HAL_DMA_Init+0x1c4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d03b      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a60      	ldr	r2, [pc, #384]	; (80053ac <HAL_DMA_Init+0x1c8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d036      	beq.n	800529c <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5f      	ldr	r2, [pc, #380]	; (80053b0 <HAL_DMA_Init+0x1cc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d031      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_DMA_Init+0x1d0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d02c      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5c      	ldr	r2, [pc, #368]	; (80053b8 <HAL_DMA_Init+0x1d4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d027      	beq.n	800529c <HAL_DMA_Init+0xb8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5a      	ldr	r2, [pc, #360]	; (80053bc <HAL_DMA_Init+0x1d8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a59      	ldr	r2, [pc, #356]	; (80053c0 <HAL_DMA_Init+0x1dc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a57      	ldr	r2, [pc, #348]	; (80053c4 <HAL_DMA_Init+0x1e0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_DMA_Init+0xb8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a56      	ldr	r2, [pc, #344]	; (80053c8 <HAL_DMA_Init+0x1e4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a54      	ldr	r2, [pc, #336]	; (80053cc <HAL_DMA_Init+0x1e8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_DMA_Init+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <HAL_DMA_Init+0x1ec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a51      	ldr	r2, [pc, #324]	; (80053d4 <HAL_DMA_Init+0x1f0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_DMA_Init+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a50      	ldr	r2, [pc, #320]	; (80053d8 <HAL_DMA_Init+0x1f4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_Init+0xbc>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_DMA_Init+0xbe>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 813c 	beq.w	8005520 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <HAL_DMA_Init+0x1b8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d04a      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <HAL_DMA_Init+0x1bc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d045      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <HAL_DMA_Init+0x1c0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d040      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <HAL_DMA_Init+0x1c4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d03b      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a31      	ldr	r2, [pc, #196]	; (80053ac <HAL_DMA_Init+0x1c8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d036      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <HAL_DMA_Init+0x1cc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d031      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <HAL_DMA_Init+0x1d0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02c      	beq.n	8005358 <HAL_DMA_Init+0x174>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <HAL_DMA_Init+0x1d4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d027      	beq.n	8005358 <HAL_DMA_Init+0x174>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <HAL_DMA_Init+0x1d8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_DMA_Init+0x174>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <HAL_DMA_Init+0x1dc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <HAL_DMA_Init+0x174>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a28      	ldr	r2, [pc, #160]	; (80053c4 <HAL_DMA_Init+0x1e0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_DMA_Init+0x174>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <HAL_DMA_Init+0x1e4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Init+0x174>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a25      	ldr	r2, [pc, #148]	; (80053cc <HAL_DMA_Init+0x1e8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_DMA_Init+0x174>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <HAL_DMA_Init+0x1ec>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_DMA_Init+0x174>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <HAL_DMA_Init+0x1f0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_DMA_Init+0x174>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <HAL_DMA_Init+0x1f4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <HAL_DMA_Init+0x186>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e007      	b.n	800537a <HAL_DMA_Init+0x196>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800537a:	e02f      	b.n	80053dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800537c:	f7ff fde4 	bl	8004f48 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b05      	cmp	r3, #5
 8005388:	d928      	bls.n	80053dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2203      	movs	r2, #3
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e244      	b.n	8005826 <HAL_DMA_Init+0x642>
 800539c:	40020010 	.word	0x40020010
 80053a0:	40020028 	.word	0x40020028
 80053a4:	40020040 	.word	0x40020040
 80053a8:	40020058 	.word	0x40020058
 80053ac:	40020070 	.word	0x40020070
 80053b0:	40020088 	.word	0x40020088
 80053b4:	400200a0 	.word	0x400200a0
 80053b8:	400200b8 	.word	0x400200b8
 80053bc:	40020410 	.word	0x40020410
 80053c0:	40020428 	.word	0x40020428
 80053c4:	40020440 	.word	0x40020440
 80053c8:	40020458 	.word	0x40020458
 80053cc:	40020470 	.word	0x40020470
 80053d0:	40020488 	.word	0x40020488
 80053d4:	400204a0 	.word	0x400204a0
 80053d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1c8      	bne.n	800537c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4b84      	ldr	r3, [pc, #528]	; (8005608 <HAL_DMA_Init+0x424>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005402:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800540e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800541a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b04      	cmp	r3, #4
 800542e:	d107      	bne.n	8005440 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	4313      	orrs	r3, r2
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b28      	cmp	r3, #40	; 0x28
 8005446:	d903      	bls.n	8005450 <HAL_DMA_Init+0x26c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b2e      	cmp	r3, #46	; 0x2e
 800544e:	d91f      	bls.n	8005490 <HAL_DMA_Init+0x2ac>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b3e      	cmp	r3, #62	; 0x3e
 8005456:	d903      	bls.n	8005460 <HAL_DMA_Init+0x27c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b42      	cmp	r3, #66	; 0x42
 800545e:	d917      	bls.n	8005490 <HAL_DMA_Init+0x2ac>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b46      	cmp	r3, #70	; 0x46
 8005466:	d903      	bls.n	8005470 <HAL_DMA_Init+0x28c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b48      	cmp	r3, #72	; 0x48
 800546e:	d90f      	bls.n	8005490 <HAL_DMA_Init+0x2ac>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b4e      	cmp	r3, #78	; 0x4e
 8005476:	d903      	bls.n	8005480 <HAL_DMA_Init+0x29c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b52      	cmp	r3, #82	; 0x52
 800547e:	d907      	bls.n	8005490 <HAL_DMA_Init+0x2ac>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b73      	cmp	r3, #115	; 0x73
 8005486:	d905      	bls.n	8005494 <HAL_DMA_Init+0x2b0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b77      	cmp	r3, #119	; 0x77
 800548e:	d801      	bhi.n	8005494 <HAL_DMA_Init+0x2b0>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_DMA_Init+0x2b2>
 8005494:	2300      	movs	r3, #0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d117      	bne.n	80054fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00e      	beq.n	80054fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f002 fce6 	bl	8007eb0 <DMA_CheckFifoParam>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2240      	movs	r2, #64	; 0x40
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e194      	b.n	8005826 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 fc21 	bl	8007d4c <DMA_CalcBaseAndBitshift>
 800550a:	4603      	mov	r3, r0
 800550c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	223f      	movs	r2, #63	; 0x3f
 8005518:	409a      	lsls	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	609a      	str	r2, [r3, #8]
 800551e:	e0ca      	b.n	80056b6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a39      	ldr	r2, [pc, #228]	; (800560c <HAL_DMA_Init+0x428>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a38      	ldr	r2, [pc, #224]	; (8005610 <HAL_DMA_Init+0x42c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d01d      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a36      	ldr	r2, [pc, #216]	; (8005614 <HAL_DMA_Init+0x430>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a35      	ldr	r2, [pc, #212]	; (8005618 <HAL_DMA_Init+0x434>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a33      	ldr	r2, [pc, #204]	; (800561c <HAL_DMA_Init+0x438>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a32      	ldr	r2, [pc, #200]	; (8005620 <HAL_DMA_Init+0x43c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a30      	ldr	r2, [pc, #192]	; (8005624 <HAL_DMA_Init+0x440>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_DMA_Init+0x38c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2f      	ldr	r2, [pc, #188]	; (8005628 <HAL_DMA_Init+0x444>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_DMA_Init+0x390>
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_DMA_Init+0x392>
 8005574:	2300      	movs	r3, #0
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8094 	beq.w	80056a4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a22      	ldr	r2, [pc, #136]	; (800560c <HAL_DMA_Init+0x428>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d021      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a21      	ldr	r2, [pc, #132]	; (8005610 <HAL_DMA_Init+0x42c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01c      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1f      	ldr	r2, [pc, #124]	; (8005614 <HAL_DMA_Init+0x430>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <HAL_DMA_Init+0x434>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d012      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <HAL_DMA_Init+0x438>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <HAL_DMA_Init+0x43c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d008      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_DMA_Init+0x440>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <HAL_DMA_Init+0x3e6>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <HAL_DMA_Init+0x444>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_DMA_Init+0x448>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_Init+0x44c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d102      	bne.n	8005602 <HAL_DMA_Init+0x41e>
 80055fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005600:	e017      	b.n	8005632 <HAL_DMA_Init+0x44e>
 8005602:	2300      	movs	r3, #0
 8005604:	e015      	b.n	8005632 <HAL_DMA_Init+0x44e>
 8005606:	bf00      	nop
 8005608:	fe10803f 	.word	0xfe10803f
 800560c:	58025408 	.word	0x58025408
 8005610:	5802541c 	.word	0x5802541c
 8005614:	58025430 	.word	0x58025430
 8005618:	58025444 	.word	0x58025444
 800561c:	58025458 	.word	0x58025458
 8005620:	5802546c 	.word	0x5802546c
 8005624:	58025480 	.word	0x58025480
 8005628:	58025494 	.word	0x58025494
 800562c:	fffe000f 	.word	0xfffe000f
 8005630:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68d2      	ldr	r2, [r2, #12]
 8005636:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005660:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	4b6e      	ldr	r3, [pc, #440]	; (8005830 <HAL_DMA_Init+0x64c>)
 8005678:	4413      	add	r3, r2
 800567a:	4a6e      	ldr	r2, [pc, #440]	; (8005834 <HAL_DMA_Init+0x650>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	009a      	lsls	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f002 fb5f 	bl	8007d4c <DMA_CalcBaseAndBitshift>
 800568e:	4603      	mov	r3, r0
 8005690:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	e008      	b.n	80056b6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0b7      	b.n	8005826 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5f      	ldr	r2, [pc, #380]	; (8005838 <HAL_DMA_Init+0x654>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d072      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a5d      	ldr	r2, [pc, #372]	; (800583c <HAL_DMA_Init+0x658>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d06d      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a5c      	ldr	r2, [pc, #368]	; (8005840 <HAL_DMA_Init+0x65c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d068      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a5a      	ldr	r2, [pc, #360]	; (8005844 <HAL_DMA_Init+0x660>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d063      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a59      	ldr	r2, [pc, #356]	; (8005848 <HAL_DMA_Init+0x664>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d05e      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a57      	ldr	r2, [pc, #348]	; (800584c <HAL_DMA_Init+0x668>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d059      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a56      	ldr	r2, [pc, #344]	; (8005850 <HAL_DMA_Init+0x66c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d054      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a54      	ldr	r2, [pc, #336]	; (8005854 <HAL_DMA_Init+0x670>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d04f      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a53      	ldr	r2, [pc, #332]	; (8005858 <HAL_DMA_Init+0x674>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d04a      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a51      	ldr	r2, [pc, #324]	; (800585c <HAL_DMA_Init+0x678>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d045      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a50      	ldr	r2, [pc, #320]	; (8005860 <HAL_DMA_Init+0x67c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a4e      	ldr	r2, [pc, #312]	; (8005864 <HAL_DMA_Init+0x680>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a4d      	ldr	r2, [pc, #308]	; (8005868 <HAL_DMA_Init+0x684>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d036      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a4b      	ldr	r2, [pc, #300]	; (800586c <HAL_DMA_Init+0x688>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d031      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a4a      	ldr	r2, [pc, #296]	; (8005870 <HAL_DMA_Init+0x68c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d02c      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a48      	ldr	r2, [pc, #288]	; (8005874 <HAL_DMA_Init+0x690>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d027      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a47      	ldr	r2, [pc, #284]	; (8005878 <HAL_DMA_Init+0x694>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a45      	ldr	r2, [pc, #276]	; (800587c <HAL_DMA_Init+0x698>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a44      	ldr	r2, [pc, #272]	; (8005880 <HAL_DMA_Init+0x69c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a42      	ldr	r2, [pc, #264]	; (8005884 <HAL_DMA_Init+0x6a0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a41      	ldr	r2, [pc, #260]	; (8005888 <HAL_DMA_Init+0x6a4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a3f      	ldr	r2, [pc, #252]	; (800588c <HAL_DMA_Init+0x6a8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a3e      	ldr	r2, [pc, #248]	; (8005890 <HAL_DMA_Init+0x6ac>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_Init+0x5c2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3c      	ldr	r2, [pc, #240]	; (8005894 <HAL_DMA_Init+0x6b0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_DMA_Init+0x5c6>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_DMA_Init+0x5c8>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d032      	beq.n	8005816 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f002 fbf9 	bl	8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d102      	bne.n	80057c4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_DMA_Init+0x620>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d80c      	bhi.n	8005804 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f002 fc76 	bl	80080dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e008      	b.n	8005816 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	a7fdabf8 	.word	0xa7fdabf8
 8005834:	cccccccd 	.word	0xcccccccd
 8005838:	40020010 	.word	0x40020010
 800583c:	40020028 	.word	0x40020028
 8005840:	40020040 	.word	0x40020040
 8005844:	40020058 	.word	0x40020058
 8005848:	40020070 	.word	0x40020070
 800584c:	40020088 	.word	0x40020088
 8005850:	400200a0 	.word	0x400200a0
 8005854:	400200b8 	.word	0x400200b8
 8005858:	40020410 	.word	0x40020410
 800585c:	40020428 	.word	0x40020428
 8005860:	40020440 	.word	0x40020440
 8005864:	40020458 	.word	0x40020458
 8005868:	40020470 	.word	0x40020470
 800586c:	40020488 	.word	0x40020488
 8005870:	400204a0 	.word	0x400204a0
 8005874:	400204b8 	.word	0x400204b8
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494

08005898 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e1a8      	b.n	8005bfc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a82      	ldr	r2, [pc, #520]	; (8005ab8 <HAL_DMA_DeInit+0x220>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d04a      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a80      	ldr	r2, [pc, #512]	; (8005abc <HAL_DMA_DeInit+0x224>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d045      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7f      	ldr	r2, [pc, #508]	; (8005ac0 <HAL_DMA_DeInit+0x228>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d040      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7d      	ldr	r2, [pc, #500]	; (8005ac4 <HAL_DMA_DeInit+0x22c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d03b      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7c      	ldr	r2, [pc, #496]	; (8005ac8 <HAL_DMA_DeInit+0x230>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d036      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7a      	ldr	r2, [pc, #488]	; (8005acc <HAL_DMA_DeInit+0x234>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d031      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a79      	ldr	r2, [pc, #484]	; (8005ad0 <HAL_DMA_DeInit+0x238>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d02c      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a77      	ldr	r2, [pc, #476]	; (8005ad4 <HAL_DMA_DeInit+0x23c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d027      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a76      	ldr	r2, [pc, #472]	; (8005ad8 <HAL_DMA_DeInit+0x240>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	; (8005adc <HAL_DMA_DeInit+0x244>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01d      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	; (8005ae0 <HAL_DMA_DeInit+0x248>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a71      	ldr	r2, [pc, #452]	; (8005ae4 <HAL_DMA_DeInit+0x24c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a70      	ldr	r2, [pc, #448]	; (8005ae8 <HAL_DMA_DeInit+0x250>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6e      	ldr	r2, [pc, #440]	; (8005aec <HAL_DMA_DeInit+0x254>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6d      	ldr	r2, [pc, #436]	; (8005af0 <HAL_DMA_DeInit+0x258>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_DMA_DeInit+0xb2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <HAL_DMA_DeInit+0x25c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <HAL_DMA_DeInit+0xc4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e007      	b.n	800596c <HAL_DMA_DeInit+0xd4>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a51      	ldr	r2, [pc, #324]	; (8005ab8 <HAL_DMA_DeInit+0x220>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d04a      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a50      	ldr	r2, [pc, #320]	; (8005abc <HAL_DMA_DeInit+0x224>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d045      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4e      	ldr	r2, [pc, #312]	; (8005ac0 <HAL_DMA_DeInit+0x228>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d040      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4d      	ldr	r2, [pc, #308]	; (8005ac4 <HAL_DMA_DeInit+0x22c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d03b      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a4b      	ldr	r2, [pc, #300]	; (8005ac8 <HAL_DMA_DeInit+0x230>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d036      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <HAL_DMA_DeInit+0x234>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d031      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a48      	ldr	r2, [pc, #288]	; (8005ad0 <HAL_DMA_DeInit+0x238>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02c      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_DMA_DeInit+0x23c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d027      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a45      	ldr	r2, [pc, #276]	; (8005ad8 <HAL_DMA_DeInit+0x240>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d022      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a44      	ldr	r2, [pc, #272]	; (8005adc <HAL_DMA_DeInit+0x244>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01d      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a42      	ldr	r2, [pc, #264]	; (8005ae0 <HAL_DMA_DeInit+0x248>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <HAL_DMA_DeInit+0x24c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <HAL_DMA_DeInit+0x250>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3e      	ldr	r2, [pc, #248]	; (8005aec <HAL_DMA_DeInit+0x254>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <HAL_DMA_DeInit+0x258>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_DMA_DeInit+0x174>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <HAL_DMA_DeInit+0x25c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <HAL_DMA_DeInit+0x178>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_DMA_DeInit+0x17a>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d025      	beq.n	8005a62 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2221      	movs	r2, #33	; 0x21
 8005a44:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f002 f980 	bl	8007d4c <DMA_CalcBaseAndBitshift>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	223f      	movs	r2, #63	; 0x3f
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e081      	b.n	8005b66 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <HAL_DMA_DeInit+0x260>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_DMA_DeInit+0x264>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_DMA_DeInit+0x268>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_DMA_DeInit+0x26c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <HAL_DMA_DeInit+0x270>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_DMA_DeInit+0x274>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_DMA_DeInit+0x278>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_DeInit+0x21a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <HAL_DMA_DeInit+0x27c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d132      	bne.n	8005b18 <HAL_DMA_DeInit+0x280>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e031      	b.n	8005b1a <HAL_DMA_DeInit+0x282>
 8005ab6:	bf00      	nop
 8005ab8:	40020010 	.word	0x40020010
 8005abc:	40020028 	.word	0x40020028
 8005ac0:	40020040 	.word	0x40020040
 8005ac4:	40020058 	.word	0x40020058
 8005ac8:	40020070 	.word	0x40020070
 8005acc:	40020088 	.word	0x40020088
 8005ad0:	400200a0 	.word	0x400200a0
 8005ad4:	400200b8 	.word	0x400200b8
 8005ad8:	40020410 	.word	0x40020410
 8005adc:	40020428 	.word	0x40020428
 8005ae0:	40020440 	.word	0x40020440
 8005ae4:	40020458 	.word	0x40020458
 8005ae8:	40020470 	.word	0x40020470
 8005aec:	40020488 	.word	0x40020488
 8005af0:	400204a0 	.word	0x400204a0
 8005af4:	400204b8 	.word	0x400204b8
 8005af8:	58025408 	.word	0x58025408
 8005afc:	5802541c 	.word	0x5802541c
 8005b00:	58025430 	.word	0x58025430
 8005b04:	58025444 	.word	0x58025444
 8005b08:	58025458 	.word	0x58025458
 8005b0c:	5802546c 	.word	0x5802546c
 8005b10:	58025480 	.word	0x58025480
 8005b14:	58025494 	.word	0x58025494
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d021      	beq.n	8005b62 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f002 f900 	bl	8007d4c <DMA_CalcBaseAndBitshift>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	2201      	movs	r2, #1
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	e001      	b.n	8005b66 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e04a      	b.n	8005bfc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f002 fa1e 	bl	8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b84:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00f      	beq.n	8005bae <HAL_DMA_DeInit+0x316>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d80b      	bhi.n	8005bae <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 faa0 	bl	80080dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bac:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e226      	b.n	800606e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA_Start_IT+0x2a>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e21f      	b.n	800606e <HAL_DMA_Start_IT+0x46a>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	f040 820a 	bne.w	8006058 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_DMA_Start_IT+0x1f4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d04a      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a66      	ldr	r2, [pc, #408]	; (8005dfc <HAL_DMA_Start_IT+0x1f8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d045      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_DMA_Start_IT+0x1fc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d040      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a63      	ldr	r2, [pc, #396]	; (8005e04 <HAL_DMA_Start_IT+0x200>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d03b      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <HAL_DMA_Start_IT+0x204>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d036      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a60      	ldr	r2, [pc, #384]	; (8005e0c <HAL_DMA_Start_IT+0x208>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d031      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5f      	ldr	r2, [pc, #380]	; (8005e10 <HAL_DMA_Start_IT+0x20c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d02c      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a5d      	ldr	r2, [pc, #372]	; (8005e14 <HAL_DMA_Start_IT+0x210>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d027      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5c      	ldr	r2, [pc, #368]	; (8005e18 <HAL_DMA_Start_IT+0x214>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5a      	ldr	r2, [pc, #360]	; (8005e1c <HAL_DMA_Start_IT+0x218>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_DMA_Start_IT+0x21c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a57      	ldr	r2, [pc, #348]	; (8005e24 <HAL_DMA_Start_IT+0x220>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a56      	ldr	r2, [pc, #344]	; (8005e28 <HAL_DMA_Start_IT+0x224>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <HAL_DMA_Start_IT+0x228>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a53      	ldr	r2, [pc, #332]	; (8005e30 <HAL_DMA_Start_IT+0x22c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_DMA_Start_IT+0xee>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a51      	ldr	r2, [pc, #324]	; (8005e34 <HAL_DMA_Start_IT+0x230>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <HAL_DMA_Start_IT+0x100>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e007      	b.n	8005d14 <HAL_DMA_Start_IT+0x110>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f001 fe6a 	bl	80079f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <HAL_DMA_Start_IT+0x1f4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d04a      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a33      	ldr	r2, [pc, #204]	; (8005dfc <HAL_DMA_Start_IT+0x1f8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d045      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a31      	ldr	r2, [pc, #196]	; (8005e00 <HAL_DMA_Start_IT+0x1fc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d040      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <HAL_DMA_Start_IT+0x200>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d03b      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2e      	ldr	r2, [pc, #184]	; (8005e08 <HAL_DMA_Start_IT+0x204>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d036      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <HAL_DMA_Start_IT+0x208>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d031      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2b      	ldr	r2, [pc, #172]	; (8005e10 <HAL_DMA_Start_IT+0x20c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02c      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <HAL_DMA_Start_IT+0x210>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d027      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <HAL_DMA_Start_IT+0x214>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d022      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <HAL_DMA_Start_IT+0x218>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d01d      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <HAL_DMA_Start_IT+0x21c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <HAL_DMA_Start_IT+0x220>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_DMA_Start_IT+0x224>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_DMA_Start_IT+0x228>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <HAL_DMA_Start_IT+0x22c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_DMA_Start_IT+0x1bc>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <HAL_DMA_Start_IT+0x230>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <HAL_DMA_Start_IT+0x1c0>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <HAL_DMA_Start_IT+0x1c2>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d036      	beq.n	8005e38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 021e 	bic.w	r2, r3, #30
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0216 	orr.w	r2, r2, #22
 8005ddc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d03e      	beq.n	8005e64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0208 	orr.w	r2, r2, #8
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e035      	b.n	8005e64 <HAL_DMA_Start_IT+0x260>
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 020e 	bic.w	r2, r3, #14
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 020a 	orr.w	r2, r2, #10
 8005e4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0204 	orr.w	r2, r2, #4
 8005e62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a83      	ldr	r2, [pc, #524]	; (8006078 <HAL_DMA_Start_IT+0x474>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d072      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a82      	ldr	r2, [pc, #520]	; (800607c <HAL_DMA_Start_IT+0x478>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d06d      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a80      	ldr	r2, [pc, #512]	; (8006080 <HAL_DMA_Start_IT+0x47c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d068      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7f      	ldr	r2, [pc, #508]	; (8006084 <HAL_DMA_Start_IT+0x480>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d063      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a7d      	ldr	r2, [pc, #500]	; (8006088 <HAL_DMA_Start_IT+0x484>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d05e      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7c      	ldr	r2, [pc, #496]	; (800608c <HAL_DMA_Start_IT+0x488>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d059      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7a      	ldr	r2, [pc, #488]	; (8006090 <HAL_DMA_Start_IT+0x48c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d054      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a79      	ldr	r2, [pc, #484]	; (8006094 <HAL_DMA_Start_IT+0x490>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d04f      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a77      	ldr	r2, [pc, #476]	; (8006098 <HAL_DMA_Start_IT+0x494>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a76      	ldr	r2, [pc, #472]	; (800609c <HAL_DMA_Start_IT+0x498>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d045      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a74      	ldr	r2, [pc, #464]	; (80060a0 <HAL_DMA_Start_IT+0x49c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d040      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a73      	ldr	r2, [pc, #460]	; (80060a4 <HAL_DMA_Start_IT+0x4a0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03b      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a71      	ldr	r2, [pc, #452]	; (80060a8 <HAL_DMA_Start_IT+0x4a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d036      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a70      	ldr	r2, [pc, #448]	; (80060ac <HAL_DMA_Start_IT+0x4a8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d031      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6e      	ldr	r2, [pc, #440]	; (80060b0 <HAL_DMA_Start_IT+0x4ac>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d02c      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a6d      	ldr	r2, [pc, #436]	; (80060b4 <HAL_DMA_Start_IT+0x4b0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d027      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6b      	ldr	r2, [pc, #428]	; (80060b8 <HAL_DMA_Start_IT+0x4b4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6a      	ldr	r2, [pc, #424]	; (80060bc <HAL_DMA_Start_IT+0x4b8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d01d      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a68      	ldr	r2, [pc, #416]	; (80060c0 <HAL_DMA_Start_IT+0x4bc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d018      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a67      	ldr	r2, [pc, #412]	; (80060c4 <HAL_DMA_Start_IT+0x4c0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <HAL_DMA_Start_IT+0x4c4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00e      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a64      	ldr	r2, [pc, #400]	; (80060cc <HAL_DMA_Start_IT+0x4c8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d009      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a62      	ldr	r2, [pc, #392]	; (80060d0 <HAL_DMA_Start_IT+0x4cc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_DMA_Start_IT+0x350>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a61      	ldr	r2, [pc, #388]	; (80060d4 <HAL_DMA_Start_IT+0x4d0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_DMA_Start_IT+0x354>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_DMA_Start_IT+0x356>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01a      	beq.n	8005f94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a37      	ldr	r2, [pc, #220]	; (8006078 <HAL_DMA_Start_IT+0x474>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_DMA_Start_IT+0x478>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a34      	ldr	r2, [pc, #208]	; (8006080 <HAL_DMA_Start_IT+0x47c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a33      	ldr	r2, [pc, #204]	; (8006084 <HAL_DMA_Start_IT+0x480>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a31      	ldr	r2, [pc, #196]	; (8006088 <HAL_DMA_Start_IT+0x484>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a30      	ldr	r2, [pc, #192]	; (800608c <HAL_DMA_Start_IT+0x488>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2e      	ldr	r2, [pc, #184]	; (8006090 <HAL_DMA_Start_IT+0x48c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <HAL_DMA_Start_IT+0x490>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <HAL_DMA_Start_IT+0x494>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	; (800609c <HAL_DMA_Start_IT+0x498>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <HAL_DMA_Start_IT+0x49c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <HAL_DMA_Start_IT+0x4a0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <HAL_DMA_Start_IT+0x4a4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a24      	ldr	r2, [pc, #144]	; (80060ac <HAL_DMA_Start_IT+0x4a8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_DMA_Start_IT+0x4ac>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Start_IT+0x430>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <HAL_DMA_Start_IT+0x4b0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <HAL_DMA_Start_IT+0x442>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e012      	b.n	800606c <HAL_DMA_Start_IT+0x468>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e009      	b.n	800606c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40020010 	.word	0x40020010
 800607c:	40020028 	.word	0x40020028
 8006080:	40020040 	.word	0x40020040
 8006084:	40020058 	.word	0x40020058
 8006088:	40020070 	.word	0x40020070
 800608c:	40020088 	.word	0x40020088
 8006090:	400200a0 	.word	0x400200a0
 8006094:	400200b8 	.word	0x400200b8
 8006098:	40020410 	.word	0x40020410
 800609c:	40020428 	.word	0x40020428
 80060a0:	40020440 	.word	0x40020440
 80060a4:	40020458 	.word	0x40020458
 80060a8:	40020470 	.word	0x40020470
 80060ac:	40020488 	.word	0x40020488
 80060b0:	400204a0 	.word	0x400204a0
 80060b4:	400204b8 	.word	0x400204b8
 80060b8:	58025408 	.word	0x58025408
 80060bc:	5802541c 	.word	0x5802541c
 80060c0:	58025430 	.word	0x58025430
 80060c4:	58025444 	.word	0x58025444
 80060c8:	58025458 	.word	0x58025458
 80060cc:	5802546c 	.word	0x5802546c
 80060d0:	58025480 	.word	0x58025480
 80060d4:	58025494 	.word	0x58025494

080060d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80060e0:	f7fe ff32 	bl	8004f48 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e2dc      	b.n	80066aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d008      	beq.n	800610e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e2cd      	b.n	80066aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a76      	ldr	r2, [pc, #472]	; (80062ec <HAL_DMA_Abort+0x214>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a74      	ldr	r2, [pc, #464]	; (80062f0 <HAL_DMA_Abort+0x218>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a73      	ldr	r2, [pc, #460]	; (80062f4 <HAL_DMA_Abort+0x21c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a71      	ldr	r2, [pc, #452]	; (80062f8 <HAL_DMA_Abort+0x220>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a70      	ldr	r2, [pc, #448]	; (80062fc <HAL_DMA_Abort+0x224>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6e      	ldr	r2, [pc, #440]	; (8006300 <HAL_DMA_Abort+0x228>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6d      	ldr	r2, [pc, #436]	; (8006304 <HAL_DMA_Abort+0x22c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a6b      	ldr	r2, [pc, #428]	; (8006308 <HAL_DMA_Abort+0x230>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a6a      	ldr	r2, [pc, #424]	; (800630c <HAL_DMA_Abort+0x234>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a68      	ldr	r2, [pc, #416]	; (8006310 <HAL_DMA_Abort+0x238>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a67      	ldr	r2, [pc, #412]	; (8006314 <HAL_DMA_Abort+0x23c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a65      	ldr	r2, [pc, #404]	; (8006318 <HAL_DMA_Abort+0x240>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a64      	ldr	r2, [pc, #400]	; (800631c <HAL_DMA_Abort+0x244>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a62      	ldr	r2, [pc, #392]	; (8006320 <HAL_DMA_Abort+0x248>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a61      	ldr	r2, [pc, #388]	; (8006324 <HAL_DMA_Abort+0x24c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_Abort+0xd6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5f      	ldr	r2, [pc, #380]	; (8006328 <HAL_DMA_Abort+0x250>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <HAL_DMA_Abort+0xda>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_DMA_Abort+0xdc>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 021e 	bic.w	r2, r2, #30
 80061c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e00a      	b.n	80061f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3c      	ldr	r2, [pc, #240]	; (80062ec <HAL_DMA_Abort+0x214>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d072      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3a      	ldr	r2, [pc, #232]	; (80062f0 <HAL_DMA_Abort+0x218>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d06d      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a39      	ldr	r2, [pc, #228]	; (80062f4 <HAL_DMA_Abort+0x21c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d068      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a37      	ldr	r2, [pc, #220]	; (80062f8 <HAL_DMA_Abort+0x220>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d063      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a36      	ldr	r2, [pc, #216]	; (80062fc <HAL_DMA_Abort+0x224>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d05e      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a34      	ldr	r2, [pc, #208]	; (8006300 <HAL_DMA_Abort+0x228>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d059      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a33      	ldr	r2, [pc, #204]	; (8006304 <HAL_DMA_Abort+0x22c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d054      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a31      	ldr	r2, [pc, #196]	; (8006308 <HAL_DMA_Abort+0x230>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d04f      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a30      	ldr	r2, [pc, #192]	; (800630c <HAL_DMA_Abort+0x234>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d04a      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2e      	ldr	r2, [pc, #184]	; (8006310 <HAL_DMA_Abort+0x238>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d045      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2d      	ldr	r2, [pc, #180]	; (8006314 <HAL_DMA_Abort+0x23c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d040      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2b      	ldr	r2, [pc, #172]	; (8006318 <HAL_DMA_Abort+0x240>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d03b      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2a      	ldr	r2, [pc, #168]	; (800631c <HAL_DMA_Abort+0x244>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d036      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a28      	ldr	r2, [pc, #160]	; (8006320 <HAL_DMA_Abort+0x248>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a27      	ldr	r2, [pc, #156]	; (8006324 <HAL_DMA_Abort+0x24c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d02c      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a25      	ldr	r2, [pc, #148]	; (8006328 <HAL_DMA_Abort+0x250>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d027      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a24      	ldr	r2, [pc, #144]	; (800632c <HAL_DMA_Abort+0x254>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a22      	ldr	r2, [pc, #136]	; (8006330 <HAL_DMA_Abort+0x258>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a21      	ldr	r2, [pc, #132]	; (8006334 <HAL_DMA_Abort+0x25c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <HAL_DMA_Abort+0x260>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1e      	ldr	r2, [pc, #120]	; (800633c <HAL_DMA_Abort+0x264>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <HAL_DMA_Abort+0x268>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <HAL_DMA_Abort+0x26c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_DMA_Abort+0x20e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a19      	ldr	r2, [pc, #100]	; (8006348 <HAL_DMA_Abort+0x270>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d132      	bne.n	800634c <HAL_DMA_Abort+0x274>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e031      	b.n	800634e <HAL_DMA_Abort+0x276>
 80062ea:	bf00      	nop
 80062ec:	40020010 	.word	0x40020010
 80062f0:	40020028 	.word	0x40020028
 80062f4:	40020040 	.word	0x40020040
 80062f8:	40020058 	.word	0x40020058
 80062fc:	40020070 	.word	0x40020070
 8006300:	40020088 	.word	0x40020088
 8006304:	400200a0 	.word	0x400200a0
 8006308:	400200b8 	.word	0x400200b8
 800630c:	40020410 	.word	0x40020410
 8006310:	40020428 	.word	0x40020428
 8006314:	40020440 	.word	0x40020440
 8006318:	40020458 	.word	0x40020458
 800631c:	40020470 	.word	0x40020470
 8006320:	40020488 	.word	0x40020488
 8006324:	400204a0 	.word	0x400204a0
 8006328:	400204b8 	.word	0x400204b8
 800632c:	58025408 	.word	0x58025408
 8006330:	5802541c 	.word	0x5802541c
 8006334:	58025430 	.word	0x58025430
 8006338:	58025444 	.word	0x58025444
 800633c:	58025458 	.word	0x58025458
 8006340:	5802546c 	.word	0x5802546c
 8006344:	58025480 	.word	0x58025480
 8006348:	58025494 	.word	0x58025494
 800634c:	2300      	movs	r3, #0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006360:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a6d      	ldr	r2, [pc, #436]	; (800651c <HAL_DMA_Abort+0x444>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d04a      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6b      	ldr	r2, [pc, #428]	; (8006520 <HAL_DMA_Abort+0x448>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d045      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a6a      	ldr	r2, [pc, #424]	; (8006524 <HAL_DMA_Abort+0x44c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d040      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a68      	ldr	r2, [pc, #416]	; (8006528 <HAL_DMA_Abort+0x450>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d03b      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a67      	ldr	r2, [pc, #412]	; (800652c <HAL_DMA_Abort+0x454>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d036      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_DMA_Abort+0x458>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d031      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a64      	ldr	r2, [pc, #400]	; (8006534 <HAL_DMA_Abort+0x45c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d02c      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a62      	ldr	r2, [pc, #392]	; (8006538 <HAL_DMA_Abort+0x460>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d027      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a61      	ldr	r2, [pc, #388]	; (800653c <HAL_DMA_Abort+0x464>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d022      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5f      	ldr	r2, [pc, #380]	; (8006540 <HAL_DMA_Abort+0x468>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01d      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a5e      	ldr	r2, [pc, #376]	; (8006544 <HAL_DMA_Abort+0x46c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d018      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5c      	ldr	r2, [pc, #368]	; (8006548 <HAL_DMA_Abort+0x470>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5b      	ldr	r2, [pc, #364]	; (800654c <HAL_DMA_Abort+0x474>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a59      	ldr	r2, [pc, #356]	; (8006550 <HAL_DMA_Abort+0x478>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a58      	ldr	r2, [pc, #352]	; (8006554 <HAL_DMA_Abort+0x47c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_DMA_Abort+0x32a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a56      	ldr	r2, [pc, #344]	; (8006558 <HAL_DMA_Abort+0x480>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d108      	bne.n	8006414 <HAL_DMA_Abort+0x33c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e007      	b.n	8006424 <HAL_DMA_Abort+0x34c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006424:	e013      	b.n	800644e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006426:	f7fe fd8f 	bl	8004f48 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b05      	cmp	r3, #5
 8006432:	d90c      	bls.n	800644e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2203      	movs	r2, #3
 800643e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e12d      	b.n	80066aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2f      	ldr	r2, [pc, #188]	; (800651c <HAL_DMA_Abort+0x444>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d04a      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2d      	ldr	r2, [pc, #180]	; (8006520 <HAL_DMA_Abort+0x448>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d045      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2c      	ldr	r2, [pc, #176]	; (8006524 <HAL_DMA_Abort+0x44c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d040      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2a      	ldr	r2, [pc, #168]	; (8006528 <HAL_DMA_Abort+0x450>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d03b      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a29      	ldr	r2, [pc, #164]	; (800652c <HAL_DMA_Abort+0x454>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d036      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a27      	ldr	r2, [pc, #156]	; (8006530 <HAL_DMA_Abort+0x458>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d031      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a26      	ldr	r2, [pc, #152]	; (8006534 <HAL_DMA_Abort+0x45c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d02c      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a24      	ldr	r2, [pc, #144]	; (8006538 <HAL_DMA_Abort+0x460>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d027      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a23      	ldr	r2, [pc, #140]	; (800653c <HAL_DMA_Abort+0x464>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_DMA_Abort+0x468>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01d      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a20      	ldr	r2, [pc, #128]	; (8006544 <HAL_DMA_Abort+0x46c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_DMA_Abort+0x470>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_DMA_Abort+0x474>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_DMA_Abort+0x478>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_DMA_Abort+0x47c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_DMA_Abort+0x422>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_DMA_Abort+0x480>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d101      	bne.n	80064fe <HAL_DMA_Abort+0x426>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <HAL_DMA_Abort+0x428>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02b      	beq.n	800655c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	223f      	movs	r2, #63	; 0x3f
 8006514:	409a      	lsls	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
 800651a:	e02a      	b.n	8006572 <HAL_DMA_Abort+0x49a>
 800651c:	40020010 	.word	0x40020010
 8006520:	40020028 	.word	0x40020028
 8006524:	40020040 	.word	0x40020040
 8006528:	40020058 	.word	0x40020058
 800652c:	40020070 	.word	0x40020070
 8006530:	40020088 	.word	0x40020088
 8006534:	400200a0 	.word	0x400200a0
 8006538:	400200b8 	.word	0x400200b8
 800653c:	40020410 	.word	0x40020410
 8006540:	40020428 	.word	0x40020428
 8006544:	40020440 	.word	0x40020440
 8006548:	40020458 	.word	0x40020458
 800654c:	40020470 	.word	0x40020470
 8006550:	40020488 	.word	0x40020488
 8006554:	400204a0 	.word	0x400204a0
 8006558:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	2201      	movs	r2, #1
 800656c:	409a      	lsls	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a4f      	ldr	r2, [pc, #316]	; (80066b4 <HAL_DMA_Abort+0x5dc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d072      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a4d      	ldr	r2, [pc, #308]	; (80066b8 <HAL_DMA_Abort+0x5e0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d06d      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a4c      	ldr	r2, [pc, #304]	; (80066bc <HAL_DMA_Abort+0x5e4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d068      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a4a      	ldr	r2, [pc, #296]	; (80066c0 <HAL_DMA_Abort+0x5e8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d063      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a49      	ldr	r2, [pc, #292]	; (80066c4 <HAL_DMA_Abort+0x5ec>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d05e      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a47      	ldr	r2, [pc, #284]	; (80066c8 <HAL_DMA_Abort+0x5f0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d059      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a46      	ldr	r2, [pc, #280]	; (80066cc <HAL_DMA_Abort+0x5f4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d054      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a44      	ldr	r2, [pc, #272]	; (80066d0 <HAL_DMA_Abort+0x5f8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04f      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a43      	ldr	r2, [pc, #268]	; (80066d4 <HAL_DMA_Abort+0x5fc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d04a      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <HAL_DMA_Abort+0x600>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d045      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <HAL_DMA_Abort+0x604>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d040      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3e      	ldr	r2, [pc, #248]	; (80066e0 <HAL_DMA_Abort+0x608>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d03b      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3d      	ldr	r2, [pc, #244]	; (80066e4 <HAL_DMA_Abort+0x60c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d036      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3b      	ldr	r2, [pc, #236]	; (80066e8 <HAL_DMA_Abort+0x610>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d031      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3a      	ldr	r2, [pc, #232]	; (80066ec <HAL_DMA_Abort+0x614>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d02c      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <HAL_DMA_Abort+0x618>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d027      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <HAL_DMA_Abort+0x61c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a35      	ldr	r2, [pc, #212]	; (80066f8 <HAL_DMA_Abort+0x620>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01d      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a34      	ldr	r2, [pc, #208]	; (80066fc <HAL_DMA_Abort+0x624>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a32      	ldr	r2, [pc, #200]	; (8006700 <HAL_DMA_Abort+0x628>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a31      	ldr	r2, [pc, #196]	; (8006704 <HAL_DMA_Abort+0x62c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <HAL_DMA_Abort+0x630>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2e      	ldr	r2, [pc, #184]	; (800670c <HAL_DMA_Abort+0x634>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_DMA_Abort+0x58a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2c      	ldr	r2, [pc, #176]	; (8006710 <HAL_DMA_Abort+0x638>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_DMA_Abort+0x58e>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_DMA_Abort+0x590>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d015      	beq.n	8006698 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006674:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006696:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40020010 	.word	0x40020010
 80066b8:	40020028 	.word	0x40020028
 80066bc:	40020040 	.word	0x40020040
 80066c0:	40020058 	.word	0x40020058
 80066c4:	40020070 	.word	0x40020070
 80066c8:	40020088 	.word	0x40020088
 80066cc:	400200a0 	.word	0x400200a0
 80066d0:	400200b8 	.word	0x400200b8
 80066d4:	40020410 	.word	0x40020410
 80066d8:	40020428 	.word	0x40020428
 80066dc:	40020440 	.word	0x40020440
 80066e0:	40020458 	.word	0x40020458
 80066e4:	40020470 	.word	0x40020470
 80066e8:	40020488 	.word	0x40020488
 80066ec:	400204a0 	.word	0x400204a0
 80066f0:	400204b8 	.word	0x400204b8
 80066f4:	58025408 	.word	0x58025408
 80066f8:	5802541c 	.word	0x5802541c
 80066fc:	58025430 	.word	0x58025430
 8006700:	58025444 	.word	0x58025444
 8006704:	58025458 	.word	0x58025458
 8006708:	5802546c 	.word	0x5802546c
 800670c:	58025480 	.word	0x58025480
 8006710:	58025494 	.word	0x58025494

08006714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e237      	b.n	8006b96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d004      	beq.n	800673c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e22c      	b.n	8006b96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5c      	ldr	r2, [pc, #368]	; (80068b4 <HAL_DMA_Abort_IT+0x1a0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d04a      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5b      	ldr	r2, [pc, #364]	; (80068b8 <HAL_DMA_Abort_IT+0x1a4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d045      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a59      	ldr	r2, [pc, #356]	; (80068bc <HAL_DMA_Abort_IT+0x1a8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d040      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a58      	ldr	r2, [pc, #352]	; (80068c0 <HAL_DMA_Abort_IT+0x1ac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d03b      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a56      	ldr	r2, [pc, #344]	; (80068c4 <HAL_DMA_Abort_IT+0x1b0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d036      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a55      	ldr	r2, [pc, #340]	; (80068c8 <HAL_DMA_Abort_IT+0x1b4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d031      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a53      	ldr	r2, [pc, #332]	; (80068cc <HAL_DMA_Abort_IT+0x1b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02c      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a52      	ldr	r2, [pc, #328]	; (80068d0 <HAL_DMA_Abort_IT+0x1bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d027      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a50      	ldr	r2, [pc, #320]	; (80068d4 <HAL_DMA_Abort_IT+0x1c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d022      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a4f      	ldr	r2, [pc, #316]	; (80068d8 <HAL_DMA_Abort_IT+0x1c4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d01d      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4d      	ldr	r2, [pc, #308]	; (80068dc <HAL_DMA_Abort_IT+0x1c8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d018      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4c      	ldr	r2, [pc, #304]	; (80068e0 <HAL_DMA_Abort_IT+0x1cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a4a      	ldr	r2, [pc, #296]	; (80068e4 <HAL_DMA_Abort_IT+0x1d0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a49      	ldr	r2, [pc, #292]	; (80068e8 <HAL_DMA_Abort_IT+0x1d4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a47      	ldr	r2, [pc, #284]	; (80068ec <HAL_DMA_Abort_IT+0x1d8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_DMA_Abort_IT+0xc8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a46      	ldr	r2, [pc, #280]	; (80068f0 <HAL_DMA_Abort_IT+0x1dc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d101      	bne.n	80067e0 <HAL_DMA_Abort_IT+0xcc>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <HAL_DMA_Abort_IT+0xce>
 80067e0:	2300      	movs	r3, #0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8086 	beq.w	80068f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2f      	ldr	r2, [pc, #188]	; (80068b4 <HAL_DMA_Abort_IT+0x1a0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d04a      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2e      	ldr	r2, [pc, #184]	; (80068b8 <HAL_DMA_Abort_IT+0x1a4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d045      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <HAL_DMA_Abort_IT+0x1a8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d040      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <HAL_DMA_Abort_IT+0x1ac>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d03b      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_DMA_Abort_IT+0x1b0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d036      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <HAL_DMA_Abort_IT+0x1b4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d031      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <HAL_DMA_Abort_IT+0x1b8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d02c      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <HAL_DMA_Abort_IT+0x1bc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d027      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <HAL_DMA_Abort_IT+0x1c0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_DMA_Abort_IT+0x1c4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a20      	ldr	r2, [pc, #128]	; (80068dc <HAL_DMA_Abort_IT+0x1c8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_DMA_Abort_IT+0x1cc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <HAL_DMA_Abort_IT+0x1d0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <HAL_DMA_Abort_IT+0x1d4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_DMA_Abort_IT+0x1d8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_DMA_Abort_IT+0x17c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <HAL_DMA_Abort_IT+0x1dc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <HAL_DMA_Abort_IT+0x18e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e178      	b.n	8006b94 <HAL_DMA_Abort_IT+0x480>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e16f      	b.n	8006b94 <HAL_DMA_Abort_IT+0x480>
 80068b4:	40020010 	.word	0x40020010
 80068b8:	40020028 	.word	0x40020028
 80068bc:	40020040 	.word	0x40020040
 80068c0:	40020058 	.word	0x40020058
 80068c4:	40020070 	.word	0x40020070
 80068c8:	40020088 	.word	0x40020088
 80068cc:	400200a0 	.word	0x400200a0
 80068d0:	400200b8 	.word	0x400200b8
 80068d4:	40020410 	.word	0x40020410
 80068d8:	40020428 	.word	0x40020428
 80068dc:	40020440 	.word	0x40020440
 80068e0:	40020458 	.word	0x40020458
 80068e4:	40020470 	.word	0x40020470
 80068e8:	40020488 	.word	0x40020488
 80068ec:	400204a0 	.word	0x400204a0
 80068f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 020e 	bic.w	r2, r2, #14
 8006902:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6c      	ldr	r2, [pc, #432]	; (8006abc <HAL_DMA_Abort_IT+0x3a8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d04a      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6b      	ldr	r2, [pc, #428]	; (8006ac0 <HAL_DMA_Abort_IT+0x3ac>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d045      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a69      	ldr	r2, [pc, #420]	; (8006ac4 <HAL_DMA_Abort_IT+0x3b0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d040      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a68      	ldr	r2, [pc, #416]	; (8006ac8 <HAL_DMA_Abort_IT+0x3b4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d03b      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a66      	ldr	r2, [pc, #408]	; (8006acc <HAL_DMA_Abort_IT+0x3b8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d036      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a65      	ldr	r2, [pc, #404]	; (8006ad0 <HAL_DMA_Abort_IT+0x3bc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d031      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a63      	ldr	r2, [pc, #396]	; (8006ad4 <HAL_DMA_Abort_IT+0x3c0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02c      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a62      	ldr	r2, [pc, #392]	; (8006ad8 <HAL_DMA_Abort_IT+0x3c4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d027      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a60      	ldr	r2, [pc, #384]	; (8006adc <HAL_DMA_Abort_IT+0x3c8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a5f      	ldr	r2, [pc, #380]	; (8006ae0 <HAL_DMA_Abort_IT+0x3cc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5d      	ldr	r2, [pc, #372]	; (8006ae4 <HAL_DMA_Abort_IT+0x3d0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a5c      	ldr	r2, [pc, #368]	; (8006ae8 <HAL_DMA_Abort_IT+0x3d4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a5a      	ldr	r2, [pc, #360]	; (8006aec <HAL_DMA_Abort_IT+0x3d8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a59      	ldr	r2, [pc, #356]	; (8006af0 <HAL_DMA_Abort_IT+0x3dc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a57      	ldr	r2, [pc, #348]	; (8006af4 <HAL_DMA_Abort_IT+0x3e0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x290>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a56      	ldr	r2, [pc, #344]	; (8006af8 <HAL_DMA_Abort_IT+0x3e4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <HAL_DMA_Abort_IT+0x2a2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e007      	b.n	80069c6 <HAL_DMA_Abort_IT+0x2b2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <HAL_DMA_Abort_IT+0x3a8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d072      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a3a      	ldr	r2, [pc, #232]	; (8006ac0 <HAL_DMA_Abort_IT+0x3ac>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d06d      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a39      	ldr	r2, [pc, #228]	; (8006ac4 <HAL_DMA_Abort_IT+0x3b0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d068      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a37      	ldr	r2, [pc, #220]	; (8006ac8 <HAL_DMA_Abort_IT+0x3b4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d063      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a36      	ldr	r2, [pc, #216]	; (8006acc <HAL_DMA_Abort_IT+0x3b8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d05e      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a34      	ldr	r2, [pc, #208]	; (8006ad0 <HAL_DMA_Abort_IT+0x3bc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d059      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a33      	ldr	r2, [pc, #204]	; (8006ad4 <HAL_DMA_Abort_IT+0x3c0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d054      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <HAL_DMA_Abort_IT+0x3c4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d04f      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a30      	ldr	r2, [pc, #192]	; (8006adc <HAL_DMA_Abort_IT+0x3c8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04a      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2e      	ldr	r2, [pc, #184]	; (8006ae0 <HAL_DMA_Abort_IT+0x3cc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d045      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ae4 <HAL_DMA_Abort_IT+0x3d0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d040      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <HAL_DMA_Abort_IT+0x3d4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d03b      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2a      	ldr	r2, [pc, #168]	; (8006aec <HAL_DMA_Abort_IT+0x3d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d036      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <HAL_DMA_Abort_IT+0x3dc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d031      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a27      	ldr	r2, [pc, #156]	; (8006af4 <HAL_DMA_Abort_IT+0x3e0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d02c      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <HAL_DMA_Abort_IT+0x3e4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d027      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a24      	ldr	r2, [pc, #144]	; (8006afc <HAL_DMA_Abort_IT+0x3e8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_DMA_Abort_IT+0x3ec>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_DMA_Abort_IT+0x3f0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_DMA_Abort_IT+0x3f4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_DMA_Abort_IT+0x3f8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_DMA_Abort_IT+0x3fc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_DMA_Abort_IT+0x400>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_DMA_Abort_IT+0x3a2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <HAL_DMA_Abort_IT+0x404>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d132      	bne.n	8006b1c <HAL_DMA_Abort_IT+0x408>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e031      	b.n	8006b1e <HAL_DMA_Abort_IT+0x40a>
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d028      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	f003 031f 	and.w	r3, r3, #31
 8006b40:	2201      	movs	r2, #1
 8006b42:	409a      	lsls	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop

08006ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bac:	4b67      	ldr	r3, [pc, #412]	; (8006d4c <HAL_DMA_IRQHandler+0x1ac>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a67      	ldr	r2, [pc, #412]	; (8006d50 <HAL_DMA_IRQHandler+0x1b0>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	0a9b      	lsrs	r3, r3, #10
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a5f      	ldr	r2, [pc, #380]	; (8006d54 <HAL_DMA_IRQHandler+0x1b4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d04a      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a5d      	ldr	r2, [pc, #372]	; (8006d58 <HAL_DMA_IRQHandler+0x1b8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d045      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a5c      	ldr	r2, [pc, #368]	; (8006d5c <HAL_DMA_IRQHandler+0x1bc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d040      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5a      	ldr	r2, [pc, #360]	; (8006d60 <HAL_DMA_IRQHandler+0x1c0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d03b      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a59      	ldr	r2, [pc, #356]	; (8006d64 <HAL_DMA_IRQHandler+0x1c4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d036      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a57      	ldr	r2, [pc, #348]	; (8006d68 <HAL_DMA_IRQHandler+0x1c8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d031      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a56      	ldr	r2, [pc, #344]	; (8006d6c <HAL_DMA_IRQHandler+0x1cc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d02c      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a54      	ldr	r2, [pc, #336]	; (8006d70 <HAL_DMA_IRQHandler+0x1d0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d027      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a53      	ldr	r2, [pc, #332]	; (8006d74 <HAL_DMA_IRQHandler+0x1d4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d022      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a51      	ldr	r2, [pc, #324]	; (8006d78 <HAL_DMA_IRQHandler+0x1d8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a50      	ldr	r2, [pc, #320]	; (8006d7c <HAL_DMA_IRQHandler+0x1dc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a4e      	ldr	r2, [pc, #312]	; (8006d80 <HAL_DMA_IRQHandler+0x1e0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4d      	ldr	r2, [pc, #308]	; (8006d84 <HAL_DMA_IRQHandler+0x1e4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4b      	ldr	r2, [pc, #300]	; (8006d88 <HAL_DMA_IRQHandler+0x1e8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4a      	ldr	r2, [pc, #296]	; (8006d8c <HAL_DMA_IRQHandler+0x1ec>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_DMA_IRQHandler+0xd2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a48      	ldr	r2, [pc, #288]	; (8006d90 <HAL_DMA_IRQHandler+0x1f0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d101      	bne.n	8006c76 <HAL_DMA_IRQHandler+0xd6>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <HAL_DMA_IRQHandler+0xd8>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 842b 	beq.w	80074d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2208      	movs	r2, #8
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80a2 	beq.w	8006dd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <HAL_DMA_IRQHandler+0x1b4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d04a      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2d      	ldr	r2, [pc, #180]	; (8006d58 <HAL_DMA_IRQHandler+0x1b8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d045      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2b      	ldr	r2, [pc, #172]	; (8006d5c <HAL_DMA_IRQHandler+0x1bc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d040      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	; (8006d60 <HAL_DMA_IRQHandler+0x1c0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d03b      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a28      	ldr	r2, [pc, #160]	; (8006d64 <HAL_DMA_IRQHandler+0x1c4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d036      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a27      	ldr	r2, [pc, #156]	; (8006d68 <HAL_DMA_IRQHandler+0x1c8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d031      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a25      	ldr	r2, [pc, #148]	; (8006d6c <HAL_DMA_IRQHandler+0x1cc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02c      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a24      	ldr	r2, [pc, #144]	; (8006d70 <HAL_DMA_IRQHandler+0x1d0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d027      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <HAL_DMA_IRQHandler+0x1d4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <HAL_DMA_IRQHandler+0x1d8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d01d      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <HAL_DMA_IRQHandler+0x1dc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <HAL_DMA_IRQHandler+0x1e0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <HAL_DMA_IRQHandler+0x1e4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_DMA_IRQHandler+0x1e8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <HAL_DMA_IRQHandler+0x1ec>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x194>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_DMA_IRQHandler+0x1f0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d12f      	bne.n	8006d94 <HAL_DMA_IRQHandler+0x1f4>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bf14      	ite	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	2300      	moveq	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	e02e      	b.n	8006da8 <HAL_DMA_IRQHandler+0x208>
 8006d4a:	bf00      	nop
 8006d4c:	24000018 	.word	0x24000018
 8006d50:	1b4e81b5 	.word	0x1b4e81b5
 8006d54:	40020010 	.word	0x40020010
 8006d58:	40020028 	.word	0x40020028
 8006d5c:	40020040 	.word	0x40020040
 8006d60:	40020058 	.word	0x40020058
 8006d64:	40020070 	.word	0x40020070
 8006d68:	40020088 	.word	0x40020088
 8006d6c:	400200a0 	.word	0x400200a0
 8006d70:	400200b8 	.word	0x400200b8
 8006d74:	40020410 	.word	0x40020410
 8006d78:	40020428 	.word	0x40020428
 8006d7c:	40020440 	.word	0x40020440
 8006d80:	40020458 	.word	0x40020458
 8006d84:	40020470 	.word	0x40020470
 8006d88:	40020488 	.word	0x40020488
 8006d8c:	400204a0 	.word	0x400204a0
 8006d90:	400204b8 	.word	0x400204b8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2208      	movs	r2, #8
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	f043 0201 	orr.w	r2, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d06e      	beq.n	8006ecc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a69      	ldr	r2, [pc, #420]	; (8006f98 <HAL_DMA_IRQHandler+0x3f8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a67      	ldr	r2, [pc, #412]	; (8006f9c <HAL_DMA_IRQHandler+0x3fc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a66      	ldr	r2, [pc, #408]	; (8006fa0 <HAL_DMA_IRQHandler+0x400>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a64      	ldr	r2, [pc, #400]	; (8006fa4 <HAL_DMA_IRQHandler+0x404>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a63      	ldr	r2, [pc, #396]	; (8006fa8 <HAL_DMA_IRQHandler+0x408>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a61      	ldr	r2, [pc, #388]	; (8006fac <HAL_DMA_IRQHandler+0x40c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a60      	ldr	r2, [pc, #384]	; (8006fb0 <HAL_DMA_IRQHandler+0x410>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a5e      	ldr	r2, [pc, #376]	; (8006fb4 <HAL_DMA_IRQHandler+0x414>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5d      	ldr	r2, [pc, #372]	; (8006fb8 <HAL_DMA_IRQHandler+0x418>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a5b      	ldr	r2, [pc, #364]	; (8006fbc <HAL_DMA_IRQHandler+0x41c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a5a      	ldr	r2, [pc, #360]	; (8006fc0 <HAL_DMA_IRQHandler+0x420>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a58      	ldr	r2, [pc, #352]	; (8006fc4 <HAL_DMA_IRQHandler+0x424>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a57      	ldr	r2, [pc, #348]	; (8006fc8 <HAL_DMA_IRQHandler+0x428>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a55      	ldr	r2, [pc, #340]	; (8006fcc <HAL_DMA_IRQHandler+0x42c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a54      	ldr	r2, [pc, #336]	; (8006fd0 <HAL_DMA_IRQHandler+0x430>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x2ee>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a52      	ldr	r2, [pc, #328]	; (8006fd4 <HAL_DMA_IRQHandler+0x434>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_DMA_IRQHandler+0x304>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e003      	b.n	8006eac <HAL_DMA_IRQHandler+0x30c>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec4:	f043 0202 	orr.w	r2, r3, #2
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 808f 	beq.w	8007000 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <HAL_DMA_IRQHandler+0x3f8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d04a      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <HAL_DMA_IRQHandler+0x3fc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d045      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a29      	ldr	r2, [pc, #164]	; (8006fa0 <HAL_DMA_IRQHandler+0x400>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d040      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a27      	ldr	r2, [pc, #156]	; (8006fa4 <HAL_DMA_IRQHandler+0x404>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d03b      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a26      	ldr	r2, [pc, #152]	; (8006fa8 <HAL_DMA_IRQHandler+0x408>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d036      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a24      	ldr	r2, [pc, #144]	; (8006fac <HAL_DMA_IRQHandler+0x40c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d031      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a23      	ldr	r2, [pc, #140]	; (8006fb0 <HAL_DMA_IRQHandler+0x410>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d02c      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <HAL_DMA_IRQHandler+0x414>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d027      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <HAL_DMA_IRQHandler+0x418>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d022      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <HAL_DMA_IRQHandler+0x41c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01d      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	; (8006fc0 <HAL_DMA_IRQHandler+0x420>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d018      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <HAL_DMA_IRQHandler+0x424>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <HAL_DMA_IRQHandler+0x428>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00e      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <HAL_DMA_IRQHandler+0x42c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d009      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <HAL_DMA_IRQHandler+0x430>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x3e2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <HAL_DMA_IRQHandler+0x434>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d12a      	bne.n	8006fd8 <HAL_DMA_IRQHandler+0x438>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e023      	b.n	8006fe0 <HAL_DMA_IRQHandler+0x440>
 8006f98:	40020010 	.word	0x40020010
 8006f9c:	40020028 	.word	0x40020028
 8006fa0:	40020040 	.word	0x40020040
 8006fa4:	40020058 	.word	0x40020058
 8006fa8:	40020070 	.word	0x40020070
 8006fac:	40020088 	.word	0x40020088
 8006fb0:	400200a0 	.word	0x400200a0
 8006fb4:	400200b8 	.word	0x400200b8
 8006fb8:	40020410 	.word	0x40020410
 8006fbc:	40020428 	.word	0x40020428
 8006fc0:	40020440 	.word	0x40020440
 8006fc4:	40020458 	.word	0x40020458
 8006fc8:	40020470 	.word	0x40020470
 8006fcc:	40020488 	.word	0x40020488
 8006fd0:	400204a0 	.word	0x400204a0
 8006fd4:	400204b8 	.word	0x400204b8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2204      	movs	r2, #4
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff8:	f043 0204 	orr.w	r2, r3, #4
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2210      	movs	r2, #16
 800700a:	409a      	lsls	r2, r3
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a6 	beq.w	8007162 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a85      	ldr	r2, [pc, #532]	; (8007230 <HAL_DMA_IRQHandler+0x690>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d04a      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a83      	ldr	r2, [pc, #524]	; (8007234 <HAL_DMA_IRQHandler+0x694>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d045      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a82      	ldr	r2, [pc, #520]	; (8007238 <HAL_DMA_IRQHandler+0x698>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d040      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a80      	ldr	r2, [pc, #512]	; (800723c <HAL_DMA_IRQHandler+0x69c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d03b      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7f      	ldr	r2, [pc, #508]	; (8007240 <HAL_DMA_IRQHandler+0x6a0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d036      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a7d      	ldr	r2, [pc, #500]	; (8007244 <HAL_DMA_IRQHandler+0x6a4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d031      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7c      	ldr	r2, [pc, #496]	; (8007248 <HAL_DMA_IRQHandler+0x6a8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d02c      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a7a      	ldr	r2, [pc, #488]	; (800724c <HAL_DMA_IRQHandler+0x6ac>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d027      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a79      	ldr	r2, [pc, #484]	; (8007250 <HAL_DMA_IRQHandler+0x6b0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d022      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a77      	ldr	r2, [pc, #476]	; (8007254 <HAL_DMA_IRQHandler+0x6b4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d01d      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a76      	ldr	r2, [pc, #472]	; (8007258 <HAL_DMA_IRQHandler+0x6b8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d018      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a74      	ldr	r2, [pc, #464]	; (800725c <HAL_DMA_IRQHandler+0x6bc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a73      	ldr	r2, [pc, #460]	; (8007260 <HAL_DMA_IRQHandler+0x6c0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00e      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a71      	ldr	r2, [pc, #452]	; (8007264 <HAL_DMA_IRQHandler+0x6c4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d009      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a70      	ldr	r2, [pc, #448]	; (8007268 <HAL_DMA_IRQHandler+0x6c8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d004      	beq.n	80070b6 <HAL_DMA_IRQHandler+0x516>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6e      	ldr	r2, [pc, #440]	; (800726c <HAL_DMA_IRQHandler+0x6cc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10a      	bne.n	80070cc <HAL_DMA_IRQHandler+0x52c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bf14      	ite	ne
 80070c4:	2301      	movne	r3, #1
 80070c6:	2300      	moveq	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	e009      	b.n	80070e0 <HAL_DMA_IRQHandler+0x540>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bf14      	ite	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	2300      	moveq	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d03e      	beq.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2210      	movs	r2, #16
 80070ee:	409a      	lsls	r2, r3
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d108      	bne.n	8007122 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d024      	beq.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	e01f      	b.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01b      	beq.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	e016      	b.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0208 	bic.w	r2, r2, #8
 8007150:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2220      	movs	r2, #32
 800716c:	409a      	lsls	r2, r3
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8110 	beq.w	8007398 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2c      	ldr	r2, [pc, #176]	; (8007230 <HAL_DMA_IRQHandler+0x690>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04a      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_DMA_IRQHandler+0x694>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d045      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a29      	ldr	r2, [pc, #164]	; (8007238 <HAL_DMA_IRQHandler+0x698>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a28      	ldr	r2, [pc, #160]	; (800723c <HAL_DMA_IRQHandler+0x69c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a26      	ldr	r2, [pc, #152]	; (8007240 <HAL_DMA_IRQHandler+0x6a0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d036      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a25      	ldr	r2, [pc, #148]	; (8007244 <HAL_DMA_IRQHandler+0x6a4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d031      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a23      	ldr	r2, [pc, #140]	; (8007248 <HAL_DMA_IRQHandler+0x6a8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a22      	ldr	r2, [pc, #136]	; (800724c <HAL_DMA_IRQHandler+0x6ac>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a20      	ldr	r2, [pc, #128]	; (8007250 <HAL_DMA_IRQHandler+0x6b0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <HAL_DMA_IRQHandler+0x6b4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <HAL_DMA_IRQHandler+0x6b8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1c      	ldr	r2, [pc, #112]	; (800725c <HAL_DMA_IRQHandler+0x6bc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <HAL_DMA_IRQHandler+0x6c0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a19      	ldr	r2, [pc, #100]	; (8007264 <HAL_DMA_IRQHandler+0x6c4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <HAL_DMA_IRQHandler+0x6c8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_DMA_IRQHandler+0x678>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a16      	ldr	r2, [pc, #88]	; (800726c <HAL_DMA_IRQHandler+0x6cc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d12b      	bne.n	8007270 <HAL_DMA_IRQHandler+0x6d0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e02a      	b.n	8007284 <HAL_DMA_IRQHandler+0x6e4>
 800722e:	bf00      	nop
 8007230:	40020010 	.word	0x40020010
 8007234:	40020028 	.word	0x40020028
 8007238:	40020040 	.word	0x40020040
 800723c:	40020058 	.word	0x40020058
 8007240:	40020070 	.word	0x40020070
 8007244:	40020088 	.word	0x40020088
 8007248:	400200a0 	.word	0x400200a0
 800724c:	400200b8 	.word	0x400200b8
 8007250:	40020410 	.word	0x40020410
 8007254:	40020428 	.word	0x40020428
 8007258:	40020440 	.word	0x40020440
 800725c:	40020458 	.word	0x40020458
 8007260:	40020470 	.word	0x40020470
 8007264:	40020488 	.word	0x40020488
 8007268:	400204a0 	.word	0x400204a0
 800726c:	400204b8 	.word	0x400204b8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf14      	ite	ne
 800727e:	2301      	movne	r3, #1
 8007280:	2300      	moveq	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8087 	beq.w	8007398 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	2220      	movs	r2, #32
 8007294:	409a      	lsls	r2, r3
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d139      	bne.n	800731a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0216 	bic.w	r2, r2, #22
 80072b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_DMA_IRQHandler+0x736>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0208 	bic.w	r2, r2, #8
 80072e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	223f      	movs	r2, #63	; 0x3f
 80072f0:	409a      	lsls	r2, r3
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 834a 	beq.w	80079a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
          }
          return;
 8007318:	e344      	b.n	80079a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d018      	beq.n	800735a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	2b00      	cmp	r3, #0
 800733c:	d02c      	beq.n	8007398 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
 8007346:	e027      	b.n	8007398 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d023      	beq.n	8007398 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	e01e      	b.n	8007398 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10f      	bne.n	8007388 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0210 	bic.w	r2, r2, #16
 8007376:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8306 	beq.w	80079ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8088 	beq.w	80074c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2204      	movs	r2, #4
 80073b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a7a      	ldr	r2, [pc, #488]	; (80075a8 <HAL_DMA_IRQHandler+0xa08>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04a      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a79      	ldr	r2, [pc, #484]	; (80075ac <HAL_DMA_IRQHandler+0xa0c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d045      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a77      	ldr	r2, [pc, #476]	; (80075b0 <HAL_DMA_IRQHandler+0xa10>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d040      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a76      	ldr	r2, [pc, #472]	; (80075b4 <HAL_DMA_IRQHandler+0xa14>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d03b      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a74      	ldr	r2, [pc, #464]	; (80075b8 <HAL_DMA_IRQHandler+0xa18>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d036      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a73      	ldr	r2, [pc, #460]	; (80075bc <HAL_DMA_IRQHandler+0xa1c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d031      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a71      	ldr	r2, [pc, #452]	; (80075c0 <HAL_DMA_IRQHandler+0xa20>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d02c      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a70      	ldr	r2, [pc, #448]	; (80075c4 <HAL_DMA_IRQHandler+0xa24>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d027      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a6e      	ldr	r2, [pc, #440]	; (80075c8 <HAL_DMA_IRQHandler+0xa28>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d022      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6d      	ldr	r2, [pc, #436]	; (80075cc <HAL_DMA_IRQHandler+0xa2c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d01d      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a6b      	ldr	r2, [pc, #428]	; (80075d0 <HAL_DMA_IRQHandler+0xa30>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d018      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a6a      	ldr	r2, [pc, #424]	; (80075d4 <HAL_DMA_IRQHandler+0xa34>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a68      	ldr	r2, [pc, #416]	; (80075d8 <HAL_DMA_IRQHandler+0xa38>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a67      	ldr	r2, [pc, #412]	; (80075dc <HAL_DMA_IRQHandler+0xa3c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a65      	ldr	r2, [pc, #404]	; (80075e0 <HAL_DMA_IRQHandler+0xa40>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_DMA_IRQHandler+0x8b8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a64      	ldr	r2, [pc, #400]	; (80075e4 <HAL_DMA_IRQHandler+0xa44>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d108      	bne.n	800746a <HAL_DMA_IRQHandler+0x8ca>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	e007      	b.n	800747a <HAL_DMA_IRQHandler+0x8da>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3301      	adds	r3, #1
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	429a      	cmp	r2, r3
 8007484:	d307      	bcc.n	8007496 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1f2      	bne.n	800747a <HAL_DMA_IRQHandler+0x8da>
 8007494:	e000      	b.n	8007498 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007496:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2203      	movs	r2, #3
 80074aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80074ae:	e003      	b.n	80074b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8272 	beq.w	80079ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
 80074d2:	e26c      	b.n	80079ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a43      	ldr	r2, [pc, #268]	; (80075e8 <HAL_DMA_IRQHandler+0xa48>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d022      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a42      	ldr	r2, [pc, #264]	; (80075ec <HAL_DMA_IRQHandler+0xa4c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d01d      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a40      	ldr	r2, [pc, #256]	; (80075f0 <HAL_DMA_IRQHandler+0xa50>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d018      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a3f      	ldr	r2, [pc, #252]	; (80075f4 <HAL_DMA_IRQHandler+0xa54>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a3d      	ldr	r2, [pc, #244]	; (80075f8 <HAL_DMA_IRQHandler+0xa58>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00e      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <HAL_DMA_IRQHandler+0xa5c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d009      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a3a      	ldr	r2, [pc, #232]	; (8007600 <HAL_DMA_IRQHandler+0xa60>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d004      	beq.n	8007524 <HAL_DMA_IRQHandler+0x984>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a39      	ldr	r2, [pc, #228]	; (8007604 <HAL_DMA_IRQHandler+0xa64>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d101      	bne.n	8007528 <HAL_DMA_IRQHandler+0x988>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <HAL_DMA_IRQHandler+0x98a>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 823f 	beq.w	80079ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	2204      	movs	r2, #4
 8007542:	409a      	lsls	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80cd 	beq.w	80076e8 <HAL_DMA_IRQHandler+0xb48>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80c7 	beq.w	80076e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	2204      	movs	r2, #4
 8007564:	409a      	lsls	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d049      	beq.n	8007608 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8210 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007590:	e20a      	b.n	80079a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8206 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075a4:	e200      	b.n	80079a8 <HAL_DMA_IRQHandler+0xe08>
 80075a6:	bf00      	nop
 80075a8:	40020010 	.word	0x40020010
 80075ac:	40020028 	.word	0x40020028
 80075b0:	40020040 	.word	0x40020040
 80075b4:	40020058 	.word	0x40020058
 80075b8:	40020070 	.word	0x40020070
 80075bc:	40020088 	.word	0x40020088
 80075c0:	400200a0 	.word	0x400200a0
 80075c4:	400200b8 	.word	0x400200b8
 80075c8:	40020410 	.word	0x40020410
 80075cc:	40020428 	.word	0x40020428
 80075d0:	40020440 	.word	0x40020440
 80075d4:	40020458 	.word	0x40020458
 80075d8:	40020470 	.word	0x40020470
 80075dc:	40020488 	.word	0x40020488
 80075e0:	400204a0 	.word	0x400204a0
 80075e4:	400204b8 	.word	0x400204b8
 80075e8:	58025408 	.word	0x58025408
 80075ec:	5802541c 	.word	0x5802541c
 80075f0:	58025430 	.word	0x58025430
 80075f4:	58025444 	.word	0x58025444
 80075f8:	58025458 	.word	0x58025458
 80075fc:	5802546c 	.word	0x5802546c
 8007600:	58025480 	.word	0x58025480
 8007604:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d160      	bne.n	80076d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a7f      	ldr	r2, [pc, #508]	; (8007814 <HAL_DMA_IRQHandler+0xc74>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d04a      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a7d      	ldr	r2, [pc, #500]	; (8007818 <HAL_DMA_IRQHandler+0xc78>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a7c      	ldr	r2, [pc, #496]	; (800781c <HAL_DMA_IRQHandler+0xc7c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d040      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a7a      	ldr	r2, [pc, #488]	; (8007820 <HAL_DMA_IRQHandler+0xc80>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a79      	ldr	r2, [pc, #484]	; (8007824 <HAL_DMA_IRQHandler+0xc84>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d036      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a77      	ldr	r2, [pc, #476]	; (8007828 <HAL_DMA_IRQHandler+0xc88>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a76      	ldr	r2, [pc, #472]	; (800782c <HAL_DMA_IRQHandler+0xc8c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d02c      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a74      	ldr	r2, [pc, #464]	; (8007830 <HAL_DMA_IRQHandler+0xc90>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d027      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a73      	ldr	r2, [pc, #460]	; (8007834 <HAL_DMA_IRQHandler+0xc94>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a71      	ldr	r2, [pc, #452]	; (8007838 <HAL_DMA_IRQHandler+0xc98>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d01d      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a70      	ldr	r2, [pc, #448]	; (800783c <HAL_DMA_IRQHandler+0xc9c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a6e      	ldr	r2, [pc, #440]	; (8007840 <HAL_DMA_IRQHandler+0xca0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a6d      	ldr	r2, [pc, #436]	; (8007844 <HAL_DMA_IRQHandler+0xca4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6b      	ldr	r2, [pc, #428]	; (8007848 <HAL_DMA_IRQHandler+0xca8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6a      	ldr	r2, [pc, #424]	; (800784c <HAL_DMA_IRQHandler+0xcac>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_IRQHandler+0xb12>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a68      	ldr	r2, [pc, #416]	; (8007850 <HAL_DMA_IRQHandler+0xcb0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d108      	bne.n	80076c4 <HAL_DMA_IRQHandler+0xb24>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0208 	bic.w	r2, r2, #8
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e007      	b.n	80076d4 <HAL_DMA_IRQHandler+0xb34>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0204 	bic.w	r2, r2, #4
 80076d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8165 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076e6:	e15f      	b.n	80079a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	2202      	movs	r2, #2
 80076f2:	409a      	lsls	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 80c5 	beq.w	8007888 <HAL_DMA_IRQHandler+0xce8>
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80bf 	beq.w	8007888 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2202      	movs	r2, #2
 8007714:	409a      	lsls	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d018      	beq.n	8007756 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 813a 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007740:	e134      	b.n	80079ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8130 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007754:	e12a      	b.n	80079ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8089 	bne.w	8007874 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <HAL_DMA_IRQHandler+0xc74>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d04a      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a29      	ldr	r2, [pc, #164]	; (8007818 <HAL_DMA_IRQHandler+0xc78>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d045      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a28      	ldr	r2, [pc, #160]	; (800781c <HAL_DMA_IRQHandler+0xc7c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d040      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a26      	ldr	r2, [pc, #152]	; (8007820 <HAL_DMA_IRQHandler+0xc80>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d03b      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a25      	ldr	r2, [pc, #148]	; (8007824 <HAL_DMA_IRQHandler+0xc84>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d036      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a23      	ldr	r2, [pc, #140]	; (8007828 <HAL_DMA_IRQHandler+0xc88>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d031      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a22      	ldr	r2, [pc, #136]	; (800782c <HAL_DMA_IRQHandler+0xc8c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d02c      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a20      	ldr	r2, [pc, #128]	; (8007830 <HAL_DMA_IRQHandler+0xc90>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d027      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <HAL_DMA_IRQHandler+0xc94>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d022      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <HAL_DMA_IRQHandler+0xc98>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01d      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1c      	ldr	r2, [pc, #112]	; (800783c <HAL_DMA_IRQHandler+0xc9c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d018      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1a      	ldr	r2, [pc, #104]	; (8007840 <HAL_DMA_IRQHandler+0xca0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a19      	ldr	r2, [pc, #100]	; (8007844 <HAL_DMA_IRQHandler+0xca4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00e      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <HAL_DMA_IRQHandler+0xca8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d009      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <HAL_DMA_IRQHandler+0xcac>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <HAL_DMA_IRQHandler+0xc62>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a14      	ldr	r2, [pc, #80]	; (8007850 <HAL_DMA_IRQHandler+0xcb0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d128      	bne.n	8007854 <HAL_DMA_IRQHandler+0xcb4>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0214 	bic.w	r2, r2, #20
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e027      	b.n	8007864 <HAL_DMA_IRQHandler+0xcc4>
 8007814:	40020010 	.word	0x40020010
 8007818:	40020028 	.word	0x40020028
 800781c:	40020040 	.word	0x40020040
 8007820:	40020058 	.word	0x40020058
 8007824:	40020070 	.word	0x40020070
 8007828:	40020088 	.word	0x40020088
 800782c:	400200a0 	.word	0x400200a0
 8007830:	400200b8 	.word	0x400200b8
 8007834:	40020410 	.word	0x40020410
 8007838:	40020428 	.word	0x40020428
 800783c:	40020440 	.word	0x40020440
 8007840:	40020458 	.word	0x40020458
 8007844:	40020470 	.word	0x40020470
 8007848:	40020488 	.word	0x40020488
 800784c:	400204a0 	.word	0x400204a0
 8007850:	400204b8 	.word	0x400204b8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 020a 	bic.w	r2, r2, #10
 8007862:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8097 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007886:	e091      	b.n	80079ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2208      	movs	r2, #8
 8007892:	409a      	lsls	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8088 	beq.w	80079ae <HAL_DMA_IRQHandler+0xe0e>
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8082 	beq.w	80079ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a41      	ldr	r2, [pc, #260]	; (80079b4 <HAL_DMA_IRQHandler+0xe14>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d04a      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a3f      	ldr	r2, [pc, #252]	; (80079b8 <HAL_DMA_IRQHandler+0xe18>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d045      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a3e      	ldr	r2, [pc, #248]	; (80079bc <HAL_DMA_IRQHandler+0xe1c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d040      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a3c      	ldr	r2, [pc, #240]	; (80079c0 <HAL_DMA_IRQHandler+0xe20>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d03b      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a3b      	ldr	r2, [pc, #236]	; (80079c4 <HAL_DMA_IRQHandler+0xe24>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d036      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a39      	ldr	r2, [pc, #228]	; (80079c8 <HAL_DMA_IRQHandler+0xe28>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d031      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a38      	ldr	r2, [pc, #224]	; (80079cc <HAL_DMA_IRQHandler+0xe2c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d02c      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a36      	ldr	r2, [pc, #216]	; (80079d0 <HAL_DMA_IRQHandler+0xe30>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d027      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a35      	ldr	r2, [pc, #212]	; (80079d4 <HAL_DMA_IRQHandler+0xe34>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d022      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <HAL_DMA_IRQHandler+0xe38>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d01d      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a32      	ldr	r2, [pc, #200]	; (80079dc <HAL_DMA_IRQHandler+0xe3c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d018      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a30      	ldr	r2, [pc, #192]	; (80079e0 <HAL_DMA_IRQHandler+0xe40>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d013      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2f      	ldr	r2, [pc, #188]	; (80079e4 <HAL_DMA_IRQHandler+0xe44>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00e      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2d      	ldr	r2, [pc, #180]	; (80079e8 <HAL_DMA_IRQHandler+0xe48>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d009      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2c      	ldr	r2, [pc, #176]	; (80079ec <HAL_DMA_IRQHandler+0xe4c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <HAL_DMA_IRQHandler+0xdaa>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <HAL_DMA_IRQHandler+0xe50>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d108      	bne.n	800795c <HAL_DMA_IRQHandler+0xdbc>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 021c 	bic.w	r2, r2, #28
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e007      	b.n	800796c <HAL_DMA_IRQHandler+0xdcc>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 020e 	bic.w	r2, r2, #14
 800796a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2201      	movs	r2, #1
 8007976:	409a      	lsls	r2, r3
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	e004      	b.n	80079ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80079a4:	bf00      	nop
 80079a6:	e002      	b.n	80079ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079ae:	3728      	adds	r7, #40	; 0x28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40020010 	.word	0x40020010
 80079b8:	40020028 	.word	0x40020028
 80079bc:	40020040 	.word	0x40020040
 80079c0:	40020058 	.word	0x40020058
 80079c4:	40020070 	.word	0x40020070
 80079c8:	40020088 	.word	0x40020088
 80079cc:	400200a0 	.word	0x400200a0
 80079d0:	400200b8 	.word	0x400200b8
 80079d4:	40020410 	.word	0x40020410
 80079d8:	40020428 	.word	0x40020428
 80079dc:	40020440 	.word	0x40020440
 80079e0:	40020458 	.word	0x40020458
 80079e4:	40020470 	.word	0x40020470
 80079e8:	40020488 	.word	0x40020488
 80079ec:	400204a0 	.word	0x400204a0
 80079f0:	400204b8 	.word	0x400204b8

080079f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a7f      	ldr	r2, [pc, #508]	; (8007c10 <DMA_SetConfig+0x21c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d072      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a7d      	ldr	r2, [pc, #500]	; (8007c14 <DMA_SetConfig+0x220>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d06d      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a7c      	ldr	r2, [pc, #496]	; (8007c18 <DMA_SetConfig+0x224>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d068      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a7a      	ldr	r2, [pc, #488]	; (8007c1c <DMA_SetConfig+0x228>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d063      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a79      	ldr	r2, [pc, #484]	; (8007c20 <DMA_SetConfig+0x22c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d05e      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a77      	ldr	r2, [pc, #476]	; (8007c24 <DMA_SetConfig+0x230>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d059      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a76      	ldr	r2, [pc, #472]	; (8007c28 <DMA_SetConfig+0x234>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d054      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a74      	ldr	r2, [pc, #464]	; (8007c2c <DMA_SetConfig+0x238>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d04f      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a73      	ldr	r2, [pc, #460]	; (8007c30 <DMA_SetConfig+0x23c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d04a      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a71      	ldr	r2, [pc, #452]	; (8007c34 <DMA_SetConfig+0x240>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d045      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a70      	ldr	r2, [pc, #448]	; (8007c38 <DMA_SetConfig+0x244>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d040      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a6e      	ldr	r2, [pc, #440]	; (8007c3c <DMA_SetConfig+0x248>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d03b      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a6d      	ldr	r2, [pc, #436]	; (8007c40 <DMA_SetConfig+0x24c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d036      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a6b      	ldr	r2, [pc, #428]	; (8007c44 <DMA_SetConfig+0x250>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d031      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6a      	ldr	r2, [pc, #424]	; (8007c48 <DMA_SetConfig+0x254>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d02c      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a68      	ldr	r2, [pc, #416]	; (8007c4c <DMA_SetConfig+0x258>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d027      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a67      	ldr	r2, [pc, #412]	; (8007c50 <DMA_SetConfig+0x25c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d022      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a65      	ldr	r2, [pc, #404]	; (8007c54 <DMA_SetConfig+0x260>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01d      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a64      	ldr	r2, [pc, #400]	; (8007c58 <DMA_SetConfig+0x264>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a62      	ldr	r2, [pc, #392]	; (8007c5c <DMA_SetConfig+0x268>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a61      	ldr	r2, [pc, #388]	; (8007c60 <DMA_SetConfig+0x26c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5f      	ldr	r2, [pc, #380]	; (8007c64 <DMA_SetConfig+0x270>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a5e      	ldr	r2, [pc, #376]	; (8007c68 <DMA_SetConfig+0x274>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <DMA_SetConfig+0x10a>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a5c      	ldr	r2, [pc, #368]	; (8007c6c <DMA_SetConfig+0x278>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <DMA_SetConfig+0x10e>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <DMA_SetConfig+0x110>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00d      	beq.n	8007b24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a39      	ldr	r2, [pc, #228]	; (8007c10 <DMA_SetConfig+0x21c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d04a      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a38      	ldr	r2, [pc, #224]	; (8007c14 <DMA_SetConfig+0x220>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d045      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a36      	ldr	r2, [pc, #216]	; (8007c18 <DMA_SetConfig+0x224>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d040      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a35      	ldr	r2, [pc, #212]	; (8007c1c <DMA_SetConfig+0x228>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d03b      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a33      	ldr	r2, [pc, #204]	; (8007c20 <DMA_SetConfig+0x22c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d036      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a32      	ldr	r2, [pc, #200]	; (8007c24 <DMA_SetConfig+0x230>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d031      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a30      	ldr	r2, [pc, #192]	; (8007c28 <DMA_SetConfig+0x234>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d02c      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2f      	ldr	r2, [pc, #188]	; (8007c2c <DMA_SetConfig+0x238>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d027      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a2d      	ldr	r2, [pc, #180]	; (8007c30 <DMA_SetConfig+0x23c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d022      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <DMA_SetConfig+0x240>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d01d      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a2a      	ldr	r2, [pc, #168]	; (8007c38 <DMA_SetConfig+0x244>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a29      	ldr	r2, [pc, #164]	; (8007c3c <DMA_SetConfig+0x248>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d013      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a27      	ldr	r2, [pc, #156]	; (8007c40 <DMA_SetConfig+0x24c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <DMA_SetConfig+0x250>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a24      	ldr	r2, [pc, #144]	; (8007c48 <DMA_SetConfig+0x254>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <DMA_SetConfig+0x1d0>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a23      	ldr	r2, [pc, #140]	; (8007c4c <DMA_SetConfig+0x258>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d101      	bne.n	8007bc8 <DMA_SetConfig+0x1d4>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <DMA_SetConfig+0x1d6>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d059      	beq.n	8007c82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	223f      	movs	r2, #63	; 0x3f
 8007bd8:	409a      	lsls	r2, r3
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d138      	bne.n	8007c70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c0e:	e086      	b.n	8007d1e <DMA_SetConfig+0x32a>
 8007c10:	40020010 	.word	0x40020010
 8007c14:	40020028 	.word	0x40020028
 8007c18:	40020040 	.word	0x40020040
 8007c1c:	40020058 	.word	0x40020058
 8007c20:	40020070 	.word	0x40020070
 8007c24:	40020088 	.word	0x40020088
 8007c28:	400200a0 	.word	0x400200a0
 8007c2c:	400200b8 	.word	0x400200b8
 8007c30:	40020410 	.word	0x40020410
 8007c34:	40020428 	.word	0x40020428
 8007c38:	40020440 	.word	0x40020440
 8007c3c:	40020458 	.word	0x40020458
 8007c40:	40020470 	.word	0x40020470
 8007c44:	40020488 	.word	0x40020488
 8007c48:	400204a0 	.word	0x400204a0
 8007c4c:	400204b8 	.word	0x400204b8
 8007c50:	58025408 	.word	0x58025408
 8007c54:	5802541c 	.word	0x5802541c
 8007c58:	58025430 	.word	0x58025430
 8007c5c:	58025444 	.word	0x58025444
 8007c60:	58025458 	.word	0x58025458
 8007c64:	5802546c 	.word	0x5802546c
 8007c68:	58025480 	.word	0x58025480
 8007c6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	60da      	str	r2, [r3, #12]
}
 8007c80:	e04d      	b.n	8007d1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a29      	ldr	r2, [pc, #164]	; (8007d2c <DMA_SetConfig+0x338>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d022      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a27      	ldr	r2, [pc, #156]	; (8007d30 <DMA_SetConfig+0x33c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01d      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a26      	ldr	r2, [pc, #152]	; (8007d34 <DMA_SetConfig+0x340>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d018      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a24      	ldr	r2, [pc, #144]	; (8007d38 <DMA_SetConfig+0x344>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a23      	ldr	r2, [pc, #140]	; (8007d3c <DMA_SetConfig+0x348>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d00e      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a21      	ldr	r2, [pc, #132]	; (8007d40 <DMA_SetConfig+0x34c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d009      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <DMA_SetConfig+0x350>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d004      	beq.n	8007cd2 <DMA_SetConfig+0x2de>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <DMA_SetConfig+0x354>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d101      	bne.n	8007cd6 <DMA_SetConfig+0x2e2>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <DMA_SetConfig+0x2e4>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	f003 031f 	and.w	r3, r3, #31
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	409a      	lsls	r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d108      	bne.n	8007d0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	60da      	str	r2, [r3, #12]
}
 8007d0c:	e007      	b.n	8007d1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	58025408 	.word	0x58025408
 8007d30:	5802541c 	.word	0x5802541c
 8007d34:	58025430 	.word	0x58025430
 8007d38:	58025444 	.word	0x58025444
 8007d3c:	58025458 	.word	0x58025458
 8007d40:	5802546c 	.word	0x5802546c
 8007d44:	58025480 	.word	0x58025480
 8007d48:	58025494 	.word	0x58025494

08007d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a42      	ldr	r2, [pc, #264]	; (8007e64 <DMA_CalcBaseAndBitshift+0x118>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d04a      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a41      	ldr	r2, [pc, #260]	; (8007e68 <DMA_CalcBaseAndBitshift+0x11c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d045      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a3f      	ldr	r2, [pc, #252]	; (8007e6c <DMA_CalcBaseAndBitshift+0x120>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d040      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a3e      	ldr	r2, [pc, #248]	; (8007e70 <DMA_CalcBaseAndBitshift+0x124>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d03b      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a3c      	ldr	r2, [pc, #240]	; (8007e74 <DMA_CalcBaseAndBitshift+0x128>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d036      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	; (8007e78 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d031      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a39      	ldr	r2, [pc, #228]	; (8007e7c <DMA_CalcBaseAndBitshift+0x130>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02c      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a38      	ldr	r2, [pc, #224]	; (8007e80 <DMA_CalcBaseAndBitshift+0x134>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d027      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a36      	ldr	r2, [pc, #216]	; (8007e84 <DMA_CalcBaseAndBitshift+0x138>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d022      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a35      	ldr	r2, [pc, #212]	; (8007e88 <DMA_CalcBaseAndBitshift+0x13c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d01d      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a33      	ldr	r2, [pc, #204]	; (8007e8c <DMA_CalcBaseAndBitshift+0x140>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a32      	ldr	r2, [pc, #200]	; (8007e90 <DMA_CalcBaseAndBitshift+0x144>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d013      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a30      	ldr	r2, [pc, #192]	; (8007e94 <DMA_CalcBaseAndBitshift+0x148>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00e      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a2f      	ldr	r2, [pc, #188]	; (8007e98 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <DMA_CalcBaseAndBitshift+0x150>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <DMA_CalcBaseAndBitshift+0xa8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	; (8007ea0 <DMA_CalcBaseAndBitshift+0x154>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d101      	bne.n	8007df8 <DMA_CalcBaseAndBitshift+0xac>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <DMA_CalcBaseAndBitshift+0xae>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d024      	beq.n	8007e48 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	3b10      	subs	r3, #16
 8007e06:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <DMA_CalcBaseAndBitshift+0x158>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	091b      	lsrs	r3, r3, #4
 8007e0e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007e18:	5cd3      	ldrb	r3, [r2, r3]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d908      	bls.n	8007e38 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <DMA_CalcBaseAndBitshift+0x160>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58
 8007e36:	e00d      	b.n	8007e54 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <DMA_CalcBaseAndBitshift+0x160>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6593      	str	r3, [r2, #88]	; 0x58
 8007e46:	e005      	b.n	8007e54 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	40020010 	.word	0x40020010
 8007e68:	40020028 	.word	0x40020028
 8007e6c:	40020040 	.word	0x40020040
 8007e70:	40020058 	.word	0x40020058
 8007e74:	40020070 	.word	0x40020070
 8007e78:	40020088 	.word	0x40020088
 8007e7c:	400200a0 	.word	0x400200a0
 8007e80:	400200b8 	.word	0x400200b8
 8007e84:	40020410 	.word	0x40020410
 8007e88:	40020428 	.word	0x40020428
 8007e8c:	40020440 	.word	0x40020440
 8007e90:	40020458 	.word	0x40020458
 8007e94:	40020470 	.word	0x40020470
 8007e98:	40020488 	.word	0x40020488
 8007e9c:	400204a0 	.word	0x400204a0
 8007ea0:	400204b8 	.word	0x400204b8
 8007ea4:	aaaaaaab 	.word	0xaaaaaaab
 8007ea8:	0800eee4 	.word	0x0800eee4
 8007eac:	fffffc00 	.word	0xfffffc00

08007eb0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d120      	bne.n	8007f06 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d858      	bhi.n	8007f7e <DMA_CheckFifoParam+0xce>
 8007ecc:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <DMA_CheckFifoParam+0x24>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08007ef7 	.word	0x08007ef7
 8007edc:	08007ee5 	.word	0x08007ee5
 8007ee0:	08007f7f 	.word	0x08007f7f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d048      	beq.n	8007f82 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ef4:	e045      	b.n	8007f82 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007efe:	d142      	bne.n	8007f86 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f04:	e03f      	b.n	8007f86 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f0e:	d123      	bne.n	8007f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d838      	bhi.n	8007f8a <DMA_CheckFifoParam+0xda>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <DMA_CheckFifoParam+0x70>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f37 	.word	0x08007f37
 8007f28:	08007f31 	.word	0x08007f31
 8007f2c:	08007f49 	.word	0x08007f49
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
        break;
 8007f34:	e030      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d025      	beq.n	8007f8e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f46:	e022      	b.n	8007f8e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f50:	d11f      	bne.n	8007f92 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f56:	e01c      	b.n	8007f92 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d902      	bls.n	8007f66 <DMA_CheckFifoParam+0xb6>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d003      	beq.n	8007f6c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f64:	e018      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
        break;
 8007f6a:	e015      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00e      	beq.n	8007f96 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7c:	e00b      	b.n	8007f96 <DMA_CheckFifoParam+0xe6>
        break;
 8007f7e:	bf00      	nop
 8007f80:	e00a      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        break;
 8007f82:	bf00      	nop
 8007f84:	e008      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        break;
 8007f86:	bf00      	nop
 8007f88:	e006      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e004      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e002      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
        break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <DMA_CheckFifoParam+0xe8>
    break;
 8007f96:	bf00      	nop
    }
  }

  return status;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop

08007fa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a38      	ldr	r2, [pc, #224]	; (800809c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d022      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a36      	ldr	r2, [pc, #216]	; (80080a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01d      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a35      	ldr	r2, [pc, #212]	; (80080a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d018      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a33      	ldr	r2, [pc, #204]	; (80080a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d013      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a32      	ldr	r2, [pc, #200]	; (80080ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00e      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a30      	ldr	r2, [pc, #192]	; (80080b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d009      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2f      	ldr	r2, [pc, #188]	; (80080b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2d      	ldr	r2, [pc, #180]	; (80080b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d101      	bne.n	800800a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01a      	beq.n	8008046 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3b08      	subs	r3, #8
 8008018:	4a28      	ldr	r2, [pc, #160]	; (80080bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800801a:	fba2 2303 	umull	r2, r3, r2, r3
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a24      	ldr	r2, [pc, #144]	; (80080c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008034:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2201      	movs	r2, #1
 800803e:	409a      	lsls	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008044:	e024      	b.n	8008090 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	b2db      	uxtb	r3, r3
 800804c:	3b10      	subs	r3, #16
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	091b      	lsrs	r3, r3, #4
 8008056:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d806      	bhi.n	800806e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d902      	bls.n	800806e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3308      	adds	r3, #8
 800806c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a16      	ldr	r2, [pc, #88]	; (80080d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008080:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	2201      	movs	r2, #1
 800808a:	409a      	lsls	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	58025408 	.word	0x58025408
 80080a0:	5802541c 	.word	0x5802541c
 80080a4:	58025430 	.word	0x58025430
 80080a8:	58025444 	.word	0x58025444
 80080ac:	58025458 	.word	0x58025458
 80080b0:	5802546c 	.word	0x5802546c
 80080b4:	58025480 	.word	0x58025480
 80080b8:	58025494 	.word	0x58025494
 80080bc:	cccccccd 	.word	0xcccccccd
 80080c0:	16009600 	.word	0x16009600
 80080c4:	58025880 	.word	0x58025880
 80080c8:	aaaaaaab 	.word	0xaaaaaaab
 80080cc:	400204b8 	.word	0x400204b8
 80080d0:	4002040f 	.word	0x4002040f
 80080d4:	10008200 	.word	0x10008200
 80080d8:	40020880 	.word	0x40020880

080080dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04a      	beq.n	8008188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d847      	bhi.n	8008188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a25      	ldr	r2, [pc, #148]	; (8008194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d022      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a24      	ldr	r2, [pc, #144]	; (8008198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d01d      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a22      	ldr	r2, [pc, #136]	; (800819c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d018      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d013      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d009      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1c      	ldr	r2, [pc, #112]	; (80081ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d101      	bne.n	800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008164:	671a      	str	r2, [r3, #112]	; 0x70
 8008166:	e009      	b.n	800817c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	461a      	mov	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a11      	ldr	r2, [pc, #68]	; (80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800817a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	2201      	movs	r2, #1
 8008182:	409a      	lsls	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	58025408 	.word	0x58025408
 8008198:	5802541c 	.word	0x5802541c
 800819c:	58025430 	.word	0x58025430
 80081a0:	58025444 	.word	0x58025444
 80081a4:	58025458 	.word	0x58025458
 80081a8:	5802546c 	.word	0x5802546c
 80081ac:	58025480 	.word	0x58025480
 80081b0:	58025494 	.word	0x58025494
 80081b4:	1600963f 	.word	0x1600963f
 80081b8:	58025940 	.word	0x58025940
 80081bc:	1000823f 	.word	0x1000823f
 80081c0:	40020940 	.word	0x40020940

080081c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	; 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081d2:	4b86      	ldr	r3, [pc, #536]	; (80083ec <HAL_GPIO_Init+0x228>)
 80081d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081d6:	e18c      	b.n	80084f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	2101      	movs	r1, #1
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	fa01 f303 	lsl.w	r3, r1, r3
 80081e4:	4013      	ands	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 817e 	beq.w	80084ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d005      	beq.n	8008208 <HAL_GPIO_Init+0x44>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d130      	bne.n	800826a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	2203      	movs	r2, #3
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	43db      	mvns	r3, r3
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	4013      	ands	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	4313      	orrs	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800823e:	2201      	movs	r2, #1
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	43db      	mvns	r3, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4013      	ands	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	091b      	lsrs	r3, r3, #4
 8008254:	f003 0201 	and.w	r2, r3, #1
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4313      	orrs	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d017      	beq.n	80082a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	2203      	movs	r2, #3
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4313      	orrs	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d123      	bne.n	80082fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	08da      	lsrs	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3208      	adds	r2, #8
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	220f      	movs	r2, #15
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43db      	mvns	r3, r3
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	4013      	ands	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	08da      	lsrs	r2, r3, #3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3208      	adds	r2, #8
 80082f4:	69b9      	ldr	r1, [r7, #24]
 80082f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	2203      	movs	r2, #3
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	43db      	mvns	r3, r3
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4013      	ands	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f003 0203 	and.w	r2, r3, #3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	4313      	orrs	r3, r2
 8008326:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80d8 	beq.w	80084ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833c:	4b2c      	ldr	r3, [pc, #176]	; (80083f0 <HAL_GPIO_Init+0x22c>)
 800833e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008342:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <HAL_GPIO_Init+0x22c>)
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800834c:	4b28      	ldr	r3, [pc, #160]	; (80083f0 <HAL_GPIO_Init+0x22c>)
 800834e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800835a:	4a26      	ldr	r2, [pc, #152]	; (80083f4 <HAL_GPIO_Init+0x230>)
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	3302      	adds	r3, #2
 8008362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	220f      	movs	r2, #15
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43db      	mvns	r3, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	4013      	ands	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <HAL_GPIO_Init+0x234>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d04a      	beq.n	800841c <HAL_GPIO_Init+0x258>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1c      	ldr	r2, [pc, #112]	; (80083fc <HAL_GPIO_Init+0x238>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d02b      	beq.n	80083e6 <HAL_GPIO_Init+0x222>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <HAL_GPIO_Init+0x23c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d025      	beq.n	80083e2 <HAL_GPIO_Init+0x21e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1a      	ldr	r2, [pc, #104]	; (8008404 <HAL_GPIO_Init+0x240>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d01f      	beq.n	80083de <HAL_GPIO_Init+0x21a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a19      	ldr	r2, [pc, #100]	; (8008408 <HAL_GPIO_Init+0x244>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d019      	beq.n	80083da <HAL_GPIO_Init+0x216>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a18      	ldr	r2, [pc, #96]	; (800840c <HAL_GPIO_Init+0x248>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <HAL_GPIO_Init+0x212>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a17      	ldr	r2, [pc, #92]	; (8008410 <HAL_GPIO_Init+0x24c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00d      	beq.n	80083d2 <HAL_GPIO_Init+0x20e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a16      	ldr	r2, [pc, #88]	; (8008414 <HAL_GPIO_Init+0x250>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d007      	beq.n	80083ce <HAL_GPIO_Init+0x20a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a15      	ldr	r2, [pc, #84]	; (8008418 <HAL_GPIO_Init+0x254>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d101      	bne.n	80083ca <HAL_GPIO_Init+0x206>
 80083c6:	2309      	movs	r3, #9
 80083c8:	e029      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083ca:	230a      	movs	r3, #10
 80083cc:	e027      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083ce:	2307      	movs	r3, #7
 80083d0:	e025      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083d2:	2306      	movs	r3, #6
 80083d4:	e023      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083d6:	2305      	movs	r3, #5
 80083d8:	e021      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083da:	2304      	movs	r3, #4
 80083dc:	e01f      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083de:	2303      	movs	r3, #3
 80083e0:	e01d      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e01b      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e019      	b.n	800841e <HAL_GPIO_Init+0x25a>
 80083ea:	bf00      	nop
 80083ec:	58000080 	.word	0x58000080
 80083f0:	58024400 	.word	0x58024400
 80083f4:	58000400 	.word	0x58000400
 80083f8:	58020000 	.word	0x58020000
 80083fc:	58020400 	.word	0x58020400
 8008400:	58020800 	.word	0x58020800
 8008404:	58020c00 	.word	0x58020c00
 8008408:	58021000 	.word	0x58021000
 800840c:	58021400 	.word	0x58021400
 8008410:	58021800 	.word	0x58021800
 8008414:	58021c00 	.word	0x58021c00
 8008418:	58022400 	.word	0x58022400
 800841c:	2300      	movs	r3, #0
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	f002 0203 	and.w	r2, r2, #3
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	4093      	lsls	r3, r2
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4313      	orrs	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800842e:	4938      	ldr	r1, [pc, #224]	; (8008510 <HAL_GPIO_Init+0x34c>)
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	089b      	lsrs	r3, r3, #2
 8008434:	3302      	adds	r3, #2
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800843c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	43db      	mvns	r3, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4013      	ands	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800846a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	43db      	mvns	r3, r3
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	4013      	ands	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4013      	ands	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	43db      	mvns	r3, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4013      	ands	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	3301      	adds	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f47f ae6b 	bne.w	80081d8 <HAL_GPIO_Init+0x14>
  }
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	3724      	adds	r7, #36	; 0x24
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	58000400 	.word	0x58000400

08008514 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800851e:	2300      	movs	r3, #0
 8008520:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008522:	4b72      	ldr	r3, [pc, #456]	; (80086ec <HAL_GPIO_DeInit+0x1d8>)
 8008524:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008526:	e0d3      	b.n	80086d0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008528:	2201      	movs	r2, #1
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	4013      	ands	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 80c6 	beq.w	80086ca <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800853e:	4a6c      	ldr	r2, [pc, #432]	; (80086f0 <HAL_GPIO_DeInit+0x1dc>)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	089b      	lsrs	r3, r3, #2
 8008544:	3302      	adds	r3, #2
 8008546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	220f      	movs	r2, #15
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a64      	ldr	r2, [pc, #400]	; (80086f4 <HAL_GPIO_DeInit+0x1e0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d031      	beq.n	80085cc <HAL_GPIO_DeInit+0xb8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a63      	ldr	r2, [pc, #396]	; (80086f8 <HAL_GPIO_DeInit+0x1e4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d02b      	beq.n	80085c8 <HAL_GPIO_DeInit+0xb4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a62      	ldr	r2, [pc, #392]	; (80086fc <HAL_GPIO_DeInit+0x1e8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d025      	beq.n	80085c4 <HAL_GPIO_DeInit+0xb0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a61      	ldr	r2, [pc, #388]	; (8008700 <HAL_GPIO_DeInit+0x1ec>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d01f      	beq.n	80085c0 <HAL_GPIO_DeInit+0xac>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a60      	ldr	r2, [pc, #384]	; (8008704 <HAL_GPIO_DeInit+0x1f0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d019      	beq.n	80085bc <HAL_GPIO_DeInit+0xa8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a5f      	ldr	r2, [pc, #380]	; (8008708 <HAL_GPIO_DeInit+0x1f4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d013      	beq.n	80085b8 <HAL_GPIO_DeInit+0xa4>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a5e      	ldr	r2, [pc, #376]	; (800870c <HAL_GPIO_DeInit+0x1f8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00d      	beq.n	80085b4 <HAL_GPIO_DeInit+0xa0>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a5d      	ldr	r2, [pc, #372]	; (8008710 <HAL_GPIO_DeInit+0x1fc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d007      	beq.n	80085b0 <HAL_GPIO_DeInit+0x9c>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a5c      	ldr	r2, [pc, #368]	; (8008714 <HAL_GPIO_DeInit+0x200>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d101      	bne.n	80085ac <HAL_GPIO_DeInit+0x98>
 80085a8:	2309      	movs	r3, #9
 80085aa:	e010      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085ac:	230a      	movs	r3, #10
 80085ae:	e00e      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085b0:	2307      	movs	r3, #7
 80085b2:	e00c      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085b4:	2306      	movs	r3, #6
 80085b6:	e00a      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085b8:	2305      	movs	r3, #5
 80085ba:	e008      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085bc:	2304      	movs	r3, #4
 80085be:	e006      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085c0:	2303      	movs	r3, #3
 80085c2:	e004      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e002      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <HAL_GPIO_DeInit+0xba>
 80085cc:	2300      	movs	r3, #0
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	f002 0203 	and.w	r2, r2, #3
 80085d4:	0092      	lsls	r2, r2, #2
 80085d6:	4093      	lsls	r3, r2
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d136      	bne.n	800864c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	43db      	mvns	r3, r3
 80085e6:	401a      	ands	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	43db      	mvns	r3, r3
 80085f4:	401a      	ands	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80085fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	43db      	mvns	r3, r3
 8008604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008608:	4013      	ands	r3, r2
 800860a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800860c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	43db      	mvns	r3, r3
 8008616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800861a:	4013      	ands	r3, r2
 800861c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	220f      	movs	r2, #15
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800862e:	4a30      	ldr	r2, [pc, #192]	; (80086f0 <HAL_GPIO_DeInit+0x1dc>)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	089b      	lsrs	r3, r3, #2
 8008634:	3302      	adds	r3, #2
 8008636:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	43da      	mvns	r2, r3
 800863e:	482c      	ldr	r0, [pc, #176]	; (80086f0 <HAL_GPIO_DeInit+0x1dc>)
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	400a      	ands	r2, r1
 8008646:	3302      	adds	r3, #2
 8008648:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	2103      	movs	r1, #3
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	08da      	lsrs	r2, r3, #3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3208      	adds	r2, #8
 8008668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	220f      	movs	r2, #15
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	08d2      	lsrs	r2, r2, #3
 8008680:	4019      	ands	r1, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3208      	adds	r2, #8
 8008686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	2103      	movs	r1, #3
 8008694:	fa01 f303 	lsl.w	r3, r1, r3
 8008698:	43db      	mvns	r3, r3
 800869a:	401a      	ands	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	2101      	movs	r1, #1
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	2103      	movs	r1, #3
 80086be:	fa01 f303 	lsl.w	r3, r1, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	401a      	ands	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	3301      	adds	r3, #1
 80086ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	fa22 f303 	lsr.w	r3, r2, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f47f af25 	bne.w	8008528 <HAL_GPIO_DeInit+0x14>
  }
}
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	58000080 	.word	0x58000080
 80086f0:	58000400 	.word	0x58000400
 80086f4:	58020000 	.word	0x58020000
 80086f8:	58020400 	.word	0x58020400
 80086fc:	58020800 	.word	0x58020800
 8008700:	58020c00 	.word	0x58020c00
 8008704:	58021000 	.word	0x58021000
 8008708:	58021400 	.word	0x58021400
 800870c:	58021800 	.word	0x58021800
 8008710:	58021c00 	.word	0x58021c00
 8008714:	58022400 	.word	0x58022400

08008718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	807b      	strh	r3, [r7, #2]
 8008724:	4613      	mov	r3, r2
 8008726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008728:	787b      	ldrb	r3, [r7, #1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800872e:	887a      	ldrh	r2, [r7, #2]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008734:	e003      	b.n	800873e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008736:	887b      	ldrh	r3, [r7, #2]
 8008738:	041a      	lsls	r2, r3, #16
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	619a      	str	r2, [r3, #24]
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008758:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800875c:	88fb      	ldrh	r3, [r7, #6]
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f804 	bl	800877e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	4603      	mov	r3, r0
 8008786:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800879c:	4b19      	ldr	r3, [pc, #100]	; (8008804 <HAL_PWREx_ConfigSupply+0x70>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d00a      	beq.n	80087be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087a8:	4b16      	ldr	r3, [pc, #88]	; (8008804 <HAL_PWREx_ConfigSupply+0x70>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d001      	beq.n	80087ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e01f      	b.n	80087fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e01d      	b.n	80087fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087be:	4b11      	ldr	r3, [pc, #68]	; (8008804 <HAL_PWREx_ConfigSupply+0x70>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f023 0207 	bic.w	r2, r3, #7
 80087c6:	490f      	ldr	r1, [pc, #60]	; (8008804 <HAL_PWREx_ConfigSupply+0x70>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087ce:	f7fc fbbb 	bl	8004f48 <HAL_GetTick>
 80087d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087d4:	e009      	b.n	80087ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087d6:	f7fc fbb7 	bl	8004f48 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087e4:	d901      	bls.n	80087ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e007      	b.n	80087fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <HAL_PWREx_ConfigSupply+0x70>)
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f6:	d1ee      	bne.n	80087d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	58024800 	.word	0x58024800

08008808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	; 0x30
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e39d      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 8087 	beq.w	8008936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008828:	4b88      	ldr	r3, [pc, #544]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008832:	4b86      	ldr	r3, [pc, #536]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	2b10      	cmp	r3, #16
 800883c:	d007      	beq.n	800884e <HAL_RCC_OscConfig+0x46>
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	2b18      	cmp	r3, #24
 8008842:	d110      	bne.n	8008866 <HAL_RCC_OscConfig+0x5e>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d10b      	bne.n	8008866 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800884e:	4b7f      	ldr	r3, [pc, #508]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d06c      	beq.n	8008934 <HAL_RCC_OscConfig+0x12c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d168      	bne.n	8008934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e377      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800886e:	d106      	bne.n	800887e <HAL_RCC_OscConfig+0x76>
 8008870:	4b76      	ldr	r3, [pc, #472]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a75      	ldr	r2, [pc, #468]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	e02e      	b.n	80088dc <HAL_RCC_OscConfig+0xd4>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10c      	bne.n	80088a0 <HAL_RCC_OscConfig+0x98>
 8008886:	4b71      	ldr	r3, [pc, #452]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a70      	ldr	r2, [pc, #448]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 800888c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	4b6e      	ldr	r3, [pc, #440]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a6d      	ldr	r2, [pc, #436]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e01d      	b.n	80088dc <HAL_RCC_OscConfig+0xd4>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088a8:	d10c      	bne.n	80088c4 <HAL_RCC_OscConfig+0xbc>
 80088aa:	4b68      	ldr	r3, [pc, #416]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a67      	ldr	r2, [pc, #412]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	4b65      	ldr	r3, [pc, #404]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a64      	ldr	r2, [pc, #400]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	e00b      	b.n	80088dc <HAL_RCC_OscConfig+0xd4>
 80088c4:	4b61      	ldr	r3, [pc, #388]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a60      	ldr	r2, [pc, #384]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	4b5e      	ldr	r3, [pc, #376]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a5d      	ldr	r2, [pc, #372]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80088d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d013      	beq.n	800890c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e4:	f7fc fb30 	bl	8004f48 <HAL_GetTick>
 80088e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088ea:	e008      	b.n	80088fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088ec:	f7fc fb2c 	bl	8004f48 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b64      	cmp	r3, #100	; 0x64
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e32b      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088fe:	4b53      	ldr	r3, [pc, #332]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f0      	beq.n	80088ec <HAL_RCC_OscConfig+0xe4>
 800890a:	e014      	b.n	8008936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890c:	f7fc fb1c 	bl	8004f48 <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008914:	f7fc fb18 	bl	8004f48 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b64      	cmp	r3, #100	; 0x64
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e317      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008926:	4b49      	ldr	r3, [pc, #292]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f0      	bne.n	8008914 <HAL_RCC_OscConfig+0x10c>
 8008932:	e000      	b.n	8008936 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 808c 	beq.w	8008a5c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008944:	4b41      	ldr	r3, [pc, #260]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800894c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <HAL_RCC_OscConfig+0x162>
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	2b18      	cmp	r3, #24
 800895e:	d137      	bne.n	80089d0 <HAL_RCC_OscConfig+0x1c8>
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d132      	bne.n	80089d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800896a:	4b38      	ldr	r3, [pc, #224]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_RCC_OscConfig+0x17a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e2e9      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008982:	4b32      	ldr	r3, [pc, #200]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f023 0219 	bic.w	r2, r3, #25
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	492f      	ldr	r1, [pc, #188]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008990:	4313      	orrs	r3, r2
 8008992:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008994:	f7fc fad8 	bl	8004f48 <HAL_GetTick>
 8008998:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800899c:	f7fc fad4 	bl	8004f48 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e2d3      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089ae:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f0      	beq.n	800899c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ba:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	061b      	lsls	r3, r3, #24
 80089c8:	4920      	ldr	r1, [pc, #128]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089ce:	e045      	b.n	8008a5c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d026      	beq.n	8008a26 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f023 0219 	bic.w	r2, r3, #25
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	4919      	ldr	r1, [pc, #100]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ea:	f7fc faad 	bl	8004f48 <HAL_GetTick>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089f2:	f7fc faa9 	bl	8004f48 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e2a8      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a04:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	490b      	ldr	r1, [pc, #44]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	604b      	str	r3, [r1, #4]
 8008a24:	e01a      	b.n	8008a5c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a08      	ldr	r2, [pc, #32]	; (8008a4c <HAL_RCC_OscConfig+0x244>)
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a32:	f7fc fa89 	bl	8004f48 <HAL_GetTick>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a38:	e00a      	b.n	8008a50 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a3a:	f7fc fa85 	bl	8004f48 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d903      	bls.n	8008a50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e284      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
 8008a4c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a50:	4b96      	ldr	r3, [pc, #600]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1ee      	bne.n	8008a3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d06a      	beq.n	8008b3e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a68:	4b90      	ldr	r3, [pc, #576]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a70:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a72:	4b8e      	ldr	r3, [pc, #568]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d007      	beq.n	8008a8e <HAL_RCC_OscConfig+0x286>
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b18      	cmp	r3, #24
 8008a82:	d11b      	bne.n	8008abc <HAL_RCC_OscConfig+0x2b4>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d116      	bne.n	8008abc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a8e:	4b87      	ldr	r3, [pc, #540]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x29e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	2b80      	cmp	r3, #128	; 0x80
 8008aa0:	d001      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e257      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aa6:	4b81      	ldr	r3, [pc, #516]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	061b      	lsls	r3, r3, #24
 8008ab4:	497d      	ldr	r1, [pc, #500]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aba:	e040      	b.n	8008b3e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d023      	beq.n	8008b0c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ac4:	4b79      	ldr	r3, [pc, #484]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a78      	ldr	r2, [pc, #480]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fc fa3a 	bl	8004f48 <HAL_GetTick>
 8008ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ad8:	f7fc fa36 	bl	8004f48 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e235      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aea:	4b70      	ldr	r3, [pc, #448]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f0      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008af6:	4b6d      	ldr	r3, [pc, #436]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	061b      	lsls	r3, r3, #24
 8008b04:	4969      	ldr	r1, [pc, #420]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60cb      	str	r3, [r1, #12]
 8008b0a:	e018      	b.n	8008b3e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b0c:	4b67      	ldr	r3, [pc, #412]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a66      	ldr	r2, [pc, #408]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b18:	f7fc fa16 	bl	8004f48 <HAL_GetTick>
 8008b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b20:	f7fc fa12 	bl	8004f48 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e211      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b32:	4b5e      	ldr	r3, [pc, #376]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f0      	bne.n	8008b20 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d036      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d019      	beq.n	8008b86 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b52:	4b56      	ldr	r3, [pc, #344]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b56:	4a55      	ldr	r2, [pc, #340]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b58:	f043 0301 	orr.w	r3, r3, #1
 8008b5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5e:	f7fc f9f3 	bl	8004f48 <HAL_GetTick>
 8008b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b64:	e008      	b.n	8008b78 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b66:	f7fc f9ef 	bl	8004f48 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e1ee      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b78:	4b4c      	ldr	r3, [pc, #304]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f0      	beq.n	8008b66 <HAL_RCC_OscConfig+0x35e>
 8008b84:	e018      	b.n	8008bb8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b86:	4b49      	ldr	r3, [pc, #292]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8a:	4a48      	ldr	r2, [pc, #288]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b92:	f7fc f9d9 	bl	8004f48 <HAL_GetTick>
 8008b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b98:	e008      	b.n	8008bac <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b9a:	f7fc f9d5 	bl	8004f48 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e1d4      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bac:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f0      	bne.n	8008b9a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d036      	beq.n	8008c32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d019      	beq.n	8008c00 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bcc:	4b37      	ldr	r3, [pc, #220]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a36      	ldr	r2, [pc, #216]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bd8:	f7fc f9b6 	bl	8004f48 <HAL_GetTick>
 8008bdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008be0:	f7fc f9b2 	bl	8004f48 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e1b1      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f0      	beq.n	8008be0 <HAL_RCC_OscConfig+0x3d8>
 8008bfe:	e018      	b.n	8008c32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c00:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a29      	ldr	r2, [pc, #164]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c0c:	f7fc f99c 	bl	8004f48 <HAL_GetTick>
 8008c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c14:	f7fc f998 	bl	8004f48 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e197      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c26:	4b21      	ldr	r3, [pc, #132]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1f0      	bne.n	8008c14 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 8086 	beq.w	8008d4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c40:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <HAL_RCC_OscConfig+0x4a8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a1a      	ldr	r2, [pc, #104]	; (8008cb0 <HAL_RCC_OscConfig+0x4a8>)
 8008c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c4c:	f7fc f97c 	bl	8004f48 <HAL_GetTick>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c54:	f7fc f978 	bl	8004f48 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	; 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e177      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <HAL_RCC_OscConfig+0x4a8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0f0      	beq.n	8008c54 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d106      	bne.n	8008c88 <HAL_RCC_OscConfig+0x480>
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	4a0b      	ldr	r2, [pc, #44]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	6713      	str	r3, [r2, #112]	; 0x70
 8008c86:	e032      	b.n	8008cee <HAL_RCC_OscConfig+0x4e6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d111      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x4ac>
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c94:	4a05      	ldr	r2, [pc, #20]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c9c:	4b03      	ldr	r3, [pc, #12]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca0:	4a02      	ldr	r2, [pc, #8]	; (8008cac <HAL_RCC_OscConfig+0x4a4>)
 8008ca2:	f023 0304 	bic.w	r3, r3, #4
 8008ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca8:	e021      	b.n	8008cee <HAL_RCC_OscConfig+0x4e6>
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	58024800 	.word	0x58024800
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	2b05      	cmp	r3, #5
 8008cba:	d10c      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x4ce>
 8008cbc:	4b83      	ldr	r3, [pc, #524]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	4a82      	ldr	r2, [pc, #520]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cc2:	f043 0304 	orr.w	r3, r3, #4
 8008cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc8:	4b80      	ldr	r3, [pc, #512]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ccc:	4a7f      	ldr	r2, [pc, #508]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd4:	e00b      	b.n	8008cee <HAL_RCC_OscConfig+0x4e6>
 8008cd6:	4b7d      	ldr	r3, [pc, #500]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cda:	4a7c      	ldr	r2, [pc, #496]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce2:	4b7a      	ldr	r3, [pc, #488]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	4a79      	ldr	r2, [pc, #484]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008ce8:	f023 0304 	bic.w	r3, r3, #4
 8008cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d015      	beq.n	8008d22 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf6:	f7fc f927 	bl	8004f48 <HAL_GetTick>
 8008cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cfc:	e00a      	b.n	8008d14 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cfe:	f7fc f923 	bl	8004f48 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d901      	bls.n	8008d14 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e120      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d14:	4b6d      	ldr	r3, [pc, #436]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0ee      	beq.n	8008cfe <HAL_RCC_OscConfig+0x4f6>
 8008d20:	e014      	b.n	8008d4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d22:	f7fc f911 	bl	8004f48 <HAL_GetTick>
 8008d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d28:	e00a      	b.n	8008d40 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d2a:	f7fc f90d 	bl	8004f48 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d901      	bls.n	8008d40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e10a      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d40:	4b62      	ldr	r3, [pc, #392]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1ee      	bne.n	8008d2a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80ff 	beq.w	8008f54 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d56:	4b5d      	ldr	r3, [pc, #372]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d5e:	2b18      	cmp	r3, #24
 8008d60:	f000 80ba 	beq.w	8008ed8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	f040 8095 	bne.w	8008e98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d6e:	4b57      	ldr	r3, [pc, #348]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a56      	ldr	r2, [pc, #344]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7a:	f7fc f8e5 	bl	8004f48 <HAL_GetTick>
 8008d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d82:	f7fc f8e1 	bl	8004f48 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e0e0      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d94:	4b4d      	ldr	r3, [pc, #308]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f0      	bne.n	8008d82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008da0:	4b4a      	ldr	r3, [pc, #296]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da4:	4b4a      	ldr	r3, [pc, #296]	; (8008ed0 <HAL_RCC_OscConfig+0x6c8>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008db0:	0112      	lsls	r2, r2, #4
 8008db2:	430a      	orrs	r2, r1
 8008db4:	4945      	ldr	r1, [pc, #276]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	628b      	str	r3, [r1, #40]	; 0x28
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	025b      	lsls	r3, r3, #9
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	041b      	lsls	r3, r3, #16
 8008dd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	3b01      	subs	r3, #1
 8008de4:	061b      	lsls	r3, r3, #24
 8008de6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dea:	4938      	ldr	r1, [pc, #224]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008df0:	4b36      	ldr	r3, [pc, #216]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a35      	ldr	r2, [pc, #212]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dfc:	4b33      	ldr	r3, [pc, #204]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e00:	4b34      	ldr	r3, [pc, #208]	; (8008ed4 <HAL_RCC_OscConfig+0x6cc>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e08:	00d2      	lsls	r2, r2, #3
 8008e0a:	4930      	ldr	r1, [pc, #192]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e10:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	f023 020c 	bic.w	r2, r3, #12
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	492b      	ldr	r1, [pc, #172]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e22:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e26:	f023 0202 	bic.w	r2, r3, #2
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	4927      	ldr	r1, [pc, #156]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e40:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a21      	ldr	r2, [pc, #132]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e4c:	4b1f      	ldr	r3, [pc, #124]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e58:	4b1c      	ldr	r3, [pc, #112]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e5e:	f043 0301 	orr.w	r3, r3, #1
 8008e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e64:	4b19      	ldr	r3, [pc, #100]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a18      	ldr	r2, [pc, #96]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e70:	f7fc f86a 	bl	8004f48 <HAL_GetTick>
 8008e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e78:	f7fc f866 	bl	8004f48 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e065      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e8a:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f0      	beq.n	8008e78 <HAL_RCC_OscConfig+0x670>
 8008e96:	e05d      	b.n	8008f54 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e98:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a0b      	ldr	r2, [pc, #44]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fc f850 	bl	8004f48 <HAL_GetTick>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fc f84c 	bl	8004f48 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e04b      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <HAL_RCC_OscConfig+0x6c4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x6a4>
 8008eca:	e043      	b.n	8008f54 <HAL_RCC_OscConfig+0x74c>
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	fffffc0c 	.word	0xfffffc0c
 8008ed4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ed8:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <HAL_RCC_OscConfig+0x758>)
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ede:	4b20      	ldr	r3, [pc, #128]	; (8008f60 <HAL_RCC_OscConfig+0x758>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d031      	beq.n	8008f50 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f003 0203 	and.w	r2, r3, #3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d12a      	bne.n	8008f50 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	091b      	lsrs	r3, r3, #4
 8008efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d122      	bne.n	8008f50 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d11a      	bne.n	8008f50 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	0a5b      	lsrs	r3, r3, #9
 8008f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d111      	bne.n	8008f50 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d108      	bne.n	8008f50 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	0e1b      	lsrs	r3, r3, #24
 8008f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d001      	beq.n	8008f54 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400

08008f64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e19c      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f78:	4b8a      	ldr	r3, [pc, #552]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 030f 	and.w	r3, r3, #15
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d910      	bls.n	8008fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f86:	4b87      	ldr	r3, [pc, #540]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f023 020f 	bic.w	r2, r3, #15
 8008f8e:	4985      	ldr	r1, [pc, #532]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f96:	4b83      	ldr	r3, [pc, #524]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 030f 	and.w	r3, r3, #15
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d001      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e184      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d010      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	4b7b      	ldr	r3, [pc, #492]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d908      	bls.n	8008fd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fc4:	4b78      	ldr	r3, [pc, #480]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	4975      	ldr	r1, [pc, #468]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d010      	beq.n	8009004 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	4b70      	ldr	r3, [pc, #448]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d908      	bls.n	8009004 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ff2:	4b6d      	ldr	r3, [pc, #436]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	496a      	ldr	r1, [pc, #424]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009000:	4313      	orrs	r3, r2
 8009002:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b00      	cmp	r3, #0
 800900e:	d010      	beq.n	8009032 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	4b64      	ldr	r3, [pc, #400]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800901c:	429a      	cmp	r2, r3
 800901e:	d908      	bls.n	8009032 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009020:	4b61      	ldr	r3, [pc, #388]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	495e      	ldr	r1, [pc, #376]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 800902e:	4313      	orrs	r3, r2
 8009030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d010      	beq.n	8009060 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69da      	ldr	r2, [r3, #28]
 8009042:	4b59      	ldr	r3, [pc, #356]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800904a:	429a      	cmp	r2, r3
 800904c:	d908      	bls.n	8009060 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800904e:	4b56      	ldr	r3, [pc, #344]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	4953      	ldr	r1, [pc, #332]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 800905c:	4313      	orrs	r3, r2
 800905e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	4b4d      	ldr	r3, [pc, #308]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	429a      	cmp	r2, r3
 800907a:	d908      	bls.n	800908e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907c:	4b4a      	ldr	r3, [pc, #296]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f023 020f 	bic.w	r2, r3, #15
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4947      	ldr	r1, [pc, #284]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 800908a:	4313      	orrs	r3, r2
 800908c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d055      	beq.n	8009146 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800909a:	4b43      	ldr	r3, [pc, #268]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	4940      	ldr	r1, [pc, #256]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d107      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090b4:	4b3c      	ldr	r3, [pc, #240]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d121      	bne.n	8009104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0f6      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d107      	bne.n	80090dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090cc:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d115      	bne.n	8009104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0ea      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090e4:	4b30      	ldr	r3, [pc, #192]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0de      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090f4:	4b2c      	ldr	r3, [pc, #176]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e0d6      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009104:	4b28      	ldr	r3, [pc, #160]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f023 0207 	bic.w	r2, r3, #7
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4925      	ldr	r1, [pc, #148]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009112:	4313      	orrs	r3, r2
 8009114:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009116:	f7fb ff17 	bl	8004f48 <HAL_GetTick>
 800911a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911c:	e00a      	b.n	8009134 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800911e:	f7fb ff13 	bl	8004f48 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	f241 3288 	movw	r2, #5000	; 0x1388
 800912c:	4293      	cmp	r3, r2
 800912e:	d901      	bls.n	8009134 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e0be      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009134:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	429a      	cmp	r2, r3
 8009144:	d1eb      	bne.n	800911e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d010      	beq.n	8009174 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	429a      	cmp	r2, r3
 8009160:	d208      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f023 020f 	bic.w	r2, r3, #15
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	490e      	ldr	r1, [pc, #56]	; (80091a8 <HAL_RCC_ClockConfig+0x244>)
 8009170:	4313      	orrs	r3, r2
 8009172:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009174:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	d214      	bcs.n	80091ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f023 020f 	bic.w	r2, r3, #15
 800918a:	4906      	ldr	r1, [pc, #24]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	4313      	orrs	r3, r2
 8009190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <HAL_RCC_ClockConfig+0x240>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d005      	beq.n	80091ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e086      	b.n	80092b2 <HAL_RCC_ClockConfig+0x34e>
 80091a4:	52002000 	.word	0x52002000
 80091a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d010      	beq.n	80091da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d208      	bcs.n	80091da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091c8:	4b3c      	ldr	r3, [pc, #240]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	4939      	ldr	r1, [pc, #228]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d010      	beq.n	8009208 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695a      	ldr	r2, [r3, #20]
 80091ea:	4b34      	ldr	r3, [pc, #208]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d208      	bcs.n	8009208 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091f6:	4b31      	ldr	r3, [pc, #196]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	492e      	ldr	r1, [pc, #184]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009204:	4313      	orrs	r3, r2
 8009206:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d010      	beq.n	8009236 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	4b28      	ldr	r3, [pc, #160]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009220:	429a      	cmp	r2, r3
 8009222:	d208      	bcs.n	8009236 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009224:	4b25      	ldr	r3, [pc, #148]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	4922      	ldr	r1, [pc, #136]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009232:	4313      	orrs	r3, r2
 8009234:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d010      	beq.n	8009264 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69da      	ldr	r2, [r3, #28]
 8009246:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800924e:	429a      	cmp	r2, r3
 8009250:	d208      	bcs.n	8009264 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009252:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	4917      	ldr	r1, [pc, #92]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009260:	4313      	orrs	r3, r2
 8009262:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009264:	f000 f834 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 8009268:	4602      	mov	r2, r0
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	0a1b      	lsrs	r3, r3, #8
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	4912      	ldr	r1, [pc, #72]	; (80092c0 <HAL_RCC_ClockConfig+0x35c>)
 8009276:	5ccb      	ldrb	r3, [r1, r3]
 8009278:	f003 031f 	and.w	r3, r3, #31
 800927c:	fa22 f303 	lsr.w	r3, r2, r3
 8009280:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <HAL_RCC_ClockConfig+0x358>)
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	4a0d      	ldr	r2, [pc, #52]	; (80092c0 <HAL_RCC_ClockConfig+0x35c>)
 800928c:	5cd3      	ldrb	r3, [r2, r3]
 800928e:	f003 031f 	and.w	r3, r3, #31
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	fa22 f303 	lsr.w	r3, r2, r3
 8009298:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <HAL_RCC_ClockConfig+0x360>)
 800929a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800929c:	4a0a      	ldr	r2, [pc, #40]	; (80092c8 <HAL_RCC_ClockConfig+0x364>)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <HAL_RCC_ClockConfig+0x368>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fb fe04 	bl	8004eb4 <HAL_InitTick>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	58024400 	.word	0x58024400
 80092c0:	0800eed4 	.word	0x0800eed4
 80092c4:	2400001c 	.word	0x2400001c
 80092c8:	24000018 	.word	0x24000018
 80092cc:	24000020 	.word	0x24000020

080092d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b089      	sub	sp, #36	; 0x24
 80092d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d6:	4bb3      	ldr	r3, [pc, #716]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092de:	2b18      	cmp	r3, #24
 80092e0:	f200 8155 	bhi.w	800958e <HAL_RCC_GetSysClockFreq+0x2be>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	08009351 	.word	0x08009351
 80092f0:	0800958f 	.word	0x0800958f
 80092f4:	0800958f 	.word	0x0800958f
 80092f8:	0800958f 	.word	0x0800958f
 80092fc:	0800958f 	.word	0x0800958f
 8009300:	0800958f 	.word	0x0800958f
 8009304:	0800958f 	.word	0x0800958f
 8009308:	0800958f 	.word	0x0800958f
 800930c:	08009377 	.word	0x08009377
 8009310:	0800958f 	.word	0x0800958f
 8009314:	0800958f 	.word	0x0800958f
 8009318:	0800958f 	.word	0x0800958f
 800931c:	0800958f 	.word	0x0800958f
 8009320:	0800958f 	.word	0x0800958f
 8009324:	0800958f 	.word	0x0800958f
 8009328:	0800958f 	.word	0x0800958f
 800932c:	0800937d 	.word	0x0800937d
 8009330:	0800958f 	.word	0x0800958f
 8009334:	0800958f 	.word	0x0800958f
 8009338:	0800958f 	.word	0x0800958f
 800933c:	0800958f 	.word	0x0800958f
 8009340:	0800958f 	.word	0x0800958f
 8009344:	0800958f 	.word	0x0800958f
 8009348:	0800958f 	.word	0x0800958f
 800934c:	08009383 	.word	0x08009383
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009350:	4b94      	ldr	r3, [pc, #592]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800935c:	4b91      	ldr	r3, [pc, #580]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a90      	ldr	r2, [pc, #576]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800936e:	e111      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009370:	4b8d      	ldr	r3, [pc, #564]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009372:	61bb      	str	r3, [r7, #24]
    break;
 8009374:	e10e      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009376:	4b8d      	ldr	r3, [pc, #564]	; (80095ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009378:	61bb      	str	r3, [r7, #24]
    break;
 800937a:	e10b      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800937c:	4b8c      	ldr	r3, [pc, #560]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800937e:	61bb      	str	r3, [r7, #24]
    break;
 8009380:	e108      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009382:	4b88      	ldr	r3, [pc, #544]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800938c:	4b85      	ldr	r3, [pc, #532]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	091b      	lsrs	r3, r3, #4
 8009392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009396:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009398:	4b82      	ldr	r3, [pc, #520]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093a2:	4b80      	ldr	r3, [pc, #512]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80e1 	beq.w	8009588 <HAL_RCC_GetSysClockFreq+0x2b8>
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f000 8083 	beq.w	80094d4 <HAL_RCC_GetSysClockFreq+0x204>
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	f200 80a1 	bhi.w	8009518 <HAL_RCC_GetSysClockFreq+0x248>
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_RCC_GetSysClockFreq+0x114>
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d056      	beq.n	8009490 <HAL_RCC_GetSysClockFreq+0x1c0>
 80093e2:	e099      	b.n	8009518 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093e4:	4b6f      	ldr	r3, [pc, #444]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02d      	beq.n	800944c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093f0:	4b6c      	ldr	r3, [pc, #432]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	4a6b      	ldr	r2, [pc, #428]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941a:	4b62      	ldr	r3, [pc, #392]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942a:	ed97 6a02 	vldr	s12, [r7, #8]
 800942e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800944a:	e087      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800945a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800945e:	4b51      	ldr	r3, [pc, #324]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009472:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800947e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800948e:	e065      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d2:	e043      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e6:	4b2f      	ldr	r3, [pc, #188]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009516:	e021      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952a:	4b1e      	ldr	r3, [pc, #120]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953a:	ed97 6a02 	vldr	s12, [r7, #8]
 800953e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800954e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800955a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	0a5b      	lsrs	r3, r3, #9
 8009562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009566:	3301      	adds	r3, #1
 8009568:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	ee07 3a90 	vmov	s15, r3
 8009570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009574:	edd7 6a07 	vldr	s13, [r7, #28]
 8009578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009580:	ee17 3a90 	vmov	r3, s15
 8009584:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009586:	e005      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
    break;
 800958c:	e002      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009590:	61bb      	str	r3, [r7, #24]
    break;
 8009592:	bf00      	nop
  }

  return sysclockfreq;
 8009594:	69bb      	ldr	r3, [r7, #24]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3724      	adds	r7, #36	; 0x24
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
 80095a8:	03d09000 	.word	0x03d09000
 80095ac:	003d0900 	.word	0x003d0900
 80095b0:	017d7840 	.word	0x017d7840
 80095b4:	46000000 	.word	0x46000000
 80095b8:	4c742400 	.word	0x4c742400
 80095bc:	4a742400 	.word	0x4a742400
 80095c0:	4bbebc20 	.word	0x4bbebc20

080095c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095ca:	f7ff fe81 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 80095ce:	4602      	mov	r2, r0
 80095d0:	4b10      	ldr	r3, [pc, #64]	; (8009614 <HAL_RCC_GetHCLKFreq+0x50>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	490f      	ldr	r1, [pc, #60]	; (8009618 <HAL_RCC_GetHCLKFreq+0x54>)
 80095dc:	5ccb      	ldrb	r3, [r1, r3]
 80095de:	f003 031f 	and.w	r3, r3, #31
 80095e2:	fa22 f303 	lsr.w	r3, r2, r3
 80095e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <HAL_RCC_GetHCLKFreq+0x50>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	4a09      	ldr	r2, [pc, #36]	; (8009618 <HAL_RCC_GetHCLKFreq+0x54>)
 80095f2:	5cd3      	ldrb	r3, [r2, r3]
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	4a07      	ldr	r2, [pc, #28]	; (800961c <HAL_RCC_GetHCLKFreq+0x58>)
 8009600:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009602:	4a07      	ldr	r2, [pc, #28]	; (8009620 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <HAL_RCC_GetHCLKFreq+0x58>)
 800960a:	681b      	ldr	r3, [r3, #0]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	58024400 	.word	0x58024400
 8009618:	0800eed4 	.word	0x0800eed4
 800961c:	2400001c 	.word	0x2400001c
 8009620:	24000018 	.word	0x24000018

08009624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009628:	f7ff ffcc 	bl	80095c4 <HAL_RCC_GetHCLKFreq>
 800962c:	4602      	mov	r2, r0
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	091b      	lsrs	r3, r3, #4
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	4904      	ldr	r1, [pc, #16]	; (800964c <HAL_RCC_GetPCLK1Freq+0x28>)
 800963a:	5ccb      	ldrb	r3, [r1, r3]
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009644:	4618      	mov	r0, r3
 8009646:	bd80      	pop	{r7, pc}
 8009648:	58024400 	.word	0x58024400
 800964c:	0800eed4 	.word	0x0800eed4

08009650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009654:	f7ff ffb6 	bl	80095c4 <HAL_RCC_GetHCLKFreq>
 8009658:	4602      	mov	r2, r0
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	4904      	ldr	r1, [pc, #16]	; (8009678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009666:	5ccb      	ldrb	r3, [r1, r3]
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58024400 	.word	0x58024400
 8009678:	0800eed4 	.word	0x0800eed4

0800967c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009688:	2300      	movs	r3, #0
 800968a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d03f      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096a0:	d02a      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80096a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096a6:	d824      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ac:	d018      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096b2:	d81e      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80096b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096bc:	d007      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80096be:	e018      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c0:	4ba4      	ldr	r3, [pc, #656]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	4aa3      	ldr	r2, [pc, #652]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096cc:	e015      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3304      	adds	r3, #4
 80096d2:	2102      	movs	r1, #2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 f989 	bl	800a9ec <RCCEx_PLL2_Config>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096de:	e00c      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3324      	adds	r3, #36	; 0x24
 80096e4:	2102      	movs	r1, #2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 fa32 	bl	800ab50 <RCCEx_PLL3_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096f0:	e003      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
      break;
 80096f6:	e000      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80096f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009700:	4b94      	ldr	r3, [pc, #592]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800970c:	4991      	ldr	r1, [pc, #580]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800970e:	4313      	orrs	r3, r2
 8009710:	650b      	str	r3, [r1, #80]	; 0x50
 8009712:	e001      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d03d      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	2b04      	cmp	r3, #4
 800972a:	d826      	bhi.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800972c:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800972e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009732:	bf00      	nop
 8009734:	08009749 	.word	0x08009749
 8009738:	08009757 	.word	0x08009757
 800973c:	08009769 	.word	0x08009769
 8009740:	08009781 	.word	0x08009781
 8009744:	08009781 	.word	0x08009781
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009748:	4b82      	ldr	r3, [pc, #520]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a81      	ldr	r2, [pc, #516]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800974e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009754:	e015      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3304      	adds	r3, #4
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f001 f945 	bl	800a9ec <RCCEx_PLL2_Config>
 8009762:	4603      	mov	r3, r0
 8009764:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009766:	e00c      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3324      	adds	r3, #36	; 0x24
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f001 f9ee 	bl	800ab50 <RCCEx_PLL3_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009778:	e003      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]
      break;
 800977e:	e000      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d109      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009788:	4b72      	ldr	r3, [pc, #456]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800978a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978c:	f023 0207 	bic.w	r2, r3, #7
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009794:	496f      	ldr	r1, [pc, #444]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009796:	4313      	orrs	r3, r2
 8009798:	650b      	str	r3, [r1, #80]	; 0x50
 800979a:	e001      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d051      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80097b6:	d036      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80097b8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80097bc:	d830      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80097be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097c2:	d032      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80097c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097c8:	d82a      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80097ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097ce:	d02e      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80097d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097d4:	d824      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80097d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097da:	d018      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80097dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097e0:	d81e      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 80097e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ea:	d007      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80097ec:	e018      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ee:	4b59      	ldr	r3, [pc, #356]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	4a58      	ldr	r2, [pc, #352]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097fa:	e019      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	2100      	movs	r1, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f001 f8f2 	bl	800a9ec <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800980c:	e010      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3324      	adds	r3, #36	; 0x24
 8009812:	2100      	movs	r1, #0
 8009814:	4618      	mov	r0, r3
 8009816:	f001 f99b 	bl	800ab50 <RCCEx_PLL3_Config>
 800981a:	4603      	mov	r3, r0
 800981c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800981e:	e007      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	75fb      	strb	r3, [r7, #23]
      break;
 8009824:	e004      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009826:	bf00      	nop
 8009828:	e002      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800982e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009836:	4b47      	ldr	r3, [pc, #284]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800983a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009844:	4943      	ldr	r1, [pc, #268]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009846:	4313      	orrs	r3, r2
 8009848:	658b      	str	r3, [r1, #88]	; 0x58
 800984a:	e001      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009858:	2b00      	cmp	r3, #0
 800985a:	d051      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009862:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009866:	d036      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009868:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800986c:	d830      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800986e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009872:	d032      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009878:	d82a      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800987a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800987e:	d02e      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009880:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009884:	d824      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800988a:	d018      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x242>
 800988c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009890:	d81e      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800989a:	d007      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800989c:	e018      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989e:	4b2d      	ldr	r3, [pc, #180]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098aa:	e019      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3304      	adds	r3, #4
 80098b0:	2100      	movs	r1, #0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f001 f89a 	bl	800a9ec <RCCEx_PLL2_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098bc:	e010      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	3324      	adds	r3, #36	; 0x24
 80098c2:	2100      	movs	r1, #0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 f943 	bl	800ab50 <RCCEx_PLL3_Config>
 80098ca:	4603      	mov	r3, r0
 80098cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098ce:	e007      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]
      break;
 80098d4:	e004      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80098d6:	bf00      	nop
 80098d8:	e002      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80098de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098e6:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098f4:	4917      	ldr	r1, [pc, #92]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	658b      	str	r3, [r1, #88]	; 0x58
 80098fa:	e001      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d035      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009910:	2b30      	cmp	r3, #48	; 0x30
 8009912:	d01c      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009914:	2b30      	cmp	r3, #48	; 0x30
 8009916:	d817      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009918:	2b20      	cmp	r3, #32
 800991a:	d00c      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800991c:	2b20      	cmp	r3, #32
 800991e:	d813      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d019      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009924:	2b10      	cmp	r3, #16
 8009926:	d10f      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	4a09      	ldr	r2, [pc, #36]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800992e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009934:	e011      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3304      	adds	r3, #4
 800993a:	2102      	movs	r1, #2
 800993c:	4618      	mov	r0, r3
 800993e:	f001 f855 	bl	800a9ec <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009946:	e008      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	75fb      	strb	r3, [r7, #23]
      break;
 800994c:	e005      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800994e:	bf00      	nop
 8009950:	e003      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009952:	bf00      	nop
 8009954:	58024400 	.word	0x58024400
      break;
 8009958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d109      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009960:	4ba3      	ldr	r3, [pc, #652]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009964:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800996c:	49a0      	ldr	r1, [pc, #640]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800996e:	4313      	orrs	r3, r2
 8009970:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009972:	e001      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d047      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800998c:	d030      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800998e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009992:	d82a      	bhi.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009998:	d02c      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800999a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800999e:	d824      	bhi.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80099a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a4:	d018      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80099a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099aa:	d81e      	bhi.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80099b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b4:	d007      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80099b6:	e018      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b8:	4b8d      	ldr	r3, [pc, #564]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a8c      	ldr	r2, [pc, #560]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099c4:	e017      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f80d 	bl	800a9ec <RCCEx_PLL2_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099d6:	e00e      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3324      	adds	r3, #36	; 0x24
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f8b6 	bl	800ab50 <RCCEx_PLL3_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80099e8:	e005      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	75fb      	strb	r3, [r7, #23]
      break;
 80099ee:	e002      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80099f0:	bf00      	nop
 80099f2:	e000      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80099f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80099fc:	4b7c      	ldr	r3, [pc, #496]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80099fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a08:	4979      	ldr	r1, [pc, #484]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a0e:	e001      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d049      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a28:	d02e      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a2e:	d828      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a34:	d02a      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a3a:	d822      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a40:	d026      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a46:	d81c      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4c:	d010      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a52:	d816      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01d      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5c:	d111      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3304      	adds	r3, #4
 8009a62:	2101      	movs	r1, #1
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 ffc1 	bl	800a9ec <RCCEx_PLL2_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a6e:	e012      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3324      	adds	r3, #36	; 0x24
 8009a74:	2101      	movs	r1, #1
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 f86a 	bl	800ab50 <RCCEx_PLL3_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009a80:	e009      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	75fb      	strb	r3, [r7, #23]
      break;
 8009a86:	e006      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a88:	bf00      	nop
 8009a8a:	e004      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e002      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a90:	bf00      	nop
 8009a92:	e000      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d109      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a9c:	4b54      	ldr	r3, [pc, #336]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa8:	4951      	ldr	r1, [pc, #324]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	650b      	str	r3, [r1, #80]	; 0x50
 8009aae:	e001      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d04b      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aca:	d02e      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ad0:	d828      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad6:	d02a      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009adc:	d822      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009ade:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ae2:	d026      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009ae4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ae8:	d81c      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aee:	d010      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af4:	d816      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01d      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009afe:	d111      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	3304      	adds	r3, #4
 8009b04:	2101      	movs	r1, #1
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 ff70 	bl	800a9ec <RCCEx_PLL2_Config>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b10:	e012      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3324      	adds	r3, #36	; 0x24
 8009b16:	2101      	movs	r1, #1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 f819 	bl	800ab50 <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b22:	e009      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
      break;
 8009b28:	e006      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b2a:	bf00      	nop
 8009b2c:	e004      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b2e:	bf00      	nop
 8009b30:	e002      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b32:	bf00      	nop
 8009b34:	e000      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b3e:	4b2c      	ldr	r3, [pc, #176]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b4c:	4928      	ldr	r1, [pc, #160]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	658b      	str	r3, [r1, #88]	; 0x58
 8009b52:	e001      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d02f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6c:	d00e      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b72:	d814      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d015      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b7c:	d10f      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b8a:	e00c      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	2101      	movs	r1, #1
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 ff2a 	bl	800a9ec <RCCEx_PLL2_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009b9c:	e003      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bb8:	490d      	ldr	r1, [pc, #52]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8009bbe:	e001      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d034      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d81d      	bhi.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009bd8:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009c1b 	.word	0x08009c1b
 8009be4:	08009bf5 	.word	0x08009bf5
 8009be8:	08009c03 	.word	0x08009c03
 8009bec:	08009c1b 	.word	0x08009c1b
 8009bf0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf4:	4bb1      	ldr	r3, [pc, #708]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4ab0      	ldr	r2, [pc, #704]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c00:	e00c      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3304      	adds	r3, #4
 8009c06:	2102      	movs	r1, #2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 feef 	bl	800a9ec <RCCEx_PLL2_Config>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c12:	e003      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
      break;
 8009c18:	e000      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c22:	4ba6      	ldr	r3, [pc, #664]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c26:	f023 0203 	bic.w	r2, r3, #3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2e:	49a3      	ldr	r1, [pc, #652]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c34:	e001      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 8086 	beq.w	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c48:	4b9d      	ldr	r3, [pc, #628]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a9c      	ldr	r2, [pc, #624]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c54:	f7fb f978 	bl	8004f48 <HAL_GetTick>
 8009c58:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c5a:	e009      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c5c:	f7fb f974 	bl	8004f48 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b64      	cmp	r3, #100	; 0x64
 8009c68:	d902      	bls.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	75fb      	strb	r3, [r7, #23]
        break;
 8009c6e:	e005      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c70:	4b93      	ldr	r3, [pc, #588]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0ef      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d166      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c82:	4b8e      	ldr	r3, [pc, #568]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c8c:	4053      	eors	r3, r2
 8009c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d013      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c96:	4b89      	ldr	r3, [pc, #548]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ca0:	4b86      	ldr	r3, [pc, #536]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	4a85      	ldr	r2, [pc, #532]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009caa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cac:	4b83      	ldr	r3, [pc, #524]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb0:	4a82      	ldr	r2, [pc, #520]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009cb8:	4a80      	ldr	r2, [pc, #512]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc8:	d115      	bne.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cca:	f7fb f93d 	bl	8004f48 <HAL_GetTick>
 8009cce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cd0:	e00b      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cd2:	f7fb f939 	bl	8004f48 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d902      	bls.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8009ce8:	e005      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cea:	4b74      	ldr	r3, [pc, #464]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0ed      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d126      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d0a:	d10d      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009d0c:	4b6b      	ldr	r3, [pc, #428]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d1a:	0919      	lsrs	r1, r3, #4
 8009d1c:	4b69      	ldr	r3, [pc, #420]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009d1e:	400b      	ands	r3, r1
 8009d20:	4966      	ldr	r1, [pc, #408]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	610b      	str	r3, [r1, #16]
 8009d26:	e005      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009d28:	4b64      	ldr	r3, [pc, #400]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4a63      	ldr	r2, [pc, #396]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d32:	6113      	str	r3, [r2, #16]
 8009d34:	4b61      	ldr	r3, [pc, #388]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d42:	495e      	ldr	r1, [pc, #376]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	670b      	str	r3, [r1, #112]	; 0x70
 8009d48:	e004      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	75bb      	strb	r3, [r7, #22]
 8009d4e:	e001      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d07e      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d64:	2b28      	cmp	r3, #40	; 0x28
 8009d66:	d867      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009e3f 	.word	0x08009e3f
 8009d74:	08009e39 	.word	0x08009e39
 8009d78:	08009e39 	.word	0x08009e39
 8009d7c:	08009e39 	.word	0x08009e39
 8009d80:	08009e39 	.word	0x08009e39
 8009d84:	08009e39 	.word	0x08009e39
 8009d88:	08009e39 	.word	0x08009e39
 8009d8c:	08009e39 	.word	0x08009e39
 8009d90:	08009e15 	.word	0x08009e15
 8009d94:	08009e39 	.word	0x08009e39
 8009d98:	08009e39 	.word	0x08009e39
 8009d9c:	08009e39 	.word	0x08009e39
 8009da0:	08009e39 	.word	0x08009e39
 8009da4:	08009e39 	.word	0x08009e39
 8009da8:	08009e39 	.word	0x08009e39
 8009dac:	08009e39 	.word	0x08009e39
 8009db0:	08009e27 	.word	0x08009e27
 8009db4:	08009e39 	.word	0x08009e39
 8009db8:	08009e39 	.word	0x08009e39
 8009dbc:	08009e39 	.word	0x08009e39
 8009dc0:	08009e39 	.word	0x08009e39
 8009dc4:	08009e39 	.word	0x08009e39
 8009dc8:	08009e39 	.word	0x08009e39
 8009dcc:	08009e39 	.word	0x08009e39
 8009dd0:	08009e3f 	.word	0x08009e3f
 8009dd4:	08009e39 	.word	0x08009e39
 8009dd8:	08009e39 	.word	0x08009e39
 8009ddc:	08009e39 	.word	0x08009e39
 8009de0:	08009e39 	.word	0x08009e39
 8009de4:	08009e39 	.word	0x08009e39
 8009de8:	08009e39 	.word	0x08009e39
 8009dec:	08009e39 	.word	0x08009e39
 8009df0:	08009e3f 	.word	0x08009e3f
 8009df4:	08009e39 	.word	0x08009e39
 8009df8:	08009e39 	.word	0x08009e39
 8009dfc:	08009e39 	.word	0x08009e39
 8009e00:	08009e39 	.word	0x08009e39
 8009e04:	08009e39 	.word	0x08009e39
 8009e08:	08009e39 	.word	0x08009e39
 8009e0c:	08009e39 	.word	0x08009e39
 8009e10:	08009e3f 	.word	0x08009e3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fde6 	bl	800a9ec <RCCEx_PLL2_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e24:	e00c      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3324      	adds	r3, #36	; 0x24
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fe8f 	bl	800ab50 <RCCEx_PLL3_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e46:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e52:	491a      	ldr	r1, [pc, #104]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	654b      	str	r3, [r1, #84]	; 0x54
 8009e58:	e001      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d03e      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d820      	bhi.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009e91 	.word	0x08009e91
 8009e80:	08009ea3 	.word	0x08009ea3
 8009e84:	08009ec9 	.word	0x08009ec9
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	2101      	movs	r1, #1
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fda8 	bl	800a9ec <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ea0:	e013      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3324      	adds	r3, #36	; 0x24
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fe51 	bl	800ab50 <RCCEx_PLL3_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009eb2:	e00a      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb8:	e007      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009eba:	bf00      	nop
 8009ebc:	58024400 	.word	0x58024400
 8009ec0:	58024800 	.word	0x58024800
 8009ec4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d109      	bne.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009ed0:	4b9f      	ldr	r3, [pc, #636]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed4:	f023 0207 	bic.w	r2, r3, #7
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009edc:	499c      	ldr	r1, [pc, #624]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	654b      	str	r3, [r1, #84]	; 0x54
 8009ee2:	e001      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d039      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d820      	bhi.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f47 	.word	0x08009f47
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f2f 	.word	0x08009f2f
 8009f10:	08009f47 	.word	0x08009f47
 8009f14:	08009f47 	.word	0x08009f47
 8009f18:	08009f47 	.word	0x08009f47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fd62 	bl	800a9ec <RCCEx_PLL2_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f2c:	e00c      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3324      	adds	r3, #36	; 0x24
 8009f32:	2101      	movs	r1, #1
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fe0b 	bl	800ab50 <RCCEx_PLL3_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f3e:	e003      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
      break;
 8009f44:	e000      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f4e:	4b80      	ldr	r3, [pc, #512]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f023 0207 	bic.w	r2, r3, #7
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5c:	497c      	ldr	r1, [pc, #496]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	658b      	str	r3, [r1, #88]	; 0x58
 8009f62:	e001      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0320 	and.w	r3, r3, #32
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d04b      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f7e:	d02e      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f84:	d828      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8a:	d02a      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d822      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f96:	d026      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f9c:	d81c      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa2:	d010      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa8:	d816      	bhi.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01d      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fb2:	d111      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fd16 	bl	800a9ec <RCCEx_PLL2_Config>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009fc4:	e012      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3324      	adds	r3, #36	; 0x24
 8009fca:	2102      	movs	r1, #2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 fdbf 	bl	800ab50 <RCCEx_PLL3_Config>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009fd6:	e009      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	e006      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009fde:	bf00      	nop
 8009fe0:	e004      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009fe2:	bf00      	nop
 8009fe4:	e002      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009fe6:	bf00      	nop
 8009fe8:	e000      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ff2:	4b57      	ldr	r3, [pc, #348]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	4953      	ldr	r1, [pc, #332]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a002:	4313      	orrs	r3, r2
 800a004:	654b      	str	r3, [r1, #84]	; 0x54
 800a006:	e001      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a014:	2b00      	cmp	r3, #0
 800a016:	d04b      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a01e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a022:	d02e      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a024:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a028:	d828      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a02e:	d02a      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a034:	d822      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a03a:	d026      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a03c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a040:	d81c      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a046:	d010      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a04c:	d816      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01d      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a056:	d111      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	2100      	movs	r1, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fcc4 	bl	800a9ec <RCCEx_PLL2_Config>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a068:	e012      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3324      	adds	r3, #36	; 0x24
 800a06e:	2102      	movs	r1, #2
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fd6d 	bl	800ab50 <RCCEx_PLL3_Config>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a07a:	e009      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	75fb      	strb	r3, [r7, #23]
      break;
 800a080:	e006      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a082:	bf00      	nop
 800a084:	e004      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a086:	bf00      	nop
 800a088:	e002      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a08a:	bf00      	nop
 800a08c:	e000      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a08e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10a      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a096:	4b2e      	ldr	r3, [pc, #184]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0a4:	492a      	ldr	r1, [pc, #168]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a0aa:	e001      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d04d      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0c6:	d02e      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a0c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a0cc:	d828      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a0ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d2:	d02a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d8:	d822      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a0da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0de:	d026      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a0e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0e4:	d81c      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a0e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ea:	d010      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a0ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0f0:	d816      	bhi.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01d      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a0f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fa:	d111      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fc72 	bl	800a9ec <RCCEx_PLL2_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a10c:	e012      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	2102      	movs	r1, #2
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fd1b 	bl	800ab50 <RCCEx_PLL3_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a11e:	e009      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]
      break;
 800a124:	e006      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a126:	bf00      	nop
 800a128:	e004      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10c      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a148:	4901      	ldr	r1, [pc, #4]	; (800a150 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	658b      	str	r3, [r1, #88]	; 0x58
 800a14e:	e003      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b00      	cmp	r3, #0
 800a162:	d018      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16c:	d10a      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3324      	adds	r3, #36	; 0x24
 800a172:	2102      	movs	r1, #2
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fceb 	bl	800ab50 <RCCEx_PLL3_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a184:	4b8a      	ldr	r3, [pc, #552]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a188:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a190:	4987      	ldr	r1, [pc, #540]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a192:	4313      	orrs	r3, r2
 800a194:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01a      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ac:	d10a      	bne.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3324      	adds	r3, #36	; 0x24
 800a1b2:	2102      	movs	r1, #2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fccb 	bl	800ab50 <RCCEx_PLL3_Config>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1c4:	4b7a      	ldr	r3, [pc, #488]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d2:	4977      	ldr	r1, [pc, #476]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d034      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1ee:	d01d      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a1f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f4:	d817      	bhi.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a1fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1fe:	d009      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a200:	e011      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3304      	adds	r3, #4
 800a206:	2100      	movs	r1, #0
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fbef 	bl	800a9ec <RCCEx_PLL2_Config>
 800a20e:	4603      	mov	r3, r0
 800a210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a212:	e00c      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3324      	adds	r3, #36	; 0x24
 800a218:	2102      	movs	r1, #2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fc98 	bl	800ab50 <RCCEx_PLL3_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a224:	e003      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	75fb      	strb	r3, [r7, #23]
      break;
 800a22a:	e000      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a22c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a234:	4b5e      	ldr	r3, [pc, #376]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a242:	495b      	ldr	r1, [pc, #364]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a244:	4313      	orrs	r3, r2
 800a246:	658b      	str	r3, [r1, #88]	; 0x58
 800a248:	e001      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d033      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a264:	d01c      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a26a:	d816      	bhi.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a270:	d003      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a276:	d007      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a278:	e00f      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a27a:	4b4d      	ldr	r3, [pc, #308]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	4a4c      	ldr	r2, [pc, #304]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a286:	e00c      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3324      	adds	r3, #36	; 0x24
 800a28c:	2101      	movs	r1, #1
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fc5e 	bl	800ab50 <RCCEx_PLL3_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a298:	e003      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
      break;
 800a29e:	e000      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a2a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2a8:	4b41      	ldr	r3, [pc, #260]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2b6:	493e      	ldr	r1, [pc, #248]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	654b      	str	r3, [r1, #84]	; 0x54
 800a2bc:	e001      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d029      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2da:	d007      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2de:	4b34      	ldr	r3, [pc, #208]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	4a33      	ldr	r2, [pc, #204]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a2e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2ea:	e00b      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fb7a 	bl	800a9ec <RCCEx_PLL2_Config>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a2fc:	e002      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	75fb      	strb	r3, [r7, #23]
      break;
 800a302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a30a:	4b29      	ldr	r3, [pc, #164]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a30e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a316:	4926      	ldr	r1, [pc, #152]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a31c:	e001      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3324      	adds	r3, #36	; 0x24
 800a332:	2102      	movs	r1, #2
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fc0b 	bl	800ab50 <RCCEx_PLL3_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d033      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a358:	d017      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a35a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a35e:	d811      	bhi.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a364:	d013      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a36a:	d80b      	bhi.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d010      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a374:	d106      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a376:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	4a0d      	ldr	r2, [pc, #52]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a37c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a382:	e007      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	75fb      	strb	r3, [r7, #23]
      break;
 800a388:	e004      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a38a:	bf00      	nop
 800a38c:	e002      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a38e:	bf00      	nop
 800a390:	e000      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a392:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3a6:	4902      	ldr	r1, [pc, #8]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	654b      	str	r3, [r1, #84]	; 0x54
 800a3ac:	e004      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a3ae:	bf00      	nop
 800a3b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3c4:	4b29      	ldr	r3, [pc, #164]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d0:	4926      	ldr	r1, [pc, #152]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d008      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ee:	491f      	ldr	r1, [pc, #124]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00d      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a400:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a406:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a40a:	6113      	str	r3, [r2, #16]
 800a40c:	4b17      	ldr	r3, [pc, #92]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a416:	4915      	ldr	r1, [pc, #84]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da08      	bge.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a430:	490e      	ldr	r1, [pc, #56]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a432:	4313      	orrs	r3, r2
 800a434:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d009      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a442:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a450:	4906      	ldr	r1, [pc, #24]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a452:	4313      	orrs	r3, r2
 800a454:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a456:	7dbb      	ldrb	r3, [r7, #22]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e000      	b.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024400 	.word	0x58024400

0800a470 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a474:	f7ff f8a6 	bl	80095c4 <HAL_RCC_GetHCLKFreq>
 800a478:	4602      	mov	r2, r0
 800a47a:	4b06      	ldr	r3, [pc, #24]	; (800a494 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	091b      	lsrs	r3, r3, #4
 800a480:	f003 0307 	and.w	r3, r3, #7
 800a484:	4904      	ldr	r1, [pc, #16]	; (800a498 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a486:	5ccb      	ldrb	r3, [r1, r3]
 800a488:	f003 031f 	and.w	r3, r3, #31
 800a48c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a490:	4618      	mov	r0, r3
 800a492:	bd80      	pop	{r7, pc}
 800a494:	58024400 	.word	0x58024400
 800a498:	0800eed4 	.word	0x0800eed4

0800a49c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b089      	sub	sp, #36	; 0x24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4a4:	4ba1      	ldr	r3, [pc, #644]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	f003 0303 	and.w	r3, r3, #3
 800a4ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a4ae:	4b9f      	ldr	r3, [pc, #636]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	0b1b      	lsrs	r3, r3, #12
 800a4b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4ba:	4b9c      	ldr	r3, [pc, #624]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	091b      	lsrs	r3, r3, #4
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a4c6:	4b99      	ldr	r3, [pc, #612]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8111 	beq.w	800a70c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f000 8083 	beq.w	800a5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	f200 80a1 	bhi.w	800a63c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d056      	beq.n	800a5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a506:	e099      	b.n	800a63c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a508:	4b88      	ldr	r3, [pc, #544]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d02d      	beq.n	800a570 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a514:	4b85      	ldr	r3, [pc, #532]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	08db      	lsrs	r3, r3, #3
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	4a84      	ldr	r2, [pc, #528]	; (800a730 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
 800a524:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	ee07 3a90 	vmov	s15, r3
 800a52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b7b      	ldr	r3, [pc, #492]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a552:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a56e:	e087      	b.n	800a680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a738 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a582:	4b6a      	ldr	r3, [pc, #424]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a592:	ed97 6a03 	vldr	s12, [r7, #12]
 800a596:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5b2:	e065      	b.n	800a680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c6:	4b59      	ldr	r3, [pc, #356]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5f6:	e043      	b.n	800a680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a602:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60a:	4b48      	ldr	r3, [pc, #288]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a61e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a63a:	e021      	b.n	800a680 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a646:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64e:	4b37      	ldr	r3, [pc, #220]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a662:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a67e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a680:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a684:	0a5b      	lsrs	r3, r3, #9
 800a686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a6:	ee17 2a90 	vmov	r2, s15
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a6ae:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b2:	0c1b      	lsrs	r3, r3, #16
 800a6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b8:	ee07 3a90 	vmov	s15, r3
 800a6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d4:	ee17 2a90 	vmov	r2, s15
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a6dc:	4b13      	ldr	r3, [pc, #76]	; (800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	0e1b      	lsrs	r3, r3, #24
 800a6e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a702:	ee17 2a90 	vmov	r2, s15
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a70a:	e008      	b.n	800a71e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	609a      	str	r2, [r3, #8]
}
 800a71e:	bf00      	nop
 800a720:	3724      	adds	r7, #36	; 0x24
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	58024400 	.word	0x58024400
 800a730:	03d09000 	.word	0x03d09000
 800a734:	46000000 	.word	0x46000000
 800a738:	4c742400 	.word	0x4c742400
 800a73c:	4a742400 	.word	0x4a742400
 800a740:	4bbebc20 	.word	0x4bbebc20

0800a744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a744:	b480      	push	{r7}
 800a746:	b089      	sub	sp, #36	; 0x24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a74c:	4ba1      	ldr	r3, [pc, #644]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a750:	f003 0303 	and.w	r3, r3, #3
 800a754:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a756:	4b9f      	ldr	r3, [pc, #636]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	0d1b      	lsrs	r3, r3, #20
 800a75c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a760:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a762:	4b9c      	ldr	r3, [pc, #624]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a76e:	4b99      	ldr	r3, [pc, #612]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a772:	08db      	lsrs	r3, r3, #3
 800a774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	fb02 f303 	mul.w	r3, r2, r3
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 8111 	beq.w	800a9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b02      	cmp	r3, #2
 800a796:	f000 8083 	beq.w	800a8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	f200 80a1 	bhi.w	800a8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d056      	beq.n	800a85c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a7ae:	e099      	b.n	800a8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7b0:	4b88      	ldr	r3, [pc, #544]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d02d      	beq.n	800a818 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7bc:	4b85      	ldr	r3, [pc, #532]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	08db      	lsrs	r3, r3, #3
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	4a84      	ldr	r2, [pc, #528]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e6:	4b7b      	ldr	r3, [pc, #492]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a812:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a816:	e087      	b.n	800a928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a822:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82a:	4b6a      	ldr	r3, [pc, #424]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a85a:	e065      	b.n	800a928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86e:	4b59      	ldr	r3, [pc, #356]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a882:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a89e:	e043      	b.n	800a928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b2:	4b48      	ldr	r3, [pc, #288]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8e2:	e021      	b.n	800a928 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f6:	4b37      	ldr	r3, [pc, #220]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a906:	ed97 6a03 	vldr	s12, [r7, #12]
 800a90a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a926:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a928:	4b2a      	ldr	r3, [pc, #168]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	0a5b      	lsrs	r3, r3, #9
 800a92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a93e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a942:	edd7 6a07 	vldr	s13, [r7, #28]
 800a946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94e:	ee17 2a90 	vmov	r2, s15
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a956:	4b1f      	ldr	r3, [pc, #124]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	0c1b      	lsrs	r3, r3, #16
 800a95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a96c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a970:	edd7 6a07 	vldr	s13, [r7, #28]
 800a974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a97c:	ee17 2a90 	vmov	r2, s15
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a984:	4b13      	ldr	r3, [pc, #76]	; (800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a988:	0e1b      	lsrs	r3, r3, #24
 800a98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a99a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a99e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9aa:	ee17 2a90 	vmov	r2, s15
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	609a      	str	r2, [r3, #8]
}
 800a9c6:	bf00      	nop
 800a9c8:	3724      	adds	r7, #36	; 0x24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	03d09000 	.word	0x03d09000
 800a9dc:	46000000 	.word	0x46000000
 800a9e0:	4c742400 	.word	0x4c742400
 800a9e4:	4a742400 	.word	0x4a742400
 800a9e8:	4bbebc20 	.word	0x4bbebc20

0800a9ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9fa:	4b53      	ldr	r3, [pc, #332]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d101      	bne.n	800aa0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e099      	b.n	800ab3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa0a:	4b4f      	ldr	r3, [pc, #316]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a4e      	ldr	r2, [pc, #312]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa16:	f7fa fa97 	bl	8004f48 <HAL_GetTick>
 800aa1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa1c:	e008      	b.n	800aa30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa1e:	f7fa fa93 	bl	8004f48 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d901      	bls.n	800aa30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e086      	b.n	800ab3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa30:	4b45      	ldr	r3, [pc, #276]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f0      	bne.n	800aa1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa3c:	4b42      	ldr	r3, [pc, #264]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	031b      	lsls	r3, r3, #12
 800aa4a:	493f      	ldr	r1, [pc, #252]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	628b      	str	r3, [r1, #40]	; 0x28
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	025b      	lsls	r3, r3, #9
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	041b      	lsls	r3, r3, #16
 800aa6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	061b      	lsls	r3, r3, #24
 800aa7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa80:	4931      	ldr	r1, [pc, #196]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa86:	4b30      	ldr	r3, [pc, #192]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	492d      	ldr	r1, [pc, #180]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa94:	4313      	orrs	r3, r2
 800aa96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa98:	4b2b      	ldr	r3, [pc, #172]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	f023 0220 	bic.w	r2, r3, #32
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	4928      	ldr	r1, [pc, #160]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aaaa:	4b27      	ldr	r3, [pc, #156]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaae:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aab0:	f023 0310 	bic.w	r3, r3, #16
 800aab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aab6:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaba:	4b24      	ldr	r3, [pc, #144]	; (800ab4c <RCCEx_PLL2_Config+0x160>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	69d2      	ldr	r2, [r2, #28]
 800aac2:	00d2      	lsls	r2, r2, #3
 800aac4:	4920      	ldr	r1, [pc, #128]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aaca:	4b1f      	ldr	r3, [pc, #124]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aad0:	f043 0310 	orr.w	r3, r3, #16
 800aad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d106      	bne.n	800aaea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aadc:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a19      	ldr	r2, [pc, #100]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aae8:	e00f      	b.n	800ab0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d106      	bne.n	800aafe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aaf0:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4a14      	ldr	r2, [pc, #80]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800aaf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aafa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aafc:	e005      	b.n	800ab0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	4a11      	ldr	r2, [pc, #68]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800ab04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a0e      	ldr	r2, [pc, #56]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab16:	f7fa fa17 	bl	8004f48 <HAL_GetTick>
 800ab1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab1c:	e008      	b.n	800ab30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab1e:	f7fa fa13 	bl	8004f48 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e006      	b.n	800ab3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <RCCEx_PLL2_Config+0x15c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0f0      	beq.n	800ab1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	ffff0007 	.word	0xffff0007

0800ab50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab5e:	4b53      	ldr	r3, [pc, #332]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ab60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d101      	bne.n	800ab6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e099      	b.n	800aca2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab6e:	4b4f      	ldr	r3, [pc, #316]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a4e      	ldr	r2, [pc, #312]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ab74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab7a:	f7fa f9e5 	bl	8004f48 <HAL_GetTick>
 800ab7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab80:	e008      	b.n	800ab94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab82:	f7fa f9e1 	bl	8004f48 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d901      	bls.n	800ab94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e086      	b.n	800aca2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab94:	4b45      	ldr	r3, [pc, #276]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f0      	bne.n	800ab82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aba0:	4b42      	ldr	r3, [pc, #264]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	051b      	lsls	r3, r3, #20
 800abae:	493f      	ldr	r1, [pc, #252]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800abb0:	4313      	orrs	r3, r2
 800abb2:	628b      	str	r3, [r1, #40]	; 0x28
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	3b01      	subs	r3, #1
 800abba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	025b      	lsls	r3, r3, #9
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	3b01      	subs	r3, #1
 800abd0:	041b      	lsls	r3, r3, #16
 800abd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abd6:	431a      	orrs	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	3b01      	subs	r3, #1
 800abde:	061b      	lsls	r3, r3, #24
 800abe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abe4:	4931      	ldr	r1, [pc, #196]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800abea:	4b30      	ldr	r3, [pc, #192]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	492d      	ldr	r1, [pc, #180]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800abfc:	4b2b      	ldr	r3, [pc, #172]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	4928      	ldr	r1, [pc, #160]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac0e:	4b27      	ldr	r3, [pc, #156]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	4a26      	ldr	r2, [pc, #152]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac1a:	4b24      	ldr	r3, [pc, #144]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac1e:	4b24      	ldr	r3, [pc, #144]	; (800acb0 <RCCEx_PLL3_Config+0x160>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	69d2      	ldr	r2, [r2, #28]
 800ac26:	00d2      	lsls	r2, r2, #3
 800ac28:	4920      	ldr	r1, [pc, #128]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	4a1e      	ldr	r2, [pc, #120]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac40:	4b1a      	ldr	r3, [pc, #104]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	4a19      	ldr	r2, [pc, #100]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac4c:	e00f      	b.n	800ac6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d106      	bne.n	800ac62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac54:	4b15      	ldr	r3, [pc, #84]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4a14      	ldr	r2, [pc, #80]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac60:	e005      	b.n	800ac6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	4a11      	ldr	r2, [pc, #68]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac6e:	4b0f      	ldr	r3, [pc, #60]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a0e      	ldr	r2, [pc, #56]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac7a:	f7fa f965 	bl	8004f48 <HAL_GetTick>
 800ac7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac80:	e008      	b.n	800ac94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac82:	f7fa f961 	bl	8004f48 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d901      	bls.n	800ac94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e006      	b.n	800aca2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <RCCEx_PLL3_Config+0x15c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0f0      	beq.n	800ac82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400
 800acb0:	ffff0007 	.word	0xffff0007

0800acb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e049      	b.n	800ad5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d106      	bne.n	800ace0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7f9 fc3c 	bl	8004558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3304      	adds	r3, #4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f000 feb8 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d001      	beq.n	800ad7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e05e      	b.n	800ae3a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68da      	ldr	r2, [r3, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0201 	orr.w	r2, r2, #1
 800ad92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a2b      	ldr	r2, [pc, #172]	; (800ae48 <HAL_TIM_Base_Start_IT+0xe4>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d02c      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada6:	d027      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a27      	ldr	r2, [pc, #156]	; (800ae4c <HAL_TIM_Base_Start_IT+0xe8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d022      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a26      	ldr	r2, [pc, #152]	; (800ae50 <HAL_TIM_Base_Start_IT+0xec>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d01d      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a24      	ldr	r2, [pc, #144]	; (800ae54 <HAL_TIM_Base_Start_IT+0xf0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d018      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a23      	ldr	r2, [pc, #140]	; (800ae58 <HAL_TIM_Base_Start_IT+0xf4>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d013      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a21      	ldr	r2, [pc, #132]	; (800ae5c <HAL_TIM_Base_Start_IT+0xf8>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00e      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a20      	ldr	r2, [pc, #128]	; (800ae60 <HAL_TIM_Base_Start_IT+0xfc>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d009      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1e      	ldr	r2, [pc, #120]	; (800ae64 <HAL_TIM_Base_Start_IT+0x100>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d004      	beq.n	800adf8 <HAL_TIM_Base_Start_IT+0x94>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1d      	ldr	r2, [pc, #116]	; (800ae68 <HAL_TIM_Base_Start_IT+0x104>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d115      	bne.n	800ae24 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	4b1b      	ldr	r3, [pc, #108]	; (800ae6c <HAL_TIM_Base_Start_IT+0x108>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b06      	cmp	r3, #6
 800ae08:	d015      	beq.n	800ae36 <HAL_TIM_Base_Start_IT+0xd2>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae10:	d011      	beq.n	800ae36 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f042 0201 	orr.w	r2, r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae22:	e008      	b.n	800ae36 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f042 0201 	orr.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e000      	b.n	800ae38 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800
 800ae54:	40000c00 	.word	0x40000c00
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40001800 	.word	0x40001800
 800ae60:	40014000 	.word	0x40014000
 800ae64:	4000e000 	.word	0x4000e000
 800ae68:	4000e400 	.word	0x4000e400
 800ae6c:	00010007 	.word	0x00010007

0800ae70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e049      	b.n	800af16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7f9 fc96 	bl	80047c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f000 fdda 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <HAL_TIM_PWM_Start+0x24>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	e03c      	b.n	800afbe <HAL_TIM_PWM_Start+0x9e>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d109      	bne.n	800af5e <HAL_TIM_PWM_Start+0x3e>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b01      	cmp	r3, #1
 800af54:	bf14      	ite	ne
 800af56:	2301      	movne	r3, #1
 800af58:	2300      	moveq	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	e02f      	b.n	800afbe <HAL_TIM_PWM_Start+0x9e>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b08      	cmp	r3, #8
 800af62:	d109      	bne.n	800af78 <HAL_TIM_PWM_Start+0x58>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	bf14      	ite	ne
 800af70:	2301      	movne	r3, #1
 800af72:	2300      	moveq	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	e022      	b.n	800afbe <HAL_TIM_PWM_Start+0x9e>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b0c      	cmp	r3, #12
 800af7c:	d109      	bne.n	800af92 <HAL_TIM_PWM_Start+0x72>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b01      	cmp	r3, #1
 800af88:	bf14      	ite	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	2300      	moveq	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	e015      	b.n	800afbe <HAL_TIM_PWM_Start+0x9e>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b10      	cmp	r3, #16
 800af96:	d109      	bne.n	800afac <HAL_TIM_PWM_Start+0x8c>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	bf14      	ite	ne
 800afa4:	2301      	movne	r3, #1
 800afa6:	2300      	moveq	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e008      	b.n	800afbe <HAL_TIM_PWM_Start+0x9e>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	bf14      	ite	ne
 800afb8:	2301      	movne	r3, #1
 800afba:	2300      	moveq	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e0ab      	b.n	800b11e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_TIM_PWM_Start+0xb6>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afd4:	e023      	b.n	800b01e <HAL_TIM_PWM_Start+0xfe>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d104      	bne.n	800afe6 <HAL_TIM_PWM_Start+0xc6>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2202      	movs	r2, #2
 800afe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe4:	e01b      	b.n	800b01e <HAL_TIM_PWM_Start+0xfe>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b08      	cmp	r3, #8
 800afea:	d104      	bne.n	800aff6 <HAL_TIM_PWM_Start+0xd6>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aff4:	e013      	b.n	800b01e <HAL_TIM_PWM_Start+0xfe>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b0c      	cmp	r3, #12
 800affa:	d104      	bne.n	800b006 <HAL_TIM_PWM_Start+0xe6>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b004:	e00b      	b.n	800b01e <HAL_TIM_PWM_Start+0xfe>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d104      	bne.n	800b016 <HAL_TIM_PWM_Start+0xf6>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b014:	e003      	b.n	800b01e <HAL_TIM_PWM_Start+0xfe>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2202      	movs	r2, #2
 800b01a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2201      	movs	r2, #1
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f938 	bl	800c29c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a3d      	ldr	r2, [pc, #244]	; (800b128 <HAL_TIM_PWM_Start+0x208>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d013      	beq.n	800b05e <HAL_TIM_PWM_Start+0x13e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a3c      	ldr	r2, [pc, #240]	; (800b12c <HAL_TIM_PWM_Start+0x20c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00e      	beq.n	800b05e <HAL_TIM_PWM_Start+0x13e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a3a      	ldr	r2, [pc, #232]	; (800b130 <HAL_TIM_PWM_Start+0x210>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d009      	beq.n	800b05e <HAL_TIM_PWM_Start+0x13e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a39      	ldr	r2, [pc, #228]	; (800b134 <HAL_TIM_PWM_Start+0x214>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d004      	beq.n	800b05e <HAL_TIM_PWM_Start+0x13e>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a37      	ldr	r2, [pc, #220]	; (800b138 <HAL_TIM_PWM_Start+0x218>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d101      	bne.n	800b062 <HAL_TIM_PWM_Start+0x142>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <HAL_TIM_PWM_Start+0x144>
 800b062:	2300      	movs	r3, #0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d007      	beq.n	800b078 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b076:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a2a      	ldr	r2, [pc, #168]	; (800b128 <HAL_TIM_PWM_Start+0x208>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d02c      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d027      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a2a      	ldr	r2, [pc, #168]	; (800b13c <HAL_TIM_PWM_Start+0x21c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d022      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a29      	ldr	r2, [pc, #164]	; (800b140 <HAL_TIM_PWM_Start+0x220>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d01d      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a27      	ldr	r2, [pc, #156]	; (800b144 <HAL_TIM_PWM_Start+0x224>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d018      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a1f      	ldr	r2, [pc, #124]	; (800b12c <HAL_TIM_PWM_Start+0x20c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d013      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a23      	ldr	r2, [pc, #140]	; (800b148 <HAL_TIM_PWM_Start+0x228>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00e      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a1b      	ldr	r2, [pc, #108]	; (800b130 <HAL_TIM_PWM_Start+0x210>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d009      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a1f      	ldr	r2, [pc, #124]	; (800b14c <HAL_TIM_PWM_Start+0x22c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d004      	beq.n	800b0dc <HAL_TIM_PWM_Start+0x1bc>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1e      	ldr	r2, [pc, #120]	; (800b150 <HAL_TIM_PWM_Start+0x230>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d115      	bne.n	800b108 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <HAL_TIM_PWM_Start+0x234>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b06      	cmp	r3, #6
 800b0ec:	d015      	beq.n	800b11a <HAL_TIM_PWM_Start+0x1fa>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d011      	beq.n	800b11a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	e008      	b.n	800b11a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f042 0201 	orr.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e000      	b.n	800b11c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000
 800b12c:	40010400 	.word	0x40010400
 800b130:	40014000 	.word	0x40014000
 800b134:	40014400 	.word	0x40014400
 800b138:	40014800 	.word	0x40014800
 800b13c:	40000400 	.word	0x40000400
 800b140:	40000800 	.word	0x40000800
 800b144:	40000c00 	.word	0x40000c00
 800b148:	40001800 	.word	0x40001800
 800b14c:	4000e000 	.word	0x4000e000
 800b150:	4000e400 	.word	0x4000e400
 800b154:	00010007 	.word	0x00010007

0800b158 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e08f      	b.n	800b28c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d106      	bne.n	800b186 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7f9 fa2f 	bl	80045e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6899      	ldr	r1, [r3, #8]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	4b3e      	ldr	r3, [pc, #248]	; (800b294 <HAL_TIM_Encoder_Init+0x13c>)
 800b19a:	400b      	ands	r3, r1
 800b19c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	f000 fc5d 	bl	800ba68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4b31      	ldr	r3, [pc, #196]	; (800b298 <HAL_TIM_Encoder_Init+0x140>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	4b2b      	ldr	r3, [pc, #172]	; (800b29c <HAL_TIM_Encoder_Init+0x144>)
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4b2a      	ldr	r3, [pc, #168]	; (800b2a0 <HAL_TIM_Encoder_Init+0x148>)
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	4313      	orrs	r3, r2
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	4313      	orrs	r3, r2
 800b20a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	011a      	lsls	r2, r3, #4
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	031b      	lsls	r3, r3, #12
 800b218:	4313      	orrs	r3, r2
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b226:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b22e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	011b      	lsls	r3, r3, #4
 800b23a:	4313      	orrs	r3, r2
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2201      	movs	r2, #1
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	fffebff8 	.word	0xfffebff8
 800b298:	fffffcfc 	.word	0xfffffcfc
 800b29c:	fffff3f3 	.word	0xfffff3f3
 800b2a0:	ffff0f0f 	.word	0xffff0f0f

0800b2a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b2bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d110      	bne.n	800b2f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d102      	bne.n	800b2e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2da:	7b7b      	ldrb	r3, [r7, #13]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d001      	beq.n	800b2e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e069      	b.n	800b3b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f4:	e031      	b.n	800b35a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d110      	bne.n	800b31e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d102      	bne.n	800b308 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b302:	7b3b      	ldrb	r3, [r7, #12]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d001      	beq.n	800b30c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e055      	b.n	800b3b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2202      	movs	r2, #2
 800b310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b31c:	e01d      	b.n	800b35a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d108      	bne.n	800b336 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b324:	7bbb      	ldrb	r3, [r7, #14]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d105      	bne.n	800b336 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b32a:	7b7b      	ldrb	r3, [r7, #13]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d102      	bne.n	800b336 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b330:	7b3b      	ldrb	r3, [r7, #12]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d001      	beq.n	800b33a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e03e      	b.n	800b3b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2202      	movs	r2, #2
 800b33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2202      	movs	r2, #2
 800b34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2202      	movs	r2, #2
 800b356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <HAL_TIM_Encoder_Start+0xc4>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b04      	cmp	r3, #4
 800b364:	d008      	beq.n	800b378 <HAL_TIM_Encoder_Start+0xd4>
 800b366:	e00f      	b.n	800b388 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2201      	movs	r2, #1
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f000 ff93 	bl	800c29c <TIM_CCxChannelCmd>
      break;
 800b376:	e016      	b.n	800b3a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2201      	movs	r2, #1
 800b37e:	2104      	movs	r1, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f000 ff8b 	bl	800c29c <TIM_CCxChannelCmd>
      break;
 800b386:	e00e      	b.n	800b3a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2201      	movs	r2, #1
 800b38e:	2100      	movs	r1, #0
 800b390:	4618      	mov	r0, r3
 800b392:	f000 ff83 	bl	800c29c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2201      	movs	r2, #1
 800b39c:	2104      	movs	r1, #4
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 ff7c 	bl	800c29c <TIM_CCxChannelCmd>
      break;
 800b3a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f042 0201 	orr.w	r2, r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d122      	bne.n	800b41c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d11b      	bne.n	800b41c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0202 	mvn.w	r2, #2
 800b3ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	f003 0303 	and.w	r3, r3, #3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fb12 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b408:	e005      	b.n	800b416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fb04 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fb15 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	2b04      	cmp	r3, #4
 800b428:	d122      	bne.n	800b470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f003 0304 	and.w	r3, r3, #4
 800b434:	2b04      	cmp	r3, #4
 800b436:	d11b      	bne.n	800b470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f06f 0204 	mvn.w	r2, #4
 800b440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2202      	movs	r2, #2
 800b446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fae8 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b45c:	e005      	b.n	800b46a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fada 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 faeb 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	f003 0308 	and.w	r3, r3, #8
 800b47a:	2b08      	cmp	r3, #8
 800b47c:	d122      	bne.n	800b4c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d11b      	bne.n	800b4c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f06f 0208 	mvn.w	r2, #8
 800b494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2204      	movs	r2, #4
 800b49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	69db      	ldr	r3, [r3, #28]
 800b4a2:	f003 0303 	and.w	r3, r3, #3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fabe 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b4b0:	e005      	b.n	800b4be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fab0 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fac1 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	f003 0310 	and.w	r3, r3, #16
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d122      	bne.n	800b518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	2b10      	cmp	r3, #16
 800b4de:	d11b      	bne.n	800b518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f06f 0210 	mvn.w	r2, #16
 800b4e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa94 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b504:	e005      	b.n	800b512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fa86 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fa97 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b01      	cmp	r3, #1
 800b524:	d10e      	bne.n	800b544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b01      	cmp	r3, #1
 800b532:	d107      	bne.n	800b544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f06f 0201 	mvn.w	r2, #1
 800b53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7f5 ffaa 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54e:	2b80      	cmp	r3, #128	; 0x80
 800b550:	d10e      	bne.n	800b570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b55c:	2b80      	cmp	r3, #128	; 0x80
 800b55e:	d107      	bne.n	800b570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 f802 	bl	800c574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57e:	d10e      	bne.n	800b59e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58a:	2b80      	cmp	r3, #128	; 0x80
 800b58c:	d107      	bne.n	800b59e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fff5 	bl	800c588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a8:	2b40      	cmp	r3, #64	; 0x40
 800b5aa:	d10e      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b6:	2b40      	cmp	r3, #64	; 0x40
 800b5b8:	d107      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fa45 	bl	800ba54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f003 0320 	and.w	r3, r3, #32
 800b5d4:	2b20      	cmp	r3, #32
 800b5d6:	d10e      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b20      	cmp	r3, #32
 800b5e4:	d107      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f06f 0220 	mvn.w	r2, #32
 800b5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 ffb5 	bl	800c560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b616:	2b01      	cmp	r3, #1
 800b618:	d101      	bne.n	800b61e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b61a:	2302      	movs	r3, #2
 800b61c:	e0ff      	b.n	800b81e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b14      	cmp	r3, #20
 800b62a:	f200 80f0 	bhi.w	800b80e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b62e:	a201      	add	r2, pc, #4	; (adr r2, 800b634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b634:	0800b689 	.word	0x0800b689
 800b638:	0800b80f 	.word	0x0800b80f
 800b63c:	0800b80f 	.word	0x0800b80f
 800b640:	0800b80f 	.word	0x0800b80f
 800b644:	0800b6c9 	.word	0x0800b6c9
 800b648:	0800b80f 	.word	0x0800b80f
 800b64c:	0800b80f 	.word	0x0800b80f
 800b650:	0800b80f 	.word	0x0800b80f
 800b654:	0800b70b 	.word	0x0800b70b
 800b658:	0800b80f 	.word	0x0800b80f
 800b65c:	0800b80f 	.word	0x0800b80f
 800b660:	0800b80f 	.word	0x0800b80f
 800b664:	0800b74b 	.word	0x0800b74b
 800b668:	0800b80f 	.word	0x0800b80f
 800b66c:	0800b80f 	.word	0x0800b80f
 800b670:	0800b80f 	.word	0x0800b80f
 800b674:	0800b78d 	.word	0x0800b78d
 800b678:	0800b80f 	.word	0x0800b80f
 800b67c:	0800b80f 	.word	0x0800b80f
 800b680:	0800b80f 	.word	0x0800b80f
 800b684:	0800b7cd 	.word	0x0800b7cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fa90 	bl	800bbb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	699a      	ldr	r2, [r3, #24]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f042 0208 	orr.w	r2, r2, #8
 800b6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	699a      	ldr	r2, [r3, #24]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0204 	bic.w	r2, r2, #4
 800b6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6999      	ldr	r1, [r3, #24]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	619a      	str	r2, [r3, #24]
      break;
 800b6c6:	e0a5      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fb00 	bl	800bcd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	699a      	ldr	r2, [r3, #24]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699a      	ldr	r2, [r3, #24]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6999      	ldr	r1, [r3, #24]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	021a      	lsls	r2, r3, #8
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	619a      	str	r2, [r3, #24]
      break;
 800b708:	e084      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68b9      	ldr	r1, [r7, #8]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 fb69 	bl	800bde8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69da      	ldr	r2, [r3, #28]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0208 	orr.w	r2, r2, #8
 800b724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	69da      	ldr	r2, [r3, #28]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f022 0204 	bic.w	r2, r2, #4
 800b734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69d9      	ldr	r1, [r3, #28]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	691a      	ldr	r2, [r3, #16]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	61da      	str	r2, [r3, #28]
      break;
 800b748:	e064      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68b9      	ldr	r1, [r7, #8]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fbd1 	bl	800bef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69da      	ldr	r2, [r3, #28]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69da      	ldr	r2, [r3, #28]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69d9      	ldr	r1, [r3, #28]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	021a      	lsls	r2, r3, #8
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	61da      	str	r2, [r3, #28]
      break;
 800b78a:	e043      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fc1a 	bl	800bfcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0208 	orr.w	r2, r2, #8
 800b7a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0204 	bic.w	r2, r2, #4
 800b7b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	691a      	ldr	r2, [r3, #16]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b7ca:	e023      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 fc5e 	bl	800c094 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	021a      	lsls	r2, r3, #8
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b80c:	e002      	b.n	800b814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
      break;
 800b812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop

0800b828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_TIM_ConfigClockSource+0x1c>
 800b840:	2302      	movs	r3, #2
 800b842:	e0dc      	b.n	800b9fe <HAL_TIM_ConfigClockSource+0x1d6>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	4b6a      	ldr	r3, [pc, #424]	; (800ba08 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b860:	4013      	ands	r3, r2
 800b862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b86a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a64      	ldr	r2, [pc, #400]	; (800ba0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	f000 80a9 	beq.w	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b880:	4a62      	ldr	r2, [pc, #392]	; (800ba0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b882:	4293      	cmp	r3, r2
 800b884:	f200 80ae 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b888:	4a61      	ldr	r2, [pc, #388]	; (800ba10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	f000 80a1 	beq.w	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b890:	4a5f      	ldr	r2, [pc, #380]	; (800ba10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	f200 80a6 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b898:	4a5e      	ldr	r2, [pc, #376]	; (800ba14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	f000 8099 	beq.w	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a0:	4a5c      	ldr	r2, [pc, #368]	; (800ba14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	f200 809e 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b8ac:	f000 8091 	beq.w	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b8b4:	f200 8096 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8bc:	f000 8089 	beq.w	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8c4:	f200 808e 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8cc:	d03e      	beq.n	800b94c <HAL_TIM_ConfigClockSource+0x124>
 800b8ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d2:	f200 8087 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8da:	f000 8086 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1c2>
 800b8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e2:	d87f      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e4:	2b70      	cmp	r3, #112	; 0x70
 800b8e6:	d01a      	beq.n	800b91e <HAL_TIM_ConfigClockSource+0xf6>
 800b8e8:	2b70      	cmp	r3, #112	; 0x70
 800b8ea:	d87b      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8ec:	2b60      	cmp	r3, #96	; 0x60
 800b8ee:	d050      	beq.n	800b992 <HAL_TIM_ConfigClockSource+0x16a>
 800b8f0:	2b60      	cmp	r3, #96	; 0x60
 800b8f2:	d877      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8f4:	2b50      	cmp	r3, #80	; 0x50
 800b8f6:	d03c      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0x14a>
 800b8f8:	2b50      	cmp	r3, #80	; 0x50
 800b8fa:	d873      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8fc:	2b40      	cmp	r3, #64	; 0x40
 800b8fe:	d058      	beq.n	800b9b2 <HAL_TIM_ConfigClockSource+0x18a>
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d86f      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b904:	2b30      	cmp	r3, #48	; 0x30
 800b906:	d064      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b908:	2b30      	cmp	r3, #48	; 0x30
 800b90a:	d86b      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d060      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b910:	2b20      	cmp	r3, #32
 800b912:	d867      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d05c      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b918:	2b10      	cmp	r3, #16
 800b91a:	d05a      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b91c:	e062      	b.n	800b9e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6899      	ldr	r1, [r3, #8]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	f000 fc95 	bl	800c25c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	609a      	str	r2, [r3, #8]
      break;
 800b94a:	e04f      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	6899      	ldr	r1, [r3, #8]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f000 fc7e 	bl	800c25c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b96e:	609a      	str	r2, [r3, #8]
      break;
 800b970:	e03c      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	6859      	ldr	r1, [r3, #4]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	461a      	mov	r2, r3
 800b980:	f000 fbee 	bl	800c160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2150      	movs	r1, #80	; 0x50
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fc48 	bl	800c220 <TIM_ITRx_SetConfig>
      break;
 800b990:	e02c      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6859      	ldr	r1, [r3, #4]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f000 fc0d 	bl	800c1be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2160      	movs	r1, #96	; 0x60
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 fc38 	bl	800c220 <TIM_ITRx_SetConfig>
      break;
 800b9b0:	e01c      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	6859      	ldr	r1, [r3, #4]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f000 fbce 	bl	800c160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2140      	movs	r1, #64	; 0x40
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 fc28 	bl	800c220 <TIM_ITRx_SetConfig>
      break;
 800b9d0:	e00c      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4610      	mov	r0, r2
 800b9de:	f000 fc1f 	bl	800c220 <TIM_ITRx_SetConfig>
      break;
 800b9e2:	e003      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e8:	e000      	b.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b9ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	ffceff88 	.word	0xffceff88
 800ba0c:	00100040 	.word	0x00100040
 800ba10:	00100030 	.word	0x00100030
 800ba14:	00100020 	.word	0x00100020

0800ba18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a44      	ldr	r2, [pc, #272]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d013      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d00f      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a41      	ldr	r2, [pc, #260]	; (800bb90 <TIM_Base_SetConfig+0x128>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00b      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a40      	ldr	r2, [pc, #256]	; (800bb94 <TIM_Base_SetConfig+0x12c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d007      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a3f      	ldr	r2, [pc, #252]	; (800bb98 <TIM_Base_SetConfig+0x130>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d003      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a3e      	ldr	r2, [pc, #248]	; (800bb9c <TIM_Base_SetConfig+0x134>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d108      	bne.n	800baba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a33      	ldr	r2, [pc, #204]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d027      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac8:	d023      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a30      	ldr	r2, [pc, #192]	; (800bb90 <TIM_Base_SetConfig+0x128>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d01f      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a2f      	ldr	r2, [pc, #188]	; (800bb94 <TIM_Base_SetConfig+0x12c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d01b      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2e      	ldr	r2, [pc, #184]	; (800bb98 <TIM_Base_SetConfig+0x130>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d017      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a2d      	ldr	r2, [pc, #180]	; (800bb9c <TIM_Base_SetConfig+0x134>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d013      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a2c      	ldr	r2, [pc, #176]	; (800bba0 <TIM_Base_SetConfig+0x138>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d00f      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a2b      	ldr	r2, [pc, #172]	; (800bba4 <TIM_Base_SetConfig+0x13c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00b      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a2a      	ldr	r2, [pc, #168]	; (800bba8 <TIM_Base_SetConfig+0x140>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d007      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a29      	ldr	r2, [pc, #164]	; (800bbac <TIM_Base_SetConfig+0x144>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d003      	beq.n	800bb12 <TIM_Base_SetConfig+0xaa>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <TIM_Base_SetConfig+0x148>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d108      	bne.n	800bb24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a10      	ldr	r2, [pc, #64]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d00f      	beq.n	800bb70 <TIM_Base_SetConfig+0x108>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a12      	ldr	r2, [pc, #72]	; (800bb9c <TIM_Base_SetConfig+0x134>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d00b      	beq.n	800bb70 <TIM_Base_SetConfig+0x108>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a11      	ldr	r2, [pc, #68]	; (800bba0 <TIM_Base_SetConfig+0x138>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d007      	beq.n	800bb70 <TIM_Base_SetConfig+0x108>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a10      	ldr	r2, [pc, #64]	; (800bba4 <TIM_Base_SetConfig+0x13c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d003      	beq.n	800bb70 <TIM_Base_SetConfig+0x108>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a0f      	ldr	r2, [pc, #60]	; (800bba8 <TIM_Base_SetConfig+0x140>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d103      	bne.n	800bb78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	691a      	ldr	r2, [r3, #16]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	615a      	str	r2, [r3, #20]
}
 800bb7e:	bf00      	nop
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	40010000 	.word	0x40010000
 800bb90:	40000400 	.word	0x40000400
 800bb94:	40000800 	.word	0x40000800
 800bb98:	40000c00 	.word	0x40000c00
 800bb9c:	40010400 	.word	0x40010400
 800bba0:	40014000 	.word	0x40014000
 800bba4:	40014400 	.word	0x40014400
 800bba8:	40014800 	.word	0x40014800
 800bbac:	4000e000 	.word	0x4000e000
 800bbb0:	4000e400 	.word	0x4000e400

0800bbb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f023 0201 	bic.w	r2, r3, #1
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4b37      	ldr	r3, [pc, #220]	; (800bcbc <TIM_OC1_SetConfig+0x108>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0303 	bic.w	r3, r3, #3
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f023 0302 	bic.w	r3, r3, #2
 800bbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a2d      	ldr	r2, [pc, #180]	; (800bcc0 <TIM_OC1_SetConfig+0x10c>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d00f      	beq.n	800bc30 <TIM_OC1_SetConfig+0x7c>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a2c      	ldr	r2, [pc, #176]	; (800bcc4 <TIM_OC1_SetConfig+0x110>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d00b      	beq.n	800bc30 <TIM_OC1_SetConfig+0x7c>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a2b      	ldr	r2, [pc, #172]	; (800bcc8 <TIM_OC1_SetConfig+0x114>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d007      	beq.n	800bc30 <TIM_OC1_SetConfig+0x7c>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <TIM_OC1_SetConfig+0x118>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d003      	beq.n	800bc30 <TIM_OC1_SetConfig+0x7c>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a29      	ldr	r2, [pc, #164]	; (800bcd0 <TIM_OC1_SetConfig+0x11c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d10c      	bne.n	800bc4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f023 0308 	bic.w	r3, r3, #8
 800bc36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f023 0304 	bic.w	r3, r3, #4
 800bc48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a1c      	ldr	r2, [pc, #112]	; (800bcc0 <TIM_OC1_SetConfig+0x10c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d00f      	beq.n	800bc72 <TIM_OC1_SetConfig+0xbe>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a1b      	ldr	r2, [pc, #108]	; (800bcc4 <TIM_OC1_SetConfig+0x110>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d00b      	beq.n	800bc72 <TIM_OC1_SetConfig+0xbe>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a1a      	ldr	r2, [pc, #104]	; (800bcc8 <TIM_OC1_SetConfig+0x114>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d007      	beq.n	800bc72 <TIM_OC1_SetConfig+0xbe>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a19      	ldr	r2, [pc, #100]	; (800bccc <TIM_OC1_SetConfig+0x118>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d003      	beq.n	800bc72 <TIM_OC1_SetConfig+0xbe>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a18      	ldr	r2, [pc, #96]	; (800bcd0 <TIM_OC1_SetConfig+0x11c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d111      	bne.n	800bc96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	621a      	str	r2, [r3, #32]
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	fffeff8f 	.word	0xfffeff8f
 800bcc0:	40010000 	.word	0x40010000
 800bcc4:	40010400 	.word	0x40010400
 800bcc8:	40014000 	.word	0x40014000
 800bccc:	40014400 	.word	0x40014400
 800bcd0:	40014800 	.word	0x40014800

0800bcd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	f023 0210 	bic.w	r2, r3, #16
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4b34      	ldr	r3, [pc, #208]	; (800bdd0 <TIM_OC2_SetConfig+0xfc>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	021b      	lsls	r3, r3, #8
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f023 0320 	bic.w	r3, r3, #32
 800bd1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a29      	ldr	r2, [pc, #164]	; (800bdd4 <TIM_OC2_SetConfig+0x100>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d003      	beq.n	800bd3c <TIM_OC2_SetConfig+0x68>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a28      	ldr	r2, [pc, #160]	; (800bdd8 <TIM_OC2_SetConfig+0x104>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d10d      	bne.n	800bd58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a1e      	ldr	r2, [pc, #120]	; (800bdd4 <TIM_OC2_SetConfig+0x100>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00f      	beq.n	800bd80 <TIM_OC2_SetConfig+0xac>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a1d      	ldr	r2, [pc, #116]	; (800bdd8 <TIM_OC2_SetConfig+0x104>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00b      	beq.n	800bd80 <TIM_OC2_SetConfig+0xac>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a1c      	ldr	r2, [pc, #112]	; (800bddc <TIM_OC2_SetConfig+0x108>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d007      	beq.n	800bd80 <TIM_OC2_SetConfig+0xac>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a1b      	ldr	r2, [pc, #108]	; (800bde0 <TIM_OC2_SetConfig+0x10c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d003      	beq.n	800bd80 <TIM_OC2_SetConfig+0xac>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a1a      	ldr	r2, [pc, #104]	; (800bde4 <TIM_OC2_SetConfig+0x110>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d113      	bne.n	800bda8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	621a      	str	r2, [r3, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	feff8fff 	.word	0xfeff8fff
 800bdd4:	40010000 	.word	0x40010000
 800bdd8:	40010400 	.word	0x40010400
 800bddc:	40014000 	.word	0x40014000
 800bde0:	40014400 	.word	0x40014400
 800bde4:	40014800 	.word	0x40014800

0800bde8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4b33      	ldr	r3, [pc, #204]	; (800bee0 <TIM_OC3_SetConfig+0xf8>)
 800be14:	4013      	ands	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	021b      	lsls	r3, r3, #8
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a28      	ldr	r2, [pc, #160]	; (800bee4 <TIM_OC3_SetConfig+0xfc>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d003      	beq.n	800be4e <TIM_OC3_SetConfig+0x66>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a27      	ldr	r2, [pc, #156]	; (800bee8 <TIM_OC3_SetConfig+0x100>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d10d      	bne.n	800be6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a1d      	ldr	r2, [pc, #116]	; (800bee4 <TIM_OC3_SetConfig+0xfc>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d00f      	beq.n	800be92 <TIM_OC3_SetConfig+0xaa>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a1c      	ldr	r2, [pc, #112]	; (800bee8 <TIM_OC3_SetConfig+0x100>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d00b      	beq.n	800be92 <TIM_OC3_SetConfig+0xaa>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a1b      	ldr	r2, [pc, #108]	; (800beec <TIM_OC3_SetConfig+0x104>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d007      	beq.n	800be92 <TIM_OC3_SetConfig+0xaa>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a1a      	ldr	r2, [pc, #104]	; (800bef0 <TIM_OC3_SetConfig+0x108>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d003      	beq.n	800be92 <TIM_OC3_SetConfig+0xaa>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a19      	ldr	r2, [pc, #100]	; (800bef4 <TIM_OC3_SetConfig+0x10c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d113      	bne.n	800beba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	621a      	str	r2, [r3, #32]
}
 800bed4:	bf00      	nop
 800bed6:	371c      	adds	r7, #28
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	fffeff8f 	.word	0xfffeff8f
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40010400 	.word	0x40010400
 800beec:	40014000 	.word	0x40014000
 800bef0:	40014400 	.word	0x40014400
 800bef4:	40014800 	.word	0x40014800

0800bef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bef8:	b480      	push	{r7}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4b24      	ldr	r3, [pc, #144]	; (800bfb4 <TIM_OC4_SetConfig+0xbc>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	021b      	lsls	r3, r3, #8
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	031b      	lsls	r3, r3, #12
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a19      	ldr	r2, [pc, #100]	; (800bfb8 <TIM_OC4_SetConfig+0xc0>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00f      	beq.n	800bf78 <TIM_OC4_SetConfig+0x80>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a18      	ldr	r2, [pc, #96]	; (800bfbc <TIM_OC4_SetConfig+0xc4>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00b      	beq.n	800bf78 <TIM_OC4_SetConfig+0x80>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a17      	ldr	r2, [pc, #92]	; (800bfc0 <TIM_OC4_SetConfig+0xc8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d007      	beq.n	800bf78 <TIM_OC4_SetConfig+0x80>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a16      	ldr	r2, [pc, #88]	; (800bfc4 <TIM_OC4_SetConfig+0xcc>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d003      	beq.n	800bf78 <TIM_OC4_SetConfig+0x80>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a15      	ldr	r2, [pc, #84]	; (800bfc8 <TIM_OC4_SetConfig+0xd0>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d109      	bne.n	800bf8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	019b      	lsls	r3, r3, #6
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	693a      	ldr	r2, [r7, #16]
 800bfa4:	621a      	str	r2, [r3, #32]
}
 800bfa6:	bf00      	nop
 800bfa8:	371c      	adds	r7, #28
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	feff8fff 	.word	0xfeff8fff
 800bfb8:	40010000 	.word	0x40010000
 800bfbc:	40010400 	.word	0x40010400
 800bfc0:	40014000 	.word	0x40014000
 800bfc4:	40014400 	.word	0x40014400
 800bfc8:	40014800 	.word	0x40014800

0800bfcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4b21      	ldr	r3, [pc, #132]	; (800c07c <TIM_OC5_SetConfig+0xb0>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c00c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	041b      	lsls	r3, r3, #16
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a18      	ldr	r2, [pc, #96]	; (800c080 <TIM_OC5_SetConfig+0xb4>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d00f      	beq.n	800c042 <TIM_OC5_SetConfig+0x76>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a17      	ldr	r2, [pc, #92]	; (800c084 <TIM_OC5_SetConfig+0xb8>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d00b      	beq.n	800c042 <TIM_OC5_SetConfig+0x76>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a16      	ldr	r2, [pc, #88]	; (800c088 <TIM_OC5_SetConfig+0xbc>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d007      	beq.n	800c042 <TIM_OC5_SetConfig+0x76>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a15      	ldr	r2, [pc, #84]	; (800c08c <TIM_OC5_SetConfig+0xc0>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d003      	beq.n	800c042 <TIM_OC5_SetConfig+0x76>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a14      	ldr	r2, [pc, #80]	; (800c090 <TIM_OC5_SetConfig+0xc4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d109      	bne.n	800c056 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	021b      	lsls	r3, r3, #8
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	4313      	orrs	r3, r2
 800c054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	621a      	str	r2, [r3, #32]
}
 800c070:	bf00      	nop
 800c072:	371c      	adds	r7, #28
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	fffeff8f 	.word	0xfffeff8f
 800c080:	40010000 	.word	0x40010000
 800c084:	40010400 	.word	0x40010400
 800c088:	40014000 	.word	0x40014000
 800c08c:	40014400 	.word	0x40014400
 800c090:	40014800 	.word	0x40014800

0800c094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4b22      	ldr	r3, [pc, #136]	; (800c148 <TIM_OC6_SetConfig+0xb4>)
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	051b      	lsls	r3, r3, #20
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a19      	ldr	r2, [pc, #100]	; (800c14c <TIM_OC6_SetConfig+0xb8>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00f      	beq.n	800c10c <TIM_OC6_SetConfig+0x78>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a18      	ldr	r2, [pc, #96]	; (800c150 <TIM_OC6_SetConfig+0xbc>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00b      	beq.n	800c10c <TIM_OC6_SetConfig+0x78>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a17      	ldr	r2, [pc, #92]	; (800c154 <TIM_OC6_SetConfig+0xc0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d007      	beq.n	800c10c <TIM_OC6_SetConfig+0x78>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a16      	ldr	r2, [pc, #88]	; (800c158 <TIM_OC6_SetConfig+0xc4>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d003      	beq.n	800c10c <TIM_OC6_SetConfig+0x78>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a15      	ldr	r2, [pc, #84]	; (800c15c <TIM_OC6_SetConfig+0xc8>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d109      	bne.n	800c120 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	695b      	ldr	r3, [r3, #20]
 800c118:	029b      	lsls	r3, r3, #10
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	621a      	str	r2, [r3, #32]
}
 800c13a:	bf00      	nop
 800c13c:	371c      	adds	r7, #28
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	feff8fff 	.word	0xfeff8fff
 800c14c:	40010000 	.word	0x40010000
 800c150:	40010400 	.word	0x40010400
 800c154:	40014000 	.word	0x40014000
 800c158:	40014400 	.word	0x40014400
 800c15c:	40014800 	.word	0x40014800

0800c160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c160:	b480      	push	{r7}
 800c162:	b087      	sub	sp, #28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	f023 0201 	bic.w	r2, r3, #1
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c18a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4313      	orrs	r3, r2
 800c194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f023 030a 	bic.w	r3, r3, #10
 800c19c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	621a      	str	r2, [r3, #32]
}
 800c1b2:	bf00      	nop
 800c1b4:	371c      	adds	r7, #28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	b087      	sub	sp, #28
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	60b9      	str	r1, [r7, #8]
 800c1c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	f023 0210 	bic.w	r2, r3, #16
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	031b      	lsls	r3, r3, #12
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	4313      	orrs	r3, r2
 800c204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
	...

0800c220 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4b09      	ldr	r3, [pc, #36]	; (800c258 <TIM_ITRx_SetConfig+0x38>)
 800c234:	4013      	ands	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c238:	683a      	ldr	r2, [r7, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	f043 0307 	orr.w	r3, r3, #7
 800c242:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	609a      	str	r2, [r3, #8]
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	ffcfff8f 	.word	0xffcfff8f

0800c25c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	021a      	lsls	r2, r3, #8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	431a      	orrs	r2, r3
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	4313      	orrs	r3, r2
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	609a      	str	r2, [r3, #8]
}
 800c290:	bf00      	nop
 800c292:	371c      	adds	r7, #28
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f003 031f 	and.w	r3, r3, #31
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6a1a      	ldr	r2, [r3, #32]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	43db      	mvns	r3, r3
 800c2be:	401a      	ands	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a1a      	ldr	r2, [r3, #32]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f003 031f 	and.w	r3, r3, #31
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2d4:	431a      	orrs	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	621a      	str	r2, [r3, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	371c      	adds	r7, #28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
	...

0800c2e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d101      	bne.n	800c300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e077      	b.n	800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a35      	ldr	r2, [pc, #212]	; (800c3fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d004      	beq.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a34      	ldr	r2, [pc, #208]	; (800c400 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d108      	bne.n	800c346 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c33a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c34c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4313      	orrs	r3, r2
 800c356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a25      	ldr	r2, [pc, #148]	; (800c3fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d02c      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c372:	d027      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a22      	ldr	r2, [pc, #136]	; (800c404 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d022      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a21      	ldr	r2, [pc, #132]	; (800c408 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d01d      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a1f      	ldr	r2, [pc, #124]	; (800c40c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d018      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a1a      	ldr	r2, [pc, #104]	; (800c400 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d013      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a1b      	ldr	r2, [pc, #108]	; (800c410 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d00e      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a1a      	ldr	r2, [pc, #104]	; (800c414 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d009      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a18      	ldr	r2, [pc, #96]	; (800c418 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d004      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a17      	ldr	r2, [pc, #92]	; (800c41c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d10c      	bne.n	800c3de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	40010000 	.word	0x40010000
 800c400:	40010400 	.word	0x40010400
 800c404:	40000400 	.word	0x40000400
 800c408:	40000800 	.word	0x40000800
 800c40c:	40000c00 	.word	0x40000c00
 800c410:	40001800 	.word	0x40001800
 800c414:	40014000 	.word	0x40014000
 800c418:	4000e000 	.word	0x4000e000
 800c41c:	4000e400 	.word	0x4000e400

0800c420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c434:	2b01      	cmp	r3, #1
 800c436:	d101      	bne.n	800c43c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c438:	2302      	movs	r3, #2
 800c43a:	e087      	b.n	800c54c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	041b      	lsls	r3, r3, #16
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a27      	ldr	r2, [pc, #156]	; (800c558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d004      	beq.n	800c4ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a25      	ldr	r2, [pc, #148]	; (800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d106      	bne.n	800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1e      	ldr	r2, [pc, #120]	; (800c558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d004      	beq.n	800c4ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a1d      	ldr	r2, [pc, #116]	; (800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d126      	bne.n	800c53a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f6:	051b      	lsls	r3, r3, #20
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	6a1b      	ldr	r3, [r3, #32]
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c514:	4313      	orrs	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a0e      	ldr	r2, [pc, #56]	; (800c558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d004      	beq.n	800c52c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a0d      	ldr	r2, [pc, #52]	; (800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d106      	bne.n	800c53a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4313      	orrs	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	40010000 	.word	0x40010000
 800c55c:	40010400 	.word	0x40010400

0800c560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e042      	b.n	800c634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7f8 f9c1 	bl	8004948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2224      	movs	r2, #36	; 0x24
 800c5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f022 0201 	bic.w	r2, r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fd18 	bl	800d014 <UART_SetConfig>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d101      	bne.n	800c5ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e022      	b.n	800c634 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 fb78 	bl	800dcec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c60a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689a      	ldr	r2, [r3, #8]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c61a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f042 0201 	orr.w	r2, r2, #1
 800c62a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f001 fbff 	bl	800de30 <UART_CheckIdleState>
 800c632:	4603      	mov	r3, r0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e02e      	b.n	800c6ac <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2224      	movs	r2, #36	; 0x24
 800c652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0201 	bic.w	r2, r2, #1
 800c664:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2200      	movs	r2, #0
 800c674:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2200      	movs	r2, #0
 800c67c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7f8 fa4a 	bl	8004b18 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08a      	sub	sp, #40	; 0x28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c8:	2b20      	cmp	r3, #32
 800c6ca:	d17a      	bne.n	800c7c2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <HAL_UART_Transmit_DMA+0x24>
 800c6d2:	88fb      	ldrh	r3, [r7, #6]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e073      	b.n	800c7c4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d101      	bne.n	800c6ea <HAL_UART_Transmit_DMA+0x36>
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e06c      	b.n	800c7c4 <HAL_UART_Transmit_DMA+0x110>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	88fa      	ldrh	r2, [r7, #6]
 800c6fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	88fa      	ldrh	r2, [r7, #6]
 800c704:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2221      	movs	r2, #33	; 0x21
 800c714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d02c      	beq.n	800c77a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c724:	4a29      	ldr	r2, [pc, #164]	; (800c7cc <HAL_UART_Transmit_DMA+0x118>)
 800c726:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c72c:	4a28      	ldr	r2, [pc, #160]	; (800c7d0 <HAL_UART_Transmit_DMA+0x11c>)
 800c72e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c734:	4a27      	ldr	r2, [pc, #156]	; (800c7d4 <HAL_UART_Transmit_DMA+0x120>)
 800c736:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c73c:	2200      	movs	r2, #0
 800c73e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c748:	4619      	mov	r1, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3328      	adds	r3, #40	; 0x28
 800c750:	461a      	mov	r2, r3
 800c752:	88fb      	ldrh	r3, [r7, #6]
 800c754:	f7f9 fa56 	bl	8005c04 <HAL_DMA_Start_IT>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00d      	beq.n	800c77a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2210      	movs	r2, #16
 800c762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2220      	movs	r2, #32
 800c772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e024      	b.n	800c7c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2240      	movs	r2, #64	; 0x40
 800c780:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3308      	adds	r3, #8
 800c790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	613b      	str	r3, [r7, #16]
   return(result);
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7aa:	623a      	str	r2, [r7, #32]
 800c7ac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	69f9      	ldr	r1, [r7, #28]
 800c7b0:	6a3a      	ldr	r2, [r7, #32]
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e5      	bne.n	800c78a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	e000      	b.n	800c7c4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c7c2:	2302      	movs	r3, #2
  }
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3728      	adds	r7, #40	; 0x28
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	0800e2f9 	.word	0x0800e2f9
 800c7d0:	0800e38f 	.word	0x0800e38f
 800c7d4:	0800e505 	.word	0x0800e505

0800c7d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08a      	sub	sp, #40	; 0x28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d142      	bne.n	800c876 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <HAL_UART_Receive_DMA+0x24>
 800c7f6:	88fb      	ldrh	r3, [r7, #6]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e03b      	b.n	800c878 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c806:	2b01      	cmp	r3, #1
 800c808:	d101      	bne.n	800c80e <HAL_UART_Receive_DMA+0x36>
 800c80a:	2302      	movs	r3, #2
 800c80c:	e034      	b.n	800c878 <HAL_UART_Receive_DMA+0xa0>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2200      	movs	r2, #0
 800c81a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a17      	ldr	r2, [pc, #92]	; (800c880 <HAL_UART_Receive_DMA+0xa8>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d01f      	beq.n	800c866 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d018      	beq.n	800c866 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	e853 3f00 	ldrex	r3, [r3]
 800c840:	613b      	str	r3, [r7, #16]
   return(result);
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c848:	627b      	str	r3, [r7, #36]	; 0x24
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	623b      	str	r3, [r7, #32]
 800c854:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c856:	69f9      	ldr	r1, [r7, #28]
 800c858:	6a3a      	ldr	r2, [r7, #32]
 800c85a:	e841 2300 	strex	r3, r2, [r1]
 800c85e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1e6      	bne.n	800c834 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c866:	88fb      	ldrh	r3, [r7, #6]
 800c868:	461a      	mov	r2, r3
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f001 fbf3 	bl	800e058 <UART_Start_Receive_DMA>
 800c872:	4603      	mov	r3, r0
 800c874:	e000      	b.n	800c878 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c876:	2302      	movs	r3, #2
  }
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3728      	adds	r7, #40	; 0x28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	58000c00 	.word	0x58000c00

0800c884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b0ba      	sub	sp, #232	; 0xe8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c8ae:	f640 030f 	movw	r3, #2063	; 0x80f
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d11b      	bne.n	800c8f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c4:	f003 0320 	and.w	r3, r3, #32
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d015      	beq.n	800c8f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d105      	bne.n	800c8e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d009      	beq.n	800c8f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 835a 	beq.w	800cfa2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	4798      	blx	r3
      }
      return;
 800c8f6:	e354      	b.n	800cfa2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c8f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 811f 	beq.w	800cb40 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c902:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c906:	4b8b      	ldr	r3, [pc, #556]	; (800cb34 <HAL_UART_IRQHandler+0x2b0>)
 800c908:	4013      	ands	r3, r2
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c90e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c912:	4b89      	ldr	r3, [pc, #548]	; (800cb38 <HAL_UART_IRQHandler+0x2b4>)
 800c914:	4013      	ands	r3, r2
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 8112 	beq.w	800cb40 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d011      	beq.n	800c94c <HAL_UART_IRQHandler+0xc8>
 800c928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00b      	beq.n	800c94c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2201      	movs	r2, #1
 800c93a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c942:	f043 0201 	orr.w	r2, r3, #1
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c950:	f003 0302 	and.w	r3, r3, #2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d011      	beq.n	800c97c <HAL_UART_IRQHandler+0xf8>
 800c958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c95c:	f003 0301 	and.w	r3, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00b      	beq.n	800c97c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2202      	movs	r2, #2
 800c96a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c972:	f043 0204 	orr.w	r2, r3, #4
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c980:	f003 0304 	and.w	r3, r3, #4
 800c984:	2b00      	cmp	r3, #0
 800c986:	d011      	beq.n	800c9ac <HAL_UART_IRQHandler+0x128>
 800c988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2204      	movs	r2, #4
 800c99a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a2:	f043 0202 	orr.w	r2, r3, #2
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b0:	f003 0308 	and.w	r3, r3, #8
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d017      	beq.n	800c9e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9bc:	f003 0320 	and.w	r3, r3, #32
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d105      	bne.n	800c9d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c9c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c9c8:	4b5a      	ldr	r3, [pc, #360]	; (800cb34 <HAL_UART_IRQHandler+0x2b0>)
 800c9ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2208      	movs	r2, #8
 800c9d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9de:	f043 0208 	orr.w	r2, r3, #8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d012      	beq.n	800ca1a <HAL_UART_IRQHandler+0x196>
 800c9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00c      	beq.n	800ca1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca10:	f043 0220 	orr.w	r2, r3, #32
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 82c0 	beq.w	800cfa6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2a:	f003 0320 	and.w	r3, r3, #32
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d013      	beq.n	800ca5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca36:	f003 0320 	and.w	r3, r3, #32
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d105      	bne.n	800ca4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d007      	beq.n	800ca5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d003      	beq.n	800ca5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6e:	2b40      	cmp	r3, #64	; 0x40
 800ca70:	d005      	beq.n	800ca7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d04f      	beq.n	800cb1e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fbd4 	bl	800e22c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca8e:	2b40      	cmp	r3, #64	; 0x40
 800ca90:	d141      	bne.n	800cb16 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3308      	adds	r3, #8
 800ca98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800caa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800caac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3308      	adds	r3, #8
 800caba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cabe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800caca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cace:	e841 2300 	strex	r3, r2, [r1]
 800cad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1d9      	bne.n	800ca92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d013      	beq.n	800cb0e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caea:	4a14      	ldr	r2, [pc, #80]	; (800cb3c <HAL_UART_IRQHandler+0x2b8>)
 800caec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7f9 fe0e 	bl	8006714 <HAL_DMA_Abort_IT>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d017      	beq.n	800cb2e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb0c:	e00f      	b.n	800cb2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7f6 fe68 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb14:	e00b      	b.n	800cb2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7f6 fe64 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb1c:	e007      	b.n	800cb2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7f6 fe60 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cb2c:	e23b      	b.n	800cfa6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb2e:	bf00      	nop
    return;
 800cb30:	e239      	b.n	800cfa6 <HAL_UART_IRQHandler+0x722>
 800cb32:	bf00      	nop
 800cb34:	10000001 	.word	0x10000001
 800cb38:	04000120 	.word	0x04000120
 800cb3c:	0800e585 	.word	0x0800e585

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	f040 81ce 	bne.w	800cee6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 81c7 	beq.w	800cee6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb5c:	f003 0310 	and.w	r3, r3, #16
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 81c0 	beq.w	800cee6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2210      	movs	r2, #16
 800cb6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb78:	2b40      	cmp	r3, #64	; 0x40
 800cb7a:	f040 813b 	bne.w	800cdf4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a8b      	ldr	r2, [pc, #556]	; (800cdb4 <HAL_UART_IRQHandler+0x530>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d059      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a89      	ldr	r2, [pc, #548]	; (800cdb8 <HAL_UART_IRQHandler+0x534>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d053      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a87      	ldr	r2, [pc, #540]	; (800cdbc <HAL_UART_IRQHandler+0x538>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d04d      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a85      	ldr	r2, [pc, #532]	; (800cdc0 <HAL_UART_IRQHandler+0x53c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d047      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a83      	ldr	r2, [pc, #524]	; (800cdc4 <HAL_UART_IRQHandler+0x540>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d041      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a81      	ldr	r2, [pc, #516]	; (800cdc8 <HAL_UART_IRQHandler+0x544>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d03b      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a7f      	ldr	r2, [pc, #508]	; (800cdcc <HAL_UART_IRQHandler+0x548>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d035      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a7d      	ldr	r2, [pc, #500]	; (800cdd0 <HAL_UART_IRQHandler+0x54c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d02f      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a7b      	ldr	r2, [pc, #492]	; (800cdd4 <HAL_UART_IRQHandler+0x550>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d029      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a79      	ldr	r2, [pc, #484]	; (800cdd8 <HAL_UART_IRQHandler+0x554>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d023      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a77      	ldr	r2, [pc, #476]	; (800cddc <HAL_UART_IRQHandler+0x558>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d01d      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a75      	ldr	r2, [pc, #468]	; (800cde0 <HAL_UART_IRQHandler+0x55c>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d017      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a73      	ldr	r2, [pc, #460]	; (800cde4 <HAL_UART_IRQHandler+0x560>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d011      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a71      	ldr	r2, [pc, #452]	; (800cde8 <HAL_UART_IRQHandler+0x564>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d00b      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a6f      	ldr	r2, [pc, #444]	; (800cdec <HAL_UART_IRQHandler+0x568>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d005      	beq.n	800cc3e <HAL_UART_IRQHandler+0x3ba>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a6d      	ldr	r2, [pc, #436]	; (800cdf0 <HAL_UART_IRQHandler+0x56c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d105      	bne.n	800cc4a <HAL_UART_IRQHandler+0x3c6>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	e004      	b.n	800cc54 <HAL_UART_IRQHandler+0x3d0>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 81a4 	beq.w	800cfaa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	f080 819c 	bcs.w	800cfaa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc86:	f000 8086 	beq.w	800cd96 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ccb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ccb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ccc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1da      	bne.n	800cc8a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3308      	adds	r3, #8
 800ccda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cce6:	f023 0301 	bic.w	r3, r3, #1
 800ccea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ccf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ccfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e1      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd1a:	e853 3f00 	ldrex	r3, [r3]
 800cd1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd34:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd3c:	e841 2300 	strex	r3, r2, [r1]
 800cd40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e3      	bne.n	800cd10 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd5e:	e853 3f00 	ldrex	r3, [r3]
 800cd62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd66:	f023 0310 	bic.w	r3, r3, #16
 800cd6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd78:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd80:	e841 2300 	strex	r3, r2, [r1]
 800cd84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1e4      	bne.n	800cd56 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7f9 f9a1 	bl	80060d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	4619      	mov	r1, r3
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f926 	bl	800cffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdb0:	e0fb      	b.n	800cfaa <HAL_UART_IRQHandler+0x726>
 800cdb2:	bf00      	nop
 800cdb4:	40020010 	.word	0x40020010
 800cdb8:	40020028 	.word	0x40020028
 800cdbc:	40020040 	.word	0x40020040
 800cdc0:	40020058 	.word	0x40020058
 800cdc4:	40020070 	.word	0x40020070
 800cdc8:	40020088 	.word	0x40020088
 800cdcc:	400200a0 	.word	0x400200a0
 800cdd0:	400200b8 	.word	0x400200b8
 800cdd4:	40020410 	.word	0x40020410
 800cdd8:	40020428 	.word	0x40020428
 800cddc:	40020440 	.word	0x40020440
 800cde0:	40020458 	.word	0x40020458
 800cde4:	40020470 	.word	0x40020470
 800cde8:	40020488 	.word	0x40020488
 800cdec:	400204a0 	.word	0x400204a0
 800cdf0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 80cc 	beq.w	800cfae <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ce16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 80c7 	beq.w	800cfae <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	e853 3f00 	ldrex	r3, [r3]
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ce42:	647b      	str	r3, [r7, #68]	; 0x44
 800ce44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce4a:	e841 2300 	strex	r3, r2, [r1]
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e4      	bne.n	800ce20 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	623b      	str	r3, [r7, #32]
   return(result);
 800ce66:	6a3a      	ldr	r2, [r7, #32]
 800ce68:	4b54      	ldr	r3, [pc, #336]	; (800cfbc <HAL_UART_IRQHandler+0x738>)
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3308      	adds	r3, #8
 800ce76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e3      	bne.n	800ce56 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f023 0310 	bic.w	r3, r3, #16
 800ceb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	461a      	mov	r2, r3
 800cec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec8:	69b9      	ldr	r1, [r7, #24]
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	e841 2300 	strex	r3, r2, [r1]
 800ced0:	617b      	str	r3, [r7, #20]
   return(result);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e4      	bne.n	800cea2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ced8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f88c 	bl	800cffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cee4:	e063      	b.n	800cfae <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00e      	beq.n	800cf10 <HAL_UART_IRQHandler+0x68c>
 800cef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d008      	beq.n	800cf10 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cf06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f001 fb7c 	bl	800e606 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf0e:	e051      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d014      	beq.n	800cf46 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d105      	bne.n	800cf34 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d008      	beq.n	800cf46 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d03a      	beq.n	800cfb2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	4798      	blx	r3
    }
    return;
 800cf44:	e035      	b.n	800cfb2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <HAL_UART_IRQHandler+0x6e2>
 800cf52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f001 fb26 	bl	800e5b0 <UART_EndTransmit_IT>
    return;
 800cf64:	e026      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <HAL_UART_IRQHandler+0x702>
 800cf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f001 fb55 	bl	800e62e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf84:	e016      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d010      	beq.n	800cfb4 <HAL_UART_IRQHandler+0x730>
 800cf92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	da0c      	bge.n	800cfb4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f001 fb3d 	bl	800e61a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfa0:	e008      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
      return;
 800cfa2:	bf00      	nop
 800cfa4:	e006      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
    return;
 800cfa6:	bf00      	nop
 800cfa8:	e004      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
      return;
 800cfaa:	bf00      	nop
 800cfac:	e002      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
      return;
 800cfae:	bf00      	nop
 800cfb0:	e000      	b.n	800cfb4 <HAL_UART_IRQHandler+0x730>
    return;
 800cfb2:	bf00      	nop
  }
}
 800cfb4:	37e8      	adds	r7, #232	; 0xe8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	effffffe 	.word	0xeffffffe

0800cfc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d018:	b092      	sub	sp, #72	; 0x48
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	689a      	ldr	r2, [r3, #8]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	431a      	orrs	r2, r3
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	4313      	orrs	r3, r2
 800d03a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	4bbe      	ldr	r3, [pc, #760]	; (800d33c <UART_SetConfig+0x328>)
 800d044:	4013      	ands	r3, r2
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	6812      	ldr	r2, [r2, #0]
 800d04a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d04c:	430b      	orrs	r3, r1
 800d04e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	430a      	orrs	r2, r1
 800d064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4ab3      	ldr	r2, [pc, #716]	; (800d340 <UART_SetConfig+0x32c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d004      	beq.n	800d080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d07c:	4313      	orrs	r3, r2
 800d07e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	689a      	ldr	r2, [r3, #8]
 800d086:	4baf      	ldr	r3, [pc, #700]	; (800d344 <UART_SetConfig+0x330>)
 800d088:	4013      	ands	r3, r2
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	6812      	ldr	r2, [r2, #0]
 800d08e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d090:	430b      	orrs	r3, r1
 800d092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	f023 010f 	bic.w	r1, r3, #15
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4aa6      	ldr	r2, [pc, #664]	; (800d348 <UART_SetConfig+0x334>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d177      	bne.n	800d1a4 <UART_SetConfig+0x190>
 800d0b4:	4ba5      	ldr	r3, [pc, #660]	; (800d34c <UART_SetConfig+0x338>)
 800d0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0bc:	2b28      	cmp	r3, #40	; 0x28
 800d0be:	d86d      	bhi.n	800d19c <UART_SetConfig+0x188>
 800d0c0:	a201      	add	r2, pc, #4	; (adr r2, 800d0c8 <UART_SetConfig+0xb4>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d16d 	.word	0x0800d16d
 800d0cc:	0800d19d 	.word	0x0800d19d
 800d0d0:	0800d19d 	.word	0x0800d19d
 800d0d4:	0800d19d 	.word	0x0800d19d
 800d0d8:	0800d19d 	.word	0x0800d19d
 800d0dc:	0800d19d 	.word	0x0800d19d
 800d0e0:	0800d19d 	.word	0x0800d19d
 800d0e4:	0800d19d 	.word	0x0800d19d
 800d0e8:	0800d175 	.word	0x0800d175
 800d0ec:	0800d19d 	.word	0x0800d19d
 800d0f0:	0800d19d 	.word	0x0800d19d
 800d0f4:	0800d19d 	.word	0x0800d19d
 800d0f8:	0800d19d 	.word	0x0800d19d
 800d0fc:	0800d19d 	.word	0x0800d19d
 800d100:	0800d19d 	.word	0x0800d19d
 800d104:	0800d19d 	.word	0x0800d19d
 800d108:	0800d17d 	.word	0x0800d17d
 800d10c:	0800d19d 	.word	0x0800d19d
 800d110:	0800d19d 	.word	0x0800d19d
 800d114:	0800d19d 	.word	0x0800d19d
 800d118:	0800d19d 	.word	0x0800d19d
 800d11c:	0800d19d 	.word	0x0800d19d
 800d120:	0800d19d 	.word	0x0800d19d
 800d124:	0800d19d 	.word	0x0800d19d
 800d128:	0800d185 	.word	0x0800d185
 800d12c:	0800d19d 	.word	0x0800d19d
 800d130:	0800d19d 	.word	0x0800d19d
 800d134:	0800d19d 	.word	0x0800d19d
 800d138:	0800d19d 	.word	0x0800d19d
 800d13c:	0800d19d 	.word	0x0800d19d
 800d140:	0800d19d 	.word	0x0800d19d
 800d144:	0800d19d 	.word	0x0800d19d
 800d148:	0800d18d 	.word	0x0800d18d
 800d14c:	0800d19d 	.word	0x0800d19d
 800d150:	0800d19d 	.word	0x0800d19d
 800d154:	0800d19d 	.word	0x0800d19d
 800d158:	0800d19d 	.word	0x0800d19d
 800d15c:	0800d19d 	.word	0x0800d19d
 800d160:	0800d19d 	.word	0x0800d19d
 800d164:	0800d19d 	.word	0x0800d19d
 800d168:	0800d195 	.word	0x0800d195
 800d16c:	2301      	movs	r3, #1
 800d16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d172:	e326      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d174:	2304      	movs	r3, #4
 800d176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17a:	e322      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d17c:	2308      	movs	r3, #8
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d182:	e31e      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d184:	2310      	movs	r3, #16
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18a:	e31a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d18c:	2320      	movs	r3, #32
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d192:	e316      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d194:	2340      	movs	r3, #64	; 0x40
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19a:	e312      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d19c:	2380      	movs	r3, #128	; 0x80
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a2:	e30e      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a69      	ldr	r2, [pc, #420]	; (800d350 <UART_SetConfig+0x33c>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d130      	bne.n	800d210 <UART_SetConfig+0x1fc>
 800d1ae:	4b67      	ldr	r3, [pc, #412]	; (800d34c <UART_SetConfig+0x338>)
 800d1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	2b05      	cmp	r3, #5
 800d1b8:	d826      	bhi.n	800d208 <UART_SetConfig+0x1f4>
 800d1ba:	a201      	add	r2, pc, #4	; (adr r2, 800d1c0 <UART_SetConfig+0x1ac>)
 800d1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c0:	0800d1d9 	.word	0x0800d1d9
 800d1c4:	0800d1e1 	.word	0x0800d1e1
 800d1c8:	0800d1e9 	.word	0x0800d1e9
 800d1cc:	0800d1f1 	.word	0x0800d1f1
 800d1d0:	0800d1f9 	.word	0x0800d1f9
 800d1d4:	0800d201 	.word	0x0800d201
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1de:	e2f0      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d1e0:	2304      	movs	r3, #4
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e6:	e2ec      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d1e8:	2308      	movs	r3, #8
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ee:	e2e8      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d1f0:	2310      	movs	r3, #16
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f6:	e2e4      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d1f8:	2320      	movs	r3, #32
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fe:	e2e0      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d200:	2340      	movs	r3, #64	; 0x40
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d206:	e2dc      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d208:	2380      	movs	r3, #128	; 0x80
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20e:	e2d8      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a4f      	ldr	r2, [pc, #316]	; (800d354 <UART_SetConfig+0x340>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d130      	bne.n	800d27c <UART_SetConfig+0x268>
 800d21a:	4b4c      	ldr	r3, [pc, #304]	; (800d34c <UART_SetConfig+0x338>)
 800d21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d21e:	f003 0307 	and.w	r3, r3, #7
 800d222:	2b05      	cmp	r3, #5
 800d224:	d826      	bhi.n	800d274 <UART_SetConfig+0x260>
 800d226:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <UART_SetConfig+0x218>)
 800d228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22c:	0800d245 	.word	0x0800d245
 800d230:	0800d24d 	.word	0x0800d24d
 800d234:	0800d255 	.word	0x0800d255
 800d238:	0800d25d 	.word	0x0800d25d
 800d23c:	0800d265 	.word	0x0800d265
 800d240:	0800d26d 	.word	0x0800d26d
 800d244:	2300      	movs	r3, #0
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e2ba      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d24c:	2304      	movs	r3, #4
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d252:	e2b6      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d254:	2308      	movs	r3, #8
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e2b2      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d25c:	2310      	movs	r3, #16
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e2ae      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d264:	2320      	movs	r3, #32
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e2aa      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d26c:	2340      	movs	r3, #64	; 0x40
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d272:	e2a6      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d274:	2380      	movs	r3, #128	; 0x80
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27a:	e2a2      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a35      	ldr	r2, [pc, #212]	; (800d358 <UART_SetConfig+0x344>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d130      	bne.n	800d2e8 <UART_SetConfig+0x2d4>
 800d286:	4b31      	ldr	r3, [pc, #196]	; (800d34c <UART_SetConfig+0x338>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	f003 0307 	and.w	r3, r3, #7
 800d28e:	2b05      	cmp	r3, #5
 800d290:	d826      	bhi.n	800d2e0 <UART_SetConfig+0x2cc>
 800d292:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <UART_SetConfig+0x284>)
 800d294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d298:	0800d2b1 	.word	0x0800d2b1
 800d29c:	0800d2b9 	.word	0x0800d2b9
 800d2a0:	0800d2c1 	.word	0x0800d2c1
 800d2a4:	0800d2c9 	.word	0x0800d2c9
 800d2a8:	0800d2d1 	.word	0x0800d2d1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e284      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e280      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e27c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e278      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e274      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e270      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e26c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a1b      	ldr	r2, [pc, #108]	; (800d35c <UART_SetConfig+0x348>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d142      	bne.n	800d378 <UART_SetConfig+0x364>
 800d2f2:	4b16      	ldr	r3, [pc, #88]	; (800d34c <UART_SetConfig+0x338>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d838      	bhi.n	800d370 <UART_SetConfig+0x35c>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <UART_SetConfig+0x2f0>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d361 	.word	0x0800d361
 800d318:	0800d369 	.word	0x0800d369
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e24e      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e24a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e246      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e242      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d33c:	cfff69f3 	.word	0xcfff69f3
 800d340:	58000c00 	.word	0x58000c00
 800d344:	11fff4ff 	.word	0x11fff4ff
 800d348:	40011000 	.word	0x40011000
 800d34c:	58024400 	.word	0x58024400
 800d350:	40004400 	.word	0x40004400
 800d354:	40004800 	.word	0x40004800
 800d358:	40004c00 	.word	0x40004c00
 800d35c:	40005000 	.word	0x40005000
 800d360:	2320      	movs	r3, #32
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d366:	e22c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d368:	2340      	movs	r3, #64	; 0x40
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36e:	e228      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d370:	2380      	movs	r3, #128	; 0x80
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d376:	e224      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4ab1      	ldr	r2, [pc, #708]	; (800d644 <UART_SetConfig+0x630>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d176      	bne.n	800d470 <UART_SetConfig+0x45c>
 800d382:	4bb1      	ldr	r3, [pc, #708]	; (800d648 <UART_SetConfig+0x634>)
 800d384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d38a:	2b28      	cmp	r3, #40	; 0x28
 800d38c:	d86c      	bhi.n	800d468 <UART_SetConfig+0x454>
 800d38e:	a201      	add	r2, pc, #4	; (adr r2, 800d394 <UART_SetConfig+0x380>)
 800d390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d394:	0800d439 	.word	0x0800d439
 800d398:	0800d469 	.word	0x0800d469
 800d39c:	0800d469 	.word	0x0800d469
 800d3a0:	0800d469 	.word	0x0800d469
 800d3a4:	0800d469 	.word	0x0800d469
 800d3a8:	0800d469 	.word	0x0800d469
 800d3ac:	0800d469 	.word	0x0800d469
 800d3b0:	0800d469 	.word	0x0800d469
 800d3b4:	0800d441 	.word	0x0800d441
 800d3b8:	0800d469 	.word	0x0800d469
 800d3bc:	0800d469 	.word	0x0800d469
 800d3c0:	0800d469 	.word	0x0800d469
 800d3c4:	0800d469 	.word	0x0800d469
 800d3c8:	0800d469 	.word	0x0800d469
 800d3cc:	0800d469 	.word	0x0800d469
 800d3d0:	0800d469 	.word	0x0800d469
 800d3d4:	0800d449 	.word	0x0800d449
 800d3d8:	0800d469 	.word	0x0800d469
 800d3dc:	0800d469 	.word	0x0800d469
 800d3e0:	0800d469 	.word	0x0800d469
 800d3e4:	0800d469 	.word	0x0800d469
 800d3e8:	0800d469 	.word	0x0800d469
 800d3ec:	0800d469 	.word	0x0800d469
 800d3f0:	0800d469 	.word	0x0800d469
 800d3f4:	0800d451 	.word	0x0800d451
 800d3f8:	0800d469 	.word	0x0800d469
 800d3fc:	0800d469 	.word	0x0800d469
 800d400:	0800d469 	.word	0x0800d469
 800d404:	0800d469 	.word	0x0800d469
 800d408:	0800d469 	.word	0x0800d469
 800d40c:	0800d469 	.word	0x0800d469
 800d410:	0800d469 	.word	0x0800d469
 800d414:	0800d459 	.word	0x0800d459
 800d418:	0800d469 	.word	0x0800d469
 800d41c:	0800d469 	.word	0x0800d469
 800d420:	0800d469 	.word	0x0800d469
 800d424:	0800d469 	.word	0x0800d469
 800d428:	0800d469 	.word	0x0800d469
 800d42c:	0800d469 	.word	0x0800d469
 800d430:	0800d469 	.word	0x0800d469
 800d434:	0800d461 	.word	0x0800d461
 800d438:	2301      	movs	r3, #1
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e1c0      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d440:	2304      	movs	r3, #4
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e1bc      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d448:	2308      	movs	r3, #8
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e1b8      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d450:	2310      	movs	r3, #16
 800d452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d456:	e1b4      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d458:	2320      	movs	r3, #32
 800d45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45e:	e1b0      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d460:	2340      	movs	r3, #64	; 0x40
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e1ac      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d468:	2380      	movs	r3, #128	; 0x80
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e1a8      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a75      	ldr	r2, [pc, #468]	; (800d64c <UART_SetConfig+0x638>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d130      	bne.n	800d4dc <UART_SetConfig+0x4c8>
 800d47a:	4b73      	ldr	r3, [pc, #460]	; (800d648 <UART_SetConfig+0x634>)
 800d47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47e:	f003 0307 	and.w	r3, r3, #7
 800d482:	2b05      	cmp	r3, #5
 800d484:	d826      	bhi.n	800d4d4 <UART_SetConfig+0x4c0>
 800d486:	a201      	add	r2, pc, #4	; (adr r2, 800d48c <UART_SetConfig+0x478>)
 800d488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48c:	0800d4a5 	.word	0x0800d4a5
 800d490:	0800d4ad 	.word	0x0800d4ad
 800d494:	0800d4b5 	.word	0x0800d4b5
 800d498:	0800d4bd 	.word	0x0800d4bd
 800d49c:	0800d4c5 	.word	0x0800d4c5
 800d4a0:	0800d4cd 	.word	0x0800d4cd
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e18a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4ac:	2304      	movs	r3, #4
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e186      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4b4:	2308      	movs	r3, #8
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e182      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4bc:	2310      	movs	r3, #16
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c2:	e17e      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4c4:	2320      	movs	r3, #32
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ca:	e17a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4cc:	2340      	movs	r3, #64	; 0x40
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e176      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4d4:	2380      	movs	r3, #128	; 0x80
 800d4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4da:	e172      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a5b      	ldr	r2, [pc, #364]	; (800d650 <UART_SetConfig+0x63c>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d130      	bne.n	800d548 <UART_SetConfig+0x534>
 800d4e6:	4b58      	ldr	r3, [pc, #352]	; (800d648 <UART_SetConfig+0x634>)
 800d4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ea:	f003 0307 	and.w	r3, r3, #7
 800d4ee:	2b05      	cmp	r3, #5
 800d4f0:	d826      	bhi.n	800d540 <UART_SetConfig+0x52c>
 800d4f2:	a201      	add	r2, pc, #4	; (adr r2, 800d4f8 <UART_SetConfig+0x4e4>)
 800d4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f8:	0800d511 	.word	0x0800d511
 800d4fc:	0800d519 	.word	0x0800d519
 800d500:	0800d521 	.word	0x0800d521
 800d504:	0800d529 	.word	0x0800d529
 800d508:	0800d531 	.word	0x0800d531
 800d50c:	0800d539 	.word	0x0800d539
 800d510:	2300      	movs	r3, #0
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d516:	e154      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d518:	2304      	movs	r3, #4
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51e:	e150      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d520:	2308      	movs	r3, #8
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e14c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d528:	2310      	movs	r3, #16
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e148      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d530:	2320      	movs	r3, #32
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e144      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d538:	2340      	movs	r3, #64	; 0x40
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e140      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d540:	2380      	movs	r3, #128	; 0x80
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e13c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a41      	ldr	r2, [pc, #260]	; (800d654 <UART_SetConfig+0x640>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	f040 8082 	bne.w	800d658 <UART_SetConfig+0x644>
 800d554:	4b3c      	ldr	r3, [pc, #240]	; (800d648 <UART_SetConfig+0x634>)
 800d556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d55c:	2b28      	cmp	r3, #40	; 0x28
 800d55e:	d86d      	bhi.n	800d63c <UART_SetConfig+0x628>
 800d560:	a201      	add	r2, pc, #4	; (adr r2, 800d568 <UART_SetConfig+0x554>)
 800d562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d566:	bf00      	nop
 800d568:	0800d60d 	.word	0x0800d60d
 800d56c:	0800d63d 	.word	0x0800d63d
 800d570:	0800d63d 	.word	0x0800d63d
 800d574:	0800d63d 	.word	0x0800d63d
 800d578:	0800d63d 	.word	0x0800d63d
 800d57c:	0800d63d 	.word	0x0800d63d
 800d580:	0800d63d 	.word	0x0800d63d
 800d584:	0800d63d 	.word	0x0800d63d
 800d588:	0800d615 	.word	0x0800d615
 800d58c:	0800d63d 	.word	0x0800d63d
 800d590:	0800d63d 	.word	0x0800d63d
 800d594:	0800d63d 	.word	0x0800d63d
 800d598:	0800d63d 	.word	0x0800d63d
 800d59c:	0800d63d 	.word	0x0800d63d
 800d5a0:	0800d63d 	.word	0x0800d63d
 800d5a4:	0800d63d 	.word	0x0800d63d
 800d5a8:	0800d61d 	.word	0x0800d61d
 800d5ac:	0800d63d 	.word	0x0800d63d
 800d5b0:	0800d63d 	.word	0x0800d63d
 800d5b4:	0800d63d 	.word	0x0800d63d
 800d5b8:	0800d63d 	.word	0x0800d63d
 800d5bc:	0800d63d 	.word	0x0800d63d
 800d5c0:	0800d63d 	.word	0x0800d63d
 800d5c4:	0800d63d 	.word	0x0800d63d
 800d5c8:	0800d625 	.word	0x0800d625
 800d5cc:	0800d63d 	.word	0x0800d63d
 800d5d0:	0800d63d 	.word	0x0800d63d
 800d5d4:	0800d63d 	.word	0x0800d63d
 800d5d8:	0800d63d 	.word	0x0800d63d
 800d5dc:	0800d63d 	.word	0x0800d63d
 800d5e0:	0800d63d 	.word	0x0800d63d
 800d5e4:	0800d63d 	.word	0x0800d63d
 800d5e8:	0800d62d 	.word	0x0800d62d
 800d5ec:	0800d63d 	.word	0x0800d63d
 800d5f0:	0800d63d 	.word	0x0800d63d
 800d5f4:	0800d63d 	.word	0x0800d63d
 800d5f8:	0800d63d 	.word	0x0800d63d
 800d5fc:	0800d63d 	.word	0x0800d63d
 800d600:	0800d63d 	.word	0x0800d63d
 800d604:	0800d63d 	.word	0x0800d63d
 800d608:	0800d635 	.word	0x0800d635
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d612:	e0d6      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d614:	2304      	movs	r3, #4
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61a:	e0d2      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d61c:	2308      	movs	r3, #8
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d622:	e0ce      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d624:	2310      	movs	r3, #16
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e0ca      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d62c:	2320      	movs	r3, #32
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e0c6      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d634:	2340      	movs	r3, #64	; 0x40
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e0c2      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d63c:	2380      	movs	r3, #128	; 0x80
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d642:	e0be      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d644:	40011400 	.word	0x40011400
 800d648:	58024400 	.word	0x58024400
 800d64c:	40007800 	.word	0x40007800
 800d650:	40007c00 	.word	0x40007c00
 800d654:	40011800 	.word	0x40011800
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4aad      	ldr	r2, [pc, #692]	; (800d914 <UART_SetConfig+0x900>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d176      	bne.n	800d750 <UART_SetConfig+0x73c>
 800d662:	4bad      	ldr	r3, [pc, #692]	; (800d918 <UART_SetConfig+0x904>)
 800d664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d66a:	2b28      	cmp	r3, #40	; 0x28
 800d66c:	d86c      	bhi.n	800d748 <UART_SetConfig+0x734>
 800d66e:	a201      	add	r2, pc, #4	; (adr r2, 800d674 <UART_SetConfig+0x660>)
 800d670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d674:	0800d719 	.word	0x0800d719
 800d678:	0800d749 	.word	0x0800d749
 800d67c:	0800d749 	.word	0x0800d749
 800d680:	0800d749 	.word	0x0800d749
 800d684:	0800d749 	.word	0x0800d749
 800d688:	0800d749 	.word	0x0800d749
 800d68c:	0800d749 	.word	0x0800d749
 800d690:	0800d749 	.word	0x0800d749
 800d694:	0800d721 	.word	0x0800d721
 800d698:	0800d749 	.word	0x0800d749
 800d69c:	0800d749 	.word	0x0800d749
 800d6a0:	0800d749 	.word	0x0800d749
 800d6a4:	0800d749 	.word	0x0800d749
 800d6a8:	0800d749 	.word	0x0800d749
 800d6ac:	0800d749 	.word	0x0800d749
 800d6b0:	0800d749 	.word	0x0800d749
 800d6b4:	0800d729 	.word	0x0800d729
 800d6b8:	0800d749 	.word	0x0800d749
 800d6bc:	0800d749 	.word	0x0800d749
 800d6c0:	0800d749 	.word	0x0800d749
 800d6c4:	0800d749 	.word	0x0800d749
 800d6c8:	0800d749 	.word	0x0800d749
 800d6cc:	0800d749 	.word	0x0800d749
 800d6d0:	0800d749 	.word	0x0800d749
 800d6d4:	0800d731 	.word	0x0800d731
 800d6d8:	0800d749 	.word	0x0800d749
 800d6dc:	0800d749 	.word	0x0800d749
 800d6e0:	0800d749 	.word	0x0800d749
 800d6e4:	0800d749 	.word	0x0800d749
 800d6e8:	0800d749 	.word	0x0800d749
 800d6ec:	0800d749 	.word	0x0800d749
 800d6f0:	0800d749 	.word	0x0800d749
 800d6f4:	0800d739 	.word	0x0800d739
 800d6f8:	0800d749 	.word	0x0800d749
 800d6fc:	0800d749 	.word	0x0800d749
 800d700:	0800d749 	.word	0x0800d749
 800d704:	0800d749 	.word	0x0800d749
 800d708:	0800d749 	.word	0x0800d749
 800d70c:	0800d749 	.word	0x0800d749
 800d710:	0800d749 	.word	0x0800d749
 800d714:	0800d741 	.word	0x0800d741
 800d718:	2301      	movs	r3, #1
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e050      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d720:	2304      	movs	r3, #4
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e04c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d728:	2308      	movs	r3, #8
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e048      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d730:	2310      	movs	r3, #16
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e044      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d738:	2320      	movs	r3, #32
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e040      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d740:	2340      	movs	r3, #64	; 0x40
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e03c      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d748:	2380      	movs	r3, #128	; 0x80
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e038      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a71      	ldr	r2, [pc, #452]	; (800d91c <UART_SetConfig+0x908>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d130      	bne.n	800d7bc <UART_SetConfig+0x7a8>
 800d75a:	4b6f      	ldr	r3, [pc, #444]	; (800d918 <UART_SetConfig+0x904>)
 800d75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d75e:	f003 0307 	and.w	r3, r3, #7
 800d762:	2b05      	cmp	r3, #5
 800d764:	d826      	bhi.n	800d7b4 <UART_SetConfig+0x7a0>
 800d766:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <UART_SetConfig+0x758>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d785 	.word	0x0800d785
 800d770:	0800d78d 	.word	0x0800d78d
 800d774:	0800d795 	.word	0x0800d795
 800d778:	0800d79d 	.word	0x0800d79d
 800d77c:	0800d7a5 	.word	0x0800d7a5
 800d780:	0800d7ad 	.word	0x0800d7ad
 800d784:	2302      	movs	r3, #2
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e01a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d78c:	2304      	movs	r3, #4
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e016      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d794:	2308      	movs	r3, #8
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e012      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d79c:	2310      	movs	r3, #16
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e00e      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e00a      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d7ac:	2340      	movs	r3, #64	; 0x40
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e006      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d7b4:	2380      	movs	r3, #128	; 0x80
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e002      	b.n	800d7c2 <UART_SetConfig+0x7ae>
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a55      	ldr	r2, [pc, #340]	; (800d91c <UART_SetConfig+0x908>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	f040 80f8 	bne.w	800d9be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7d2:	2b20      	cmp	r3, #32
 800d7d4:	dc46      	bgt.n	800d864 <UART_SetConfig+0x850>
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	db75      	blt.n	800d8c6 <UART_SetConfig+0x8b2>
 800d7da:	3b02      	subs	r3, #2
 800d7dc:	2b1e      	cmp	r3, #30
 800d7de:	d872      	bhi.n	800d8c6 <UART_SetConfig+0x8b2>
 800d7e0:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <UART_SetConfig+0x7d4>)
 800d7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e6:	bf00      	nop
 800d7e8:	0800d86b 	.word	0x0800d86b
 800d7ec:	0800d8c7 	.word	0x0800d8c7
 800d7f0:	0800d873 	.word	0x0800d873
 800d7f4:	0800d8c7 	.word	0x0800d8c7
 800d7f8:	0800d8c7 	.word	0x0800d8c7
 800d7fc:	0800d8c7 	.word	0x0800d8c7
 800d800:	0800d883 	.word	0x0800d883
 800d804:	0800d8c7 	.word	0x0800d8c7
 800d808:	0800d8c7 	.word	0x0800d8c7
 800d80c:	0800d8c7 	.word	0x0800d8c7
 800d810:	0800d8c7 	.word	0x0800d8c7
 800d814:	0800d8c7 	.word	0x0800d8c7
 800d818:	0800d8c7 	.word	0x0800d8c7
 800d81c:	0800d8c7 	.word	0x0800d8c7
 800d820:	0800d893 	.word	0x0800d893
 800d824:	0800d8c7 	.word	0x0800d8c7
 800d828:	0800d8c7 	.word	0x0800d8c7
 800d82c:	0800d8c7 	.word	0x0800d8c7
 800d830:	0800d8c7 	.word	0x0800d8c7
 800d834:	0800d8c7 	.word	0x0800d8c7
 800d838:	0800d8c7 	.word	0x0800d8c7
 800d83c:	0800d8c7 	.word	0x0800d8c7
 800d840:	0800d8c7 	.word	0x0800d8c7
 800d844:	0800d8c7 	.word	0x0800d8c7
 800d848:	0800d8c7 	.word	0x0800d8c7
 800d84c:	0800d8c7 	.word	0x0800d8c7
 800d850:	0800d8c7 	.word	0x0800d8c7
 800d854:	0800d8c7 	.word	0x0800d8c7
 800d858:	0800d8c7 	.word	0x0800d8c7
 800d85c:	0800d8c7 	.word	0x0800d8c7
 800d860:	0800d8b9 	.word	0x0800d8b9
 800d864:	2b40      	cmp	r3, #64	; 0x40
 800d866:	d02a      	beq.n	800d8be <UART_SetConfig+0x8aa>
 800d868:	e02d      	b.n	800d8c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d86a:	f7fc fe01 	bl	800a470 <HAL_RCCEx_GetD3PCLK1Freq>
 800d86e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d870:	e02f      	b.n	800d8d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d876:	4618      	mov	r0, r3
 800d878:	f7fc fe10 	bl	800a49c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d880:	e027      	b.n	800d8d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d882:	f107 0318 	add.w	r3, r7, #24
 800d886:	4618      	mov	r0, r3
 800d888:	f7fc ff5c 	bl	800a744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d890:	e01f      	b.n	800d8d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d892:	4b21      	ldr	r3, [pc, #132]	; (800d918 <UART_SetConfig+0x904>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d009      	beq.n	800d8b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d89e:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <UART_SetConfig+0x904>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	08db      	lsrs	r3, r3, #3
 800d8a4:	f003 0303 	and.w	r3, r3, #3
 800d8a8:	4a1d      	ldr	r2, [pc, #116]	; (800d920 <UART_SetConfig+0x90c>)
 800d8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8b0:	e00f      	b.n	800d8d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d8b2:	4b1b      	ldr	r3, [pc, #108]	; (800d920 <UART_SetConfig+0x90c>)
 800d8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8b6:	e00c      	b.n	800d8d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8b8:	4b1a      	ldr	r3, [pc, #104]	; (800d924 <UART_SetConfig+0x910>)
 800d8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8bc:	e009      	b.n	800d8d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8c4:	e005      	b.n	800d8d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f000 81ee 	beq.w	800dcb6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	4a12      	ldr	r2, [pc, #72]	; (800d928 <UART_SetConfig+0x914>)
 800d8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ec:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	4413      	add	r3, r2
 800d8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d305      	bcc.n	800d90a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d906:	429a      	cmp	r2, r3
 800d908:	d910      	bls.n	800d92c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d910:	e1d1      	b.n	800dcb6 <UART_SetConfig+0xca2>
 800d912:	bf00      	nop
 800d914:	40011c00 	.word	0x40011c00
 800d918:	58024400 	.word	0x58024400
 800d91c:	58000c00 	.word	0x58000c00
 800d920:	03d09000 	.word	0x03d09000
 800d924:	003d0900 	.word	0x003d0900
 800d928:	0800eeec 	.word	0x0800eeec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92e:	2200      	movs	r2, #0
 800d930:	60bb      	str	r3, [r7, #8]
 800d932:	60fa      	str	r2, [r7, #12]
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d938:	4ac0      	ldr	r2, [pc, #768]	; (800dc3c <UART_SetConfig+0xc28>)
 800d93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2200      	movs	r2, #0
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	607a      	str	r2, [r7, #4]
 800d946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d94a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d94e:	f7f2 fce7 	bl	8000320 <__aeabi_uldivmod>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	4610      	mov	r0, r2
 800d958:	4619      	mov	r1, r3
 800d95a:	f04f 0200 	mov.w	r2, #0
 800d95e:	f04f 0300 	mov.w	r3, #0
 800d962:	020b      	lsls	r3, r1, #8
 800d964:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d968:	0202      	lsls	r2, r0, #8
 800d96a:	6979      	ldr	r1, [r7, #20]
 800d96c:	6849      	ldr	r1, [r1, #4]
 800d96e:	0849      	lsrs	r1, r1, #1
 800d970:	2000      	movs	r0, #0
 800d972:	460c      	mov	r4, r1
 800d974:	4605      	mov	r5, r0
 800d976:	eb12 0804 	adds.w	r8, r2, r4
 800d97a:	eb43 0905 	adc.w	r9, r3, r5
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	469a      	mov	sl, r3
 800d986:	4693      	mov	fp, r2
 800d988:	4652      	mov	r2, sl
 800d98a:	465b      	mov	r3, fp
 800d98c:	4640      	mov	r0, r8
 800d98e:	4649      	mov	r1, r9
 800d990:	f7f2 fcc6 	bl	8000320 <__aeabi_uldivmod>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	4613      	mov	r3, r2
 800d99a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9a2:	d308      	bcc.n	800d9b6 <UART_SetConfig+0x9a2>
 800d9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9aa:	d204      	bcs.n	800d9b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9b2:	60da      	str	r2, [r3, #12]
 800d9b4:	e17f      	b.n	800dcb6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d9bc:	e17b      	b.n	800dcb6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9c6:	f040 80bd 	bne.w	800db44 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d9ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d9ce:	2b20      	cmp	r3, #32
 800d9d0:	dc48      	bgt.n	800da64 <UART_SetConfig+0xa50>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	db7b      	blt.n	800dace <UART_SetConfig+0xaba>
 800d9d6:	2b20      	cmp	r3, #32
 800d9d8:	d879      	bhi.n	800dace <UART_SetConfig+0xaba>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x9cc>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800da6b 	.word	0x0800da6b
 800d9e4:	0800da73 	.word	0x0800da73
 800d9e8:	0800dacf 	.word	0x0800dacf
 800d9ec:	0800dacf 	.word	0x0800dacf
 800d9f0:	0800da7b 	.word	0x0800da7b
 800d9f4:	0800dacf 	.word	0x0800dacf
 800d9f8:	0800dacf 	.word	0x0800dacf
 800d9fc:	0800dacf 	.word	0x0800dacf
 800da00:	0800da8b 	.word	0x0800da8b
 800da04:	0800dacf 	.word	0x0800dacf
 800da08:	0800dacf 	.word	0x0800dacf
 800da0c:	0800dacf 	.word	0x0800dacf
 800da10:	0800dacf 	.word	0x0800dacf
 800da14:	0800dacf 	.word	0x0800dacf
 800da18:	0800dacf 	.word	0x0800dacf
 800da1c:	0800dacf 	.word	0x0800dacf
 800da20:	0800da9b 	.word	0x0800da9b
 800da24:	0800dacf 	.word	0x0800dacf
 800da28:	0800dacf 	.word	0x0800dacf
 800da2c:	0800dacf 	.word	0x0800dacf
 800da30:	0800dacf 	.word	0x0800dacf
 800da34:	0800dacf 	.word	0x0800dacf
 800da38:	0800dacf 	.word	0x0800dacf
 800da3c:	0800dacf 	.word	0x0800dacf
 800da40:	0800dacf 	.word	0x0800dacf
 800da44:	0800dacf 	.word	0x0800dacf
 800da48:	0800dacf 	.word	0x0800dacf
 800da4c:	0800dacf 	.word	0x0800dacf
 800da50:	0800dacf 	.word	0x0800dacf
 800da54:	0800dacf 	.word	0x0800dacf
 800da58:	0800dacf 	.word	0x0800dacf
 800da5c:	0800dacf 	.word	0x0800dacf
 800da60:	0800dac1 	.word	0x0800dac1
 800da64:	2b40      	cmp	r3, #64	; 0x40
 800da66:	d02e      	beq.n	800dac6 <UART_SetConfig+0xab2>
 800da68:	e031      	b.n	800dace <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da6a:	f7fb fddb 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800da6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da70:	e033      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da72:	f7fb fded 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800da76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da78:	e02f      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fc fd0c 	bl	800a49c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da88:	e027      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da8a:	f107 0318 	add.w	r3, r7, #24
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fc fe58 	bl	800a744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da98:	e01f      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da9a:	4b69      	ldr	r3, [pc, #420]	; (800dc40 <UART_SetConfig+0xc2c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d009      	beq.n	800daba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800daa6:	4b66      	ldr	r3, [pc, #408]	; (800dc40 <UART_SetConfig+0xc2c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	08db      	lsrs	r3, r3, #3
 800daac:	f003 0303 	and.w	r3, r3, #3
 800dab0:	4a64      	ldr	r2, [pc, #400]	; (800dc44 <UART_SetConfig+0xc30>)
 800dab2:	fa22 f303 	lsr.w	r3, r2, r3
 800dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dab8:	e00f      	b.n	800dada <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800daba:	4b62      	ldr	r3, [pc, #392]	; (800dc44 <UART_SetConfig+0xc30>)
 800dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dabe:	e00c      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dac0:	4b61      	ldr	r3, [pc, #388]	; (800dc48 <UART_SetConfig+0xc34>)
 800dac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dac4:	e009      	b.n	800dada <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dacc:	e005      	b.n	800dada <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dace:	2300      	movs	r3, #0
 800dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 80ea 	beq.w	800dcb6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	4a55      	ldr	r2, [pc, #340]	; (800dc3c <UART_SetConfig+0xc28>)
 800dae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daec:	461a      	mov	r2, r3
 800daee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800daf4:	005a      	lsls	r2, r3, #1
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	441a      	add	r2, r3
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	fbb2 f3f3 	udiv	r3, r2, r3
 800db06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0a:	2b0f      	cmp	r3, #15
 800db0c:	d916      	bls.n	800db3c <UART_SetConfig+0xb28>
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db14:	d212      	bcs.n	800db3c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db18:	b29b      	uxth	r3, r3
 800db1a:	f023 030f 	bic.w	r3, r3, #15
 800db1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	085b      	lsrs	r3, r3, #1
 800db24:	b29b      	uxth	r3, r3
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db2e:	4313      	orrs	r3, r2
 800db30:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800db38:	60da      	str	r2, [r3, #12]
 800db3a:	e0bc      	b.n	800dcb6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db42:	e0b8      	b.n	800dcb6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800db44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db48:	2b20      	cmp	r3, #32
 800db4a:	dc4b      	bgt.n	800dbe4 <UART_SetConfig+0xbd0>
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f2c0 8087 	blt.w	800dc60 <UART_SetConfig+0xc4c>
 800db52:	2b20      	cmp	r3, #32
 800db54:	f200 8084 	bhi.w	800dc60 <UART_SetConfig+0xc4c>
 800db58:	a201      	add	r2, pc, #4	; (adr r2, 800db60 <UART_SetConfig+0xb4c>)
 800db5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5e:	bf00      	nop
 800db60:	0800dbeb 	.word	0x0800dbeb
 800db64:	0800dbf3 	.word	0x0800dbf3
 800db68:	0800dc61 	.word	0x0800dc61
 800db6c:	0800dc61 	.word	0x0800dc61
 800db70:	0800dbfb 	.word	0x0800dbfb
 800db74:	0800dc61 	.word	0x0800dc61
 800db78:	0800dc61 	.word	0x0800dc61
 800db7c:	0800dc61 	.word	0x0800dc61
 800db80:	0800dc0b 	.word	0x0800dc0b
 800db84:	0800dc61 	.word	0x0800dc61
 800db88:	0800dc61 	.word	0x0800dc61
 800db8c:	0800dc61 	.word	0x0800dc61
 800db90:	0800dc61 	.word	0x0800dc61
 800db94:	0800dc61 	.word	0x0800dc61
 800db98:	0800dc61 	.word	0x0800dc61
 800db9c:	0800dc61 	.word	0x0800dc61
 800dba0:	0800dc1b 	.word	0x0800dc1b
 800dba4:	0800dc61 	.word	0x0800dc61
 800dba8:	0800dc61 	.word	0x0800dc61
 800dbac:	0800dc61 	.word	0x0800dc61
 800dbb0:	0800dc61 	.word	0x0800dc61
 800dbb4:	0800dc61 	.word	0x0800dc61
 800dbb8:	0800dc61 	.word	0x0800dc61
 800dbbc:	0800dc61 	.word	0x0800dc61
 800dbc0:	0800dc61 	.word	0x0800dc61
 800dbc4:	0800dc61 	.word	0x0800dc61
 800dbc8:	0800dc61 	.word	0x0800dc61
 800dbcc:	0800dc61 	.word	0x0800dc61
 800dbd0:	0800dc61 	.word	0x0800dc61
 800dbd4:	0800dc61 	.word	0x0800dc61
 800dbd8:	0800dc61 	.word	0x0800dc61
 800dbdc:	0800dc61 	.word	0x0800dc61
 800dbe0:	0800dc53 	.word	0x0800dc53
 800dbe4:	2b40      	cmp	r3, #64	; 0x40
 800dbe6:	d037      	beq.n	800dc58 <UART_SetConfig+0xc44>
 800dbe8:	e03a      	b.n	800dc60 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbea:	f7fb fd1b 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800dbee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbf0:	e03c      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbf2:	f7fb fd2d 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800dbf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbf8:	e038      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fc fc4c 	bl	800a49c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc08:	e030      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc0a:	f107 0318 	add.w	r3, r7, #24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fc fd98 	bl	800a744 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc18:	e028      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc1a:	4b09      	ldr	r3, [pc, #36]	; (800dc40 <UART_SetConfig+0xc2c>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 0320 	and.w	r3, r3, #32
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d012      	beq.n	800dc4c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <UART_SetConfig+0xc2c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	08db      	lsrs	r3, r3, #3
 800dc2c:	f003 0303 	and.w	r3, r3, #3
 800dc30:	4a04      	ldr	r2, [pc, #16]	; (800dc44 <UART_SetConfig+0xc30>)
 800dc32:	fa22 f303 	lsr.w	r3, r2, r3
 800dc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc38:	e018      	b.n	800dc6c <UART_SetConfig+0xc58>
 800dc3a:	bf00      	nop
 800dc3c:	0800eeec 	.word	0x0800eeec
 800dc40:	58024400 	.word	0x58024400
 800dc44:	03d09000 	.word	0x03d09000
 800dc48:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dc4c:	4b24      	ldr	r3, [pc, #144]	; (800dce0 <UART_SetConfig+0xccc>)
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc50:	e00c      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc52:	4b24      	ldr	r3, [pc, #144]	; (800dce4 <UART_SetConfig+0xcd0>)
 800dc54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc56:	e009      	b.n	800dc6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc5e:	e005      	b.n	800dc6c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dc60:	2300      	movs	r3, #0
 800dc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc6a:	bf00      	nop
    }

    if (pclk != 0U)
 800dc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d021      	beq.n	800dcb6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	4a1c      	ldr	r2, [pc, #112]	; (800dce8 <UART_SetConfig+0xcd4>)
 800dc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc80:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	085b      	lsrs	r3, r3, #1
 800dc8a:	441a      	add	r2, r3
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc94:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc98:	2b0f      	cmp	r3, #15
 800dc9a:	d909      	bls.n	800dcb0 <UART_SetConfig+0xc9c>
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dca2:	d205      	bcs.n	800dcb0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	60da      	str	r2, [r3, #12]
 800dcae:	e002      	b.n	800dcb6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dcd2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3748      	adds	r7, #72	; 0x48
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dce0:	03d09000 	.word	0x03d09000
 800dce4:	003d0900 	.word	0x003d0900
 800dce8:	0800eeec 	.word	0x0800eeec

0800dcec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00a      	beq.n	800dd16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	430a      	orrs	r2, r1
 800dd14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00a      	beq.n	800dd38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	430a      	orrs	r2, r1
 800dd36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd3c:	f003 0304 	and.w	r3, r3, #4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00a      	beq.n	800dd5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	430a      	orrs	r2, r1
 800dd58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5e:	f003 0308 	and.w	r3, r3, #8
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00a      	beq.n	800dd7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	430a      	orrs	r2, r1
 800dd7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd80:	f003 0310 	and.w	r3, r3, #16
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00a      	beq.n	800dd9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d01a      	beq.n	800de02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	430a      	orrs	r2, r1
 800dde0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dde6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddea:	d10a      	bne.n	800de02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	430a      	orrs	r2, r1
 800de00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	430a      	orrs	r2, r1
 800de22:	605a      	str	r2, [r3, #4]
  }
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af02      	add	r7, sp, #8
 800de36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de40:	f7f7 f882 	bl	8004f48 <HAL_GetTick>
 800de44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 0308 	and.w	r3, r3, #8
 800de50:	2b08      	cmp	r3, #8
 800de52:	d10e      	bne.n	800de72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f82f 	bl	800dec6 <UART_WaitOnFlagUntilTimeout>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e025      	b.n	800debe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f003 0304 	and.w	r3, r3, #4
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d10e      	bne.n	800de9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f819 	bl	800dec6 <UART_WaitOnFlagUntilTimeout>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e00f      	b.n	800debe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2220      	movs	r2, #32
 800dea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2220      	movs	r2, #32
 800deaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b09c      	sub	sp, #112	; 0x70
 800deca:	af00      	add	r7, sp, #0
 800decc:	60f8      	str	r0, [r7, #12]
 800dece:	60b9      	str	r1, [r7, #8]
 800ded0:	603b      	str	r3, [r7, #0]
 800ded2:	4613      	mov	r3, r2
 800ded4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ded6:	e0a9      	b.n	800e02c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ded8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dede:	f000 80a5 	beq.w	800e02c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dee2:	f7f7 f831 	bl	8004f48 <HAL_GetTick>
 800dee6:	4602      	mov	r2, r0
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800deee:	429a      	cmp	r2, r3
 800def0:	d302      	bcc.n	800def8 <UART_WaitOnFlagUntilTimeout+0x32>
 800def2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def4:	2b00      	cmp	r3, #0
 800def6:	d140      	bne.n	800df7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df00:	e853 3f00 	ldrex	r3, [r3]
 800df04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df0c:	667b      	str	r3, [r7, #100]	; 0x64
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df1e:	e841 2300 	strex	r3, r2, [r1]
 800df22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1e6      	bne.n	800def8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df34:	e853 3f00 	ldrex	r3, [r3]
 800df38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3c:	f023 0301 	bic.w	r3, r3, #1
 800df40:	663b      	str	r3, [r7, #96]	; 0x60
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	3308      	adds	r3, #8
 800df48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df4a:	64ba      	str	r2, [r7, #72]	; 0x48
 800df4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df52:	e841 2300 	strex	r3, r2, [r1]
 800df56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1e5      	bne.n	800df2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2220      	movs	r2, #32
 800df62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2220      	movs	r2, #32
 800df6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df76:	2303      	movs	r3, #3
 800df78:	e069      	b.n	800e04e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f003 0304 	and.w	r3, r3, #4
 800df84:	2b00      	cmp	r3, #0
 800df86:	d051      	beq.n	800e02c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df96:	d149      	bne.n	800e02c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dfb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc0:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e6      	bne.n	800dfa2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	3308      	adds	r3, #8
 800dfda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	e853 3f00 	ldrex	r3, [r3]
 800dfe2:	613b      	str	r3, [r7, #16]
   return(result);
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	f023 0301 	bic.w	r3, r3, #1
 800dfea:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3308      	adds	r3, #8
 800dff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dff4:	623a      	str	r2, [r7, #32]
 800dff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff8:	69f9      	ldr	r1, [r7, #28]
 800dffa:	6a3a      	ldr	r2, [r7, #32]
 800dffc:	e841 2300 	strex	r3, r2, [r1]
 800e000:	61bb      	str	r3, [r7, #24]
   return(result);
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1e5      	bne.n	800dfd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2220      	movs	r2, #32
 800e00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2220      	movs	r2, #32
 800e014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2220      	movs	r2, #32
 800e01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e028:	2303      	movs	r3, #3
 800e02a:	e010      	b.n	800e04e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	69da      	ldr	r2, [r3, #28]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	4013      	ands	r3, r2
 800e036:	68ba      	ldr	r2, [r7, #8]
 800e038:	429a      	cmp	r2, r3
 800e03a:	bf0c      	ite	eq
 800e03c:	2301      	moveq	r3, #1
 800e03e:	2300      	movne	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	461a      	mov	r2, r3
 800e044:	79fb      	ldrb	r3, [r7, #7]
 800e046:	429a      	cmp	r2, r3
 800e048:	f43f af46 	beq.w	800ded8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3770      	adds	r7, #112	; 0x70
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
	...

0800e058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b096      	sub	sp, #88	; 0x58
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	4613      	mov	r3, r2
 800e064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	88fa      	ldrh	r2, [r7, #6]
 800e070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2222      	movs	r2, #34	; 0x22
 800e080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d02c      	beq.n	800e0e6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e090:	4a42      	ldr	r2, [pc, #264]	; (800e19c <UART_Start_Receive_DMA+0x144>)
 800e092:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e098:	4a41      	ldr	r2, [pc, #260]	; (800e1a0 <UART_Start_Receive_DMA+0x148>)
 800e09a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a0:	4a40      	ldr	r2, [pc, #256]	; (800e1a4 <UART_Start_Receive_DMA+0x14c>)
 800e0a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3324      	adds	r3, #36	; 0x24
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0bc:	461a      	mov	r2, r3
 800e0be:	88fb      	ldrh	r3, [r7, #6]
 800e0c0:	f7f7 fda0 	bl	8005c04 <HAL_DMA_Start_IT>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00d      	beq.n	800e0e6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2210      	movs	r2, #16
 800e0ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2220      	movs	r2, #32
 800e0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e055      	b.n	800e192 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d018      	beq.n	800e128 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fe:	e853 3f00 	ldrex	r3, [r3]
 800e102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e10a:	657b      	str	r3, [r7, #84]	; 0x54
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	461a      	mov	r2, r3
 800e112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e114:	64bb      	str	r3, [r7, #72]	; 0x48
 800e116:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e11a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e6      	bne.n	800e0f6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3308      	adds	r3, #8
 800e12e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	e853 3f00 	ldrex	r3, [r3]
 800e136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	f043 0301 	orr.w	r3, r3, #1
 800e13e:	653b      	str	r3, [r7, #80]	; 0x50
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3308      	adds	r3, #8
 800e146:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e148:	637a      	str	r2, [r7, #52]	; 0x34
 800e14a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e150:	e841 2300 	strex	r3, r2, [r1]
 800e154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1e5      	bne.n	800e128 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3308      	adds	r3, #8
 800e162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	e853 3f00 	ldrex	r3, [r3]
 800e16a:	613b      	str	r3, [r7, #16]
   return(result);
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e172:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3308      	adds	r3, #8
 800e17a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e17c:	623a      	str	r2, [r7, #32]
 800e17e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e180:	69f9      	ldr	r1, [r7, #28]
 800e182:	6a3a      	ldr	r2, [r7, #32]
 800e184:	e841 2300 	strex	r3, r2, [r1]
 800e188:	61bb      	str	r3, [r7, #24]
   return(result);
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e5      	bne.n	800e15c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3758      	adds	r7, #88	; 0x58
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	0800e3ab 	.word	0x0800e3ab
 800e1a0:	0800e4cd 	.word	0x0800e4cd
 800e1a4:	0800e505 	.word	0x0800e505

0800e1a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b08f      	sub	sp, #60	; 0x3c
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	e853 3f00 	ldrex	r3, [r3]
 800e1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1e6      	bne.n	800e1b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	e853 3f00 	ldrex	r3, [r3]
 800e1f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e1f8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3308      	adds	r3, #8
 800e200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e202:	61ba      	str	r2, [r7, #24]
 800e204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e206:	6979      	ldr	r1, [r7, #20]
 800e208:	69ba      	ldr	r2, [r7, #24]
 800e20a:	e841 2300 	strex	r3, r2, [r1]
 800e20e:	613b      	str	r3, [r7, #16]
   return(result);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1e5      	bne.n	800e1e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2220      	movs	r2, #32
 800e21a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e21e:	bf00      	nop
 800e220:	373c      	adds	r7, #60	; 0x3c
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
	...

0800e22c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b095      	sub	sp, #84	; 0x54
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23c:	e853 3f00 	ldrex	r3, [r3]
 800e240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	461a      	mov	r2, r3
 800e250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e252:	643b      	str	r3, [r7, #64]	; 0x40
 800e254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e25a:	e841 2300 	strex	r3, r2, [r1]
 800e25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1e6      	bne.n	800e234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3308      	adds	r3, #8
 800e26c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	e853 3f00 	ldrex	r3, [r3]
 800e274:	61fb      	str	r3, [r7, #28]
   return(result);
 800e276:	69fa      	ldr	r2, [r7, #28]
 800e278:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <UART_EndRxTransfer+0xc8>)
 800e27a:	4013      	ands	r3, r2
 800e27c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e286:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28e:	e841 2300 	strex	r3, r2, [r1]
 800e292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1e5      	bne.n	800e266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d118      	bne.n	800e2d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f023 0310 	bic.w	r3, r3, #16
 800e2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c0:	61bb      	str	r3, [r7, #24]
 800e2c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	6979      	ldr	r1, [r7, #20]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e6      	bne.n	800e2a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e2e8:	bf00      	nop
 800e2ea:	3754      	adds	r7, #84	; 0x54
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr
 800e2f4:	effffffe 	.word	0xeffffffe

0800e2f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b090      	sub	sp, #64	; 0x40
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e304:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	69db      	ldr	r3, [r3, #28]
 800e30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e30e:	d037      	beq.n	800e380 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e312:	2200      	movs	r2, #0
 800e314:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3308      	adds	r3, #8
 800e31e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	e853 3f00 	ldrex	r3, [r3]
 800e326:	623b      	str	r3, [r7, #32]
   return(result);
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e32e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3308      	adds	r3, #8
 800e336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e338:	633a      	str	r2, [r7, #48]	; 0x30
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e340:	e841 2300 	strex	r3, r2, [r1]
 800e344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1e5      	bne.n	800e318 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	e853 3f00 	ldrex	r3, [r3]
 800e358:	60fb      	str	r3, [r7, #12]
   return(result);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e360:	637b      	str	r3, [r7, #52]	; 0x34
 800e362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36a:	61fb      	str	r3, [r7, #28]
 800e36c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36e:	69b9      	ldr	r1, [r7, #24]
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	e841 2300 	strex	r3, r2, [r1]
 800e376:	617b      	str	r3, [r7, #20]
   return(result);
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1e6      	bne.n	800e34c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e37e:	e002      	b.n	800e386 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e380:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e382:	f7fe fe1d 	bl	800cfc0 <HAL_UART_TxCpltCallback>
}
 800e386:	bf00      	nop
 800e388:	3740      	adds	r7, #64	; 0x40
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7fe fe19 	bl	800cfd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3a2:	bf00      	nop
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b09c      	sub	sp, #112	; 0x70
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3c0:	d071      	beq.n	800e4a6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3d2:	e853 3f00 	ldrex	r3, [r3]
 800e3d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3f0:	e841 2300 	strex	r3, r2, [r1]
 800e3f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1e6      	bne.n	800e3ca <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3308      	adds	r3, #8
 800e402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	e853 3f00 	ldrex	r3, [r3]
 800e40a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40e:	f023 0301 	bic.w	r3, r3, #1
 800e412:	667b      	str	r3, [r7, #100]	; 0x64
 800e414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	3308      	adds	r3, #8
 800e41a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e41c:	647a      	str	r2, [r7, #68]	; 0x44
 800e41e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e424:	e841 2300 	strex	r3, r2, [r1]
 800e428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d1e5      	bne.n	800e3fc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3308      	adds	r3, #8
 800e436:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	e853 3f00 	ldrex	r3, [r3]
 800e43e:	623b      	str	r3, [r7, #32]
   return(result);
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e446:	663b      	str	r3, [r7, #96]	; 0x60
 800e448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3308      	adds	r3, #8
 800e44e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e450:	633a      	str	r2, [r7, #48]	; 0x30
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e458:	e841 2300 	strex	r3, r2, [r1]
 800e45c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1e5      	bne.n	800e430 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e466:	2220      	movs	r2, #32
 800e468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e470:	2b01      	cmp	r3, #1
 800e472:	d118      	bne.n	800e4a6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	60fb      	str	r3, [r7, #12]
   return(result);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f023 0310 	bic.w	r3, r3, #16
 800e488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	69b9      	ldr	r1, [r7, #24]
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	617b      	str	r3, [r7, #20]
   return(result);
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d107      	bne.n	800e4be <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e4b8:	f7fe fda0 	bl	800cffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4bc:	e002      	b.n	800e4c4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e4be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e4c0:	f7f5 f9c8 	bl	8003854 <HAL_UART_RxCpltCallback>
}
 800e4c4:	bf00      	nop
 800e4c6:	3770      	adds	r7, #112	; 0x70
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d109      	bne.n	800e4f6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4e8:	085b      	lsrs	r3, r3, #1
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7fe fd84 	bl	800cffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4f4:	e002      	b.n	800e4fc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f7fe fd76 	bl	800cfe8 <HAL_UART_RxHalfCpltCallback>
}
 800e4fc:	bf00      	nop
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e510:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e518:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e520:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e52c:	2b80      	cmp	r3, #128	; 0x80
 800e52e:	d109      	bne.n	800e544 <UART_DMAError+0x40>
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	2b21      	cmp	r3, #33	; 0x21
 800e534:	d106      	bne.n	800e544 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2200      	movs	r2, #0
 800e53a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e53e:	6978      	ldr	r0, [r7, #20]
 800e540:	f7ff fe32 	bl	800e1a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e54e:	2b40      	cmp	r3, #64	; 0x40
 800e550:	d109      	bne.n	800e566 <UART_DMAError+0x62>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b22      	cmp	r3, #34	; 0x22
 800e556:	d106      	bne.n	800e566 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e560:	6978      	ldr	r0, [r7, #20]
 800e562:	f7ff fe63 	bl	800e22c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e56c:	f043 0210 	orr.w	r2, r3, #16
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	f7f5 f934 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e57c:	bf00      	nop
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e590:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7f5 f91e 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5a8:	bf00      	nop
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5cc:	61fb      	str	r3, [r7, #28]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	61bb      	str	r3, [r7, #24]
 800e5d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5da:	6979      	ldr	r1, [r7, #20]
 800e5dc:	69ba      	ldr	r2, [r7, #24]
 800e5de:	e841 2300 	strex	r3, r2, [r1]
 800e5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1e6      	bne.n	800e5b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2220      	movs	r2, #32
 800e5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7fe fce1 	bl	800cfc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5fe:	bf00      	nop
 800e600:	3720      	adds	r7, #32
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e60e:	bf00      	nop
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr

0800e61a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e61a:	b480      	push	{r7}
 800e61c:	b083      	sub	sp, #12
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e622:	bf00      	nop
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e62e:	b480      	push	{r7}
 800e630:	b083      	sub	sp, #12
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e636:	bf00      	nop
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e642:	b480      	push	{r7}
 800e644:	b085      	sub	sp, #20
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e650:	2b01      	cmp	r3, #1
 800e652:	d101      	bne.n	800e658 <HAL_UARTEx_DisableFifoMode+0x16>
 800e654:	2302      	movs	r3, #2
 800e656:	e027      	b.n	800e6a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2224      	movs	r2, #36	; 0x24
 800e664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f022 0201 	bic.w	r2, r2, #1
 800e67e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e686:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d101      	bne.n	800e6cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	e02d      	b.n	800e728 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2224      	movs	r2, #36	; 0x24
 800e6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f022 0201 	bic.w	r2, r2, #1
 800e6f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f84f 	bl	800e7ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2220      	movs	r2, #32
 800e71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e740:	2b01      	cmp	r3, #1
 800e742:	d101      	bne.n	800e748 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e744:	2302      	movs	r3, #2
 800e746:	e02d      	b.n	800e7a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2201      	movs	r2, #1
 800e74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2224      	movs	r2, #36	; 0x24
 800e754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f022 0201 	bic.w	r2, r2, #1
 800e76e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	683a      	ldr	r2, [r7, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f811 	bl	800e7ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2220      	movs	r2, #32
 800e796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d108      	bne.n	800e7ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e7cc:	e031      	b.n	800e832 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e7ce:	2310      	movs	r3, #16
 800e7d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e7d2:	2310      	movs	r3, #16
 800e7d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	0e5b      	lsrs	r3, r3, #25
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	f003 0307 	and.w	r3, r3, #7
 800e7e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	0f5b      	lsrs	r3, r3, #29
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f003 0307 	and.w	r3, r3, #7
 800e7f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7f6:	7bbb      	ldrb	r3, [r7, #14]
 800e7f8:	7b3a      	ldrb	r2, [r7, #12]
 800e7fa:	4911      	ldr	r1, [pc, #68]	; (800e840 <UARTEx_SetNbDataToProcess+0x94>)
 800e7fc:	5c8a      	ldrb	r2, [r1, r2]
 800e7fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e802:	7b3a      	ldrb	r2, [r7, #12]
 800e804:	490f      	ldr	r1, [pc, #60]	; (800e844 <UARTEx_SetNbDataToProcess+0x98>)
 800e806:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e808:	fb93 f3f2 	sdiv	r3, r3, r2
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e814:	7bfb      	ldrb	r3, [r7, #15]
 800e816:	7b7a      	ldrb	r2, [r7, #13]
 800e818:	4909      	ldr	r1, [pc, #36]	; (800e840 <UARTEx_SetNbDataToProcess+0x94>)
 800e81a:	5c8a      	ldrb	r2, [r1, r2]
 800e81c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e820:	7b7a      	ldrb	r2, [r7, #13]
 800e822:	4908      	ldr	r1, [pc, #32]	; (800e844 <UARTEx_SetNbDataToProcess+0x98>)
 800e824:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e826:	fb93 f3f2 	sdiv	r3, r3, r2
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e832:	bf00      	nop
 800e834:	3714      	adds	r7, #20
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	0800ef04 	.word	0x0800ef04
 800e844:	0800ef0c 	.word	0x0800ef0c

0800e848 <__cxa_pure_virtual>:
 800e848:	b508      	push	{r3, lr}
 800e84a:	f000 f80d 	bl	800e868 <_ZSt9terminatev>

0800e84e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e84e:	b508      	push	{r3, lr}
 800e850:	4780      	blx	r0
 800e852:	f000 f80e 	bl	800e872 <abort>
	...

0800e858 <_ZSt13get_terminatev>:
 800e858:	4b02      	ldr	r3, [pc, #8]	; (800e864 <_ZSt13get_terminatev+0xc>)
 800e85a:	6818      	ldr	r0, [r3, #0]
 800e85c:	f3bf 8f5b 	dmb	ish
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	24000028 	.word	0x24000028

0800e868 <_ZSt9terminatev>:
 800e868:	b508      	push	{r3, lr}
 800e86a:	f7ff fff5 	bl	800e858 <_ZSt13get_terminatev>
 800e86e:	f7ff ffee 	bl	800e84e <_ZN10__cxxabiv111__terminateEPFvvE>

0800e872 <abort>:
 800e872:	b508      	push	{r3, lr}
 800e874:	2006      	movs	r0, #6
 800e876:	f000 f873 	bl	800e960 <raise>
 800e87a:	2001      	movs	r0, #1
 800e87c:	f7f6 f9fc 	bl	8004c78 <_exit>

0800e880 <__errno>:
 800e880:	4b01      	ldr	r3, [pc, #4]	; (800e888 <__errno+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	2400002c 	.word	0x2400002c

0800e88c <__libc_init_array>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	4d0d      	ldr	r5, [pc, #52]	; (800e8c4 <__libc_init_array+0x38>)
 800e890:	4c0d      	ldr	r4, [pc, #52]	; (800e8c8 <__libc_init_array+0x3c>)
 800e892:	1b64      	subs	r4, r4, r5
 800e894:	10a4      	asrs	r4, r4, #2
 800e896:	2600      	movs	r6, #0
 800e898:	42a6      	cmp	r6, r4
 800e89a:	d109      	bne.n	800e8b0 <__libc_init_array+0x24>
 800e89c:	4d0b      	ldr	r5, [pc, #44]	; (800e8cc <__libc_init_array+0x40>)
 800e89e:	4c0c      	ldr	r4, [pc, #48]	; (800e8d0 <__libc_init_array+0x44>)
 800e8a0:	f000 f9b0 	bl	800ec04 <_init>
 800e8a4:	1b64      	subs	r4, r4, r5
 800e8a6:	10a4      	asrs	r4, r4, #2
 800e8a8:	2600      	movs	r6, #0
 800e8aa:	42a6      	cmp	r6, r4
 800e8ac:	d105      	bne.n	800e8ba <__libc_init_array+0x2e>
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}
 800e8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b4:	4798      	blx	r3
 800e8b6:	3601      	adds	r6, #1
 800e8b8:	e7ee      	b.n	800e898 <__libc_init_array+0xc>
 800e8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8be:	4798      	blx	r3
 800e8c0:	3601      	adds	r6, #1
 800e8c2:	e7f2      	b.n	800e8aa <__libc_init_array+0x1e>
 800e8c4:	0800ef1c 	.word	0x0800ef1c
 800e8c8:	0800ef1c 	.word	0x0800ef1c
 800e8cc:	0800ef1c 	.word	0x0800ef1c
 800e8d0:	0800ef24 	.word	0x0800ef24

0800e8d4 <memcpy>:
 800e8d4:	440a      	add	r2, r1
 800e8d6:	4291      	cmp	r1, r2
 800e8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8dc:	d100      	bne.n	800e8e0 <memcpy+0xc>
 800e8de:	4770      	bx	lr
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ea:	4291      	cmp	r1, r2
 800e8ec:	d1f9      	bne.n	800e8e2 <memcpy+0xe>
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <memset>:
 800e8f0:	4402      	add	r2, r0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d100      	bne.n	800e8fa <memset+0xa>
 800e8f8:	4770      	bx	lr
 800e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e8fe:	e7f9      	b.n	800e8f4 <memset+0x4>

0800e900 <realloc>:
 800e900:	4b02      	ldr	r3, [pc, #8]	; (800e90c <realloc+0xc>)
 800e902:	460a      	mov	r2, r1
 800e904:	4601      	mov	r1, r0
 800e906:	6818      	ldr	r0, [r3, #0]
 800e908:	f000 b8da 	b.w	800eac0 <_realloc_r>
 800e90c:	2400002c 	.word	0x2400002c

0800e910 <_raise_r>:
 800e910:	291f      	cmp	r1, #31
 800e912:	b538      	push	{r3, r4, r5, lr}
 800e914:	4604      	mov	r4, r0
 800e916:	460d      	mov	r5, r1
 800e918:	d904      	bls.n	800e924 <_raise_r+0x14>
 800e91a:	2316      	movs	r3, #22
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	f04f 30ff 	mov.w	r0, #4294967295
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e926:	b112      	cbz	r2, 800e92e <_raise_r+0x1e>
 800e928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e92c:	b94b      	cbnz	r3, 800e942 <_raise_r+0x32>
 800e92e:	4620      	mov	r0, r4
 800e930:	f000 f830 	bl	800e994 <_getpid_r>
 800e934:	462a      	mov	r2, r5
 800e936:	4601      	mov	r1, r0
 800e938:	4620      	mov	r0, r4
 800e93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e93e:	f000 b817 	b.w	800e970 <_kill_r>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d00a      	beq.n	800e95c <_raise_r+0x4c>
 800e946:	1c59      	adds	r1, r3, #1
 800e948:	d103      	bne.n	800e952 <_raise_r+0x42>
 800e94a:	2316      	movs	r3, #22
 800e94c:	6003      	str	r3, [r0, #0]
 800e94e:	2001      	movs	r0, #1
 800e950:	e7e7      	b.n	800e922 <_raise_r+0x12>
 800e952:	2400      	movs	r4, #0
 800e954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e958:	4628      	mov	r0, r5
 800e95a:	4798      	blx	r3
 800e95c:	2000      	movs	r0, #0
 800e95e:	e7e0      	b.n	800e922 <_raise_r+0x12>

0800e960 <raise>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <raise+0xc>)
 800e962:	4601      	mov	r1, r0
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	f7ff bfd3 	b.w	800e910 <_raise_r>
 800e96a:	bf00      	nop
 800e96c:	2400002c 	.word	0x2400002c

0800e970 <_kill_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	4d07      	ldr	r5, [pc, #28]	; (800e990 <_kill_r+0x20>)
 800e974:	2300      	movs	r3, #0
 800e976:	4604      	mov	r4, r0
 800e978:	4608      	mov	r0, r1
 800e97a:	4611      	mov	r1, r2
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	f7f6 f96b 	bl	8004c58 <_kill>
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	d102      	bne.n	800e98c <_kill_r+0x1c>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	b103      	cbz	r3, 800e98c <_kill_r+0x1c>
 800e98a:	6023      	str	r3, [r4, #0]
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	2400107c 	.word	0x2400107c

0800e994 <_getpid_r>:
 800e994:	f7f6 b958 	b.w	8004c48 <_getpid>

0800e998 <sbrk_aligned>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	4e0e      	ldr	r6, [pc, #56]	; (800e9d4 <sbrk_aligned+0x3c>)
 800e99c:	460c      	mov	r4, r1
 800e99e:	6831      	ldr	r1, [r6, #0]
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	b911      	cbnz	r1, 800e9aa <sbrk_aligned+0x12>
 800e9a4:	f000 f8bc 	bl	800eb20 <_sbrk_r>
 800e9a8:	6030      	str	r0, [r6, #0]
 800e9aa:	4621      	mov	r1, r4
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f000 f8b7 	bl	800eb20 <_sbrk_r>
 800e9b2:	1c43      	adds	r3, r0, #1
 800e9b4:	d00a      	beq.n	800e9cc <sbrk_aligned+0x34>
 800e9b6:	1cc4      	adds	r4, r0, #3
 800e9b8:	f024 0403 	bic.w	r4, r4, #3
 800e9bc:	42a0      	cmp	r0, r4
 800e9be:	d007      	beq.n	800e9d0 <sbrk_aligned+0x38>
 800e9c0:	1a21      	subs	r1, r4, r0
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f000 f8ac 	bl	800eb20 <_sbrk_r>
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d101      	bne.n	800e9d0 <sbrk_aligned+0x38>
 800e9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	24001078 	.word	0x24001078

0800e9d8 <_malloc_r>:
 800e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9dc:	1ccd      	adds	r5, r1, #3
 800e9de:	f025 0503 	bic.w	r5, r5, #3
 800e9e2:	3508      	adds	r5, #8
 800e9e4:	2d0c      	cmp	r5, #12
 800e9e6:	bf38      	it	cc
 800e9e8:	250c      	movcc	r5, #12
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	db01      	blt.n	800e9f4 <_malloc_r+0x1c>
 800e9f0:	42a9      	cmp	r1, r5
 800e9f2:	d905      	bls.n	800ea00 <_malloc_r+0x28>
 800e9f4:	230c      	movs	r3, #12
 800e9f6:	603b      	str	r3, [r7, #0]
 800e9f8:	2600      	movs	r6, #0
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea00:	4e2e      	ldr	r6, [pc, #184]	; (800eabc <_malloc_r+0xe4>)
 800ea02:	f000 f89d 	bl	800eb40 <__malloc_lock>
 800ea06:	6833      	ldr	r3, [r6, #0]
 800ea08:	461c      	mov	r4, r3
 800ea0a:	bb34      	cbnz	r4, 800ea5a <_malloc_r+0x82>
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4638      	mov	r0, r7
 800ea10:	f7ff ffc2 	bl	800e998 <sbrk_aligned>
 800ea14:	1c43      	adds	r3, r0, #1
 800ea16:	4604      	mov	r4, r0
 800ea18:	d14d      	bne.n	800eab6 <_malloc_r+0xde>
 800ea1a:	6834      	ldr	r4, [r6, #0]
 800ea1c:	4626      	mov	r6, r4
 800ea1e:	2e00      	cmp	r6, #0
 800ea20:	d140      	bne.n	800eaa4 <_malloc_r+0xcc>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	4631      	mov	r1, r6
 800ea26:	4638      	mov	r0, r7
 800ea28:	eb04 0803 	add.w	r8, r4, r3
 800ea2c:	f000 f878 	bl	800eb20 <_sbrk_r>
 800ea30:	4580      	cmp	r8, r0
 800ea32:	d13a      	bne.n	800eaaa <_malloc_r+0xd2>
 800ea34:	6821      	ldr	r1, [r4, #0]
 800ea36:	3503      	adds	r5, #3
 800ea38:	1a6d      	subs	r5, r5, r1
 800ea3a:	f025 0503 	bic.w	r5, r5, #3
 800ea3e:	3508      	adds	r5, #8
 800ea40:	2d0c      	cmp	r5, #12
 800ea42:	bf38      	it	cc
 800ea44:	250c      	movcc	r5, #12
 800ea46:	4629      	mov	r1, r5
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff ffa5 	bl	800e998 <sbrk_aligned>
 800ea4e:	3001      	adds	r0, #1
 800ea50:	d02b      	beq.n	800eaaa <_malloc_r+0xd2>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	442b      	add	r3, r5
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	e00e      	b.n	800ea78 <_malloc_r+0xa0>
 800ea5a:	6822      	ldr	r2, [r4, #0]
 800ea5c:	1b52      	subs	r2, r2, r5
 800ea5e:	d41e      	bmi.n	800ea9e <_malloc_r+0xc6>
 800ea60:	2a0b      	cmp	r2, #11
 800ea62:	d916      	bls.n	800ea92 <_malloc_r+0xba>
 800ea64:	1961      	adds	r1, r4, r5
 800ea66:	42a3      	cmp	r3, r4
 800ea68:	6025      	str	r5, [r4, #0]
 800ea6a:	bf18      	it	ne
 800ea6c:	6059      	strne	r1, [r3, #4]
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	bf08      	it	eq
 800ea72:	6031      	streq	r1, [r6, #0]
 800ea74:	5162      	str	r2, [r4, r5]
 800ea76:	604b      	str	r3, [r1, #4]
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f104 060b 	add.w	r6, r4, #11
 800ea7e:	f000 f865 	bl	800eb4c <__malloc_unlock>
 800ea82:	f026 0607 	bic.w	r6, r6, #7
 800ea86:	1d23      	adds	r3, r4, #4
 800ea88:	1af2      	subs	r2, r6, r3
 800ea8a:	d0b6      	beq.n	800e9fa <_malloc_r+0x22>
 800ea8c:	1b9b      	subs	r3, r3, r6
 800ea8e:	50a3      	str	r3, [r4, r2]
 800ea90:	e7b3      	b.n	800e9fa <_malloc_r+0x22>
 800ea92:	6862      	ldr	r2, [r4, #4]
 800ea94:	42a3      	cmp	r3, r4
 800ea96:	bf0c      	ite	eq
 800ea98:	6032      	streq	r2, [r6, #0]
 800ea9a:	605a      	strne	r2, [r3, #4]
 800ea9c:	e7ec      	b.n	800ea78 <_malloc_r+0xa0>
 800ea9e:	4623      	mov	r3, r4
 800eaa0:	6864      	ldr	r4, [r4, #4]
 800eaa2:	e7b2      	b.n	800ea0a <_malloc_r+0x32>
 800eaa4:	4634      	mov	r4, r6
 800eaa6:	6876      	ldr	r6, [r6, #4]
 800eaa8:	e7b9      	b.n	800ea1e <_malloc_r+0x46>
 800eaaa:	230c      	movs	r3, #12
 800eaac:	603b      	str	r3, [r7, #0]
 800eaae:	4638      	mov	r0, r7
 800eab0:	f000 f84c 	bl	800eb4c <__malloc_unlock>
 800eab4:	e7a1      	b.n	800e9fa <_malloc_r+0x22>
 800eab6:	6025      	str	r5, [r4, #0]
 800eab8:	e7de      	b.n	800ea78 <_malloc_r+0xa0>
 800eaba:	bf00      	nop
 800eabc:	24001074 	.word	0x24001074

0800eac0 <_realloc_r>:
 800eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac4:	4680      	mov	r8, r0
 800eac6:	4614      	mov	r4, r2
 800eac8:	460e      	mov	r6, r1
 800eaca:	b921      	cbnz	r1, 800ead6 <_realloc_r+0x16>
 800eacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	4611      	mov	r1, r2
 800ead2:	f7ff bf81 	b.w	800e9d8 <_malloc_r>
 800ead6:	b92a      	cbnz	r2, 800eae4 <_realloc_r+0x24>
 800ead8:	f000 f83e 	bl	800eb58 <_free_r>
 800eadc:	4625      	mov	r5, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae4:	f000 f884 	bl	800ebf0 <_malloc_usable_size_r>
 800eae8:	4284      	cmp	r4, r0
 800eaea:	4607      	mov	r7, r0
 800eaec:	d802      	bhi.n	800eaf4 <_realloc_r+0x34>
 800eaee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eaf2:	d812      	bhi.n	800eb1a <_realloc_r+0x5a>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	f7ff ff6e 	bl	800e9d8 <_malloc_r>
 800eafc:	4605      	mov	r5, r0
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d0ed      	beq.n	800eade <_realloc_r+0x1e>
 800eb02:	42bc      	cmp	r4, r7
 800eb04:	4622      	mov	r2, r4
 800eb06:	4631      	mov	r1, r6
 800eb08:	bf28      	it	cs
 800eb0a:	463a      	movcs	r2, r7
 800eb0c:	f7ff fee2 	bl	800e8d4 <memcpy>
 800eb10:	4631      	mov	r1, r6
 800eb12:	4640      	mov	r0, r8
 800eb14:	f000 f820 	bl	800eb58 <_free_r>
 800eb18:	e7e1      	b.n	800eade <_realloc_r+0x1e>
 800eb1a:	4635      	mov	r5, r6
 800eb1c:	e7df      	b.n	800eade <_realloc_r+0x1e>
	...

0800eb20 <_sbrk_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	; (800eb3c <_sbrk_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f6 f8ae 	bl	8004c8c <_sbrk>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_sbrk_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_sbrk_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	2400107c 	.word	0x2400107c

0800eb40 <__malloc_lock>:
 800eb40:	4801      	ldr	r0, [pc, #4]	; (800eb48 <__malloc_lock+0x8>)
 800eb42:	f000 b85d 	b.w	800ec00 <__retarget_lock_acquire_recursive>
 800eb46:	bf00      	nop
 800eb48:	24001080 	.word	0x24001080

0800eb4c <__malloc_unlock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	; (800eb54 <__malloc_unlock+0x8>)
 800eb4e:	f000 b858 	b.w	800ec02 <__retarget_lock_release_recursive>
 800eb52:	bf00      	nop
 800eb54:	24001080 	.word	0x24001080

0800eb58 <_free_r>:
 800eb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	d044      	beq.n	800ebe8 <_free_r+0x90>
 800eb5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb62:	9001      	str	r0, [sp, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f1a1 0404 	sub.w	r4, r1, #4
 800eb6a:	bfb8      	it	lt
 800eb6c:	18e4      	addlt	r4, r4, r3
 800eb6e:	f7ff ffe7 	bl	800eb40 <__malloc_lock>
 800eb72:	4a1e      	ldr	r2, [pc, #120]	; (800ebec <_free_r+0x94>)
 800eb74:	9801      	ldr	r0, [sp, #4]
 800eb76:	6813      	ldr	r3, [r2, #0]
 800eb78:	b933      	cbnz	r3, 800eb88 <_free_r+0x30>
 800eb7a:	6063      	str	r3, [r4, #4]
 800eb7c:	6014      	str	r4, [r2, #0]
 800eb7e:	b003      	add	sp, #12
 800eb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb84:	f7ff bfe2 	b.w	800eb4c <__malloc_unlock>
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	d908      	bls.n	800eb9e <_free_r+0x46>
 800eb8c:	6825      	ldr	r5, [r4, #0]
 800eb8e:	1961      	adds	r1, r4, r5
 800eb90:	428b      	cmp	r3, r1
 800eb92:	bf01      	itttt	eq
 800eb94:	6819      	ldreq	r1, [r3, #0]
 800eb96:	685b      	ldreq	r3, [r3, #4]
 800eb98:	1949      	addeq	r1, r1, r5
 800eb9a:	6021      	streq	r1, [r4, #0]
 800eb9c:	e7ed      	b.n	800eb7a <_free_r+0x22>
 800eb9e:	461a      	mov	r2, r3
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	b10b      	cbz	r3, 800eba8 <_free_r+0x50>
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	d9fa      	bls.n	800eb9e <_free_r+0x46>
 800eba8:	6811      	ldr	r1, [r2, #0]
 800ebaa:	1855      	adds	r5, r2, r1
 800ebac:	42a5      	cmp	r5, r4
 800ebae:	d10b      	bne.n	800ebc8 <_free_r+0x70>
 800ebb0:	6824      	ldr	r4, [r4, #0]
 800ebb2:	4421      	add	r1, r4
 800ebb4:	1854      	adds	r4, r2, r1
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	6011      	str	r1, [r2, #0]
 800ebba:	d1e0      	bne.n	800eb7e <_free_r+0x26>
 800ebbc:	681c      	ldr	r4, [r3, #0]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	6053      	str	r3, [r2, #4]
 800ebc2:	4421      	add	r1, r4
 800ebc4:	6011      	str	r1, [r2, #0]
 800ebc6:	e7da      	b.n	800eb7e <_free_r+0x26>
 800ebc8:	d902      	bls.n	800ebd0 <_free_r+0x78>
 800ebca:	230c      	movs	r3, #12
 800ebcc:	6003      	str	r3, [r0, #0]
 800ebce:	e7d6      	b.n	800eb7e <_free_r+0x26>
 800ebd0:	6825      	ldr	r5, [r4, #0]
 800ebd2:	1961      	adds	r1, r4, r5
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	bf04      	itt	eq
 800ebd8:	6819      	ldreq	r1, [r3, #0]
 800ebda:	685b      	ldreq	r3, [r3, #4]
 800ebdc:	6063      	str	r3, [r4, #4]
 800ebde:	bf04      	itt	eq
 800ebe0:	1949      	addeq	r1, r1, r5
 800ebe2:	6021      	streq	r1, [r4, #0]
 800ebe4:	6054      	str	r4, [r2, #4]
 800ebe6:	e7ca      	b.n	800eb7e <_free_r+0x26>
 800ebe8:	b003      	add	sp, #12
 800ebea:	bd30      	pop	{r4, r5, pc}
 800ebec:	24001074 	.word	0x24001074

0800ebf0 <_malloc_usable_size_r>:
 800ebf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf4:	1f18      	subs	r0, r3, #4
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bfbc      	itt	lt
 800ebfa:	580b      	ldrlt	r3, [r1, r0]
 800ebfc:	18c0      	addlt	r0, r0, r3
 800ebfe:	4770      	bx	lr

0800ec00 <__retarget_lock_acquire_recursive>:
 800ec00:	4770      	bx	lr

0800ec02 <__retarget_lock_release_recursive>:
 800ec02:	4770      	bx	lr

0800ec04 <_init>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	bf00      	nop
 800ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	4770      	bx	lr

0800ec10 <_fini>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	bf00      	nop
 800ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec16:	bc08      	pop	{r3}
 800ec18:	469e      	mov	lr, r3
 800ec1a:	4770      	bx	lr
