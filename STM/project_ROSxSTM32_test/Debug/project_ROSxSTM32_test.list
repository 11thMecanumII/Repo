
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e60c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e8dc  0800e8dc  0001e8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ebd4  0800ebd4  0001ebd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ebdc  0800ebdc  0001ebdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ebe4  0800ebe4  0001ebe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  0800ebe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e4c  24000218  0800ee00  00020218  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001064  0800ee00  00021064  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f32b  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003460  00000000  00000000  0003f571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001488  00000000  00000000  000429d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001388  00000000  00000000  00043e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e0b  00000000  00000000  000451e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a9cb  00000000  00000000  00079ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153648  00000000  00000000  000949be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8006  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c0c  00000000  00000000  001e8058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000218 	.word	0x24000218
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e8c4 	.word	0x0800e8c4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400021c 	.word	0x2400021c
 800030c:	0800e8c4 	.word	0x0800e8c4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	4aa9      	ldr	r2, [pc, #676]	; (8000930 <pidCtrl+0x2b0>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2168      	movs	r1, #104	; 0x68
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	3318      	adds	r3, #24
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000908 <pidCtrl+0x288>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000910 <pidCtrl+0x290>
 80006ae:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b2:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8000918 <pidCtrl+0x298>
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000920 <pidCtrl+0x2a0>
 80006be:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c2:	4a9b      	ldr	r2, [pc, #620]	; (8000930 <pidCtrl+0x2b0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2168      	movs	r1, #104	; 0x68
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3328      	adds	r3, #40	; 0x28
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d4:	4a96      	ldr	r2, [pc, #600]	; (8000930 <pidCtrl+0x2b0>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2168      	movs	r1, #104	; 0x68
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	3320      	adds	r3, #32
 80006e2:	ed93 6b00 	vldr	d6, [r3]
 80006e6:	4a92      	ldr	r2, [pc, #584]	; (8000930 <pidCtrl+0x2b0>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2168      	movs	r1, #104	; 0x68
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <pidCtrl+0x2b0>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2168      	movs	r1, #104	; 0x68
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 800070e:	4a88      	ldr	r2, [pc, #544]	; (8000930 <pidCtrl+0x2b0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2168      	movs	r1, #104	; 0x68
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	ed93 6b00 	vldr	d6, [r3]
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <pidCtrl+0x2b0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2168      	movs	r1, #104	; 0x68
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	ed93 7b00 	vldr	d7, [r3]
 8000730:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000734:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <pidCtrl+0x2b0>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2168      	movs	r1, #104	; 0x68
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	3348      	adds	r3, #72	; 0x48
 8000742:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000746:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <pidCtrl+0x2b0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2168      	movs	r1, #104	; 0x68
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	ed93 6b00 	vldr	d6, [r3]
 8000758:	4a75      	ldr	r2, [pc, #468]	; (8000930 <pidCtrl+0x2b0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	ed93 5b00 	vldr	d5, [r3]
 800076a:	4a71      	ldr	r2, [pc, #452]	; (8000930 <pidCtrl+0x2b0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	3338      	adds	r3, #56	; 0x38
 8000778:	ed93 7b00 	vldr	d7, [r3]
 800077c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000780:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8000920 <pidCtrl+0x2a0>
 8000784:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	4a68      	ldr	r2, [pc, #416]	; (8000930 <pidCtrl+0x2b0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <pidCtrl+0x2b0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2168      	movs	r1, #104	; 0x68
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	3310      	adds	r3, #16
 80007ac:	ed93 6b00 	vldr	d6, [r3]
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <pidCtrl+0x2b0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2168      	movs	r1, #104	; 0x68
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	ed93 5b00 	vldr	d5, [r3]
 80007c2:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <pidCtrl+0x2b0>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2168      	movs	r1, #104	; 0x68
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	3338      	adds	r3, #56	; 0x38
 80007d0:	ed93 7b00 	vldr	d7, [r3]
 80007d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007dc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000920 <pidCtrl+0x2a0>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <pidCtrl+0x2b0>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	3358      	adds	r3, #88	; 0x58
 80007f2:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80007f6:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <pidCtrl+0x2b0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2168      	movs	r1, #104	; 0x68
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3350      	adds	r3, #80	; 0x50
 8000804:	ed93 7b00 	vldr	d7, [r3]
 8000808:	eeb0 7bc7 	vabs.f64	d7, d7
 800080c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000810:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	dd1d      	ble.n	8000856 <pidCtrl+0x1d6>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <pidCtrl+0x2b0>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2168      	movs	r1, #104	; 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	3350      	adds	r3, #80	; 0x50
 8000828:	ed93 7b00 	vldr	d7, [r3]
 800082c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	db03      	blt.n	800083e <pidCtrl+0x1be>
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <pidCtrl+0x2b4>)
 800083c:	e002      	b.n	8000844 <pidCtrl+0x1c4>
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pidCtrl+0x2b8>)
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <pidCtrl+0x2b0>)
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2468      	movs	r4, #104	; 0x68
 800084a:	fb04 f101 	mul.w	r1, r4, r1
 800084e:	4401      	add	r1, r0
 8000850:	3150      	adds	r1, #80	; 0x50
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <pidCtrl+0x2b0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2168      	movs	r1, #104	; 0x68
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	3348      	adds	r3, #72	; 0x48
 8000864:	ed93 6b00 	vldr	d6, [r3]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <pidCtrl+0x2b0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2168      	movs	r1, #104	; 0x68
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <pidCtrl+0x2b0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2168      	movs	r1, #104	; 0x68
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	ed93 7b00 	vldr	d7, [r3]
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <pidCtrl+0x2b0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	3340      	adds	r3, #64	; 0x40
 80008a2:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <pidCtrl+0x2b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <pidCtrl+0x2b0>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2468      	movs	r4, #104	; 0x68
 80008be:	fb04 f101 	mul.w	r1, r4, r1
 80008c2:	4401      	add	r1, r0
 80008c4:	3138      	adds	r1, #56	; 0x38
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]

	Kpid[i].pulse = fabs(Kpid[i].u) * 3200;
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <pidCtrl+0x2b0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	3340      	adds	r3, #64	; 0x40
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000928 <pidCtrl+0x2a8>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <pidCtrl+0x2b0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2168      	movs	r1, #104	; 0x68
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	ed83 7b00 	vstr	d7, [r3]
//	if(Kpid[i].pulse > 3200)	Kpid[i].pulse = 3200;
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	f3af 8000 	nop.w
 8000908:	54cadf99 	.word	0x54cadf99
 800090c:	400921fb 	.word	0x400921fb
 8000910:	b6ae7d56 	.word	0xb6ae7d56
 8000914:	3fb97f62 	.word	0x3fb97f62
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	40e4cccc 	.word	0x40e4cccc
 8000920:	00000000 	.word	0x00000000
 8000924:	408f4000 	.word	0x408f4000
 8000928:	00000000 	.word	0x00000000
 800092c:	40a90000 	.word	0x40a90000
 8000930:	24000000 	.word	0x24000000
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f004 f8dc 	bl	8004afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f862 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fc68 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 fc3e 	bl	80011cc <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000950:	f000 fbf0 	bl	8001134 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000954:	f000 f91a 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000958:	f000 f96e 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000960:	f000 fa0e 	bl	8000d80 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000964:	f000 faa8 	bl	8000eb8 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000968:	f000 fb38 	bl	8000fdc <MX_TIM23_Init>
  MX_TIM24_Init();
 800096c:	f000 fb8c 	bl	8001088 <MX_TIM24_Init>
  MX_TIM2_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0xb0>)
 8000976:	f00a f855 	bl	800aa24 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xb4>)
 800097c:	f00a f852 	bl	800aa24 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0xb8>)
 8000984:	f00a f92c 	bl	800abe0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000988:	210c      	movs	r1, #12
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0xb8>)
 800098c:	f00a f928 	bl	800abe0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0xbc>)
 8000994:	f00a f924 	bl	800abe0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <main+0xbc>)
 800099c:	f00a f920 	bl	800abe0 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0xc0>)
 80009a4:	f00a fade 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xc0>)
 80009ac:	f00a fada 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xc4>)
 80009b4:	f00a fad6 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xc4>)
 80009bc:	f00a fad2 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0xc8>)
 80009c4:	f00a face 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xc8>)
 80009cc:	f00a faca 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0xcc>)
 80009d4:	f00a fac6 	bl	800af64 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <main+0xcc>)
 80009dc:	f00a fac2 	bl	800af64 <HAL_TIM_Encoder_Start>

//    for( int j = 0; j < 4; j ++){
//    	K_init(j);
//    }

    setup();
 80009e0:	f002 fd78 	bl	80034d4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 80009e4:	f002 fd8c 	bl	8003500 <loop>
 80009e8:	e7fc      	b.n	80009e4 <main+0xa8>
 80009ea:	bf00      	nop
 80009ec:	24000318 	.word	0x24000318
 80009f0:	24000234 	.word	0x24000234
 80009f4:	24000364 	.word	0x24000364
 80009f8:	240003b0 	.word	0x240003b0
 80009fc:	24000448 	.word	0x24000448
 8000a00:	24000280 	.word	0x24000280
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240003fc 	.word	0x240003fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00d fdc8 	bl	800e5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fdc2 	bl	800e5b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f007 fd11 	bl	8008454 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0xe0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <SystemClock_Config+0xe0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xe0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a7a:	2315      	movs	r3, #21
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fd14 	bl	80084c8 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fe63 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f8a6 	bl	8008c24 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ade:	f000 fe47 	bl	8001770 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	223f      	movs	r2, #63	; 0x3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b38:	f009 ff1c 	bl	800a974 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b42:	f000 fe15 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b54:	f00a fcc8 	bl	800b4e8 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f000 fe07 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b70:	f00b fa1a 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b7a:	f000 fdf9 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000234 	.word	0x24000234

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00d fd08 	bl	800e5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f00a f90c 	bl	800ae18 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fdb3 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f00b f9c6 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fda5 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000280 	.word	0x24000280
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fcb2 	bl	800e5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f00a f8b6 	bl	800ae18 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fd5d 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f00b f970 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 fd4f 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240002cc 	.word	0x240002cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_TIM5_Init+0x98>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d2a:	f009 fe23 	bl	800a974 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fd1c 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d46:	f00a fbcf 	bl	800b4e8 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fd0e 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d62:	f00b f921 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fd00 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	40000c00 	.word	0x40000c00

08000d80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00d fbff 	bl	800e5b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x134>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000de0:	f009 fea6 	bl	800ab30 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fcc1 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e02:	f00b f8d1 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fcb0 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e36:	f00a fa43 	bl	800b2c0 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 fc96 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e4e:	f00a fa37 	bl	800b2c0 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 fc8a 	bl	8001770 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e92:	f00b f925 	bl	800c0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000e9c:	f000 fc68 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000ea2:	f003 fb2b 	bl	80044fc <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d fb63 	bl	800e5b0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM15_Init+0x120>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000efe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f18:	f009 fe0a 	bl	800ab30 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fc25 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f36:	f00b f837 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fc16 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f6a:	f00a f9a9 	bl	800b2c0 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f74:	f000 fbfc 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f82:	f00a f99d 	bl	800b2c0 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 fbf0 	bl	8001770 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fb8:	f00b f892 	bl	800c0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fc2:	f000 fbd5 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fc8:	f003 fa98 	bl	80044fc <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3760      	adds	r7, #96	; 0x60
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240003b0 	.word	0x240003b0
 8000fd8:	40014000 	.word	0x40014000

08000fdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d fae0 	bl	800e5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM23_Init+0xa4>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM23_Init+0xa8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM23_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM23_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM23_Init+0xa4>)
 800104c:	f009 fee4 	bl	800ae18 <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 fb8b 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001068:	f00a ff9e 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 fb7d 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240003fc 	.word	0x240003fc
 8001084:	4000e000 	.word	0x4000e000

08001088 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fa8a 	bl	800e5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_TIM24_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM24_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM24_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM24_Init+0xa4>)
 80010f8:	f009 fe8e 	bl	800ae18 <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 fb35 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM24_Init+0xa4>)
 8001114:	f00a ff48 	bl	800bfa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 fb27 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000448 	.word	0x24000448
 8001130:	4000e400 	.word	0x4000e400

08001134 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_USART10_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800117e:	f00b f86d 	bl	800c25c <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 faf2 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001190:	f00d f8f0 	bl	800e374 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 fae9 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011a2:	f00d f925 	bl	800e3f0 <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 fae0 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011b2:	f00d f8a6 	bl	800e302 <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fad8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000494 	.word	0x24000494
 80011c8:	40011c00 	.word	0x40011c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x4c>)
 80011d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x4c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 fe12 	bl	8004e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fa:	200b      	movs	r0, #11
 80011fc:	f003 fe29 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200c      	movs	r0, #12
 8001206:	f003 fe0a 	bl	8004e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800120a:	200c      	movs	r0, #12
 800120c:	f003 fe21 	bl	8004e52 <HAL_NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <MX_GPIO_Init+0x170>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <MX_GPIO_Init+0x170>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_GPIO_Init+0x170>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x170>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_GPIO_Init+0x170>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x170>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <MX_GPIO_Init+0x170>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x170>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_GPIO_Init+0x170>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x170>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x170>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x170>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0x170>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_GPIO_Init+0x174>)
 800130c:	f007 f864 	bl	80083d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <MX_GPIO_Init+0x178>)
 8001318:	f007 f85e 	bl	80083d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800131c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001320:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0x174>)
 8001336:	f006 fda5 	bl	8007e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x17c>)
 8001352:	f006 fd97 	bl	8007e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x178>)
 8001370:	f006 fd88 	bl	8007e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f003 fd50 	bl	8004e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fd67 	bl	8004e52 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58021000 	.word	0x58021000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800
 800139c:	00000000 	.word	0x00000000

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d101      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 80013b2:	f002 f8af 	bl	8003514 <interPub>
	}
	if (htim->Instance == TIM5) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4aad      	ldr	r2, [pc, #692]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f040 81c9 	bne.w	8001754 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		Kpid[0].goalVel = Vy + Vx + (W * 0.152767);
 80013c2:	4bac      	ldr	r3, [pc, #688]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013c4:	ed93 6b00 	vldr	d6, [r3]
 80013c8:	4bab      	ldr	r3, [pc, #684]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80013ca:	ed93 7b00 	vldr	d7, [r3]
 80013ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d2:	4baa      	ldr	r3, [pc, #680]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013d4:	ed93 7b00 	vldr	d7, [r3]
 80013d8:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8001650 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80013dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013e4:	4ba6      	ldr	r3, [pc, #664]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013e6:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * 0.152844);
 80013ea:	4ba2      	ldr	r3, [pc, #648]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80013ec:	ed93 6b00 	vldr	d6, [r3]
 80013f0:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80013f2:	ed93 7b00 	vldr	d7, [r3]
 80013f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013fa:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013fc:	ed93 7b00 	vldr	d7, [r3]
 8001400:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8001658 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8001404:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001408:	ee36 7b47 	vsub.f64	d7, d6, d7
 800140c:	4b9c      	ldr	r3, [pc, #624]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800140e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
		Kpid[2].goalVel = Vy + Vx - (W * 0.152998);
 8001412:	4b98      	ldr	r3, [pc, #608]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001414:	ed93 6b00 	vldr	d6, [r3]
 8001418:	4b97      	ldr	r3, [pc, #604]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800141a:	ed93 7b00 	vldr	d7, [r3]
 800141e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001424:	ed93 7b00 	vldr	d7, [r3]
 8001428:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 8001660 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800142c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001430:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001436:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
		Kpid[3].goalVel = Vy - Vx + (W * 0.154852);
 800143a:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800143c:	ed93 6b00 	vldr	d6, [r3]
 8001440:	4b8d      	ldr	r3, [pc, #564]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001442:	ed93 7b00 	vldr	d7, [r3]
 8001446:	ee36 6b47 	vsub.f64	d6, d6, d7
 800144a:	4b8c      	ldr	r3, [pc, #560]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800144c:	ed93 7b00 	vldr	d7, [r3]
 8001450:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001668 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001454:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001458:	ee36 7b07 	vadd.f64	d7, d6, d7
 800145c:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800145e:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8001462:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800146c:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 800146e:	4b86      	ldr	r3, [pc, #536]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	b29b      	uxth	r3, r3
 8001476:	425b      	negs	r3, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b80      	ldr	r3, [pc, #512]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800147e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8001482:	4b82      	ldr	r3, [pc, #520]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800148c:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8001490:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800149a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		__HAL_TIM_SetCounter(&htim24, 0);
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 80014a6:	4b77      	ldr	r3, [pc, #476]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 80014ae:	4b78      	ldr	r3, [pc, #480]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 80014b6:	4b74      	ldr	r3, [pc, #464]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e005      	b.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0x130>
			pidCtrl(i);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff f8db 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	ddf6      	ble.n	80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014d8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80014dc:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014e4:	ee17 2a90 	vmov	r2, s15
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 80014ea:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014ec:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014f8:	ee17 2a90 	vmov	r2, s15
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001500:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800150c:	ee17 2a90 	vmov	r2, s15
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001514:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8001518:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152c:	485b      	ldr	r0, [pc, #364]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800152e:	f006 ff53 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4858      	ldr	r0, [pc, #352]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800153a:	f006 ff4d 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001544:	4856      	ldr	r0, [pc, #344]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001546:	f006 ff47 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	4854      	ldr	r0, [pc, #336]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001550:	f006 ff42 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	4851      	ldr	r0, [pc, #324]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800155c:	f006 ff3c 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	484e      	ldr	r0, [pc, #312]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001568:	f006 ff36 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001572:	484b      	ldr	r0, [pc, #300]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001574:	f006 ff30 	bl	80083d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4848      	ldr	r0, [pc, #288]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800157e:	f006 ff2b 	bl	80083d8 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001584:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001588:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	dd06      	ble.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x200>
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	4840      	ldr	r0, [pc, #256]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800159a:	f006 ff1d 	bl	80083d8 <HAL_GPIO_WritePin>
 800159e:	e00d      	b.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x21c>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015a2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80015a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	d505      	bpl.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x21c>
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b6:	4839      	ldr	r0, [pc, #228]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80015b8:	f006 ff0e 	bl	80083d8 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015be:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80015c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ca:	dd06      	ble.n	80015da <HAL_TIM_PeriodElapsedCallback+0x23a>
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d2:	4833      	ldr	r0, [pc, #204]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80015d4:	f006 ff00 	bl	80083d8 <HAL_GPIO_WritePin>
 80015d8:	e00c      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015dc:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80015e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	d504      	bpl.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x254>
 80015ea:	2201      	movs	r2, #1
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	482c      	ldr	r0, [pc, #176]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80015f0:	f006 fef2 	bl	80083d8 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015f6:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 80015fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	dd06      	ble.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x272>
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160a:	4825      	ldr	r0, [pc, #148]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800160c:	f006 fee4 	bl	80083d8 <HAL_GPIO_WritePin>
 8001610:	e00d      	b.n	800162e <HAL_TIM_PeriodElapsedCallback+0x28e>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001614:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8001618:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	d505      	bpl.n	800162e <HAL_TIM_PeriodElapsedCallback+0x28e>
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001628:	481d      	ldr	r0, [pc, #116]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800162a:	f006 fed5 	bl	80083d8 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001630:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8001634:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd32      	ble.n	80016a4 <HAL_TIM_PeriodElapsedCallback+0x304>
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001646:	f006 fec7 	bl	80083d8 <HAL_GPIO_WritePin>
 800164a:	e038      	b.n	80016be <HAL_TIM_PeriodElapsedCallback+0x31e>
 800164c:	f3af 8000 	nop.w
 8001650:	7a743a64 	.word	0x7a743a64
 8001654:	3fc38dde 	.word	0x3fc38dde
 8001658:	66b1e5c1 	.word	0x66b1e5c1
 800165c:	3fc39064 	.word	0x3fc39064
 8001660:	3f2d3c79 	.word	0x3f2d3c79
 8001664:	3fc39570 	.word	0x3fc39570
 8001668:	b9dc2f40 	.word	0xb9dc2f40
 800166c:	3fc3d230 	.word	0x3fc3d230
 8001670:	40000c00 	.word	0x40000c00
 8001674:	24000628 	.word	0x24000628
 8001678:	24000620 	.word	0x24000620
 800167c:	24000630 	.word	0x24000630
 8001680:	24000000 	.word	0x24000000
 8001684:	240003fc 	.word	0x240003fc
 8001688:	240002cc 	.word	0x240002cc
 800168c:	24000448 	.word	0x24000448
 8001690:	24000280 	.word	0x24000280
 8001694:	24000364 	.word	0x24000364
 8001698:	240003b0 	.word	0x240003b0
 800169c:	58020400 	.word	0x58020400
 80016a0:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016a6:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 80016aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d504      	bpl.n	80016be <HAL_TIM_PeriodElapsedCallback+0x31e>
 80016b4:	2201      	movs	r2, #1
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	4829      	ldr	r0, [pc, #164]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80016ba:	f006 fe8d 	bl	80083d8 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016c0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016c6:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80016ca:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016d0:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 80016d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016da:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 80016de:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 80016e2:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80016e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80016ec:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016f2:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80016f8:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80016fc:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001702:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8001706:	ee36 6b07 	vadd.f64	d6, d6, d7
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800170c:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8001710:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001714:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001718:	ee27 7b06 	vmul.f64	d7, d7, d6
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800171e:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001724:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800172a:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800172e:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001734:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8001738:	ee36 6b47 	vsub.f64	d6, d6, d7
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800173e:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8001742:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001746:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 800174a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001750:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	24000000 	.word	0x24000000
 8001760:	58021000 	.word	0x58021000
 8001764:	24000640 	.word	0x24000640
 8001768:	24000638 	.word	0x24000638
 800176c:	24000648 	.word	0x24000648

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>

0800177a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <_ZN3ros3MsgC1Ev+0x1c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	0800eb84 	.word	0x0800eb84

080017bc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
      data()
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffe8 	bl	800179c <_ZN3ros3MsgC1Ev>
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffcf 	bl	800177a <_ZN3ros4TimeC1Ev>
    {
    }
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800eb6c 	.word	0x0800eb6c

080017ec <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6859      	ldr	r1, [r3, #4]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0a19      	lsrs	r1, r3, #8
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3301      	adds	r3, #1
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	0c19      	lsrs	r1, r3, #16
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3302      	adds	r3, #2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0e19      	lsrs	r1, r3, #24
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3303      	adds	r3, #3
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0a19      	lsrs	r1, r3, #8
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3301      	adds	r3, #1
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	0c19      	lsrs	r1, r3, #16
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3302      	adds	r3, #2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	0e19      	lsrs	r1, r3, #24
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3303      	adds	r3, #3
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3304      	adds	r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
      return offset;
 800188e:	68fb      	ldr	r3, [r7, #12]
    }
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440b      	add	r3, r1
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3302      	adds	r3, #2
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	440b      	add	r3, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3303      	adds	r3, #3
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	440b      	add	r3, r1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3302      	adds	r3, #2
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	440b      	add	r3, r1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3303      	adds	r3, #3
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3304      	adds	r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
     return offset;
 8001956:	68fb      	ldr	r3, [r7, #12]
    }
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0800e8dc 	.word	0x0800e8dc

08001980 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	0800e8f0 	.word	0x0800e8f0

0800199c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fef8 	bl	800179c <_ZN3ros3MsgC1Ev>
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	809a      	strh	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
    {
    }
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	0800eb54 	.word	0x0800eb54
 80019e0:	0800e914 	.word	0x0800e914

080019e4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8899      	ldrh	r1, [r3, #4]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b299      	uxth	r1, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b2ca      	uxtb	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3302      	adds	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fc76 	bl	8000310 <strlen>
 8001a24:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fda2 	bl	8003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	3304      	adds	r3, #4
 8001a38:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	18d0      	adds	r0, r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4619      	mov	r1, r3
 8001a48:	f00c fda4 	bl	800e594 <memcpy>
      offset += length_topic_name;
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4413      	add	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fc59 	bl	8000310 <strlen>
 8001a5e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 fd85 	bl	8003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	18d0      	adds	r0, r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f00c fd87 	bl	800e594 <memcpy>
      offset += length_message_type;
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fc3c 	bl	8000310 <strlen>
 8001a98:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd68 	bl	8003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	18d0      	adds	r0, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4619      	mov	r1, r3
 8001abc:	f00c fd6a 	bl	800e594 <memcpy>
      offset += length_md5sum;
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ace:	68f9      	ldr	r1, [r7, #12]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0a19      	lsrs	r1, r3, #8
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0c19      	lsrs	r1, r3, #16
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3302      	adds	r3, #2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	0e19      	lsrs	r1, r3, #24
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3303      	adds	r3, #3
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b10:	69fb      	ldr	r3, [r7, #28]
    }
 8001b12:	4618      	mov	r0, r3
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b08a      	sub	sp, #40	; 0x28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	440b      	add	r3, r1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	3302      	adds	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	441a      	add	r2, r3
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fd24 	bl	80035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20c      	bcs.n	8001b9c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	441a      	add	r2, r3
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	440b      	add	r3, r1
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3301      	adds	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e7ec      	b.n	8001b76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fcf1 	bl	80035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d20c      	bcs.n	8001c02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	441a      	add	r2, r3
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	7812      	ldrb	r2, [r2, #0]
 8001bf8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	e7ec      	b.n	8001bdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4413      	add	r3, r2
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 fcbe 	bl	80035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d20c      	bcs.n	8001c68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	441a      	add	r2, r3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e7ec      	b.n	8001c42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	441a      	add	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	440a      	add	r2, r1
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	440b      	add	r3, r1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	440b      	add	r3, r1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	61bb      	str	r3, [r7, #24]
     return offset;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
    }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0800e918 	.word	0x0800e918

08001d08 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	0800e934 	.word	0x0800e934

08001d24 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd34 	bl	800179c <_ZN3ros3MsgC1Ev>
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	711a      	strb	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001d44:	609a      	str	r2, [r3, #8]
    {
    }
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800eb3c 	.word	0x0800eb3c
 8001d54:	0800e914 	.word	0x0800e914

08001d58 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	7912      	ldrb	r2, [r2, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fac7 	bl	8000310 <strlen>
 8001d82:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fbf3 	bl	8003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	18d0      	adds	r0, r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f00c fbf5 	bl	800e594 <memcpy>
      offset += length_msg;
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001db2:	68fb      	ldr	r3, [r7, #12]
    }
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	441a      	add	r2, r3
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fbe3 	bl	80035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3304      	adds	r3, #4
 8001df2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d20c      	bcs.n	8001e1e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	441a      	add	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	440b      	add	r3, r1
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e7ec      	b.n	8001df8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	3b01      	subs	r3, #1
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
     return offset;
 8001e42:	693b      	ldr	r3, [r7, #16]
    }
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0800e958 	.word	0x0800e958

08001e68 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	0800e96c 	.word	0x0800e96c

08001e84 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fc84 	bl	800179c <_ZN3ros3MsgC1Ev>
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0800eb24 	.word	0x0800eb24

08001ecc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0a19      	lsrs	r1, r3, #8
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0c19      	lsrs	r1, r3, #16
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3302      	adds	r3, #2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	b2ca      	uxtb	r2, r1
 8001f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0e19      	lsrs	r1, r3, #24
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	3303      	adds	r3, #3
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3304      	adds	r3, #4
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	6a3a      	ldr	r2, [r7, #32]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d22b      	bcs.n	8001f8a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	0a19      	lsrs	r1, r3, #8
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3301      	adds	r3, #1
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	0c19      	lsrs	r1, r3, #16
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3302      	adds	r3, #2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	0e19      	lsrs	r1, r3, #24
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3303      	adds	r3, #3
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3304      	adds	r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	3301      	adds	r3, #1
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	e7ce      	b.n	8001f28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	0a19      	lsrs	r1, r3, #8
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	0c19      	lsrs	r1, r3, #16
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2ca      	uxtb	r2, r1
 8001fba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	0e19      	lsrs	r1, r3, #24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d22b      	bcs.n	800203a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0a19      	lsrs	r1, r3, #8
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3301      	adds	r3, #1
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0c19      	lsrs	r1, r3, #16
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3302      	adds	r3, #2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	0e19      	lsrs	r1, r3, #24
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	3303      	adds	r3, #3
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3304      	adds	r3, #4
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	e7ce      	b.n	8001fd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69d9      	ldr	r1, [r3, #28]
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	0a19      	lsrs	r1, r3, #8
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	3301      	adds	r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	0c19      	lsrs	r1, r3, #16
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3302      	adds	r3, #2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	0e19      	lsrs	r1, r3, #24
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	3303      	adds	r3, #3
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3304      	adds	r3, #4
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	429a      	cmp	r2, r3
 8002090:	d228      	bcs.n	80020e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f936 	bl	8000310 <strlen>
 80020a4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 fa62 	bl	8003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3304      	adds	r3, #4
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	18d0      	adds	r0, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f00c fa60 	bl	800e594 <memcpy>
      offset += length_stringsi;
 80020d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4413      	add	r3, r2
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3301      	adds	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	e7d1      	b.n	8002088 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3728      	adds	r7, #40	; 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b08e      	sub	sp, #56	; 0x38
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	3301      	adds	r3, #1
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	4313      	orrs	r3, r2
 8002116:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	3302      	adds	r3, #2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	6a3a      	ldr	r2, [r7, #32]
 8002126:	4313      	orrs	r3, r2
 8002128:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	3303      	adds	r3, #3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	4313      	orrs	r3, r2
 800213a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	3304      	adds	r3, #4
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	6a3a      	ldr	r2, [r7, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d90a      	bls.n	8002162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f00c fa32 	bl	800e5c0 <realloc>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	429a      	cmp	r2, r3
 8002174:	d236      	bcs.n	80021e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	440a      	add	r2, r1
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218c:	3301      	adds	r3, #1
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	440b      	add	r3, r1
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	3302      	adds	r3, #2
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	440b      	add	r3, r1
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	3303      	adds	r3, #3
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	440b      	add	r3, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	3304      	adds	r3, #4
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	3301      	adds	r3, #1
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	e7c3      	b.n	800216c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f0:	3301      	adds	r3, #1
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	3302      	adds	r3, #2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	4313      	orrs	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	3303      	adds	r3, #3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	4313      	orrs	r3, r2
 8002222:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	3304      	adds	r3, #4
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	d90a      	bls.n	800224a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f00c f9be 	bl	800e5c0 <realloc>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225a:	429a      	cmp	r2, r3
 800225c:	d236      	bcs.n	80022cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	440a      	add	r2, r1
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	3301      	adds	r3, #1
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	440b      	add	r3, r1
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	3302      	adds	r3, #2
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	440b      	add	r3, r1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	3303      	adds	r3, #3
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	3304      	adds	r3, #4
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	3214      	adds	r2, #20
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	3301      	adds	r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	e7c3      	b.n	8002254 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	3301      	adds	r3, #1
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	3302      	adds	r3, #2
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fc:	3303      	adds	r3, #3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	3304      	adds	r3, #4
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	429a      	cmp	r2, r3
 800231a:	d90a      	bls.n	8002332 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f00c f94a 	bl	800e5c0 <realloc>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002342:	429a      	cmp	r2, r3
 8002344:	d23f      	bcs.n	80023c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	441a      	add	r2, r3
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f92e 	bl	80035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	3304      	adds	r3, #4
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	429a      	cmp	r2, r3
 800236c:	d20c      	bcs.n	8002388 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	441a      	add	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	440b      	add	r3, r1
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3301      	adds	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	e7ec      	b.n	8002362 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	3b01      	subs	r3, #1
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	3b01      	subs	r3, #1
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	441a      	add	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80023a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	3220      	adds	r2, #32
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	3301      	adds	r3, #1
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c4:	e7ba      	b.n	800233c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80023c8:	4618      	mov	r0, r3
 80023ca:	3738      	adds	r7, #56	; 0x38
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	0800ea78 	.word	0x0800ea78

080023ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	0800e990 	.word	0x0800e990

08002408 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68d8      	ldr	r0, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6891      	ldr	r1, [r2, #8]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4798      	blx	r3
 8002454:	4603      	mov	r3, r0
  };
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
  }
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a42      	ldr	r2, [pc, #264]	; (8002594 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d068      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d061      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a3d      	ldr	r2, [pc, #244]	; (800259c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d05a      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d053      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04c      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a36      	ldr	r2, [pc, #216]	; (80025a8 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d045      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d03e      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d037      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d030      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d029      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01b      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d014      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d006      	beq.n	8002560 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	e008      	b.n	8002586 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8

080025d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <_ZN13STM32HardwareC1Ev+0x34>)
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	24000494 	.word	0x24000494

0800260c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f804 	bl	8002622 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	4619      	mov	r1, r3
 8002638:	f009 ff2e 	bl	800c498 <HAL_UART_Receive_DMA>
    }
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff0d 	bl	8002478 <_ZN13STM32Hardware10getRdmaIndEv>
 800265e:	4603      	mov	r3, r0
 8002660:	429c      	cmp	r4, r3
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002674:	1c59      	adds	r1, r3, #1
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800268a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002694:	68fb      	ldr	r3, [r7, #12]
    }
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
	...

080026a0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d108      	bne.n	80026c6 <_ZN13STM32Hardware5flushEv+0x26>
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <_ZN13STM32Hardware5flushEv+0xb4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f083 0301 	eor.w	r3, r3, #1
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <_ZN13STM32Hardware5flushEv+0x26>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <_ZN13STM32Hardware5flushEv+0x28>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03f      	beq.n	800274c <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <_ZN13STM32Hardware5flushEv+0xb4>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d031      	beq.n	8002746 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20a      	bcs.n	8002708 <_ZN13STM32Hardware5flushEv+0x68>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002700:	b29b      	uxth	r3, r3
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	e006      	b.n	8002716 <_ZN13STM32Hardware5flushEv+0x76>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800270e:	b29b      	uxth	r3, r3
 8002710:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002714:	b29b      	uxth	r3, r3
 8002716:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002722:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	89fa      	ldrh	r2, [r7, #14]
 800272c:	4619      	mov	r1, r3
 800272e:	f009 fe21 	bl	800c374 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002738:	89fb      	ldrh	r3, [r7, #14]
 800273a:	4413      	add	r3, r2
 800273c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002746:	4b03      	ldr	r3, [pc, #12]	; (8002754 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
      }
    }
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	24000614 	.word	0x24000614

08002758 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
      int n = length;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276e:	bfa8      	it	ge
 8002770:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002774:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800277c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4293      	cmp	r3, r2
 8002784:	bf28      	it	cs
 8002786:	4613      	movcs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002790:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f00b fef9 	bl	800e594 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	4413      	add	r3, r2
 80027ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d00b      	beq.n	80027d6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	18d1      	adds	r1, r2, r3
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	f00b fedf 	bl	800e594 <memcpy>
      }

      flush();
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff ff62 	bl	80026a0 <_ZN13STM32Hardware5flushEv>
    }
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	f002 fa0c 	bl	8004c08 <HAL_GetTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe ffc8 	bl	800179c <_ZN3ros3MsgC1Ev>
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	0800eae0 	.word	0x0800eae0

0800284c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800284c:	b480      	push	{r7}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002860:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	4401      	add	r1, r0
 800286e:	b2d3      	uxtb	r3, r2
 8002870:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	0a02      	lsrs	r2, r0, #8
 8002880:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002884:	0a0b      	lsrs	r3, r1, #8
 8002886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002888:	3101      	adds	r1, #1
 800288a:	6838      	ldr	r0, [r7, #0]
 800288c:	4401      	add	r1, r0
 800288e:	b2d3      	uxtb	r3, r2
 8002890:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	0c02      	lsrs	r2, r0, #16
 80028a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028a4:	0c0b      	lsrs	r3, r1, #16
 80028a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a8:	3102      	adds	r1, #2
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	4401      	add	r1, r0
 80028ae:	b2d3      	uxtb	r3, r2
 80028b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80028b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	0e02      	lsrs	r2, r0, #24
 80028c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028c4:	0e0b      	lsrs	r3, r1, #24
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	3103      	adds	r1, #3
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	4401      	add	r1, r0
 80028ce:	b2d3      	uxtb	r3, r2
 80028d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80028d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	000a      	movs	r2, r1
 80028e0:	2300      	movs	r3, #0
 80028e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e4:	3104      	adds	r1, #4
 80028e6:	6838      	ldr	r0, [r7, #0]
 80028e8:	4401      	add	r1, r0
 80028ea:	b2d3      	uxtb	r3, r2
 80028ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80028ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	0a0a      	lsrs	r2, r1, #8
 80028fc:	2300      	movs	r3, #0
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	3105      	adds	r1, #5
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	4401      	add	r1, r0
 8002906:	b2d3      	uxtb	r3, r2
 8002908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800290a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	0c0a      	lsrs	r2, r1, #16
 8002918:	2300      	movs	r3, #0
 800291a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291c:	3106      	adds	r1, #6
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	4401      	add	r1, r0
 8002922:	b2d3      	uxtb	r3, r2
 8002924:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002926:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	0e0a      	lsrs	r2, r1, #24
 8002934:	2300      	movs	r3, #0
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	3107      	adds	r1, #7
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	4401      	add	r1, r0
 800293e:	b2d3      	uxtb	r3, r2
 8002940:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3308      	adds	r3, #8
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800294e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002952:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002958:	6838      	ldr	r0, [r7, #0]
 800295a:	4401      	add	r1, r0
 800295c:	b2d3      	uxtb	r3, r2
 800295e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	0a02      	lsrs	r2, r0, #8
 800296e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002972:	0a0b      	lsrs	r3, r1, #8
 8002974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002976:	3101      	adds	r1, #1
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	4401      	add	r1, r0
 800297c:	b2d3      	uxtb	r3, r2
 800297e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002980:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	0c02      	lsrs	r2, r0, #16
 800298e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002992:	0c0b      	lsrs	r3, r1, #16
 8002994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002996:	3102      	adds	r1, #2
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	4401      	add	r1, r0
 800299c:	b2d3      	uxtb	r3, r2
 800299e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80029a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	0e02      	lsrs	r2, r0, #24
 80029ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029b2:	0e0b      	lsrs	r3, r1, #24
 80029b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b6:	3103      	adds	r1, #3
 80029b8:	6838      	ldr	r0, [r7, #0]
 80029ba:	4401      	add	r1, r0
 80029bc:	b2d3      	uxtb	r3, r2
 80029be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80029c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	000a      	movs	r2, r1
 80029ce:	2300      	movs	r3, #0
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	3104      	adds	r1, #4
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	4401      	add	r1, r0
 80029d8:	b2d3      	uxtb	r3, r2
 80029da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80029dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	0a0a      	lsrs	r2, r1, #8
 80029ea:	2300      	movs	r3, #0
 80029ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ee:	3105      	adds	r1, #5
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	4401      	add	r1, r0
 80029f4:	b2d3      	uxtb	r3, r2
 80029f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80029f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	0c0a      	lsrs	r2, r1, #16
 8002a06:	2300      	movs	r3, #0
 8002a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0a:	3106      	adds	r1, #6
 8002a0c:	6838      	ldr	r0, [r7, #0]
 8002a0e:	4401      	add	r1, r0
 8002a10:	b2d3      	uxtb	r3, r2
 8002a12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002a14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	0e0a      	lsrs	r2, r1, #24
 8002a22:	2300      	movs	r3, #0
 8002a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a26:	3107      	adds	r1, #7
 8002a28:	6838      	ldr	r0, [r7, #0]
 8002a2a:	4401      	add	r1, r0
 8002a2c:	b2d3      	uxtb	r3, r2
 8002a2e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	3308      	adds	r3, #8
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	4401      	add	r1, r0
 8002a4a:	b2d3      	uxtb	r3, r2
 8002a4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002a4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	0a02      	lsrs	r2, r0, #8
 8002a5c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a60:	0a0b      	lsrs	r3, r1, #8
 8002a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a64:	3101      	adds	r1, #1
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	4401      	add	r1, r0
 8002a6a:	b2d3      	uxtb	r3, r2
 8002a6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	0c02      	lsrs	r2, r0, #16
 8002a7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a80:	0c0b      	lsrs	r3, r1, #16
 8002a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a84:	3102      	adds	r1, #2
 8002a86:	6838      	ldr	r0, [r7, #0]
 8002a88:	4401      	add	r1, r0
 8002a8a:	b2d3      	uxtb	r3, r2
 8002a8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002a8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	0e02      	lsrs	r2, r0, #24
 8002a9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aa0:	0e0b      	lsrs	r3, r1, #24
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	3103      	adds	r1, #3
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	4401      	add	r1, r0
 8002aaa:	b2d3      	uxtb	r3, r2
 8002aac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	000a      	movs	r2, r1
 8002abc:	2300      	movs	r3, #0
 8002abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac0:	3104      	adds	r1, #4
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	4401      	add	r1, r0
 8002ac6:	b2d3      	uxtb	r3, r2
 8002ac8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002aca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	0a0a      	lsrs	r2, r1, #8
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002adc:	3105      	adds	r1, #5
 8002ade:	6838      	ldr	r0, [r7, #0]
 8002ae0:	4401      	add	r1, r0
 8002ae2:	b2d3      	uxtb	r3, r2
 8002ae4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	0c0a      	lsrs	r2, r1, #16
 8002af4:	2300      	movs	r3, #0
 8002af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af8:	3106      	adds	r1, #6
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	4401      	add	r1, r0
 8002afe:	b2d3      	uxtb	r3, r2
 8002b00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	0e0a      	lsrs	r2, r1, #24
 8002b10:	2300      	movs	r3, #0
 8002b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b14:	3107      	adds	r1, #7
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	4401      	add	r1, r0
 8002b1a:	b2d3      	uxtb	r3, r2
 8002b1c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	3308      	adds	r3, #8
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b26:	4618      	mov	r0, r3
 8002b28:	372c      	adds	r7, #44	; 0x2c
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b32:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b36:	b0eb      	sub	sp, #428	; 0x1ac
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002b3e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b58:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b60:	4413      	add	r3, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2200      	movs	r2, #0
 8002b68:	461c      	mov	r4, r3
 8002b6a:	4615      	mov	r5, r2
 8002b6c:	ea40 0804 	orr.w	r8, r0, r4
 8002b70:	ea41 0905 	orr.w	r9, r1, r5
 8002b74:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b78:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	469a      	mov	sl, r3
 8002b90:	4693      	mov	fp, r2
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b9e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002ba2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002ba6:	ea40 0402 	orr.w	r4, r0, r2
 8002baa:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002bb4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002bb8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bbc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002bd6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002be6:	464c      	mov	r4, r9
 8002be8:	0423      	lsls	r3, r4, #16
 8002bea:	4644      	mov	r4, r8
 8002bec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002bf0:	4644      	mov	r4, r8
 8002bf2:	0422      	lsls	r2, r4, #16
 8002bf4:	ea40 0402 	orr.w	r4, r0, r2
 8002bf8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002c02:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002c06:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c0a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c12:	1cda      	adds	r2, r3, #3
 8002c14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002c24:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002c28:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002c34:	4623      	mov	r3, r4
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c3c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002c40:	4623      	mov	r3, r4
 8002c42:	4303      	orrs	r3, r0
 8002c44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c48:	462b      	mov	r3, r5
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c50:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002c54:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002c72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002c82:	0023      	movs	r3, r4
 8002c84:	2200      	movs	r2, #0
 8002c86:	ea40 0402 	orr.w	r4, r0, r2
 8002c8a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c94:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002c98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ca0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca4:	1d5a      	adds	r2, r3, #5
 8002ca6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002cb6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002cc6:	0223      	lsls	r3, r4, #8
 8002cc8:	2200      	movs	r2, #0
 8002cca:	ea40 0402 	orr.w	r4, r0, r2
 8002cce:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002cd8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002cdc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ce0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ce4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce8:	1d9a      	adds	r2, r3, #6
 8002cea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cfa:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002d0a:	0423      	lsls	r3, r4, #16
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	ea40 0402 	orr.w	r4, r0, r2
 8002d12:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d1c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002d20:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d24:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d2c:	1dda      	adds	r2, r3, #7
 8002d2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002d3e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002d4e:	0623      	lsls	r3, r4, #24
 8002d50:	2200      	movs	r2, #0
 8002d52:	ea40 0402 	orr.w	r4, r0, r2
 8002d56:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d60:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002d64:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002d68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d70:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002d74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d78:	3308      	adds	r3, #8
 8002d7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d8e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002da2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002da6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002daa:	4623      	mov	r3, r4
 8002dac:	4303      	orrs	r3, r0
 8002dae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002db2:	462b      	mov	r3, r5
 8002db4:	430b      	orrs	r3, r1
 8002db6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dba:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002dbe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ddc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002dec:	464c      	mov	r4, r9
 8002dee:	0223      	lsls	r3, r4, #8
 8002df0:	4644      	mov	r4, r8
 8002df2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002df6:	4644      	mov	r4, r8
 8002df8:	0222      	lsls	r2, r4, #8
 8002dfa:	ea40 0402 	orr.w	r4, r0, r2
 8002dfe:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002e02:	430b      	orrs	r3, r1
 8002e04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002e08:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002e0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e10:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e18:	1c9a      	adds	r2, r3, #2
 8002e1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002e3a:	464c      	mov	r4, r9
 8002e3c:	0423      	lsls	r3, r4, #16
 8002e3e:	4644      	mov	r4, r8
 8002e40:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e44:	4644      	mov	r4, r8
 8002e46:	0422      	lsls	r2, r4, #16
 8002e48:	ea40 0402 	orr.w	r4, r0, r2
 8002e4c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002e50:	430b      	orrs	r3, r1
 8002e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e56:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002e5a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e5e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e66:	1cda      	adds	r2, r3, #3
 8002e68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e78:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e7c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002e80:	4623      	mov	r3, r4
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e88:	4623      	mov	r3, r4
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e90:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002e94:	4623      	mov	r3, r4
 8002e96:	4303      	orrs	r3, r0
 8002e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ea4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ea8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002eac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002eb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ec6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002ed6:	0023      	movs	r3, r4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	ea40 0402 	orr.w	r4, r0, r2
 8002ede:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ee8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002eec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ef0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ef4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ef8:	1d5a      	adds	r2, r3, #5
 8002efa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f0a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002f1a:	0223      	lsls	r3, r4, #8
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	ea40 0402 	orr.w	r4, r0, r2
 8002f22:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002f26:	430b      	orrs	r3, r1
 8002f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f2c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002f30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f3c:	1d9a      	adds	r2, r3, #6
 8002f3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002f5e:	0423      	lsls	r3, r4, #16
 8002f60:	2200      	movs	r2, #0
 8002f62:	ea40 0402 	orr.w	r4, r0, r2
 8002f66:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f70:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002f74:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f80:	1dda      	adds	r2, r3, #7
 8002f82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002fa2:	0623      	lsls	r3, r4, #24
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	ea40 0402 	orr.w	r4, r0, r2
 8002faa:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fb4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002fb8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002fbc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fc0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002fc4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002fc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fcc:	3308      	adds	r3, #8
 8002fce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fde:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fe2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fe6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ffa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002ffe:	4623      	mov	r3, r4
 8003000:	4303      	orrs	r3, r0
 8003002:	67bb      	str	r3, [r7, #120]	; 0x78
 8003004:	462b      	mov	r3, r5
 8003006:	430b      	orrs	r3, r1
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800300a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800300e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003012:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003016:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003020:	4413      	add	r3, r2
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2200      	movs	r2, #0
 8003028:	673b      	str	r3, [r7, #112]	; 0x70
 800302a:	677a      	str	r2, [r7, #116]	; 0x74
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003038:	464c      	mov	r4, r9
 800303a:	0223      	lsls	r3, r4, #8
 800303c:	4644      	mov	r4, r8
 800303e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003042:	4644      	mov	r4, r8
 8003044:	0222      	lsls	r2, r4, #8
 8003046:	ea40 0402 	orr.w	r4, r0, r2
 800304a:	66bc      	str	r4, [r7, #104]	; 0x68
 800304c:	430b      	orrs	r3, r1
 800304e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003050:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003054:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003058:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800305c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2200      	movs	r2, #0
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	667a      	str	r2, [r7, #100]	; 0x64
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307e:	464c      	mov	r4, r9
 8003080:	0423      	lsls	r3, r4, #16
 8003082:	4644      	mov	r4, r8
 8003084:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003088:	4644      	mov	r4, r8
 800308a:	0422      	lsls	r2, r4, #16
 800308c:	ea40 0402 	orr.w	r4, r0, r2
 8003090:	65bc      	str	r4, [r7, #88]	; 0x58
 8003092:	430b      	orrs	r3, r1
 8003094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003096:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800309a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800309e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030a6:	1cda      	adds	r2, r3, #3
 80030a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	653b      	str	r3, [r7, #80]	; 0x50
 80030b6:	657a      	str	r2, [r7, #84]	; 0x54
 80030b8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80030bc:	4623      	mov	r3, r4
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c2:	4623      	mov	r3, r4
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030cc:	4623      	mov	r3, r4
 80030ce:	4303      	orrs	r3, r0
 80030d0:	643b      	str	r3, [r7, #64]	; 0x40
 80030d2:	462b      	mov	r3, r5
 80030d4:	430b      	orrs	r3, r1
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44
 80030d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80030dc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80030e0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003104:	0023      	movs	r3, r4
 8003106:	2200      	movs	r2, #0
 8003108:	ea40 0402 	orr.w	r4, r0, r2
 800310c:	633c      	str	r4, [r7, #48]	; 0x30
 800310e:	430b      	orrs	r3, r1
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003116:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800311a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800311e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003122:	1d5a      	adds	r2, r3, #5
 8003124:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2200      	movs	r2, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800313e:	0223      	lsls	r3, r4, #8
 8003140:	2200      	movs	r2, #0
 8003142:	ea40 0402 	orr.w	r4, r0, r2
 8003146:	623c      	str	r4, [r7, #32]
 8003148:	430b      	orrs	r3, r1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003150:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003154:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003158:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800315c:	3306      	adds	r3, #6
 800315e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2200      	movs	r2, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	61fa      	str	r2, [r7, #28]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	69bc      	ldr	r4, [r7, #24]
 8003178:	0423      	lsls	r3, r4, #16
 800317a:	2200      	movs	r2, #0
 800317c:	ea40 0402 	orr.w	r4, r0, r2
 8003180:	613c      	str	r4, [r7, #16]
 8003182:	430b      	orrs	r3, r1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800318a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800318e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003192:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003196:	3307      	adds	r3, #7
 8003198:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800319c:	4413      	add	r3, r2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2200      	movs	r2, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	68bc      	ldr	r4, [r7, #8]
 80031b2:	0623      	lsls	r3, r4, #24
 80031b4:	2200      	movs	r2, #0
 80031b6:	ea40 0402 	orr.w	r4, r0, r2
 80031ba:	603c      	str	r4, [r7, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031c4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80031c8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80031cc:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80031d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80031d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031d8:	3308      	adds	r3, #8
 80031da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80031de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80031e2:	4618      	mov	r0, r3
 80031e4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031ee:	4770      	bx	lr

080031f0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	0800e9b4 	.word	0x0800e9b4

0800320c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	0800e9cc 	.word	0x0800e9cc

08003228 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fab2 	bl	800179c <_ZN3ros3MsgC1Ev>
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3308      	adds	r3, #8
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fada 	bl	80027fc <_ZN13geometry_msgs7Vector3C1Ev>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fad5 	bl	80027fc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	0800eac8 	.word	0x0800eac8

08003260 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 0008 	add.w	r0, r3, #8
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7ff fae6 	bl	800284c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7ff fad9 	bl	800284c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80032a2:	68fb      	ldr	r3, [r7, #12]
    }
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f103 0008 	add.w	r0, r3, #8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7ff fc33 	bl	8002b32 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7ff fc26 	bl	8002b32 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
     return offset;
 80032ee:	68fb      	ldr	r3, [r7, #12]
    }
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	0800e9f0 	.word	0x0800e9f0

08003314 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	0800ea04 	.word	0x0800ea04

08003330 <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;


void callback(const geometry_msgs::Twist &msg)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800333e:	490a      	ldr	r1, [pc, #40]	; (8003368 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8003340:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800334a:	4908      	ldr	r1, [pc, #32]	; (800336c <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 800334c:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003356:	4906      	ldr	r1, [pc, #24]	; (8003370 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8003358:	e9c1 2300 	strd	r2, r3, [r1]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	24000620 	.word	0x24000620
 800336c:	24000628 	.word	0x24000628
 8003370:	24000630 	.word	0x24000630

08003374 <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &insVel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003378:	b672      	cpsid	i
}
 800337a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800337c:	e7fe      	b.n	800337c <_Z13Error_Handlerv+0x8>
	...

08003380 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003384:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003386:	4a2d      	ldr	r2, [pc, #180]	; (800343c <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003388:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80033c8:	481b      	ldr	r0, [pc, #108]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033ca:	f008 ff47 	bl	800c25c <HAL_UART_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 80033de:	f7ff ffc9 	bl	8003374 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e2:	2100      	movs	r1, #0
 80033e4:	4814      	ldr	r0, [pc, #80]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033e6:	f00a ffc5 	bl	800e374 <HAL_UARTEx_SetTxFifoThreshold>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80033fa:	f7ff ffbb 	bl	8003374 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003402:	f00a fff5 	bl	800e3f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 8003416:	f7ff ffad 	bl	8003374 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800341c:	f00a ff71 	bl	800e302 <HAL_UARTEx_DisableFifoMode>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8003430:	f7ff ffa0 	bl	8003374 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	24000494 	.word	0x24000494
 800343c:	40011c00 	.word	0x40011c00

08003440 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <HAL_UART_ErrorCallback+0x5c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d120      	bne.n	8003492 <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003450:	4913      	ldr	r1, [pc, #76]	; (80034a0 <HAL_UART_ErrorCallback+0x60>)
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 800345e:	4911      	ldr	r1, [pc, #68]	; (80034a4 <HAL_UART_ErrorCallback+0x64>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 800346c:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_UART_ErrorCallback+0x68>)
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 800347a:	4808      	ldr	r0, [pc, #32]	; (800349c <HAL_UART_ErrorCallback+0x5c>)
 800347c:	f008 ff3e 	bl	800c2fc <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003480:	f7ff ff7e 	bl	8003380 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <HAL_UART_ErrorCallback+0x6c>)
 8003486:	f000 f97f 	bl	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800348a:	4603      	mov	r3, r0
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f8bd 	bl	800260c <_ZN13STM32Hardware4initEv>
    }
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	24000494 	.word	0x24000494
 80034a0:	24000620 	.word	0x24000620
 80034a4:	24000628 	.word	0x24000628
 80034a8:	24000630 	.word	0x24000630
 80034ac:	24000698 	.word	0x24000698

080034b0 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80034b8:	4805      	ldr	r0, [pc, #20]	; (80034d0 <HAL_UART_RxCpltCallback+0x20>)
 80034ba:	f000 f965 	bl	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80034be:	4603      	mov	r3, r0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f8ae 	bl	8002622 <_ZN13STM32Hardware10reset_rbufEv>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	24000698 	.word	0x24000698

080034d4 <setup>:
void setup(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
    nh.initNode();
 80034d8:	4806      	ldr	r0, [pc, #24]	; (80034f4 <setup+0x20>)
 80034da:	f000 f961 	bl	80037a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80034de:	4906      	ldr	r1, [pc, #24]	; (80034f8 <setup+0x24>)
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <setup+0x20>)
 80034e2:	f000 f97a 	bl	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80034e6:	4905      	ldr	r1, [pc, #20]	; (80034fc <setup+0x28>)
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <setup+0x20>)
 80034ea:	f000 f9a1 	bl	8003830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	24000698 	.word	0x24000698
 80034f8:	24000fd8 	.word	0x24000fd8
 80034fc:	24001038 	.word	0x24001038

08003500 <loop>:
void loop(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <loop+0x10>)
 8003506:	f000 f9c3 	bl	8003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	24000698 	.word	0x24000698

08003514 <interPub>:

void interPub(void){
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <interPub+0x48>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	4910      	ldr	r1, [pc, #64]	; (8003560 <interPub+0x4c>)
 8003520:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <interPub+0x50>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	490d      	ldr	r1, [pc, #52]	; (8003560 <interPub+0x4c>)
 800352c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <interPub+0x54>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <interPub+0x4c>)
 8003538:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <interPub+0x58>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a0a      	ldr	r2, [pc, #40]	; (800356c <interPub+0x58>)
 8003544:	6013      	str	r3, [r2, #0]
	pub.publish(&insVel);
 8003546:	4906      	ldr	r1, [pc, #24]	; (8003560 <interPub+0x4c>)
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <interPub+0x5c>)
 800354a:	f7fe ff74 	bl	8002436 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <interPub+0x60>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <interPub+0x60>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	24000638 	.word	0x24000638
 8003560:	24000650 	.word	0x24000650
 8003564:	24000640 	.word	0x24000640
 8003568:	24000648 	.word	0x24000648
 800356c:	24000618 	.word	0x24000618
 8003570:	24001038 	.word	0x24001038
 8003574:	2400061c 	.word	0x2400061c

08003578 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d80d      	bhi.n	80035a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	fa22 f103 	lsr.w	r1, r2, r3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	b2ca      	uxtb	r2, r1
 800359e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e7ee      	b.n	8003586 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d811      	bhi.n	80035f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6839      	ldr	r1, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	440a      	add	r2, r1
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	4611      	mov	r1, r2
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	00d2      	lsls	r2, r2, #3
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3301      	adds	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e7ea      	b.n	80035c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	0800eb10 	.word	0x0800eb10

08003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ffe8 	bl	8003600 <_ZN3ros15NodeHandleBase_C1Ev>
 8003630:	4a3a      	ldr	r2, [pc, #232]	; (800371c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe ffca 	bl	80025d4 <_ZN13STM32HardwareC1Ev>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fc18 	bl	8001e84 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b18      	cmp	r3, #24
 800365c:	d80b      	bhi.n	8003676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e7f0      	b.n	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b18      	cmp	r3, #24
 800367e:	d80a      	bhi.n	8003696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003688:	2100      	movs	r1, #0
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3301      	adds	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	e7f1      	b.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a0:	d20a      	bcs.n	80036b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e7f0      	b.n	800369a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	d20a      	bcs.n	80036da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4413      	add	r3, r2
 80036ca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	e7f0      	b.n	80036bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0800eab4 	.word	0x0800eab4

08003720 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	0800eaf8 	.word	0x0800eaf8

08003740 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ffe5 	bl	8003720 <_ZN3ros11Subscriber_C1Ev>
 8003756:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3310      	adds	r3, #16
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fd61 	bl	8003228 <_ZN13geometry_msgs5TwistC1Ev>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	659a      	str	r2, [r3, #88]	; 0x58
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]
  };
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	0800ea9c 	.word	0x0800ea9c

08003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
  }
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe ff2d 	bl	800260c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b18      	cmp	r3, #24
 80037ec:	dc19      	bgt.n	8003822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	605a      	str	r2, [r3, #4]
        return true;
 8003816:	2301      	movs	r3, #1
 8003818:	e004      	b.n	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e7e2      	b.n	80037e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003822:	2300      	movs	r3, #0
  }
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b18      	cmp	r3, #24
 8003842:	dc1e      	bgt.n	8003882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d111      	bne.n	800387a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	60da      	str	r2, [r3, #12]
        return true;
 8003876:	2301      	movs	r3, #1
 8003878:	e004      	b.n	8003884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e7dd      	b.n	800383e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003882:	2300      	movs	r3, #0
  }
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffa1 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 80038a2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d903      	bls.n	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d903      	bls.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d014      	beq.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe ff7a 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad2      	subs	r2, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf8c      	ite	hi
 8003900:	2301      	movhi	r3, #1
 8003902:	2300      	movls	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800390a:	f06f 0301 	mvn.w	r3, #1
 800390e:	e194      	b.n	8003c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fe95 	bl	8002644 <_ZN13STM32Hardware4readEv>
 800391a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f2c0 8174 	blt.w	8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800393a:	2b07      	cmp	r3, #7
 800393c:	d11e      	bne.n	800397c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003944:	1c59      	adds	r1, r3, #1
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	b2d1      	uxtb	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	460a      	mov	r2, r1
 8003956:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1b4      	bne.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2208      	movs	r2, #8
 8003976:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800397a:	e7af      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003982:	2b00      	cmp	r3, #0
 8003984:	d128      	bne.n	80039d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2bff      	cmp	r3, #255	; 0xff
 800398a:	d10d      	bne.n	80039a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f103 0214 	add.w	r2, r3, #20
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80039a6:	e799      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe ff19 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf8c      	ite	hi
 80039c0:	2301      	movhi	r3, #1
 80039c2:	2300      	movls	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d088      	beq.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80039d2:	f06f 0301 	mvn.w	r3, #1
 80039d6:	e130      	b.n	8003c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d118      	bne.n	8003a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2bfe      	cmp	r3, #254	; 0xfe
 80039e6:	d107      	bne.n	80039f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039f6:	e771      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f47f af68 	bne.w	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f918 	bl	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003a12:	e763      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003a44:	e74a      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d110      	bne.n	8003a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a70:	e734      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d116      	bne.n	8003aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003a82:	425a      	negs	r2, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	bf58      	it	pl
 8003a8a:	4253      	negpl	r3, r2
 8003a8c:	2bff      	cmp	r3, #255	; 0xff
 8003a8e:	d107      	bne.n	8003aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a9e:	e71d      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003aa8:	e718      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d10f      	bne.n	8003ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003ad2:	e703      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d117      	bne.n	8003b0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2207      	movs	r2, #7
 8003af4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f47f aeec 	bne.w	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2208      	movs	r2, #8
 8003b08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b0c:	e6e6      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f47f aee1 	bne.w	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003b28:	425a      	negs	r2, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	bf58      	it	pl
 8003b30:	4253      	negpl	r3, r2
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	f47f aed2 	bne.w	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d110      	bne.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f87d 	bl	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f898 	bl	8003c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e06a      	b.n	8003c3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b6a:	2b0a      	cmp	r3, #10
 8003b6c:	d107      	bne.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f960 	bl	8003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003b7c:	e6ae      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d10e      	bne.n	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe faa9 	bl	80020ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003ba4:	e69a      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bac:	2b0b      	cmp	r3, #11
 8003bae:	d104      	bne.n	8003bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003bb8:	e690      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bc0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f43f ae84 	beq.w	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bda:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003be4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bee:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003c06:	4611      	mov	r1, r2
 8003c08:	4798      	blx	r3
    while (true)
 8003c0a:	e667      	b.n	80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003c0c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00f      	beq.n	8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d906      	bls.n	8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f809 	bl	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003c38:	2300      	movs	r3, #0
  }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fdb4 	bl	80017bc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f107 020c 	add.w	r2, r7, #12
 8003c5e:	210a      	movs	r1, #10
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    rt_time = hardware_.time();
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fdbb 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003c7e:	b590      	push	{r4, r7, lr}
 8003c80:	b08b      	sub	sp, #44	; 0x2c
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fe86 	bl	800199c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	2b18      	cmp	r3, #24
 8003c98:	dc63      	bgt.n	8003d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d056      	beq.n	8003d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4798      	blx	r3
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4608      	mov	r0, r1
 8003d28:	4798      	blx	r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d32:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681c      	ldr	r4, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fb88 	bl	800245e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	461a      	mov	r2, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e798      	b.n	8003c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	dc5f      	bgt.n	8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d053      	beq.n	8003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003da6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4798      	blx	r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4608      	mov	r0, r1
 8003de4:	4798      	blx	r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3304      	adds	r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4798      	blx	r3
 8003e18:	4601      	mov	r1, r0
 8003e1a:	f107 030c 	add.w	r3, r7, #12
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	3301      	adds	r3, #1
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e79c      	b.n	8003d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003e34:	bf00      	nop
 8003e36:	372c      	adds	r7, #44	; 0x2c
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fcb6 	bl	80017bc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fcc5 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fd fd15 	bl	800189c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4915      	ldr	r1, [pc, #84]	; (8003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003e78:	fba1 1303 	umull	r1, r3, r1, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003e88:	fba3 0302 	umull	r0, r3, r3, r2
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f8a6 	bl	8003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fc95 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	10624dd3 	.word	0x10624dd3
 8003ed0:	000f4240 	.word	0x000f4240

08003ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b63      	cmp	r3, #99	; 0x63
 8003ee4:	dd09      	ble.n	8003efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003eec:	f083 0301 	eor.w	r3, r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e079      	b.n	8003fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003f06:	3207      	adds	r2, #7
 8003f08:	4611      	mov	r1, r2
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	22fe      	movs	r2, #254	; 0xfe
 8003f1c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003f46:	4413      	add	r3, r2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	b21b      	sxth	r3, r3
 8003f62:	121b      	asrs	r3, r3, #8
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f72:	2305      	movs	r3, #5
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3306      	adds	r3, #6
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	dc0d      	bgt.n	8003f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4413      	add	r3, r2
 8003f86:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e7ec      	b.n	8003f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3307      	adds	r3, #7
 8003fa0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	425a      	negs	r2, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	bf58      	it	pl
 8003fac:	4253      	negpl	r3, r2
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	6179      	str	r1, [r7, #20]
 8003fb6:	43d2      	mvns	r2, r2
 8003fb8:	b2d1      	uxtb	r1, r2
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fca:	dc0a      	bgt.n	8003fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1d18      	adds	r0, r3, #4
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f7fe fbbd 	bl	8002758 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	e005      	b.n	8003fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003fe2:	4905      	ldr	r1, [pc, #20]	; (8003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f849 	bl	800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	0800ea28 	.word	0x0800ea28

08003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fbea 	bl	80027e4 <_ZN13STM32Hardware4timeEv>
 8004010:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4915      	ldr	r1, [pc, #84]	; (8004070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800401a:	fba1 1303 	umull	r1, r3, r1, r3
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004032:	fba3 0302 	umull	r0, r3, r3, r2
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800403c:	fb00 f303 	mul.w	r3, r0, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	1aca      	subs	r2, r1, r3
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800404c:	4413      	add	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f7fc fade 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	10624dd3 	.word	0x10624dd3
 8004074:	000f4240 	.word	0x000f4240
 8004078:	3b9aca00 	.word	0x3b9aca00

0800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	2103      	movs	r1, #3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f804 	bl	8004098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	460b      	mov	r3, r1
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fe3a 	bl	8001d24 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f107 0214 	add.w	r2, r7, #20
 80040c2:	2107      	movs	r1, #7
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	4798      	blx	r3
  }
 80040c8:	bf00      	nop
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <_Z41__static_initialization_and_destruction_0ii>:
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d116      	bne.n	800410e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist insVel;
 80040ea:	480b      	ldr	r0, [pc, #44]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80040ec:	f7ff f89c 	bl	8003228 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 80040f0:	480a      	ldr	r0, [pc, #40]	; (800411c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80040f2:	f7ff fa95 	bl	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 80040f6:	2301      	movs	r3, #1
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80040fa:	490a      	ldr	r1, [pc, #40]	; (8004124 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80040fc:	480a      	ldr	r0, [pc, #40]	; (8004128 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80040fe:	f7ff fb1f 	bl	8003740 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &insVel);
 8004102:	2300      	movs	r3, #0
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004106:	4909      	ldr	r1, [pc, #36]	; (800412c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004108:	4809      	ldr	r0, [pc, #36]	; (8004130 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800410a:	f7fe f97d 	bl	8002408 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	24000650 	.word	0x24000650
 800411c:	24000698 	.word	0x24000698
 8004120:	08003331 	.word	0x08003331
 8004124:	0800ea64 	.word	0x0800ea64
 8004128:	24000fd8 	.word	0x24000fd8
 800412c:	0800ea6c 	.word	0x0800ea6c
 8004130:	24001038 	.word	0x24001038

08004134 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3310      	adds	r3, #16
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f8b1 	bl	80032ac <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	3210      	adds	r2, #16
 8004152:	4610      	mov	r0, r2
 8004154:	4798      	blx	r3
  }
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3310      	adds	r3, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f8b8 	bl	80032f8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004188:	4603      	mov	r3, r0
  }
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3310      	adds	r3, #16
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff f8b8 	bl	8003314 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80041a4:	4603      	mov	r3, r0
  }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
    return configured_;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_GLOBAL__sub_I_run_inter0>:
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7ff ff7d 	bl	80040d0 <_Z41__static_initialization_and_destruction_0ii>
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_MspInit+0x3c>)
 80041e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <HAL_MspInit+0x3c>)
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_MspInit+0x3c>)
 80041f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2005      	movs	r0, #5
 8004202:	f000 fe0c 	bl	8004e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004206:	2005      	movs	r0, #5
 8004208:	f000 fe23 	bl	8004e52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400

08004218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004228:	d117      	bne.n	800425a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800422a:	4b1c      	ldr	r3, [pc, #112]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 800422c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004230:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 800423c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004248:	2200      	movs	r2, #0
 800424a:	2100      	movs	r1, #0
 800424c:	201c      	movs	r0, #28
 800424e:	f000 fde6 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004252:	201c      	movs	r0, #28
 8004254:	f000 fdfd 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004258:	e01b      	b.n	8004292 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIM_Base_MspInit+0x88>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d116      	bne.n	8004292 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 8004266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800426a:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_TIM_Base_MspInit+0x84>)
 8004276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2100      	movs	r1, #0
 8004286:	2032      	movs	r0, #50	; 0x32
 8004288:	f000 fdc9 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800428c:	2032      	movs	r0, #50	; 0x32
 800428e:	f000 fde0 	bl	8004e52 <HAL_NVIC_EnableIRQ>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	58024400 	.word	0x58024400
 80042a0:	40000c00 	.word	0x40000c00

080042a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b090      	sub	sp, #64	; 0x40
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a69      	ldr	r2, [pc, #420]	; (8004468 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d12e      	bne.n	8004324 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c6:	4b69      	ldr	r3, [pc, #420]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042cc:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042ce:	f043 0302 	orr.w	r3, r3, #2
 80042d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ea:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f4:	4b5d      	ldr	r3, [pc, #372]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004302:	23c0      	movs	r3, #192	; 0xc0
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	2302      	movs	r3, #2
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430e:	2300      	movs	r3, #0
 8004310:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004312:	2302      	movs	r3, #2
 8004314:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431a:	4619      	mov	r1, r3
 800431c:	4854      	ldr	r0, [pc, #336]	; (8004470 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800431e:	f003 fdb1 	bl	8007e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004322:	e09c      	b.n	800445e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d12f      	bne.n	800438e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800432e:	4b4f      	ldr	r3, [pc, #316]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004334:	4a4d      	ldr	r2, [pc, #308]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800434c:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800434e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004352:	4a46      	ldr	r2, [pc, #280]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800435c:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800435e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800436a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	2302      	movs	r3, #2
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	2300      	movs	r3, #0
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004378:	2300      	movs	r3, #0
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800437c:	2302      	movs	r3, #2
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004384:	4619      	mov	r1, r3
 8004386:	483c      	ldr	r0, [pc, #240]	; (8004478 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8004388:	f003 fd7c 	bl	8007e84 <HAL_GPIO_Init>
}
 800438c:	e067      	b.n	800445e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a3a      	ldr	r2, [pc, #232]	; (800447c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d12e      	bne.n	80043f6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800439a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800439e:	4a33      	ldr	r2, [pc, #204]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80043a8:	4b30      	ldr	r3, [pc, #192]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043b6:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043bc:	4a2b      	ldr	r2, [pc, #172]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043be:	f043 0320 	orr.w	r3, r3, #32
 80043c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c6:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043d4:	2303      	movs	r3, #3
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80043e4:	230d      	movs	r3, #13
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ec:	4619      	mov	r1, r3
 80043ee:	4824      	ldr	r0, [pc, #144]	; (8004480 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80043f0:	f003 fd48 	bl	8007e84 <HAL_GPIO_Init>
}
 80043f4:	e033      	b.n	800445e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a22      	ldr	r2, [pc, #136]	; (8004484 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d12e      	bne.n	800445e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004402:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800440c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004410:	4b16      	ldr	r3, [pc, #88]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004412:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	4a11      	ldr	r2, [pc, #68]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004426:	f043 0320 	orr.w	r3, r3, #32
 800442a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800443c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	2302      	movs	r3, #2
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444a:	2300      	movs	r3, #0
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800444e:	230e      	movs	r3, #14
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004456:	4619      	mov	r1, r3
 8004458:	4809      	ldr	r0, [pc, #36]	; (8004480 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800445a:	f003 fd13 	bl	8007e84 <HAL_GPIO_Init>
}
 800445e:	bf00      	nop
 8004460:	3740      	adds	r7, #64	; 0x40
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40000400 	.word	0x40000400
 800446c:	58024400 	.word	0x58024400
 8004470:	58020000 	.word	0x58020000
 8004474:	40000800 	.word	0x40000800
 8004478:	58020c00 	.word	0x58020c00
 800447c:	4000e000 	.word	0x4000e000
 8004480:	58021400 	.word	0x58021400
 8004484:	4000e400 	.word	0x4000e400

08004488 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <HAL_TIM_PWM_MspInit+0x68>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10f      	bne.n	80044ba <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 800449c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80044a2:	f043 0302 	orr.w	r3, r3, #2
 80044a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80044ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_TIM_PWM_MspInit+0x70>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80044c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_TIM_PWM_MspInit+0x6c>)
 80044d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010400 	.word	0x40010400
 80044f4:	58024400 	.word	0x58024400
 80044f8:	40014000 	.word	0x40014000

080044fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <HAL_TIM_MspPostInit+0xf4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d120      	bne.n	8004560 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 8004520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004524:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 8004530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800453c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004542:	2302      	movs	r3, #2
 8004544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800454e:	2303      	movs	r3, #3
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004552:	f107 0314 	add.w	r3, r7, #20
 8004556:	4619      	mov	r1, r3
 8004558:	4827      	ldr	r0, [pc, #156]	; (80045f8 <HAL_TIM_MspPostInit+0xfc>)
 800455a:	f003 fc93 	bl	8007e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800455e:	e042      	b.n	80045e6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_TIM_MspPostInit+0x100>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d13d      	bne.n	80045e6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 800456c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004570:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 800457c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 800458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004598:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <HAL_TIM_MspPostInit+0xf8>)
 800459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045a6:	2320      	movs	r3, #32
 80045a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80045b6:	2304      	movs	r3, #4
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	480f      	ldr	r0, [pc, #60]	; (8004600 <HAL_TIM_MspPostInit+0x104>)
 80045c2:	f003 fc5f 	bl	8007e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045c6:	2308      	movs	r3, #8
 80045c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ca:	2302      	movs	r3, #2
 80045cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80045d6:	2304      	movs	r3, #4
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	4808      	ldr	r0, [pc, #32]	; (8004604 <HAL_TIM_MspPostInit+0x108>)
 80045e2:	f003 fc4f 	bl	8007e84 <HAL_GPIO_Init>
}
 80045e6:	bf00      	nop
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40010400 	.word	0x40010400
 80045f4:	58024400 	.word	0x58024400
 80045f8:	58020800 	.word	0x58020800
 80045fc:	40014000 	.word	0x40014000
 8004600:	58021000 	.word	0x58021000
 8004604:	58020000 	.word	0x58020000

08004608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0b6      	sub	sp, #216	; 0xd8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	22b4      	movs	r2, #180	; 0xb4
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f009 ffc1 	bl	800e5b0 <memset>
  if(huart->Instance==USART10)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a62      	ldr	r2, [pc, #392]	; (80047bc <HAL_UART_MspInit+0x1b4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f040 80bc 	bne.w	80047b2 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800463a:	2301      	movs	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004644:	f107 0310 	add.w	r3, r7, #16
 8004648:	4618      	mov	r0, r3
 800464a:	f004 fe77 	bl	800933c <HAL_RCCEx_PeriphCLKConfig>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004654:	f7fd f88c 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 800465a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800465e:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 8004660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004664:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004668:	4b55      	ldr	r3, [pc, #340]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 800466a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 8004678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467c:	4a50      	ldr	r2, [pc, #320]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 800467e:	f043 0310 	orr.w	r3, r3, #16
 8004682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004686:	4b4e      	ldr	r3, [pc, #312]	; (80047c0 <HAL_UART_MspInit+0x1b8>)
 8004688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004694:	2304      	movs	r3, #4
 8004696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80046ac:	2304      	movs	r3, #4
 80046ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4842      	ldr	r0, [pc, #264]	; (80047c4 <HAL_UART_MspInit+0x1bc>)
 80046ba:	f003 fbe3 	bl	8007e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046be:	2308      	movs	r3, #8
 80046c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80046d6:	230b      	movs	r3, #11
 80046d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4838      	ldr	r0, [pc, #224]	; (80047c4 <HAL_UART_MspInit+0x1bc>)
 80046e4:	f003 fbce 	bl	8007e84 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 80046e8:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 80046ea:	4a38      	ldr	r2, [pc, #224]	; (80047cc <HAL_UART_MspInit+0x1c4>)
 80046ec:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 80046ee:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 80046f0:	2276      	movs	r2, #118	; 0x76
 80046f2:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 8004702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004706:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004708:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 800470a:	2200      	movs	r2, #0
 800470c:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800470e:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 8004716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800471a:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 800471e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004722:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 8004726:	2200      	movs	r2, #0
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 800472a:	4827      	ldr	r0, [pc, #156]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 800472c:	f000 fbba 	bl	8004ea4 <HAL_DMA_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8004736:	f7fd f81b 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 800473e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <HAL_UART_MspInit+0x1c0>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_UART_MspInit+0x1cc>)
 800474a:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800474e:	2277      	movs	r2, #119	; 0x77
 8004750:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004752:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004754:	2240      	movs	r2, #64	; 0x40
 8004756:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004764:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004768:	2200      	movs	r2, #0
 800476a:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004774:	2200      	movs	r2, #0
 8004776:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800477a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800477e:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004782:	2200      	movs	r2, #0
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8004786:	4812      	ldr	r0, [pc, #72]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 8004788:	f000 fb8c 	bl	8004ea4 <HAL_DMA_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 8004792:	f7fc ffed 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800479a:	679a      	str	r2, [r3, #120]	; 0x78
 800479c:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <HAL_UART_MspInit+0x1c8>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2100      	movs	r1, #0
 80047a6:	209c      	movs	r0, #156	; 0x9c
 80047a8:	f000 fb39 	bl	8004e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80047ac:	209c      	movs	r0, #156	; 0x9c
 80047ae:	f000 fb50 	bl	8004e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 80047b2:	bf00      	nop
 80047b4:	37d8      	adds	r7, #216	; 0xd8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40011c00 	.word	0x40011c00
 80047c0:	58024400 	.word	0x58024400
 80047c4:	58021000 	.word	0x58021000
 80047c8:	24000524 	.word	0x24000524
 80047cc:	40020010 	.word	0x40020010
 80047d0:	2400059c 	.word	0x2400059c
 80047d4:	40020028 	.word	0x40020028

080047d8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <HAL_UART_MspDeInit+0x4c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d118      	bne.n	800481c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <HAL_UART_MspDeInit+0x50>)
 80047ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f0:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <HAL_UART_MspDeInit+0x50>)
 80047f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 80047fa:	210c      	movs	r1, #12
 80047fc:	480b      	ldr	r0, [pc, #44]	; (800482c <HAL_UART_MspDeInit+0x54>)
 80047fe:	f003 fce9 	bl	80081d4 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fea6 	bl	8005558 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fea1 	bl	8005558 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004816:	209c      	movs	r0, #156	; 0x9c
 8004818:	f000 fb29 	bl	8004e6e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40011c00 	.word	0x40011c00
 8004828:	58024400 	.word	0x58024400
 800482c:	58021000 	.word	0x58021000

08004830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004834:	e7fe      	b.n	8004834 <NMI_Handler+0x4>

08004836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800483a:	e7fe      	b.n	800483a <HardFault_Handler+0x4>

0800483c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004840:	e7fe      	b.n	8004840 <MemManage_Handler+0x4>

08004842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004842:	b480      	push	{r7}
 8004844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004846:	e7fe      	b.n	8004846 <BusFault_Handler+0x4>

08004848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800484c:	e7fe      	b.n	800484c <UsageFault_Handler+0x4>

0800484e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800487c:	f000 f9b0 	bl	8004be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}

08004884 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004898:	4802      	ldr	r0, [pc, #8]	; (80048a4 <DMA1_Stream0_IRQHandler+0x10>)
 800489a:	f001 ffe1 	bl	8006860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	24000524 	.word	0x24000524

080048a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <DMA1_Stream1_IRQHandler+0x10>)
 80048ae:	f001 ffd7 	bl	8006860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2400059c 	.word	0x2400059c

080048bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM2_IRQHandler+0x10>)
 80048c2:	f006 fbdd 	bl	800b080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24000234 	.word	0x24000234

080048d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80048d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80048d8:	f003 fd97 	bl	800840a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}

080048e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <TIM5_IRQHandler+0x10>)
 80048e6:	f006 fbcb 	bl	800b080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	24000318 	.word	0x24000318

080048f4 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <USART10_IRQHandler+0x10>)
 80048fa:	f007 fe23 	bl	800c544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	24000494 	.word	0x24000494

08004908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
	return 1;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <_kill>:

int _kill(int pid, int sig)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004922:	f009 fe0d 	bl	800e540 <__errno>
 8004926:	4603      	mov	r3, r0
 8004928:	2216      	movs	r2, #22
 800492a:	601a      	str	r2, [r3, #0]
	return -1;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_exit>:

void _exit (int status)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ffe7 	bl	8004918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800494a:	e7fe      	b.n	800494a <_exit+0x12>

0800494c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004954:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <_sbrk+0x5c>)
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <_sbrk+0x60>)
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <_sbrk+0x64>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <_sbrk+0x64>)
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <_sbrk+0x68>)
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <_sbrk+0x64>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	d207      	bcs.n	800498c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800497c:	f009 fde0 	bl	800e540 <__errno>
 8004980:	4603      	mov	r3, r0
 8004982:	220c      	movs	r2, #12
 8004984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e009      	b.n	80049a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <_sbrk+0x64>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <_sbrk+0x64>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <_sbrk+0x64>)
 800499c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	24050000 	.word	0x24050000
 80049ac:	00000400 	.word	0x00000400
 80049b0:	2400104c 	.word	0x2400104c
 80049b4:	24001068 	.word	0x24001068

080049b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <SystemInit+0xd0>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	4a31      	ldr	r2, [pc, #196]	; (8004a88 <SystemInit+0xd0>)
 80049c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <SystemInit+0xd4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d807      	bhi.n	80049e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049d8:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <SystemInit+0xd4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 030f 	bic.w	r3, r3, #15
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <SystemInit+0xd4>)
 80049e2:	f043 0307 	orr.w	r3, r3, #7
 80049e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80049e8:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <SystemInit+0xd8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <SystemInit+0xd8>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049f4:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <SystemInit+0xd8>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <SystemInit+0xd8>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4924      	ldr	r1, [pc, #144]	; (8004a90 <SystemInit+0xd8>)
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <SystemInit+0xdc>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <SystemInit+0xd4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <SystemInit+0xd4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 030f 	bic.w	r3, r3, #15
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <SystemInit+0xd4>)
 8004a1c:	f043 0307 	orr.w	r3, r3, #7
 8004a20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <SystemInit+0xd8>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <SystemInit+0xd8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <SystemInit+0xd8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <SystemInit+0xd8>)
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <SystemInit+0xe0>)
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <SystemInit+0xd8>)
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <SystemInit+0xe4>)
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <SystemInit+0xd8>)
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <SystemInit+0xe8>)
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <SystemInit+0xd8>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <SystemInit+0xd8>)
 8004a4e:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <SystemInit+0xe8>)
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <SystemInit+0xd8>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <SystemInit+0xd8>)
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <SystemInit+0xe8>)
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <SystemInit+0xd8>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <SystemInit+0xd8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <SystemInit+0xd8>)
 8004a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <SystemInit+0xd8>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <SystemInit+0xec>)
 8004a78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004a7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000ed00 	.word	0xe000ed00
 8004a8c:	52002000 	.word	0x52002000
 8004a90:	58024400 	.word	0x58024400
 8004a94:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a98:	02020200 	.word	0x02020200
 8004a9c:	01ff0000 	.word	0x01ff0000
 8004aa0:	01010280 	.word	0x01010280
 8004aa4:	52004000 	.word	0x52004000

08004aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ae0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004aac:	f7ff ff84 	bl	80049b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ab2:	490d      	ldr	r1, [pc, #52]	; (8004ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ab8:	e002      	b.n	8004ac0 <LoopCopyDataInit>

08004aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004abe:	3304      	adds	r3, #4

08004ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ac4:	d3f9      	bcc.n	8004aba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ac8:	4c0a      	ldr	r4, [pc, #40]	; (8004af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004acc:	e001      	b.n	8004ad2 <LoopFillZerobss>

08004ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ad0:	3204      	adds	r2, #4

08004ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ad4:	d3fb      	bcc.n	8004ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ad6:	f009 fd39 	bl	800e54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ada:	f7fb ff2f 	bl	800093c <main>
  bx  lr
 8004ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ae0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004ae4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ae8:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8004aec:	0800ebe8 	.word	0x0800ebe8
  ldr r2, =_sbss
 8004af0:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8004af4:	24001064 	.word	0x24001064

08004af8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004af8:	e7fe      	b.n	8004af8 <ADC3_IRQHandler>
	...

08004afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b02:	2003      	movs	r0, #3
 8004b04:	f000 f980 	bl	8004e08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b08:	f004 fa42 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <HAL_Init+0x68>)
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	4913      	ldr	r1, [pc, #76]	; (8004b68 <HAL_Init+0x6c>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <HAL_Init+0x68>)
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <HAL_Init+0x6c>)
 8004b30:	5cd3      	ldrb	r3, [r2, r3]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <HAL_Init+0x70>)
 8004b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <HAL_Init+0x74>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b46:	200f      	movs	r0, #15
 8004b48:	f000 f814 	bl	8004b74 <HAL_InitTick>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e002      	b.n	8004b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004b56:	f7ff fb3f 	bl	80041d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	58024400 	.word	0x58024400
 8004b68:	0800eb94 	.word	0x0800eb94
 8004b6c:	240001a4 	.word	0x240001a4
 8004b70:	240001a0 	.word	0x240001a0

08004b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <HAL_InitTick+0x60>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e021      	b.n	8004bcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_InitTick+0x64>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_InitTick+0x60>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f973 	bl	8004e8a <HAL_SYSTICK_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e00e      	b.n	8004bcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d80a      	bhi.n	8004bca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	f000 f92f 	bl	8004e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bc0:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <HAL_InitTick+0x68>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	240001ac 	.word	0x240001ac
 8004bd8:	240001a0 	.word	0x240001a0
 8004bdc:	240001a8 	.word	0x240001a8

08004be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_IncTick+0x20>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_IncTick+0x24>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <HAL_IncTick+0x24>)
 8004bf2:	6013      	str	r3, [r2, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	240001ac 	.word	0x240001ac
 8004c04:	24001050 	.word	0x24001050

08004c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_GetTick+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	24001050 	.word	0x24001050

08004c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <__NVIC_SetPriorityGrouping+0x40>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <__NVIC_SetPriorityGrouping+0x44>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <__NVIC_SetPriorityGrouping+0x40>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	60d3      	str	r3, [r2, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	05fa0000 	.word	0x05fa0000

08004c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <__NVIC_GetPriorityGrouping+0x18>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	f003 0307 	and.w	r3, r3, #7
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db0b      	blt.n	8004cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	f003 021f 	and.w	r2, r3, #31
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <__NVIC_EnableIRQ+0x38>)
 8004c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e100 	.word	0xe000e100

08004cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	db12      	blt.n	8004cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	f003 021f 	and.w	r2, r3, #31
 8004cd8:	490a      	ldr	r1, [pc, #40]	; (8004d04 <__NVIC_DisableIRQ+0x44>)
 8004cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce6:	3320      	adds	r3, #32
 8004ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004cec:	f3bf 8f4f 	dsb	sy
}
 8004cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cf2:	f3bf 8f6f 	isb	sy
}
 8004cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000e100 	.word	0xe000e100

08004d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	6039      	str	r1, [r7, #0]
 8004d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	db0a      	blt.n	8004d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	490c      	ldr	r1, [pc, #48]	; (8004d54 <__NVIC_SetPriority+0x4c>)
 8004d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d26:	0112      	lsls	r2, r2, #4
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d30:	e00a      	b.n	8004d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4908      	ldr	r1, [pc, #32]	; (8004d58 <__NVIC_SetPriority+0x50>)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	440b      	add	r3, r1
 8004d46:	761a      	strb	r2, [r3, #24]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000e100 	.word	0xe000e100
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f1c3 0307 	rsb	r3, r3, #7
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	bf28      	it	cs
 8004d7a:	2304      	movcs	r3, #4
 8004d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d902      	bls.n	8004d8c <NVIC_EncodePriority+0x30>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3b03      	subs	r3, #3
 8004d8a:	e000      	b.n	8004d8e <NVIC_EncodePriority+0x32>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	401a      	ands	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	43d9      	mvns	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db4:	4313      	orrs	r3, r2
         );
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd4:	d301      	bcc.n	8004dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00f      	b.n	8004dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <SysTick_Config+0x40>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004de2:	210f      	movs	r1, #15
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	f7ff ff8e 	bl	8004d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <SysTick_Config+0x40>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <SysTick_Config+0x40>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	e000e010 	.word	0xe000e010

08004e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff05 	bl	8004c20 <__NVIC_SetPriorityGrouping>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	4603      	mov	r3, r0
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e2c:	f7ff ff1c 	bl	8004c68 <__NVIC_GetPriorityGrouping>
 8004e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7ff ff90 	bl	8004d5c <NVIC_EncodePriority>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff5f 	bl	8004d08 <__NVIC_SetPriority>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4603      	mov	r3, r0
 8004e5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff0f 	bl	8004c84 <__NVIC_EnableIRQ>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff1f 	bl	8004cc0 <__NVIC_DisableIRQ>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff96 	bl	8004dc4 <SysTick_Config>
 8004e98:	4603      	mov	r3, r0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004eac:	f7ff feac 	bl	8004c08 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e314      	b.n	80054e6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_DMA_Init+0x1b8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_DMA_Init+0x1bc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d045      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a63      	ldr	r2, [pc, #396]	; (8005064 <HAL_DMA_Init+0x1c0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a62      	ldr	r2, [pc, #392]	; (8005068 <HAL_DMA_Init+0x1c4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a60      	ldr	r2, [pc, #384]	; (800506c <HAL_DMA_Init+0x1c8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d036      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a5f      	ldr	r2, [pc, #380]	; (8005070 <HAL_DMA_Init+0x1cc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5d      	ldr	r2, [pc, #372]	; (8005074 <HAL_DMA_Init+0x1d0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5c      	ldr	r2, [pc, #368]	; (8005078 <HAL_DMA_Init+0x1d4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d027      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5a      	ldr	r2, [pc, #360]	; (800507c <HAL_DMA_Init+0x1d8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a59      	ldr	r2, [pc, #356]	; (8005080 <HAL_DMA_Init+0x1dc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a57      	ldr	r2, [pc, #348]	; (8005084 <HAL_DMA_Init+0x1e0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a56      	ldr	r2, [pc, #344]	; (8005088 <HAL_DMA_Init+0x1e4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a54      	ldr	r2, [pc, #336]	; (800508c <HAL_DMA_Init+0x1e8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a53      	ldr	r2, [pc, #332]	; (8005090 <HAL_DMA_Init+0x1ec>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a51      	ldr	r2, [pc, #324]	; (8005094 <HAL_DMA_Init+0x1f0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_Init+0xb8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a50      	ldr	r2, [pc, #320]	; (8005098 <HAL_DMA_Init+0x1f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_Init+0xbc>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_DMA_Init+0xbe>
 8004f60:	2300      	movs	r3, #0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 813c 	beq.w	80051e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a37      	ldr	r2, [pc, #220]	; (800505c <HAL_DMA_Init+0x1b8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d04a      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a36      	ldr	r2, [pc, #216]	; (8005060 <HAL_DMA_Init+0x1bc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d045      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_DMA_Init+0x1c0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d040      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a33      	ldr	r2, [pc, #204]	; (8005068 <HAL_DMA_Init+0x1c4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d03b      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_DMA_Init+0x1c8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d036      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_DMA_Init+0x1cc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d031      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2e      	ldr	r2, [pc, #184]	; (8005074 <HAL_DMA_Init+0x1d0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d02c      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2d      	ldr	r2, [pc, #180]	; (8005078 <HAL_DMA_Init+0x1d4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d027      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2b      	ldr	r2, [pc, #172]	; (800507c <HAL_DMA_Init+0x1d8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d022      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_DMA_Init+0x1dc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d01d      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a28      	ldr	r2, [pc, #160]	; (8005084 <HAL_DMA_Init+0x1e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_Init+0x1e4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <HAL_DMA_Init+0x1e8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_DMA_Init+0x1ec>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_DMA_Init+0x174>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a22      	ldr	r2, [pc, #136]	; (8005094 <HAL_DMA_Init+0x1f0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_DMA_Init+0x174>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <HAL_DMA_Init+0x1f4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d108      	bne.n	800502a <HAL_DMA_Init+0x186>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e007      	b.n	800503a <HAL_DMA_Init+0x196>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800503a:	e02f      	b.n	800509c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800503c:	f7ff fde4 	bl	8004c08 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b05      	cmp	r3, #5
 8005048:	d928      	bls.n	800509c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2203      	movs	r2, #3
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e244      	b.n	80054e6 <HAL_DMA_Init+0x642>
 800505c:	40020010 	.word	0x40020010
 8005060:	40020028 	.word	0x40020028
 8005064:	40020040 	.word	0x40020040
 8005068:	40020058 	.word	0x40020058
 800506c:	40020070 	.word	0x40020070
 8005070:	40020088 	.word	0x40020088
 8005074:	400200a0 	.word	0x400200a0
 8005078:	400200b8 	.word	0x400200b8
 800507c:	40020410 	.word	0x40020410
 8005080:	40020428 	.word	0x40020428
 8005084:	40020440 	.word	0x40020440
 8005088:	40020458 	.word	0x40020458
 800508c:	40020470 	.word	0x40020470
 8005090:	40020488 	.word	0x40020488
 8005094:	400204a0 	.word	0x400204a0
 8005098:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1c8      	bne.n	800503c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4b84      	ldr	r3, [pc, #528]	; (80052c8 <HAL_DMA_Init+0x424>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d107      	bne.n	8005100 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	4313      	orrs	r3, r2
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b28      	cmp	r3, #40	; 0x28
 8005106:	d903      	bls.n	8005110 <HAL_DMA_Init+0x26c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b2e      	cmp	r3, #46	; 0x2e
 800510e:	d91f      	bls.n	8005150 <HAL_DMA_Init+0x2ac>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b3e      	cmp	r3, #62	; 0x3e
 8005116:	d903      	bls.n	8005120 <HAL_DMA_Init+0x27c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b42      	cmp	r3, #66	; 0x42
 800511e:	d917      	bls.n	8005150 <HAL_DMA_Init+0x2ac>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b46      	cmp	r3, #70	; 0x46
 8005126:	d903      	bls.n	8005130 <HAL_DMA_Init+0x28c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b48      	cmp	r3, #72	; 0x48
 800512e:	d90f      	bls.n	8005150 <HAL_DMA_Init+0x2ac>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b4e      	cmp	r3, #78	; 0x4e
 8005136:	d903      	bls.n	8005140 <HAL_DMA_Init+0x29c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b52      	cmp	r3, #82	; 0x52
 800513e:	d907      	bls.n	8005150 <HAL_DMA_Init+0x2ac>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b73      	cmp	r3, #115	; 0x73
 8005146:	d905      	bls.n	8005154 <HAL_DMA_Init+0x2b0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b77      	cmp	r3, #119	; 0x77
 800514e:	d801      	bhi.n	8005154 <HAL_DMA_Init+0x2b0>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_DMA_Init+0x2b2>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005160:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b04      	cmp	r3, #4
 800518a:	d117      	bne.n	80051bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f002 fce6 	bl	8007b70 <DMA_CheckFifoParam>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e194      	b.n	80054e6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f002 fc21 	bl	8007a0c <DMA_CalcBaseAndBitshift>
 80051ca:	4603      	mov	r3, r0
 80051cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	223f      	movs	r2, #63	; 0x3f
 80051d8:	409a      	lsls	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	e0ca      	b.n	8005376 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a39      	ldr	r2, [pc, #228]	; (80052cc <HAL_DMA_Init+0x428>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <HAL_DMA_Init+0x42c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01d      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a36      	ldr	r2, [pc, #216]	; (80052d4 <HAL_DMA_Init+0x430>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <HAL_DMA_Init+0x434>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a33      	ldr	r2, [pc, #204]	; (80052dc <HAL_DMA_Init+0x438>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a32      	ldr	r2, [pc, #200]	; (80052e0 <HAL_DMA_Init+0x43c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_DMA_Init+0x440>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_DMA_Init+0x38c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_DMA_Init+0x444>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_DMA_Init+0x390>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_DMA_Init+0x392>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 8094 	beq.w	8005364 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_DMA_Init+0x428>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d021      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_DMA_Init+0x42c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d01c      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_DMA_Init+0x430>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_DMA_Init+0x434>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d012      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_DMA_Init+0x438>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00d      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_DMA_Init+0x43c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d008      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_DMA_Init+0x440>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <HAL_DMA_Init+0x3e6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_DMA_Init+0x444>)
 8005288:	4293      	cmp	r3, r2
 800528a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_DMA_Init+0x448>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_Init+0x44c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d102      	bne.n	80052c2 <HAL_DMA_Init+0x41e>
 80052bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052c0:	e017      	b.n	80052f2 <HAL_DMA_Init+0x44e>
 80052c2:	2300      	movs	r3, #0
 80052c4:	e015      	b.n	80052f2 <HAL_DMA_Init+0x44e>
 80052c6:	bf00      	nop
 80052c8:	fe10803f 	.word	0xfe10803f
 80052cc:	58025408 	.word	0x58025408
 80052d0:	5802541c 	.word	0x5802541c
 80052d4:	58025430 	.word	0x58025430
 80052d8:	58025444 	.word	0x58025444
 80052dc:	58025458 	.word	0x58025458
 80052e0:	5802546c 	.word	0x5802546c
 80052e4:	58025480 	.word	0x58025480
 80052e8:	58025494 	.word	0x58025494
 80052ec:	fffe000f 	.word	0xfffe000f
 80052f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68d2      	ldr	r2, [r2, #12]
 80052f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005320:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	4b6e      	ldr	r3, [pc, #440]	; (80054f0 <HAL_DMA_Init+0x64c>)
 8005338:	4413      	add	r3, r2
 800533a:	4a6e      	ldr	r2, [pc, #440]	; (80054f4 <HAL_DMA_Init+0x650>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	009a      	lsls	r2, r3, #2
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f002 fb5f 	bl	8007a0c <DMA_CalcBaseAndBitshift>
 800534e:	4603      	mov	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2201      	movs	r2, #1
 800535c:	409a      	lsls	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	e008      	b.n	8005376 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2203      	movs	r2, #3
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0b7      	b.n	80054e6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5f      	ldr	r2, [pc, #380]	; (80054f8 <HAL_DMA_Init+0x654>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d072      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5d      	ldr	r2, [pc, #372]	; (80054fc <HAL_DMA_Init+0x658>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d06d      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5c      	ldr	r2, [pc, #368]	; (8005500 <HAL_DMA_Init+0x65c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d068      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5a      	ldr	r2, [pc, #360]	; (8005504 <HAL_DMA_Init+0x660>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d063      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a59      	ldr	r2, [pc, #356]	; (8005508 <HAL_DMA_Init+0x664>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d05e      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a57      	ldr	r2, [pc, #348]	; (800550c <HAL_DMA_Init+0x668>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d059      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a56      	ldr	r2, [pc, #344]	; (8005510 <HAL_DMA_Init+0x66c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d054      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <HAL_DMA_Init+0x670>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d04f      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a53      	ldr	r2, [pc, #332]	; (8005518 <HAL_DMA_Init+0x674>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d04a      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a51      	ldr	r2, [pc, #324]	; (800551c <HAL_DMA_Init+0x678>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d045      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a50      	ldr	r2, [pc, #320]	; (8005520 <HAL_DMA_Init+0x67c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d040      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4e      	ldr	r2, [pc, #312]	; (8005524 <HAL_DMA_Init+0x680>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d03b      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <HAL_DMA_Init+0x684>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d036      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a4b      	ldr	r2, [pc, #300]	; (800552c <HAL_DMA_Init+0x688>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d031      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <HAL_DMA_Init+0x68c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d02c      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a48      	ldr	r2, [pc, #288]	; (8005534 <HAL_DMA_Init+0x690>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d027      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a47      	ldr	r2, [pc, #284]	; (8005538 <HAL_DMA_Init+0x694>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d022      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a45      	ldr	r2, [pc, #276]	; (800553c <HAL_DMA_Init+0x698>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01d      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a44      	ldr	r2, [pc, #272]	; (8005540 <HAL_DMA_Init+0x69c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d018      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a42      	ldr	r2, [pc, #264]	; (8005544 <HAL_DMA_Init+0x6a0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a41      	ldr	r2, [pc, #260]	; (8005548 <HAL_DMA_Init+0x6a4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3f      	ldr	r2, [pc, #252]	; (800554c <HAL_DMA_Init+0x6a8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a3e      	ldr	r2, [pc, #248]	; (8005550 <HAL_DMA_Init+0x6ac>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_DMA_Init+0x5c2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <HAL_DMA_Init+0x6b0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_DMA_Init+0x5c6>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_DMA_Init+0x5c8>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d032      	beq.n	80054d6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f002 fbf9 	bl	8007c68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d102      	bne.n	8005484 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005498:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_DMA_Init+0x620>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d80c      	bhi.n	80054c4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f002 fc76 	bl	8007d9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	e008      	b.n	80054d6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	a7fdabf8 	.word	0xa7fdabf8
 80054f4:	cccccccd 	.word	0xcccccccd
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
 8005538:	58025408 	.word	0x58025408
 800553c:	5802541c 	.word	0x5802541c
 8005540:	58025430 	.word	0x58025430
 8005544:	58025444 	.word	0x58025444
 8005548:	58025458 	.word	0x58025458
 800554c:	5802546c 	.word	0x5802546c
 8005550:	58025480 	.word	0x58025480
 8005554:	58025494 	.word	0x58025494

08005558 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e1a8      	b.n	80058bc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a82      	ldr	r2, [pc, #520]	; (8005778 <HAL_DMA_DeInit+0x220>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a80      	ldr	r2, [pc, #512]	; (800577c <HAL_DMA_DeInit+0x224>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7f      	ldr	r2, [pc, #508]	; (8005780 <HAL_DMA_DeInit+0x228>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a7d      	ldr	r2, [pc, #500]	; (8005784 <HAL_DMA_DeInit+0x22c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7c      	ldr	r2, [pc, #496]	; (8005788 <HAL_DMA_DeInit+0x230>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a7a      	ldr	r2, [pc, #488]	; (800578c <HAL_DMA_DeInit+0x234>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a79      	ldr	r2, [pc, #484]	; (8005790 <HAL_DMA_DeInit+0x238>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a77      	ldr	r2, [pc, #476]	; (8005794 <HAL_DMA_DeInit+0x23c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a76      	ldr	r2, [pc, #472]	; (8005798 <HAL_DMA_DeInit+0x240>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a74      	ldr	r2, [pc, #464]	; (800579c <HAL_DMA_DeInit+0x244>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a73      	ldr	r2, [pc, #460]	; (80057a0 <HAL_DMA_DeInit+0x248>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a71      	ldr	r2, [pc, #452]	; (80057a4 <HAL_DMA_DeInit+0x24c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a70      	ldr	r2, [pc, #448]	; (80057a8 <HAL_DMA_DeInit+0x250>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6e      	ldr	r2, [pc, #440]	; (80057ac <HAL_DMA_DeInit+0x254>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6d      	ldr	r2, [pc, #436]	; (80057b0 <HAL_DMA_DeInit+0x258>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_DeInit+0xb2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6b      	ldr	r2, [pc, #428]	; (80057b4 <HAL_DMA_DeInit+0x25c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d108      	bne.n	800561c <HAL_DMA_DeInit+0xc4>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e007      	b.n	800562c <HAL_DMA_DeInit+0xd4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_DMA_DeInit+0x220>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04a      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_DMA_DeInit+0x224>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d045      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4e      	ldr	r2, [pc, #312]	; (8005780 <HAL_DMA_DeInit+0x228>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d040      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a4d      	ldr	r2, [pc, #308]	; (8005784 <HAL_DMA_DeInit+0x22c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d03b      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <HAL_DMA_DeInit+0x230>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d036      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a4a      	ldr	r2, [pc, #296]	; (800578c <HAL_DMA_DeInit+0x234>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d031      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_DMA_DeInit+0x238>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02c      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a47      	ldr	r2, [pc, #284]	; (8005794 <HAL_DMA_DeInit+0x23c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d027      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a45      	ldr	r2, [pc, #276]	; (8005798 <HAL_DMA_DeInit+0x240>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a44      	ldr	r2, [pc, #272]	; (800579c <HAL_DMA_DeInit+0x244>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01d      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <HAL_DMA_DeInit+0x248>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a41      	ldr	r2, [pc, #260]	; (80057a4 <HAL_DMA_DeInit+0x24c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <HAL_DMA_DeInit+0x250>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3e      	ldr	r2, [pc, #248]	; (80057ac <HAL_DMA_DeInit+0x254>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3c      	ldr	r2, [pc, #240]	; (80057b0 <HAL_DMA_DeInit+0x258>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_DMA_DeInit+0x174>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a3b      	ldr	r2, [pc, #236]	; (80057b4 <HAL_DMA_DeInit+0x25c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d101      	bne.n	80056d0 <HAL_DMA_DeInit+0x178>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_DMA_DeInit+0x17a>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d025      	beq.n	8005722 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2221      	movs	r2, #33	; 0x21
 8005704:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f002 f980 	bl	8007a0c <DMA_CalcBaseAndBitshift>
 800570c:	4603      	mov	r3, r0
 800570e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	223f      	movs	r2, #63	; 0x3f
 800571a:	409a      	lsls	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	e081      	b.n	8005826 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <HAL_DMA_DeInit+0x260>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a22      	ldr	r2, [pc, #136]	; (80057bc <HAL_DMA_DeInit+0x264>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01d      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <HAL_DMA_DeInit+0x268>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <HAL_DMA_DeInit+0x26c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1e      	ldr	r2, [pc, #120]	; (80057c8 <HAL_DMA_DeInit+0x270>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_DMA_DeInit+0x274>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <HAL_DMA_DeInit+0x278>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_DMA_DeInit+0x21a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <HAL_DMA_DeInit+0x27c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d132      	bne.n	80057d8 <HAL_DMA_DeInit+0x280>
 8005772:	2301      	movs	r3, #1
 8005774:	e031      	b.n	80057da <HAL_DMA_DeInit+0x282>
 8005776:	bf00      	nop
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
 80057b8:	58025408 	.word	0x58025408
 80057bc:	5802541c 	.word	0x5802541c
 80057c0:	58025430 	.word	0x58025430
 80057c4:	58025444 	.word	0x58025444
 80057c8:	58025458 	.word	0x58025458
 80057cc:	5802546c 	.word	0x5802546c
 80057d0:	58025480 	.word	0x58025480
 80057d4:	58025494 	.word	0x58025494
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d021      	beq.n	8005822 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f002 f900 	bl	8007a0c <DMA_CalcBaseAndBitshift>
 800580c:	4603      	mov	r3, r0
 800580e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	e001      	b.n	8005826 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e04a      	b.n	80058bc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 fa1e 	bl	8007c68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005844:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00f      	beq.n	800586e <HAL_DMA_DeInit+0x316>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b08      	cmp	r3, #8
 8005854:	d80b      	bhi.n	800586e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f002 faa0 	bl	8007d9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800586c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e226      	b.n	8005d2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Start_IT+0x2a>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e21f      	b.n	8005d2e <HAL_DMA_Start_IT+0x46a>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	f040 820a 	bne.w	8005d18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a68      	ldr	r2, [pc, #416]	; (8005ab8 <HAL_DMA_Start_IT+0x1f4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d04a      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a66      	ldr	r2, [pc, #408]	; (8005abc <HAL_DMA_Start_IT+0x1f8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d045      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a65      	ldr	r2, [pc, #404]	; (8005ac0 <HAL_DMA_Start_IT+0x1fc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d040      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a63      	ldr	r2, [pc, #396]	; (8005ac4 <HAL_DMA_Start_IT+0x200>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a62      	ldr	r2, [pc, #392]	; (8005ac8 <HAL_DMA_Start_IT+0x204>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d036      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a60      	ldr	r2, [pc, #384]	; (8005acc <HAL_DMA_Start_IT+0x208>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5f      	ldr	r2, [pc, #380]	; (8005ad0 <HAL_DMA_Start_IT+0x20c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d02c      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a5d      	ldr	r2, [pc, #372]	; (8005ad4 <HAL_DMA_Start_IT+0x210>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d027      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a5c      	ldr	r2, [pc, #368]	; (8005ad8 <HAL_DMA_Start_IT+0x214>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5a      	ldr	r2, [pc, #360]	; (8005adc <HAL_DMA_Start_IT+0x218>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a59      	ldr	r2, [pc, #356]	; (8005ae0 <HAL_DMA_Start_IT+0x21c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a57      	ldr	r2, [pc, #348]	; (8005ae4 <HAL_DMA_Start_IT+0x220>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <HAL_DMA_Start_IT+0x224>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a54      	ldr	r2, [pc, #336]	; (8005aec <HAL_DMA_Start_IT+0x228>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a53      	ldr	r2, [pc, #332]	; (8005af0 <HAL_DMA_Start_IT+0x22c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMA_Start_IT+0xee>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a51      	ldr	r2, [pc, #324]	; (8005af4 <HAL_DMA_Start_IT+0x230>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d108      	bne.n	80059c4 <HAL_DMA_Start_IT+0x100>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e007      	b.n	80059d4 <HAL_DMA_Start_IT+0x110>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0201 	bic.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fe6a 	bl	80076b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <HAL_DMA_Start_IT+0x1f4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04a      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a33      	ldr	r2, [pc, #204]	; (8005abc <HAL_DMA_Start_IT+0x1f8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d045      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a31      	ldr	r2, [pc, #196]	; (8005ac0 <HAL_DMA_Start_IT+0x1fc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d040      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <HAL_DMA_Start_IT+0x200>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d03b      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2e      	ldr	r2, [pc, #184]	; (8005ac8 <HAL_DMA_Start_IT+0x204>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d036      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <HAL_DMA_Start_IT+0x208>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d031      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <HAL_DMA_Start_IT+0x20c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02c      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <HAL_DMA_Start_IT+0x210>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d027      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a28      	ldr	r2, [pc, #160]	; (8005ad8 <HAL_DMA_Start_IT+0x214>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d022      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a27      	ldr	r2, [pc, #156]	; (8005adc <HAL_DMA_Start_IT+0x218>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01d      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <HAL_DMA_Start_IT+0x21c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d018      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <HAL_DMA_Start_IT+0x220>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <HAL_DMA_Start_IT+0x224>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a21      	ldr	r2, [pc, #132]	; (8005aec <HAL_DMA_Start_IT+0x228>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <HAL_DMA_Start_IT+0x22c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_DMA_Start_IT+0x1bc>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <HAL_DMA_Start_IT+0x230>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d101      	bne.n	8005a84 <HAL_DMA_Start_IT+0x1c0>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <HAL_DMA_Start_IT+0x1c2>
 8005a84:	2300      	movs	r3, #0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d036      	beq.n	8005af8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f023 021e 	bic.w	r2, r3, #30
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0216 	orr.w	r2, r2, #22
 8005a9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03e      	beq.n	8005b24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0208 	orr.w	r2, r2, #8
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e035      	b.n	8005b24 <HAL_DMA_Start_IT+0x260>
 8005ab8:	40020010 	.word	0x40020010
 8005abc:	40020028 	.word	0x40020028
 8005ac0:	40020040 	.word	0x40020040
 8005ac4:	40020058 	.word	0x40020058
 8005ac8:	40020070 	.word	0x40020070
 8005acc:	40020088 	.word	0x40020088
 8005ad0:	400200a0 	.word	0x400200a0
 8005ad4:	400200b8 	.word	0x400200b8
 8005ad8:	40020410 	.word	0x40020410
 8005adc:	40020428 	.word	0x40020428
 8005ae0:	40020440 	.word	0x40020440
 8005ae4:	40020458 	.word	0x40020458
 8005ae8:	40020470 	.word	0x40020470
 8005aec:	40020488 	.word	0x40020488
 8005af0:	400204a0 	.word	0x400204a0
 8005af4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020e 	bic.w	r2, r3, #14
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 020a 	orr.w	r2, r2, #10
 8005b0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0204 	orr.w	r2, r2, #4
 8005b22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a83      	ldr	r2, [pc, #524]	; (8005d38 <HAL_DMA_Start_IT+0x474>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d072      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a82      	ldr	r2, [pc, #520]	; (8005d3c <HAL_DMA_Start_IT+0x478>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d06d      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <HAL_DMA_Start_IT+0x47c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d068      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a7f      	ldr	r2, [pc, #508]	; (8005d44 <HAL_DMA_Start_IT+0x480>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d063      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <HAL_DMA_Start_IT+0x484>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d05e      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a7c      	ldr	r2, [pc, #496]	; (8005d4c <HAL_DMA_Start_IT+0x488>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d059      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a7a      	ldr	r2, [pc, #488]	; (8005d50 <HAL_DMA_Start_IT+0x48c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d054      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a79      	ldr	r2, [pc, #484]	; (8005d54 <HAL_DMA_Start_IT+0x490>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d04f      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a77      	ldr	r2, [pc, #476]	; (8005d58 <HAL_DMA_Start_IT+0x494>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d04a      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a76      	ldr	r2, [pc, #472]	; (8005d5c <HAL_DMA_Start_IT+0x498>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d045      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a74      	ldr	r2, [pc, #464]	; (8005d60 <HAL_DMA_Start_IT+0x49c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d040      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a73      	ldr	r2, [pc, #460]	; (8005d64 <HAL_DMA_Start_IT+0x4a0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d03b      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a71      	ldr	r2, [pc, #452]	; (8005d68 <HAL_DMA_Start_IT+0x4a4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d036      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a70      	ldr	r2, [pc, #448]	; (8005d6c <HAL_DMA_Start_IT+0x4a8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d031      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6e      	ldr	r2, [pc, #440]	; (8005d70 <HAL_DMA_Start_IT+0x4ac>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d02c      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <HAL_DMA_Start_IT+0x4b0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d027      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6b      	ldr	r2, [pc, #428]	; (8005d78 <HAL_DMA_Start_IT+0x4b4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d022      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6a      	ldr	r2, [pc, #424]	; (8005d7c <HAL_DMA_Start_IT+0x4b8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01d      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a68      	ldr	r2, [pc, #416]	; (8005d80 <HAL_DMA_Start_IT+0x4bc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d018      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a67      	ldr	r2, [pc, #412]	; (8005d84 <HAL_DMA_Start_IT+0x4c0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a65      	ldr	r2, [pc, #404]	; (8005d88 <HAL_DMA_Start_IT+0x4c4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a64      	ldr	r2, [pc, #400]	; (8005d8c <HAL_DMA_Start_IT+0x4c8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a62      	ldr	r2, [pc, #392]	; (8005d90 <HAL_DMA_Start_IT+0x4cc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_DMA_Start_IT+0x350>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a61      	ldr	r2, [pc, #388]	; (8005d94 <HAL_DMA_Start_IT+0x4d0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d101      	bne.n	8005c18 <HAL_DMA_Start_IT+0x354>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_DMA_Start_IT+0x356>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01a      	beq.n	8005c54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <HAL_DMA_Start_IT+0x474>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d04a      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a36      	ldr	r2, [pc, #216]	; (8005d3c <HAL_DMA_Start_IT+0x478>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d045      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <HAL_DMA_Start_IT+0x47c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d040      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a33      	ldr	r2, [pc, #204]	; (8005d44 <HAL_DMA_Start_IT+0x480>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d03b      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a31      	ldr	r2, [pc, #196]	; (8005d48 <HAL_DMA_Start_IT+0x484>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d036      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a30      	ldr	r2, [pc, #192]	; (8005d4c <HAL_DMA_Start_IT+0x488>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d031      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2e      	ldr	r2, [pc, #184]	; (8005d50 <HAL_DMA_Start_IT+0x48c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02c      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <HAL_DMA_Start_IT+0x490>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d027      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <HAL_DMA_Start_IT+0x494>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d022      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <HAL_DMA_Start_IT+0x498>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d01d      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a28      	ldr	r2, [pc, #160]	; (8005d60 <HAL_DMA_Start_IT+0x49c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d018      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a27      	ldr	r2, [pc, #156]	; (8005d64 <HAL_DMA_Start_IT+0x4a0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a25      	ldr	r2, [pc, #148]	; (8005d68 <HAL_DMA_Start_IT+0x4a4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a24      	ldr	r2, [pc, #144]	; (8005d6c <HAL_DMA_Start_IT+0x4a8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <HAL_DMA_Start_IT+0x4ac>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x430>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <HAL_DMA_Start_IT+0x4b0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d108      	bne.n	8005d06 <HAL_DMA_Start_IT+0x442>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e012      	b.n	8005d2c <HAL_DMA_Start_IT+0x468>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e009      	b.n	8005d2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40020010 	.word	0x40020010
 8005d3c:	40020028 	.word	0x40020028
 8005d40:	40020040 	.word	0x40020040
 8005d44:	40020058 	.word	0x40020058
 8005d48:	40020070 	.word	0x40020070
 8005d4c:	40020088 	.word	0x40020088
 8005d50:	400200a0 	.word	0x400200a0
 8005d54:	400200b8 	.word	0x400200b8
 8005d58:	40020410 	.word	0x40020410
 8005d5c:	40020428 	.word	0x40020428
 8005d60:	40020440 	.word	0x40020440
 8005d64:	40020458 	.word	0x40020458
 8005d68:	40020470 	.word	0x40020470
 8005d6c:	40020488 	.word	0x40020488
 8005d70:	400204a0 	.word	0x400204a0
 8005d74:	400204b8 	.word	0x400204b8
 8005d78:	58025408 	.word	0x58025408
 8005d7c:	5802541c 	.word	0x5802541c
 8005d80:	58025430 	.word	0x58025430
 8005d84:	58025444 	.word	0x58025444
 8005d88:	58025458 	.word	0x58025458
 8005d8c:	5802546c 	.word	0x5802546c
 8005d90:	58025480 	.word	0x58025480
 8005d94:	58025494 	.word	0x58025494

08005d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005da0:	f7fe ff32 	bl	8004c08 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e2dc      	b.n	800636a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d008      	beq.n	8005dce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e2cd      	b.n	800636a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a76      	ldr	r2, [pc, #472]	; (8005fac <HAL_DMA_Abort+0x214>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d04a      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a74      	ldr	r2, [pc, #464]	; (8005fb0 <HAL_DMA_Abort+0x218>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d045      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a73      	ldr	r2, [pc, #460]	; (8005fb4 <HAL_DMA_Abort+0x21c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d040      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a71      	ldr	r2, [pc, #452]	; (8005fb8 <HAL_DMA_Abort+0x220>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d03b      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a70      	ldr	r2, [pc, #448]	; (8005fbc <HAL_DMA_Abort+0x224>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d036      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6e      	ldr	r2, [pc, #440]	; (8005fc0 <HAL_DMA_Abort+0x228>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6d      	ldr	r2, [pc, #436]	; (8005fc4 <HAL_DMA_Abort+0x22c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d02c      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6b      	ldr	r2, [pc, #428]	; (8005fc8 <HAL_DMA_Abort+0x230>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d027      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6a      	ldr	r2, [pc, #424]	; (8005fcc <HAL_DMA_Abort+0x234>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <HAL_DMA_Abort+0x238>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01d      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a67      	ldr	r2, [pc, #412]	; (8005fd4 <HAL_DMA_Abort+0x23c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_DMA_Abort+0x240>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a64      	ldr	r2, [pc, #400]	; (8005fdc <HAL_DMA_Abort+0x244>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a62      	ldr	r2, [pc, #392]	; (8005fe0 <HAL_DMA_Abort+0x248>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a61      	ldr	r2, [pc, #388]	; (8005fe4 <HAL_DMA_Abort+0x24c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_DMA_Abort+0xd6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5f      	ldr	r2, [pc, #380]	; (8005fe8 <HAL_DMA_Abort+0x250>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_DMA_Abort+0xda>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_DMA_Abort+0xdc>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 021e 	bic.w	r2, r2, #30
 8005e86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e00a      	b.n	8005eb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 020e 	bic.w	r2, r2, #14
 8005eae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <HAL_DMA_Abort+0x214>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d072      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a3a      	ldr	r2, [pc, #232]	; (8005fb0 <HAL_DMA_Abort+0x218>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d06d      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a39      	ldr	r2, [pc, #228]	; (8005fb4 <HAL_DMA_Abort+0x21c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d068      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a37      	ldr	r2, [pc, #220]	; (8005fb8 <HAL_DMA_Abort+0x220>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d063      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a36      	ldr	r2, [pc, #216]	; (8005fbc <HAL_DMA_Abort+0x224>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d05e      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a34      	ldr	r2, [pc, #208]	; (8005fc0 <HAL_DMA_Abort+0x228>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d059      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a33      	ldr	r2, [pc, #204]	; (8005fc4 <HAL_DMA_Abort+0x22c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d054      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a31      	ldr	r2, [pc, #196]	; (8005fc8 <HAL_DMA_Abort+0x230>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d04f      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a30      	ldr	r2, [pc, #192]	; (8005fcc <HAL_DMA_Abort+0x234>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d04a      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <HAL_DMA_Abort+0x238>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d045      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2d      	ldr	r2, [pc, #180]	; (8005fd4 <HAL_DMA_Abort+0x23c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d040      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <HAL_DMA_Abort+0x240>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d03b      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2a      	ldr	r2, [pc, #168]	; (8005fdc <HAL_DMA_Abort+0x244>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d036      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a28      	ldr	r2, [pc, #160]	; (8005fe0 <HAL_DMA_Abort+0x248>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d031      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a27      	ldr	r2, [pc, #156]	; (8005fe4 <HAL_DMA_Abort+0x24c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d02c      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <HAL_DMA_Abort+0x250>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d027      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <HAL_DMA_Abort+0x254>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d022      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <HAL_DMA_Abort+0x258>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01d      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <HAL_DMA_Abort+0x25c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d018      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <HAL_DMA_Abort+0x260>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <HAL_DMA_Abort+0x264>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <HAL_DMA_Abort+0x268>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <HAL_DMA_Abort+0x26c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_DMA_Abort+0x20e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_DMA_Abort+0x270>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d132      	bne.n	800600c <HAL_DMA_Abort+0x274>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e031      	b.n	800600e <HAL_DMA_Abort+0x276>
 8005faa:	bf00      	nop
 8005fac:	40020010 	.word	0x40020010
 8005fb0:	40020028 	.word	0x40020028
 8005fb4:	40020040 	.word	0x40020040
 8005fb8:	40020058 	.word	0x40020058
 8005fbc:	40020070 	.word	0x40020070
 8005fc0:	40020088 	.word	0x40020088
 8005fc4:	400200a0 	.word	0x400200a0
 8005fc8:	400200b8 	.word	0x400200b8
 8005fcc:	40020410 	.word	0x40020410
 8005fd0:	40020428 	.word	0x40020428
 8005fd4:	40020440 	.word	0x40020440
 8005fd8:	40020458 	.word	0x40020458
 8005fdc:	40020470 	.word	0x40020470
 8005fe0:	40020488 	.word	0x40020488
 8005fe4:	400204a0 	.word	0x400204a0
 8005fe8:	400204b8 	.word	0x400204b8
 8005fec:	58025408 	.word	0x58025408
 8005ff0:	5802541c 	.word	0x5802541c
 8005ff4:	58025430 	.word	0x58025430
 8005ff8:	58025444 	.word	0x58025444
 8005ffc:	58025458 	.word	0x58025458
 8006000:	5802546c 	.word	0x5802546c
 8006004:	58025480 	.word	0x58025480
 8006008:	58025494 	.word	0x58025494
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006020:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6d      	ldr	r2, [pc, #436]	; (80061dc <HAL_DMA_Abort+0x444>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d04a      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a6b      	ldr	r2, [pc, #428]	; (80061e0 <HAL_DMA_Abort+0x448>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d045      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a6a      	ldr	r2, [pc, #424]	; (80061e4 <HAL_DMA_Abort+0x44c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d040      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a68      	ldr	r2, [pc, #416]	; (80061e8 <HAL_DMA_Abort+0x450>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d03b      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a67      	ldr	r2, [pc, #412]	; (80061ec <HAL_DMA_Abort+0x454>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d036      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a65      	ldr	r2, [pc, #404]	; (80061f0 <HAL_DMA_Abort+0x458>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d031      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a64      	ldr	r2, [pc, #400]	; (80061f4 <HAL_DMA_Abort+0x45c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d02c      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a62      	ldr	r2, [pc, #392]	; (80061f8 <HAL_DMA_Abort+0x460>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d027      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a61      	ldr	r2, [pc, #388]	; (80061fc <HAL_DMA_Abort+0x464>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5f      	ldr	r2, [pc, #380]	; (8006200 <HAL_DMA_Abort+0x468>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01d      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5e      	ldr	r2, [pc, #376]	; (8006204 <HAL_DMA_Abort+0x46c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d018      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5c      	ldr	r2, [pc, #368]	; (8006208 <HAL_DMA_Abort+0x470>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5b      	ldr	r2, [pc, #364]	; (800620c <HAL_DMA_Abort+0x474>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a59      	ldr	r2, [pc, #356]	; (8006210 <HAL_DMA_Abort+0x478>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a58      	ldr	r2, [pc, #352]	; (8006214 <HAL_DMA_Abort+0x47c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_DMA_Abort+0x32a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a56      	ldr	r2, [pc, #344]	; (8006218 <HAL_DMA_Abort+0x480>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d108      	bne.n	80060d4 <HAL_DMA_Abort+0x33c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e007      	b.n	80060e4 <HAL_DMA_Abort+0x34c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060e4:	e013      	b.n	800610e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060e6:	f7fe fd8f 	bl	8004c08 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d90c      	bls.n	800610e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2203      	movs	r2, #3
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e12d      	b.n	800636a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2f      	ldr	r2, [pc, #188]	; (80061dc <HAL_DMA_Abort+0x444>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d04a      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2d      	ldr	r2, [pc, #180]	; (80061e0 <HAL_DMA_Abort+0x448>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d045      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a2c      	ldr	r2, [pc, #176]	; (80061e4 <HAL_DMA_Abort+0x44c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d040      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <HAL_DMA_Abort+0x450>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d03b      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a29      	ldr	r2, [pc, #164]	; (80061ec <HAL_DMA_Abort+0x454>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d036      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a27      	ldr	r2, [pc, #156]	; (80061f0 <HAL_DMA_Abort+0x458>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d031      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a26      	ldr	r2, [pc, #152]	; (80061f4 <HAL_DMA_Abort+0x45c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d02c      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <HAL_DMA_Abort+0x460>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d027      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a23      	ldr	r2, [pc, #140]	; (80061fc <HAL_DMA_Abort+0x464>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a21      	ldr	r2, [pc, #132]	; (8006200 <HAL_DMA_Abort+0x468>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01d      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a20      	ldr	r2, [pc, #128]	; (8006204 <HAL_DMA_Abort+0x46c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <HAL_DMA_Abort+0x470>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1d      	ldr	r2, [pc, #116]	; (800620c <HAL_DMA_Abort+0x474>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <HAL_DMA_Abort+0x478>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <HAL_DMA_Abort+0x47c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_DMA_Abort+0x422>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_DMA_Abort+0x480>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d101      	bne.n	80061be <HAL_DMA_Abort+0x426>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <HAL_DMA_Abort+0x428>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02b      	beq.n	800621c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	223f      	movs	r2, #63	; 0x3f
 80061d4:	409a      	lsls	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]
 80061da:	e02a      	b.n	8006232 <HAL_DMA_Abort+0x49a>
 80061dc:	40020010 	.word	0x40020010
 80061e0:	40020028 	.word	0x40020028
 80061e4:	40020040 	.word	0x40020040
 80061e8:	40020058 	.word	0x40020058
 80061ec:	40020070 	.word	0x40020070
 80061f0:	40020088 	.word	0x40020088
 80061f4:	400200a0 	.word	0x400200a0
 80061f8:	400200b8 	.word	0x400200b8
 80061fc:	40020410 	.word	0x40020410
 8006200:	40020428 	.word	0x40020428
 8006204:	40020440 	.word	0x40020440
 8006208:	40020458 	.word	0x40020458
 800620c:	40020470 	.word	0x40020470
 8006210:	40020488 	.word	0x40020488
 8006214:	400204a0 	.word	0x400204a0
 8006218:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006220:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	409a      	lsls	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a4f      	ldr	r2, [pc, #316]	; (8006374 <HAL_DMA_Abort+0x5dc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d072      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a4d      	ldr	r2, [pc, #308]	; (8006378 <HAL_DMA_Abort+0x5e0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d06d      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a4c      	ldr	r2, [pc, #304]	; (800637c <HAL_DMA_Abort+0x5e4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d068      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a4a      	ldr	r2, [pc, #296]	; (8006380 <HAL_DMA_Abort+0x5e8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d063      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a49      	ldr	r2, [pc, #292]	; (8006384 <HAL_DMA_Abort+0x5ec>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d05e      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a47      	ldr	r2, [pc, #284]	; (8006388 <HAL_DMA_Abort+0x5f0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d059      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a46      	ldr	r2, [pc, #280]	; (800638c <HAL_DMA_Abort+0x5f4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d054      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a44      	ldr	r2, [pc, #272]	; (8006390 <HAL_DMA_Abort+0x5f8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d04f      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a43      	ldr	r2, [pc, #268]	; (8006394 <HAL_DMA_Abort+0x5fc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d04a      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a41      	ldr	r2, [pc, #260]	; (8006398 <HAL_DMA_Abort+0x600>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d045      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a40      	ldr	r2, [pc, #256]	; (800639c <HAL_DMA_Abort+0x604>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d040      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a3e      	ldr	r2, [pc, #248]	; (80063a0 <HAL_DMA_Abort+0x608>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d03b      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a3d      	ldr	r2, [pc, #244]	; (80063a4 <HAL_DMA_Abort+0x60c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d036      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <HAL_DMA_Abort+0x610>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3a      	ldr	r2, [pc, #232]	; (80063ac <HAL_DMA_Abort+0x614>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d02c      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <HAL_DMA_Abort+0x618>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d027      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a37      	ldr	r2, [pc, #220]	; (80063b4 <HAL_DMA_Abort+0x61c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d022      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <HAL_DMA_Abort+0x620>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01d      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a34      	ldr	r2, [pc, #208]	; (80063bc <HAL_DMA_Abort+0x624>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <HAL_DMA_Abort+0x628>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a31      	ldr	r2, [pc, #196]	; (80063c4 <HAL_DMA_Abort+0x62c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <HAL_DMA_Abort+0x630>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2e      	ldr	r2, [pc, #184]	; (80063cc <HAL_DMA_Abort+0x634>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_DMA_Abort+0x58a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2c      	ldr	r2, [pc, #176]	; (80063d0 <HAL_DMA_Abort+0x638>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <HAL_DMA_Abort+0x58e>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_DMA_Abort+0x590>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d015      	beq.n	8006358 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006334:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00c      	beq.n	8006358 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800634c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006356:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40020010 	.word	0x40020010
 8006378:	40020028 	.word	0x40020028
 800637c:	40020040 	.word	0x40020040
 8006380:	40020058 	.word	0x40020058
 8006384:	40020070 	.word	0x40020070
 8006388:	40020088 	.word	0x40020088
 800638c:	400200a0 	.word	0x400200a0
 8006390:	400200b8 	.word	0x400200b8
 8006394:	40020410 	.word	0x40020410
 8006398:	40020428 	.word	0x40020428
 800639c:	40020440 	.word	0x40020440
 80063a0:	40020458 	.word	0x40020458
 80063a4:	40020470 	.word	0x40020470
 80063a8:	40020488 	.word	0x40020488
 80063ac:	400204a0 	.word	0x400204a0
 80063b0:	400204b8 	.word	0x400204b8
 80063b4:	58025408 	.word	0x58025408
 80063b8:	5802541c 	.word	0x5802541c
 80063bc:	58025430 	.word	0x58025430
 80063c0:	58025444 	.word	0x58025444
 80063c4:	58025458 	.word	0x58025458
 80063c8:	5802546c 	.word	0x5802546c
 80063cc:	58025480 	.word	0x58025480
 80063d0:	58025494 	.word	0x58025494

080063d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e237      	b.n	8006856 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d004      	beq.n	80063fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2280      	movs	r2, #128	; 0x80
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e22c      	b.n	8006856 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5c      	ldr	r2, [pc, #368]	; (8006574 <HAL_DMA_Abort_IT+0x1a0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d04a      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5b      	ldr	r2, [pc, #364]	; (8006578 <HAL_DMA_Abort_IT+0x1a4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d045      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a59      	ldr	r2, [pc, #356]	; (800657c <HAL_DMA_Abort_IT+0x1a8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d040      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a58      	ldr	r2, [pc, #352]	; (8006580 <HAL_DMA_Abort_IT+0x1ac>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d03b      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a56      	ldr	r2, [pc, #344]	; (8006584 <HAL_DMA_Abort_IT+0x1b0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d036      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a55      	ldr	r2, [pc, #340]	; (8006588 <HAL_DMA_Abort_IT+0x1b4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d031      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a53      	ldr	r2, [pc, #332]	; (800658c <HAL_DMA_Abort_IT+0x1b8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d02c      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a52      	ldr	r2, [pc, #328]	; (8006590 <HAL_DMA_Abort_IT+0x1bc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d027      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a50      	ldr	r2, [pc, #320]	; (8006594 <HAL_DMA_Abort_IT+0x1c0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d022      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a4f      	ldr	r2, [pc, #316]	; (8006598 <HAL_DMA_Abort_IT+0x1c4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d01d      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a4d      	ldr	r2, [pc, #308]	; (800659c <HAL_DMA_Abort_IT+0x1c8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d018      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a4c      	ldr	r2, [pc, #304]	; (80065a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a4a      	ldr	r2, [pc, #296]	; (80065a4 <HAL_DMA_Abort_IT+0x1d0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00e      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a49      	ldr	r2, [pc, #292]	; (80065a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a47      	ldr	r2, [pc, #284]	; (80065ac <HAL_DMA_Abort_IT+0x1d8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_DMA_Abort_IT+0xc8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a46      	ldr	r2, [pc, #280]	; (80065b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d101      	bne.n	80064a0 <HAL_DMA_Abort_IT+0xcc>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <HAL_DMA_Abort_IT+0xce>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8086 	beq.w	80065b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <HAL_DMA_Abort_IT+0x1a0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_Abort_IT+0x1a4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2c      	ldr	r2, [pc, #176]	; (800657c <HAL_DMA_Abort_IT+0x1a8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_Abort_IT+0x1ac>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a29      	ldr	r2, [pc, #164]	; (8006584 <HAL_DMA_Abort_IT+0x1b0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_Abort_IT+0x1b4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a26      	ldr	r2, [pc, #152]	; (800658c <HAL_DMA_Abort_IT+0x1b8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_Abort_IT+0x1bc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a23      	ldr	r2, [pc, #140]	; (8006594 <HAL_DMA_Abort_IT+0x1c0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_Abort_IT+0x1c4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a20      	ldr	r2, [pc, #128]	; (800659c <HAL_DMA_Abort_IT+0x1c8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_DMA_Abort_IT+0x1cc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <HAL_DMA_Abort_IT+0x1d0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_DMA_Abort_IT+0x1d4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_DMA_Abort_IT+0x1d8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_Abort_IT+0x17c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_DMA_Abort_IT+0x1dc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <HAL_DMA_Abort_IT+0x18e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e178      	b.n	8006854 <HAL_DMA_Abort_IT+0x480>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0201 	bic.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e16f      	b.n	8006854 <HAL_DMA_Abort_IT+0x480>
 8006574:	40020010 	.word	0x40020010
 8006578:	40020028 	.word	0x40020028
 800657c:	40020040 	.word	0x40020040
 8006580:	40020058 	.word	0x40020058
 8006584:	40020070 	.word	0x40020070
 8006588:	40020088 	.word	0x40020088
 800658c:	400200a0 	.word	0x400200a0
 8006590:	400200b8 	.word	0x400200b8
 8006594:	40020410 	.word	0x40020410
 8006598:	40020428 	.word	0x40020428
 800659c:	40020440 	.word	0x40020440
 80065a0:	40020458 	.word	0x40020458
 80065a4:	40020470 	.word	0x40020470
 80065a8:	40020488 	.word	0x40020488
 80065ac:	400204a0 	.word	0x400204a0
 80065b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 020e 	bic.w	r2, r2, #14
 80065c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a6c      	ldr	r2, [pc, #432]	; (800677c <HAL_DMA_Abort_IT+0x3a8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d04a      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6b      	ldr	r2, [pc, #428]	; (8006780 <HAL_DMA_Abort_IT+0x3ac>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d045      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a69      	ldr	r2, [pc, #420]	; (8006784 <HAL_DMA_Abort_IT+0x3b0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d040      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a68      	ldr	r2, [pc, #416]	; (8006788 <HAL_DMA_Abort_IT+0x3b4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d03b      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a66      	ldr	r2, [pc, #408]	; (800678c <HAL_DMA_Abort_IT+0x3b8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d036      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a65      	ldr	r2, [pc, #404]	; (8006790 <HAL_DMA_Abort_IT+0x3bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d031      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a63      	ldr	r2, [pc, #396]	; (8006794 <HAL_DMA_Abort_IT+0x3c0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02c      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a62      	ldr	r2, [pc, #392]	; (8006798 <HAL_DMA_Abort_IT+0x3c4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d027      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a60      	ldr	r2, [pc, #384]	; (800679c <HAL_DMA_Abort_IT+0x3c8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d022      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5f      	ldr	r2, [pc, #380]	; (80067a0 <HAL_DMA_Abort_IT+0x3cc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d01d      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5d      	ldr	r2, [pc, #372]	; (80067a4 <HAL_DMA_Abort_IT+0x3d0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d018      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5c      	ldr	r2, [pc, #368]	; (80067a8 <HAL_DMA_Abort_IT+0x3d4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a5a      	ldr	r2, [pc, #360]	; (80067ac <HAL_DMA_Abort_IT+0x3d8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a59      	ldr	r2, [pc, #356]	; (80067b0 <HAL_DMA_Abort_IT+0x3dc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a57      	ldr	r2, [pc, #348]	; (80067b4 <HAL_DMA_Abort_IT+0x3e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_DMA_Abort_IT+0x290>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a56      	ldr	r2, [pc, #344]	; (80067b8 <HAL_DMA_Abort_IT+0x3e4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <HAL_DMA_Abort_IT+0x2a2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e007      	b.n	8006686 <HAL_DMA_Abort_IT+0x2b2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a3c      	ldr	r2, [pc, #240]	; (800677c <HAL_DMA_Abort_IT+0x3a8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d072      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a3a      	ldr	r2, [pc, #232]	; (8006780 <HAL_DMA_Abort_IT+0x3ac>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d06d      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a39      	ldr	r2, [pc, #228]	; (8006784 <HAL_DMA_Abort_IT+0x3b0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d068      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a37      	ldr	r2, [pc, #220]	; (8006788 <HAL_DMA_Abort_IT+0x3b4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d063      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a36      	ldr	r2, [pc, #216]	; (800678c <HAL_DMA_Abort_IT+0x3b8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d05e      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a34      	ldr	r2, [pc, #208]	; (8006790 <HAL_DMA_Abort_IT+0x3bc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d059      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a33      	ldr	r2, [pc, #204]	; (8006794 <HAL_DMA_Abort_IT+0x3c0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d054      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a31      	ldr	r2, [pc, #196]	; (8006798 <HAL_DMA_Abort_IT+0x3c4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d04f      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a30      	ldr	r2, [pc, #192]	; (800679c <HAL_DMA_Abort_IT+0x3c8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d04a      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2e      	ldr	r2, [pc, #184]	; (80067a0 <HAL_DMA_Abort_IT+0x3cc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d045      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <HAL_DMA_Abort_IT+0x3d0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d040      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a2b      	ldr	r2, [pc, #172]	; (80067a8 <HAL_DMA_Abort_IT+0x3d4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d03b      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2a      	ldr	r2, [pc, #168]	; (80067ac <HAL_DMA_Abort_IT+0x3d8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d036      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a28      	ldr	r2, [pc, #160]	; (80067b0 <HAL_DMA_Abort_IT+0x3dc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d031      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a27      	ldr	r2, [pc, #156]	; (80067b4 <HAL_DMA_Abort_IT+0x3e0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d02c      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a25      	ldr	r2, [pc, #148]	; (80067b8 <HAL_DMA_Abort_IT+0x3e4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d027      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a24      	ldr	r2, [pc, #144]	; (80067bc <HAL_DMA_Abort_IT+0x3e8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d022      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <HAL_DMA_Abort_IT+0x3ec>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d01d      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <HAL_DMA_Abort_IT+0x3f0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d018      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <HAL_DMA_Abort_IT+0x3f4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <HAL_DMA_Abort_IT+0x3f8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_DMA_Abort_IT+0x3fc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_DMA_Abort_IT+0x400>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_DMA_Abort_IT+0x3a2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a19      	ldr	r2, [pc, #100]	; (80067d8 <HAL_DMA_Abort_IT+0x404>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d132      	bne.n	80067dc <HAL_DMA_Abort_IT+0x408>
 8006776:	2301      	movs	r3, #1
 8006778:	e031      	b.n	80067de <HAL_DMA_Abort_IT+0x40a>
 800677a:	bf00      	nop
 800677c:	40020010 	.word	0x40020010
 8006780:	40020028 	.word	0x40020028
 8006784:	40020040 	.word	0x40020040
 8006788:	40020058 	.word	0x40020058
 800678c:	40020070 	.word	0x40020070
 8006790:	40020088 	.word	0x40020088
 8006794:	400200a0 	.word	0x400200a0
 8006798:	400200b8 	.word	0x400200b8
 800679c:	40020410 	.word	0x40020410
 80067a0:	40020428 	.word	0x40020428
 80067a4:	40020440 	.word	0x40020440
 80067a8:	40020458 	.word	0x40020458
 80067ac:	40020470 	.word	0x40020470
 80067b0:	40020488 	.word	0x40020488
 80067b4:	400204a0 	.word	0x400204a0
 80067b8:	400204b8 	.word	0x400204b8
 80067bc:	58025408 	.word	0x58025408
 80067c0:	5802541c 	.word	0x5802541c
 80067c4:	58025430 	.word	0x58025430
 80067c8:	58025444 	.word	0x58025444
 80067cc:	58025458 	.word	0x58025458
 80067d0:	5802546c 	.word	0x5802546c
 80067d4:	58025480 	.word	0x58025480
 80067d8:	58025494 	.word	0x58025494
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d028      	beq.n	8006834 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006810:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006828:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006832:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800686c:	4b67      	ldr	r3, [pc, #412]	; (8006a0c <HAL_DMA_IRQHandler+0x1ac>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a67      	ldr	r2, [pc, #412]	; (8006a10 <HAL_DMA_IRQHandler+0x1b0>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	0a9b      	lsrs	r3, r3, #10
 8006878:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006884:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5f      	ldr	r2, [pc, #380]	; (8006a14 <HAL_DMA_IRQHandler+0x1b4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5d      	ldr	r2, [pc, #372]	; (8006a18 <HAL_DMA_IRQHandler+0x1b8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5c      	ldr	r2, [pc, #368]	; (8006a1c <HAL_DMA_IRQHandler+0x1bc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a5a      	ldr	r2, [pc, #360]	; (8006a20 <HAL_DMA_IRQHandler+0x1c0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a59      	ldr	r2, [pc, #356]	; (8006a24 <HAL_DMA_IRQHandler+0x1c4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a57      	ldr	r2, [pc, #348]	; (8006a28 <HAL_DMA_IRQHandler+0x1c8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a56      	ldr	r2, [pc, #344]	; (8006a2c <HAL_DMA_IRQHandler+0x1cc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a54      	ldr	r2, [pc, #336]	; (8006a30 <HAL_DMA_IRQHandler+0x1d0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a53      	ldr	r2, [pc, #332]	; (8006a34 <HAL_DMA_IRQHandler+0x1d4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a51      	ldr	r2, [pc, #324]	; (8006a38 <HAL_DMA_IRQHandler+0x1d8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <HAL_DMA_IRQHandler+0x1dc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4e      	ldr	r2, [pc, #312]	; (8006a40 <HAL_DMA_IRQHandler+0x1e0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a4d      	ldr	r2, [pc, #308]	; (8006a44 <HAL_DMA_IRQHandler+0x1e4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a4b      	ldr	r2, [pc, #300]	; (8006a48 <HAL_DMA_IRQHandler+0x1e8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a4a      	ldr	r2, [pc, #296]	; (8006a4c <HAL_DMA_IRQHandler+0x1ec>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_IRQHandler+0xd2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a48      	ldr	r2, [pc, #288]	; (8006a50 <HAL_DMA_IRQHandler+0x1f0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_DMA_IRQHandler+0xd6>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_DMA_IRQHandler+0xd8>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 842b 	beq.w	8007194 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2208      	movs	r2, #8
 8006948:	409a      	lsls	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80a2 	beq.w	8006a98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2e      	ldr	r2, [pc, #184]	; (8006a14 <HAL_DMA_IRQHandler+0x1b4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <HAL_DMA_IRQHandler+0x1b8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2b      	ldr	r2, [pc, #172]	; (8006a1c <HAL_DMA_IRQHandler+0x1bc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2a      	ldr	r2, [pc, #168]	; (8006a20 <HAL_DMA_IRQHandler+0x1c0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <HAL_DMA_IRQHandler+0x1c4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <HAL_DMA_IRQHandler+0x1c8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a25      	ldr	r2, [pc, #148]	; (8006a2c <HAL_DMA_IRQHandler+0x1cc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <HAL_DMA_IRQHandler+0x1d0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a22      	ldr	r2, [pc, #136]	; (8006a34 <HAL_DMA_IRQHandler+0x1d4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <HAL_DMA_IRQHandler+0x1d8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <HAL_DMA_IRQHandler+0x1dc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_DMA_IRQHandler+0x1e0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <HAL_DMA_IRQHandler+0x1e4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_DMA_IRQHandler+0x1e8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <HAL_DMA_IRQHandler+0x1ec>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x194>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_DMA_IRQHandler+0x1f0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d12f      	bne.n	8006a54 <HAL_DMA_IRQHandler+0x1f4>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e02e      	b.n	8006a68 <HAL_DMA_IRQHandler+0x208>
 8006a0a:	bf00      	nop
 8006a0c:	240001a0 	.word	0x240001a0
 8006a10:	1b4e81b5 	.word	0x1b4e81b5
 8006a14:	40020010 	.word	0x40020010
 8006a18:	40020028 	.word	0x40020028
 8006a1c:	40020040 	.word	0x40020040
 8006a20:	40020058 	.word	0x40020058
 8006a24:	40020070 	.word	0x40020070
 8006a28:	40020088 	.word	0x40020088
 8006a2c:	400200a0 	.word	0x400200a0
 8006a30:	400200b8 	.word	0x400200b8
 8006a34:	40020410 	.word	0x40020410
 8006a38:	40020428 	.word	0x40020428
 8006a3c:	40020440 	.word	0x40020440
 8006a40:	40020458 	.word	0x40020458
 8006a44:	40020470 	.word	0x40020470
 8006a48:	40020488 	.word	0x40020488
 8006a4c:	400204a0 	.word	0x400204a0
 8006a50:	400204b8 	.word	0x400204b8
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d015      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0204 	bic.w	r2, r2, #4
 8006a7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2208      	movs	r2, #8
 8006a86:	409a      	lsls	r2, r3
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a90:	f043 0201 	orr.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d06e      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a69      	ldr	r2, [pc, #420]	; (8006c58 <HAL_DMA_IRQHandler+0x3f8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_DMA_IRQHandler+0x3fc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a66      	ldr	r2, [pc, #408]	; (8006c60 <HAL_DMA_IRQHandler+0x400>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a64      	ldr	r2, [pc, #400]	; (8006c64 <HAL_DMA_IRQHandler+0x404>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a63      	ldr	r2, [pc, #396]	; (8006c68 <HAL_DMA_IRQHandler+0x408>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a61      	ldr	r2, [pc, #388]	; (8006c6c <HAL_DMA_IRQHandler+0x40c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a60      	ldr	r2, [pc, #384]	; (8006c70 <HAL_DMA_IRQHandler+0x410>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a5e      	ldr	r2, [pc, #376]	; (8006c74 <HAL_DMA_IRQHandler+0x414>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a5d      	ldr	r2, [pc, #372]	; (8006c78 <HAL_DMA_IRQHandler+0x418>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5b      	ldr	r2, [pc, #364]	; (8006c7c <HAL_DMA_IRQHandler+0x41c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a5a      	ldr	r2, [pc, #360]	; (8006c80 <HAL_DMA_IRQHandler+0x420>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a58      	ldr	r2, [pc, #352]	; (8006c84 <HAL_DMA_IRQHandler+0x424>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a57      	ldr	r2, [pc, #348]	; (8006c88 <HAL_DMA_IRQHandler+0x428>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a55      	ldr	r2, [pc, #340]	; (8006c8c <HAL_DMA_IRQHandler+0x42c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a54      	ldr	r2, [pc, #336]	; (8006c90 <HAL_DMA_IRQHandler+0x430>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x2ee>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a52      	ldr	r2, [pc, #328]	; (8006c94 <HAL_DMA_IRQHandler+0x434>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10a      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x304>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf14      	ite	ne
 8006b5c:	2301      	movne	r3, #1
 8006b5e:	2300      	moveq	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e003      	b.n	8006b6c <HAL_DMA_IRQHandler+0x30c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2201      	movs	r2, #1
 8006b7a:	409a      	lsls	r2, r3
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	f043 0202 	orr.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2204      	movs	r2, #4
 8006b96:	409a      	lsls	r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 808f 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <HAL_DMA_IRQHandler+0x3f8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d04a      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <HAL_DMA_IRQHandler+0x3fc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d045      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <HAL_DMA_IRQHandler+0x400>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d040      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <HAL_DMA_IRQHandler+0x404>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d03b      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <HAL_DMA_IRQHandler+0x408>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d036      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <HAL_DMA_IRQHandler+0x40c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a23      	ldr	r2, [pc, #140]	; (8006c70 <HAL_DMA_IRQHandler+0x410>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d02c      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a21      	ldr	r2, [pc, #132]	; (8006c74 <HAL_DMA_IRQHandler+0x414>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d027      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a20      	ldr	r2, [pc, #128]	; (8006c78 <HAL_DMA_IRQHandler+0x418>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <HAL_DMA_IRQHandler+0x41c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <HAL_DMA_IRQHandler+0x420>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <HAL_DMA_IRQHandler+0x424>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	; (8006c88 <HAL_DMA_IRQHandler+0x428>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_DMA_IRQHandler+0x42c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <HAL_DMA_IRQHandler+0x430>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_DMA_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <HAL_DMA_IRQHandler+0x434>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d12a      	bne.n	8006c98 <HAL_DMA_IRQHandler+0x438>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bf14      	ite	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	2300      	moveq	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e023      	b.n	8006ca0 <HAL_DMA_IRQHandler+0x440>
 8006c58:	40020010 	.word	0x40020010
 8006c5c:	40020028 	.word	0x40020028
 8006c60:	40020040 	.word	0x40020040
 8006c64:	40020058 	.word	0x40020058
 8006c68:	40020070 	.word	0x40020070
 8006c6c:	40020088 	.word	0x40020088
 8006c70:	400200a0 	.word	0x400200a0
 8006c74:	400200b8 	.word	0x400200b8
 8006c78:	40020410 	.word	0x40020410
 8006c7c:	40020428 	.word	0x40020428
 8006c80:	40020440 	.word	0x40020440
 8006c84:	40020458 	.word	0x40020458
 8006c88:	40020470 	.word	0x40020470
 8006c8c:	40020488 	.word	0x40020488
 8006c90:	400204a0 	.word	0x400204a0
 8006c94:	400204b8 	.word	0x400204b8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00d      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2204      	movs	r2, #4
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f043 0204 	orr.w	r2, r3, #4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2210      	movs	r2, #16
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a6 	beq.w	8006e22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a85      	ldr	r2, [pc, #532]	; (8006ef0 <HAL_DMA_IRQHandler+0x690>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d04a      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a83      	ldr	r2, [pc, #524]	; (8006ef4 <HAL_DMA_IRQHandler+0x694>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d045      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a82      	ldr	r2, [pc, #520]	; (8006ef8 <HAL_DMA_IRQHandler+0x698>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d040      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a80      	ldr	r2, [pc, #512]	; (8006efc <HAL_DMA_IRQHandler+0x69c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d03b      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a7f      	ldr	r2, [pc, #508]	; (8006f00 <HAL_DMA_IRQHandler+0x6a0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d036      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a7d      	ldr	r2, [pc, #500]	; (8006f04 <HAL_DMA_IRQHandler+0x6a4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d031      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a7c      	ldr	r2, [pc, #496]	; (8006f08 <HAL_DMA_IRQHandler+0x6a8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d02c      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a7a      	ldr	r2, [pc, #488]	; (8006f0c <HAL_DMA_IRQHandler+0x6ac>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d027      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a79      	ldr	r2, [pc, #484]	; (8006f10 <HAL_DMA_IRQHandler+0x6b0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d022      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a77      	ldr	r2, [pc, #476]	; (8006f14 <HAL_DMA_IRQHandler+0x6b4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01d      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a76      	ldr	r2, [pc, #472]	; (8006f18 <HAL_DMA_IRQHandler+0x6b8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d018      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a74      	ldr	r2, [pc, #464]	; (8006f1c <HAL_DMA_IRQHandler+0x6bc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a73      	ldr	r2, [pc, #460]	; (8006f20 <HAL_DMA_IRQHandler+0x6c0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a71      	ldr	r2, [pc, #452]	; (8006f24 <HAL_DMA_IRQHandler+0x6c4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a70      	ldr	r2, [pc, #448]	; (8006f28 <HAL_DMA_IRQHandler+0x6c8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d004      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x516>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a6e      	ldr	r2, [pc, #440]	; (8006f2c <HAL_DMA_IRQHandler+0x6cc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d10a      	bne.n	8006d8c <HAL_DMA_IRQHandler+0x52c>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf14      	ite	ne
 8006d84:	2301      	movne	r3, #1
 8006d86:	2300      	moveq	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	e009      	b.n	8006da0 <HAL_DMA_IRQHandler+0x540>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	2300      	moveq	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d03e      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2210      	movs	r2, #16
 8006dae:	409a      	lsls	r2, r3
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d018      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d024      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
 8006de0:	e01f      	b.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
 8006df2:	e016      	b.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0208 	bic.w	r2, r2, #8
 8006e10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8110 	beq.w	8007058 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <HAL_DMA_IRQHandler+0x690>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d04a      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_DMA_IRQHandler+0x694>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d045      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a29      	ldr	r2, [pc, #164]	; (8006ef8 <HAL_DMA_IRQHandler+0x698>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d040      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a28      	ldr	r2, [pc, #160]	; (8006efc <HAL_DMA_IRQHandler+0x69c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d03b      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a26      	ldr	r2, [pc, #152]	; (8006f00 <HAL_DMA_IRQHandler+0x6a0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d036      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <HAL_DMA_IRQHandler+0x6a4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d031      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a23      	ldr	r2, [pc, #140]	; (8006f08 <HAL_DMA_IRQHandler+0x6a8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d02c      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <HAL_DMA_IRQHandler+0x6ac>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d027      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_DMA_IRQHandler+0x6b0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <HAL_DMA_IRQHandler+0x6b4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <HAL_DMA_IRQHandler+0x6b8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <HAL_DMA_IRQHandler+0x6bc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <HAL_DMA_IRQHandler+0x6c0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <HAL_DMA_IRQHandler+0x6c4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <HAL_DMA_IRQHandler+0x6c8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x678>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <HAL_DMA_IRQHandler+0x6cc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d12b      	bne.n	8006f30 <HAL_DMA_IRQHandler+0x6d0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf14      	ite	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	2300      	moveq	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	e02a      	b.n	8006f44 <HAL_DMA_IRQHandler+0x6e4>
 8006eee:	bf00      	nop
 8006ef0:	40020010 	.word	0x40020010
 8006ef4:	40020028 	.word	0x40020028
 8006ef8:	40020040 	.word	0x40020040
 8006efc:	40020058 	.word	0x40020058
 8006f00:	40020070 	.word	0x40020070
 8006f04:	40020088 	.word	0x40020088
 8006f08:	400200a0 	.word	0x400200a0
 8006f0c:	400200b8 	.word	0x400200b8
 8006f10:	40020410 	.word	0x40020410
 8006f14:	40020428 	.word	0x40020428
 8006f18:	40020440 	.word	0x40020440
 8006f1c:	40020458 	.word	0x40020458
 8006f20:	40020470 	.word	0x40020470
 8006f24:	40020488 	.word	0x40020488
 8006f28:	400204a0 	.word	0x400204a0
 8006f2c:	400204b8 	.word	0x400204b8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf14      	ite	ne
 8006f3e:	2301      	movne	r3, #1
 8006f40:	2300      	moveq	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8087 	beq.w	8007058 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2220      	movs	r2, #32
 8006f54:	409a      	lsls	r2, r3
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d139      	bne.n	8006fda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0216 	bic.w	r2, r2, #22
 8006f74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_DMA_IRQHandler+0x736>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0208 	bic.w	r2, r2, #8
 8006fa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	223f      	movs	r2, #63	; 0x3f
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 834a 	beq.w	8007664 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
          }
          return;
 8006fd8:	e344      	b.n	8007664 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d018      	beq.n	800701a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d108      	bne.n	8007008 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02c      	beq.n	8007058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
 8007006:	e027      	b.n	8007058 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d023      	beq.n	8007058 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
 8007018:	e01e      	b.n	8007058 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10f      	bne.n	8007048 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0210 	bic.w	r2, r2, #16
 8007036:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8306 	beq.w	800766e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8088 	beq.w	8007180 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2204      	movs	r2, #4
 8007074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a7a      	ldr	r2, [pc, #488]	; (8007268 <HAL_DMA_IRQHandler+0xa08>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d04a      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a79      	ldr	r2, [pc, #484]	; (800726c <HAL_DMA_IRQHandler+0xa0c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d045      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a77      	ldr	r2, [pc, #476]	; (8007270 <HAL_DMA_IRQHandler+0xa10>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d040      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a76      	ldr	r2, [pc, #472]	; (8007274 <HAL_DMA_IRQHandler+0xa14>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d03b      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a74      	ldr	r2, [pc, #464]	; (8007278 <HAL_DMA_IRQHandler+0xa18>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d036      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a73      	ldr	r2, [pc, #460]	; (800727c <HAL_DMA_IRQHandler+0xa1c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d031      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a71      	ldr	r2, [pc, #452]	; (8007280 <HAL_DMA_IRQHandler+0xa20>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d02c      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a70      	ldr	r2, [pc, #448]	; (8007284 <HAL_DMA_IRQHandler+0xa24>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d027      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6e      	ldr	r2, [pc, #440]	; (8007288 <HAL_DMA_IRQHandler+0xa28>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d022      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a6d      	ldr	r2, [pc, #436]	; (800728c <HAL_DMA_IRQHandler+0xa2c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d01d      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a6b      	ldr	r2, [pc, #428]	; (8007290 <HAL_DMA_IRQHandler+0xa30>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6a      	ldr	r2, [pc, #424]	; (8007294 <HAL_DMA_IRQHandler+0xa34>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a68      	ldr	r2, [pc, #416]	; (8007298 <HAL_DMA_IRQHandler+0xa38>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a67      	ldr	r2, [pc, #412]	; (800729c <HAL_DMA_IRQHandler+0xa3c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a65      	ldr	r2, [pc, #404]	; (80072a0 <HAL_DMA_IRQHandler+0xa40>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_DMA_IRQHandler+0x8b8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a64      	ldr	r2, [pc, #400]	; (80072a4 <HAL_DMA_IRQHandler+0xa44>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <HAL_DMA_IRQHandler+0x8ca>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e007      	b.n	800713a <HAL_DMA_IRQHandler+0x8da>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007142:	429a      	cmp	r2, r3
 8007144:	d307      	bcc.n	8007156 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f2      	bne.n	800713a <HAL_DMA_IRQHandler+0x8da>
 8007154:	e000      	b.n	8007158 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007156:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2203      	movs	r2, #3
 800716a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800716e:	e003      	b.n	8007178 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8272 	beq.w	800766e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	e26c      	b.n	800766e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a43      	ldr	r2, [pc, #268]	; (80072a8 <HAL_DMA_IRQHandler+0xa48>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d022      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a42      	ldr	r2, [pc, #264]	; (80072ac <HAL_DMA_IRQHandler+0xa4c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d01d      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a40      	ldr	r2, [pc, #256]	; (80072b0 <HAL_DMA_IRQHandler+0xa50>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d018      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a3f      	ldr	r2, [pc, #252]	; (80072b4 <HAL_DMA_IRQHandler+0xa54>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d013      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3d      	ldr	r2, [pc, #244]	; (80072b8 <HAL_DMA_IRQHandler+0xa58>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00e      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3c      	ldr	r2, [pc, #240]	; (80072bc <HAL_DMA_IRQHandler+0xa5c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d009      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a3a      	ldr	r2, [pc, #232]	; (80072c0 <HAL_DMA_IRQHandler+0xa60>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x984>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a39      	ldr	r2, [pc, #228]	; (80072c4 <HAL_DMA_IRQHandler+0xa64>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d101      	bne.n	80071e8 <HAL_DMA_IRQHandler+0x988>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <HAL_DMA_IRQHandler+0x98a>
 80071e8:	2300      	movs	r3, #0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 823f 	beq.w	800766e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2204      	movs	r2, #4
 8007202:	409a      	lsls	r2, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80cd 	beq.w	80073a8 <HAL_DMA_IRQHandler+0xb48>
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80c7 	beq.w	80073a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2204      	movs	r2, #4
 8007224:	409a      	lsls	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d049      	beq.n	80072c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8210 	beq.w	8007668 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007250:	e20a      	b.n	8007668 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8206 	beq.w	8007668 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007264:	e200      	b.n	8007668 <HAL_DMA_IRQHandler+0xe08>
 8007266:	bf00      	nop
 8007268:	40020010 	.word	0x40020010
 800726c:	40020028 	.word	0x40020028
 8007270:	40020040 	.word	0x40020040
 8007274:	40020058 	.word	0x40020058
 8007278:	40020070 	.word	0x40020070
 800727c:	40020088 	.word	0x40020088
 8007280:	400200a0 	.word	0x400200a0
 8007284:	400200b8 	.word	0x400200b8
 8007288:	40020410 	.word	0x40020410
 800728c:	40020428 	.word	0x40020428
 8007290:	40020440 	.word	0x40020440
 8007294:	40020458 	.word	0x40020458
 8007298:	40020470 	.word	0x40020470
 800729c:	40020488 	.word	0x40020488
 80072a0:	400204a0 	.word	0x400204a0
 80072a4:	400204b8 	.word	0x400204b8
 80072a8:	58025408 	.word	0x58025408
 80072ac:	5802541c 	.word	0x5802541c
 80072b0:	58025430 	.word	0x58025430
 80072b4:	58025444 	.word	0x58025444
 80072b8:	58025458 	.word	0x58025458
 80072bc:	5802546c 	.word	0x5802546c
 80072c0:	58025480 	.word	0x58025480
 80072c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d160      	bne.n	8007394 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a7f      	ldr	r2, [pc, #508]	; (80074d4 <HAL_DMA_IRQHandler+0xc74>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d04a      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a7d      	ldr	r2, [pc, #500]	; (80074d8 <HAL_DMA_IRQHandler+0xc78>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d045      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a7c      	ldr	r2, [pc, #496]	; (80074dc <HAL_DMA_IRQHandler+0xc7c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d040      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a7a      	ldr	r2, [pc, #488]	; (80074e0 <HAL_DMA_IRQHandler+0xc80>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d03b      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a79      	ldr	r2, [pc, #484]	; (80074e4 <HAL_DMA_IRQHandler+0xc84>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d036      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a77      	ldr	r2, [pc, #476]	; (80074e8 <HAL_DMA_IRQHandler+0xc88>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d031      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a76      	ldr	r2, [pc, #472]	; (80074ec <HAL_DMA_IRQHandler+0xc8c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d02c      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a74      	ldr	r2, [pc, #464]	; (80074f0 <HAL_DMA_IRQHandler+0xc90>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a73      	ldr	r2, [pc, #460]	; (80074f4 <HAL_DMA_IRQHandler+0xc94>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d022      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a71      	ldr	r2, [pc, #452]	; (80074f8 <HAL_DMA_IRQHandler+0xc98>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01d      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a70      	ldr	r2, [pc, #448]	; (80074fc <HAL_DMA_IRQHandler+0xc9c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d018      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a6e      	ldr	r2, [pc, #440]	; (8007500 <HAL_DMA_IRQHandler+0xca0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a6d      	ldr	r2, [pc, #436]	; (8007504 <HAL_DMA_IRQHandler+0xca4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00e      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6b      	ldr	r2, [pc, #428]	; (8007508 <HAL_DMA_IRQHandler+0xca8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d009      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6a      	ldr	r2, [pc, #424]	; (800750c <HAL_DMA_IRQHandler+0xcac>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <HAL_DMA_IRQHandler+0xb12>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a68      	ldr	r2, [pc, #416]	; (8007510 <HAL_DMA_IRQHandler+0xcb0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <HAL_DMA_IRQHandler+0xb24>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0208 	bic.w	r2, r2, #8
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e007      	b.n	8007394 <HAL_DMA_IRQHandler+0xb34>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0204 	bic.w	r2, r2, #4
 8007392:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 8165 	beq.w	8007668 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a6:	e15f      	b.n	8007668 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2202      	movs	r2, #2
 80073b2:	409a      	lsls	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4013      	ands	r3, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80c5 	beq.w	8007548 <HAL_DMA_IRQHandler+0xce8>
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80bf 	beq.w	8007548 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	2202      	movs	r2, #2
 80073d4:	409a      	lsls	r2, r3
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d018      	beq.n	8007416 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 813a 	beq.w	800766c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007400:	e134      	b.n	800766c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8130 	beq.w	800766c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007414:	e12a      	b.n	800766c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 8089 	bne.w	8007534 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2b      	ldr	r2, [pc, #172]	; (80074d4 <HAL_DMA_IRQHandler+0xc74>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d04a      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <HAL_DMA_IRQHandler+0xc78>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d045      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a28      	ldr	r2, [pc, #160]	; (80074dc <HAL_DMA_IRQHandler+0xc7c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d040      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <HAL_DMA_IRQHandler+0xc80>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d03b      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a25      	ldr	r2, [pc, #148]	; (80074e4 <HAL_DMA_IRQHandler+0xc84>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d036      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a23      	ldr	r2, [pc, #140]	; (80074e8 <HAL_DMA_IRQHandler+0xc88>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d031      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a22      	ldr	r2, [pc, #136]	; (80074ec <HAL_DMA_IRQHandler+0xc8c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d02c      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a20      	ldr	r2, [pc, #128]	; (80074f0 <HAL_DMA_IRQHandler+0xc90>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d027      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <HAL_DMA_IRQHandler+0xc94>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d022      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <HAL_DMA_IRQHandler+0xc98>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01d      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <HAL_DMA_IRQHandler+0xc9c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1a      	ldr	r2, [pc, #104]	; (8007500 <HAL_DMA_IRQHandler+0xca0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a19      	ldr	r2, [pc, #100]	; (8007504 <HAL_DMA_IRQHandler+0xca4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a17      	ldr	r2, [pc, #92]	; (8007508 <HAL_DMA_IRQHandler+0xca8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <HAL_DMA_IRQHandler+0xcac>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_DMA_IRQHandler+0xc62>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a14      	ldr	r2, [pc, #80]	; (8007510 <HAL_DMA_IRQHandler+0xcb0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d128      	bne.n	8007514 <HAL_DMA_IRQHandler+0xcb4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0214 	bic.w	r2, r2, #20
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	e027      	b.n	8007524 <HAL_DMA_IRQHandler+0xcc4>
 80074d4:	40020010 	.word	0x40020010
 80074d8:	40020028 	.word	0x40020028
 80074dc:	40020040 	.word	0x40020040
 80074e0:	40020058 	.word	0x40020058
 80074e4:	40020070 	.word	0x40020070
 80074e8:	40020088 	.word	0x40020088
 80074ec:	400200a0 	.word	0x400200a0
 80074f0:	400200b8 	.word	0x400200b8
 80074f4:	40020410 	.word	0x40020410
 80074f8:	40020428 	.word	0x40020428
 80074fc:	40020440 	.word	0x40020440
 8007500:	40020458 	.word	0x40020458
 8007504:	40020470 	.word	0x40020470
 8007508:	40020488 	.word	0x40020488
 800750c:	400204a0 	.word	0x400204a0
 8007510:	400204b8 	.word	0x400204b8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 020a 	bic.w	r2, r2, #10
 8007522:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8097 	beq.w	800766c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007546:	e091      	b.n	800766c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	2208      	movs	r2, #8
 8007552:	409a      	lsls	r2, r3
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	4013      	ands	r3, r2
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8088 	beq.w	800766e <HAL_DMA_IRQHandler+0xe0e>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8082 	beq.w	800766e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a41      	ldr	r2, [pc, #260]	; (8007674 <HAL_DMA_IRQHandler+0xe14>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d04a      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3f      	ldr	r2, [pc, #252]	; (8007678 <HAL_DMA_IRQHandler+0xe18>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d045      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a3e      	ldr	r2, [pc, #248]	; (800767c <HAL_DMA_IRQHandler+0xe1c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d040      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3c      	ldr	r2, [pc, #240]	; (8007680 <HAL_DMA_IRQHandler+0xe20>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d03b      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a3b      	ldr	r2, [pc, #236]	; (8007684 <HAL_DMA_IRQHandler+0xe24>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d036      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a39      	ldr	r2, [pc, #228]	; (8007688 <HAL_DMA_IRQHandler+0xe28>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d031      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a38      	ldr	r2, [pc, #224]	; (800768c <HAL_DMA_IRQHandler+0xe2c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d02c      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a36      	ldr	r2, [pc, #216]	; (8007690 <HAL_DMA_IRQHandler+0xe30>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d027      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a35      	ldr	r2, [pc, #212]	; (8007694 <HAL_DMA_IRQHandler+0xe34>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d022      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a33      	ldr	r2, [pc, #204]	; (8007698 <HAL_DMA_IRQHandler+0xe38>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01d      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a32      	ldr	r2, [pc, #200]	; (800769c <HAL_DMA_IRQHandler+0xe3c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a30      	ldr	r2, [pc, #192]	; (80076a0 <HAL_DMA_IRQHandler+0xe40>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2f      	ldr	r2, [pc, #188]	; (80076a4 <HAL_DMA_IRQHandler+0xe44>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a2d      	ldr	r2, [pc, #180]	; (80076a8 <HAL_DMA_IRQHandler+0xe48>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a2c      	ldr	r2, [pc, #176]	; (80076ac <HAL_DMA_IRQHandler+0xe4c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_DMA_IRQHandler+0xdaa>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <HAL_DMA_IRQHandler+0xe50>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d108      	bne.n	800761c <HAL_DMA_IRQHandler+0xdbc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 021c 	bic.w	r2, r2, #28
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e007      	b.n	800762c <HAL_DMA_IRQHandler+0xdcc>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 020e 	bic.w	r2, r2, #14
 800762a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	2201      	movs	r2, #1
 8007636:	409a      	lsls	r2, r3
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
 8007662:	e004      	b.n	800766e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800766c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800766e:	3728      	adds	r7, #40	; 0x28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40020010 	.word	0x40020010
 8007678:	40020028 	.word	0x40020028
 800767c:	40020040 	.word	0x40020040
 8007680:	40020058 	.word	0x40020058
 8007684:	40020070 	.word	0x40020070
 8007688:	40020088 	.word	0x40020088
 800768c:	400200a0 	.word	0x400200a0
 8007690:	400200b8 	.word	0x400200b8
 8007694:	40020410 	.word	0x40020410
 8007698:	40020428 	.word	0x40020428
 800769c:	40020440 	.word	0x40020440
 80076a0:	40020458 	.word	0x40020458
 80076a4:	40020470 	.word	0x40020470
 80076a8:	40020488 	.word	0x40020488
 80076ac:	400204a0 	.word	0x400204a0
 80076b0:	400204b8 	.word	0x400204b8

080076b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a7f      	ldr	r2, [pc, #508]	; (80078d0 <DMA_SetConfig+0x21c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d072      	beq.n	80077be <DMA_SetConfig+0x10a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a7d      	ldr	r2, [pc, #500]	; (80078d4 <DMA_SetConfig+0x220>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d06d      	beq.n	80077be <DMA_SetConfig+0x10a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a7c      	ldr	r2, [pc, #496]	; (80078d8 <DMA_SetConfig+0x224>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d068      	beq.n	80077be <DMA_SetConfig+0x10a>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a7a      	ldr	r2, [pc, #488]	; (80078dc <DMA_SetConfig+0x228>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d063      	beq.n	80077be <DMA_SetConfig+0x10a>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a79      	ldr	r2, [pc, #484]	; (80078e0 <DMA_SetConfig+0x22c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d05e      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a77      	ldr	r2, [pc, #476]	; (80078e4 <DMA_SetConfig+0x230>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d059      	beq.n	80077be <DMA_SetConfig+0x10a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a76      	ldr	r2, [pc, #472]	; (80078e8 <DMA_SetConfig+0x234>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d054      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a74      	ldr	r2, [pc, #464]	; (80078ec <DMA_SetConfig+0x238>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d04f      	beq.n	80077be <DMA_SetConfig+0x10a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a73      	ldr	r2, [pc, #460]	; (80078f0 <DMA_SetConfig+0x23c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d04a      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a71      	ldr	r2, [pc, #452]	; (80078f4 <DMA_SetConfig+0x240>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d045      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a70      	ldr	r2, [pc, #448]	; (80078f8 <DMA_SetConfig+0x244>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d040      	beq.n	80077be <DMA_SetConfig+0x10a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a6e      	ldr	r2, [pc, #440]	; (80078fc <DMA_SetConfig+0x248>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d03b      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a6d      	ldr	r2, [pc, #436]	; (8007900 <DMA_SetConfig+0x24c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d036      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a6b      	ldr	r2, [pc, #428]	; (8007904 <DMA_SetConfig+0x250>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d031      	beq.n	80077be <DMA_SetConfig+0x10a>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a6a      	ldr	r2, [pc, #424]	; (8007908 <DMA_SetConfig+0x254>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d02c      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a68      	ldr	r2, [pc, #416]	; (800790c <DMA_SetConfig+0x258>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d027      	beq.n	80077be <DMA_SetConfig+0x10a>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a67      	ldr	r2, [pc, #412]	; (8007910 <DMA_SetConfig+0x25c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d022      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a65      	ldr	r2, [pc, #404]	; (8007914 <DMA_SetConfig+0x260>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01d      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a64      	ldr	r2, [pc, #400]	; (8007918 <DMA_SetConfig+0x264>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d018      	beq.n	80077be <DMA_SetConfig+0x10a>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a62      	ldr	r2, [pc, #392]	; (800791c <DMA_SetConfig+0x268>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <DMA_SetConfig+0x10a>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a61      	ldr	r2, [pc, #388]	; (8007920 <DMA_SetConfig+0x26c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <DMA_SetConfig+0x10a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5f      	ldr	r2, [pc, #380]	; (8007924 <DMA_SetConfig+0x270>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d009      	beq.n	80077be <DMA_SetConfig+0x10a>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a5e      	ldr	r2, [pc, #376]	; (8007928 <DMA_SetConfig+0x274>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d004      	beq.n	80077be <DMA_SetConfig+0x10a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a5c      	ldr	r2, [pc, #368]	; (800792c <DMA_SetConfig+0x278>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <DMA_SetConfig+0x10e>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <DMA_SetConfig+0x110>
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <DMA_SetConfig+0x21c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d04a      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <DMA_SetConfig+0x220>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d045      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a36      	ldr	r2, [pc, #216]	; (80078d8 <DMA_SetConfig+0x224>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d040      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a35      	ldr	r2, [pc, #212]	; (80078dc <DMA_SetConfig+0x228>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d03b      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a33      	ldr	r2, [pc, #204]	; (80078e0 <DMA_SetConfig+0x22c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d036      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <DMA_SetConfig+0x230>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d031      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <DMA_SetConfig+0x234>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d02c      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <DMA_SetConfig+0x238>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d027      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <DMA_SetConfig+0x23c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d022      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <DMA_SetConfig+0x240>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d01d      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2a      	ldr	r2, [pc, #168]	; (80078f8 <DMA_SetConfig+0x244>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d018      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a29      	ldr	r2, [pc, #164]	; (80078fc <DMA_SetConfig+0x248>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d013      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a27      	ldr	r2, [pc, #156]	; (8007900 <DMA_SetConfig+0x24c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00e      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a26      	ldr	r2, [pc, #152]	; (8007904 <DMA_SetConfig+0x250>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d009      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a24      	ldr	r2, [pc, #144]	; (8007908 <DMA_SetConfig+0x254>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <DMA_SetConfig+0x1d0>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a23      	ldr	r2, [pc, #140]	; (800790c <DMA_SetConfig+0x258>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d101      	bne.n	8007888 <DMA_SetConfig+0x1d4>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <DMA_SetConfig+0x1d6>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d059      	beq.n	8007942 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	223f      	movs	r2, #63	; 0x3f
 8007898:	409a      	lsls	r2, r3
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d138      	bne.n	8007930 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078ce:	e086      	b.n	80079de <DMA_SetConfig+0x32a>
 80078d0:	40020010 	.word	0x40020010
 80078d4:	40020028 	.word	0x40020028
 80078d8:	40020040 	.word	0x40020040
 80078dc:	40020058 	.word	0x40020058
 80078e0:	40020070 	.word	0x40020070
 80078e4:	40020088 	.word	0x40020088
 80078e8:	400200a0 	.word	0x400200a0
 80078ec:	400200b8 	.word	0x400200b8
 80078f0:	40020410 	.word	0x40020410
 80078f4:	40020428 	.word	0x40020428
 80078f8:	40020440 	.word	0x40020440
 80078fc:	40020458 	.word	0x40020458
 8007900:	40020470 	.word	0x40020470
 8007904:	40020488 	.word	0x40020488
 8007908:	400204a0 	.word	0x400204a0
 800790c:	400204b8 	.word	0x400204b8
 8007910:	58025408 	.word	0x58025408
 8007914:	5802541c 	.word	0x5802541c
 8007918:	58025430 	.word	0x58025430
 800791c:	58025444 	.word	0x58025444
 8007920:	58025458 	.word	0x58025458
 8007924:	5802546c 	.word	0x5802546c
 8007928:	58025480 	.word	0x58025480
 800792c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	60da      	str	r2, [r3, #12]
}
 8007940:	e04d      	b.n	80079de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a29      	ldr	r2, [pc, #164]	; (80079ec <DMA_SetConfig+0x338>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d022      	beq.n	8007992 <DMA_SetConfig+0x2de>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a27      	ldr	r2, [pc, #156]	; (80079f0 <DMA_SetConfig+0x33c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01d      	beq.n	8007992 <DMA_SetConfig+0x2de>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a26      	ldr	r2, [pc, #152]	; (80079f4 <DMA_SetConfig+0x340>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <DMA_SetConfig+0x2de>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a24      	ldr	r2, [pc, #144]	; (80079f8 <DMA_SetConfig+0x344>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d013      	beq.n	8007992 <DMA_SetConfig+0x2de>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a23      	ldr	r2, [pc, #140]	; (80079fc <DMA_SetConfig+0x348>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <DMA_SetConfig+0x2de>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a21      	ldr	r2, [pc, #132]	; (8007a00 <DMA_SetConfig+0x34c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <DMA_SetConfig+0x2de>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a20      	ldr	r2, [pc, #128]	; (8007a04 <DMA_SetConfig+0x350>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <DMA_SetConfig+0x2de>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <DMA_SetConfig+0x354>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d101      	bne.n	8007996 <DMA_SetConfig+0x2e2>
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <DMA_SetConfig+0x2e4>
 8007996:	2300      	movs	r3, #0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d020      	beq.n	80079de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d108      	bne.n	80079ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	60da      	str	r2, [r3, #12]
}
 80079cc:	e007      	b.n	80079de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	60da      	str	r2, [r3, #12]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	58025408 	.word	0x58025408
 80079f0:	5802541c 	.word	0x5802541c
 80079f4:	58025430 	.word	0x58025430
 80079f8:	58025444 	.word	0x58025444
 80079fc:	58025458 	.word	0x58025458
 8007a00:	5802546c 	.word	0x5802546c
 8007a04:	58025480 	.word	0x58025480
 8007a08:	58025494 	.word	0x58025494

08007a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a42      	ldr	r2, [pc, #264]	; (8007b24 <DMA_CalcBaseAndBitshift+0x118>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d04a      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a41      	ldr	r2, [pc, #260]	; (8007b28 <DMA_CalcBaseAndBitshift+0x11c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d045      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a3f      	ldr	r2, [pc, #252]	; (8007b2c <DMA_CalcBaseAndBitshift+0x120>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d040      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a3e      	ldr	r2, [pc, #248]	; (8007b30 <DMA_CalcBaseAndBitshift+0x124>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d03b      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a3c      	ldr	r2, [pc, #240]	; (8007b34 <DMA_CalcBaseAndBitshift+0x128>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d036      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3b      	ldr	r2, [pc, #236]	; (8007b38 <DMA_CalcBaseAndBitshift+0x12c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d031      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a39      	ldr	r2, [pc, #228]	; (8007b3c <DMA_CalcBaseAndBitshift+0x130>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d02c      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a38      	ldr	r2, [pc, #224]	; (8007b40 <DMA_CalcBaseAndBitshift+0x134>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d027      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a36      	ldr	r2, [pc, #216]	; (8007b44 <DMA_CalcBaseAndBitshift+0x138>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a35      	ldr	r2, [pc, #212]	; (8007b48 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d01d      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a33      	ldr	r2, [pc, #204]	; (8007b4c <DMA_CalcBaseAndBitshift+0x140>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a32      	ldr	r2, [pc, #200]	; (8007b50 <DMA_CalcBaseAndBitshift+0x144>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a30      	ldr	r2, [pc, #192]	; (8007b54 <DMA_CalcBaseAndBitshift+0x148>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a2f      	ldr	r2, [pc, #188]	; (8007b58 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	; (8007b5c <DMA_CalcBaseAndBitshift+0x150>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a2c      	ldr	r2, [pc, #176]	; (8007b60 <DMA_CalcBaseAndBitshift+0x154>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d101      	bne.n	8007ab8 <DMA_CalcBaseAndBitshift+0xac>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <DMA_CalcBaseAndBitshift+0xae>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d024      	beq.n	8007b08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	3b10      	subs	r3, #16
 8007ac6:	4a27      	ldr	r2, [pc, #156]	; (8007b64 <DMA_CalcBaseAndBitshift+0x158>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	091b      	lsrs	r3, r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	4a24      	ldr	r2, [pc, #144]	; (8007b68 <DMA_CalcBaseAndBitshift+0x15c>)
 8007ad8:	5cd3      	ldrb	r3, [r2, r3]
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d908      	bls.n	8007af8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	4b1f      	ldr	r3, [pc, #124]	; (8007b6c <DMA_CalcBaseAndBitshift+0x160>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	659a      	str	r2, [r3, #88]	; 0x58
 8007af6:	e00d      	b.n	8007b14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <DMA_CalcBaseAndBitshift+0x160>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6593      	str	r3, [r2, #88]	; 0x58
 8007b06:	e005      	b.n	8007b14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40020010 	.word	0x40020010
 8007b28:	40020028 	.word	0x40020028
 8007b2c:	40020040 	.word	0x40020040
 8007b30:	40020058 	.word	0x40020058
 8007b34:	40020070 	.word	0x40020070
 8007b38:	40020088 	.word	0x40020088
 8007b3c:	400200a0 	.word	0x400200a0
 8007b40:	400200b8 	.word	0x400200b8
 8007b44:	40020410 	.word	0x40020410
 8007b48:	40020428 	.word	0x40020428
 8007b4c:	40020440 	.word	0x40020440
 8007b50:	40020458 	.word	0x40020458
 8007b54:	40020470 	.word	0x40020470
 8007b58:	40020488 	.word	0x40020488
 8007b5c:	400204a0 	.word	0x400204a0
 8007b60:	400204b8 	.word	0x400204b8
 8007b64:	aaaaaaab 	.word	0xaaaaaaab
 8007b68:	0800eba4 	.word	0x0800eba4
 8007b6c:	fffffc00 	.word	0xfffffc00

08007b70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d120      	bne.n	8007bc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d858      	bhi.n	8007c3e <DMA_CheckFifoParam+0xce>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <DMA_CheckFifoParam+0x24>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007ba5 	.word	0x08007ba5
 8007b98:	08007bb7 	.word	0x08007bb7
 8007b9c:	08007ba5 	.word	0x08007ba5
 8007ba0:	08007c3f 	.word	0x08007c3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d048      	beq.n	8007c42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bb4:	e045      	b.n	8007c42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bbe:	d142      	bne.n	8007c46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bc4:	e03f      	b.n	8007c46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bce:	d123      	bne.n	8007c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d838      	bhi.n	8007c4a <DMA_CheckFifoParam+0xda>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <DMA_CheckFifoParam+0x70>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007bf7 	.word	0x08007bf7
 8007be8:	08007bf1 	.word	0x08007bf1
 8007bec:	08007c09 	.word	0x08007c09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
        break;
 8007bf4:	e030      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d025      	beq.n	8007c4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c06:	e022      	b.n	8007c4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c10:	d11f      	bne.n	8007c52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c16:	e01c      	b.n	8007c52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d902      	bls.n	8007c26 <DMA_CheckFifoParam+0xb6>
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d003      	beq.n	8007c2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007c24:	e018      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]
        break;
 8007c2a:	e015      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00e      	beq.n	8007c56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	e00b      	b.n	8007c56 <DMA_CheckFifoParam+0xe6>
        break;
 8007c3e:	bf00      	nop
 8007c40:	e00a      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        break;
 8007c42:	bf00      	nop
 8007c44:	e008      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        break;
 8007c46:	bf00      	nop
 8007c48:	e006      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
        break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <DMA_CheckFifoParam+0xe8>
    break;
 8007c56:	bf00      	nop
    }
  }

  return status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop

08007c68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a38      	ldr	r2, [pc, #224]	; (8007d5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d022      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a36      	ldr	r2, [pc, #216]	; (8007d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d01d      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a35      	ldr	r2, [pc, #212]	; (8007d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a33      	ldr	r2, [pc, #204]	; (8007d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a32      	ldr	r2, [pc, #200]	; (8007d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a30      	ldr	r2, [pc, #192]	; (8007d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	; (8007d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d101      	bne.n	8007cca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01a      	beq.n	8007d06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	3b08      	subs	r3, #8
 8007cd8:	4a28      	ldr	r2, [pc, #160]	; (8007d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4b26      	ldr	r3, [pc, #152]	; (8007d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	461a      	mov	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a24      	ldr	r2, [pc, #144]	; (8007d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007cf4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	409a      	lsls	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007d04:	e024      	b.n	8007d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	3b10      	subs	r3, #16
 8007d0e:	4a1e      	ldr	r2, [pc, #120]	; (8007d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4a1c      	ldr	r2, [pc, #112]	; (8007d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d806      	bhi.n	8007d2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d902      	bls.n	8007d2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	2201      	movs	r2, #1
 8007d4a:	409a      	lsls	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	58025408 	.word	0x58025408
 8007d60:	5802541c 	.word	0x5802541c
 8007d64:	58025430 	.word	0x58025430
 8007d68:	58025444 	.word	0x58025444
 8007d6c:	58025458 	.word	0x58025458
 8007d70:	5802546c 	.word	0x5802546c
 8007d74:	58025480 	.word	0x58025480
 8007d78:	58025494 	.word	0x58025494
 8007d7c:	cccccccd 	.word	0xcccccccd
 8007d80:	16009600 	.word	0x16009600
 8007d84:	58025880 	.word	0x58025880
 8007d88:	aaaaaaab 	.word	0xaaaaaaab
 8007d8c:	400204b8 	.word	0x400204b8
 8007d90:	4002040f 	.word	0x4002040f
 8007d94:	10008200 	.word	0x10008200
 8007d98:	40020880 	.word	0x40020880

08007d9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d04a      	beq.n	8007e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d847      	bhi.n	8007e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a25      	ldr	r2, [pc, #148]	; (8007e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d022      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a24      	ldr	r2, [pc, #144]	; (8007e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d01d      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a22      	ldr	r2, [pc, #136]	; (8007e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d018      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a21      	ldr	r2, [pc, #132]	; (8007e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d013      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d009      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d101      	bne.n	8007e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4b17      	ldr	r3, [pc, #92]	; (8007e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007e24:	671a      	str	r2, [r3, #112]	; 0x70
 8007e26:	e009      	b.n	8007e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e3a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	58025408 	.word	0x58025408
 8007e58:	5802541c 	.word	0x5802541c
 8007e5c:	58025430 	.word	0x58025430
 8007e60:	58025444 	.word	0x58025444
 8007e64:	58025458 	.word	0x58025458
 8007e68:	5802546c 	.word	0x5802546c
 8007e6c:	58025480 	.word	0x58025480
 8007e70:	58025494 	.word	0x58025494
 8007e74:	1600963f 	.word	0x1600963f
 8007e78:	58025940 	.word	0x58025940
 8007e7c:	1000823f 	.word	0x1000823f
 8007e80:	40020940 	.word	0x40020940

08007e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e92:	4b86      	ldr	r3, [pc, #536]	; (80080ac <HAL_GPIO_Init+0x228>)
 8007e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e96:	e18c      	b.n	80081b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 817e 	beq.w	80081ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d005      	beq.n	8007ec8 <HAL_GPIO_Init+0x44>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d130      	bne.n	8007f2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4013      	ands	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007efe:	2201      	movs	r2, #1
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	43db      	mvns	r3, r3
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	091b      	lsrs	r3, r3, #4
 8007f14:	f003 0201 	and.w	r2, r3, #1
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d017      	beq.n	8007f66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d123      	bne.n	8007fba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	08da      	lsrs	r2, r3, #3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3208      	adds	r2, #8
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	220f      	movs	r2, #15
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4013      	ands	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	08da      	lsrs	r2, r3, #3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3208      	adds	r2, #8
 8007fb4:	69b9      	ldr	r1, [r7, #24]
 8007fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	2203      	movs	r2, #3
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f003 0203 	and.w	r2, r3, #3
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80d8 	beq.w	80081ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ffc:	4b2c      	ldr	r3, [pc, #176]	; (80080b0 <HAL_GPIO_Init+0x22c>)
 8007ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008002:	4a2b      	ldr	r2, [pc, #172]	; (80080b0 <HAL_GPIO_Init+0x22c>)
 8008004:	f043 0302 	orr.w	r3, r3, #2
 8008008:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800800c:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <HAL_GPIO_Init+0x22c>)
 800800e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800801a:	4a26      	ldr	r2, [pc, #152]	; (80080b4 <HAL_GPIO_Init+0x230>)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	089b      	lsrs	r3, r3, #2
 8008020:	3302      	adds	r3, #2
 8008022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	220f      	movs	r2, #15
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	43db      	mvns	r3, r3
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	4013      	ands	r3, r2
 800803c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1d      	ldr	r2, [pc, #116]	; (80080b8 <HAL_GPIO_Init+0x234>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d04a      	beq.n	80080dc <HAL_GPIO_Init+0x258>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <HAL_GPIO_Init+0x238>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02b      	beq.n	80080a6 <HAL_GPIO_Init+0x222>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <HAL_GPIO_Init+0x23c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d025      	beq.n	80080a2 <HAL_GPIO_Init+0x21e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <HAL_GPIO_Init+0x240>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01f      	beq.n	800809e <HAL_GPIO_Init+0x21a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <HAL_GPIO_Init+0x244>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d019      	beq.n	800809a <HAL_GPIO_Init+0x216>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a18      	ldr	r2, [pc, #96]	; (80080cc <HAL_GPIO_Init+0x248>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d013      	beq.n	8008096 <HAL_GPIO_Init+0x212>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_GPIO_Init+0x24c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00d      	beq.n	8008092 <HAL_GPIO_Init+0x20e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <HAL_GPIO_Init+0x250>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d007      	beq.n	800808e <HAL_GPIO_Init+0x20a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <HAL_GPIO_Init+0x254>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d101      	bne.n	800808a <HAL_GPIO_Init+0x206>
 8008086:	2309      	movs	r3, #9
 8008088:	e029      	b.n	80080de <HAL_GPIO_Init+0x25a>
 800808a:	230a      	movs	r3, #10
 800808c:	e027      	b.n	80080de <HAL_GPIO_Init+0x25a>
 800808e:	2307      	movs	r3, #7
 8008090:	e025      	b.n	80080de <HAL_GPIO_Init+0x25a>
 8008092:	2306      	movs	r3, #6
 8008094:	e023      	b.n	80080de <HAL_GPIO_Init+0x25a>
 8008096:	2305      	movs	r3, #5
 8008098:	e021      	b.n	80080de <HAL_GPIO_Init+0x25a>
 800809a:	2304      	movs	r3, #4
 800809c:	e01f      	b.n	80080de <HAL_GPIO_Init+0x25a>
 800809e:	2303      	movs	r3, #3
 80080a0:	e01d      	b.n	80080de <HAL_GPIO_Init+0x25a>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e01b      	b.n	80080de <HAL_GPIO_Init+0x25a>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e019      	b.n	80080de <HAL_GPIO_Init+0x25a>
 80080aa:	bf00      	nop
 80080ac:	58000080 	.word	0x58000080
 80080b0:	58024400 	.word	0x58024400
 80080b4:	58000400 	.word	0x58000400
 80080b8:	58020000 	.word	0x58020000
 80080bc:	58020400 	.word	0x58020400
 80080c0:	58020800 	.word	0x58020800
 80080c4:	58020c00 	.word	0x58020c00
 80080c8:	58021000 	.word	0x58021000
 80080cc:	58021400 	.word	0x58021400
 80080d0:	58021800 	.word	0x58021800
 80080d4:	58021c00 	.word	0x58021c00
 80080d8:	58022400 	.word	0x58022400
 80080dc:	2300      	movs	r3, #0
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	f002 0203 	and.w	r2, r2, #3
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	4093      	lsls	r3, r2
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080ee:	4938      	ldr	r1, [pc, #224]	; (80081d0 <HAL_GPIO_Init+0x34c>)
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	089b      	lsrs	r3, r3, #2
 80080f4:	3302      	adds	r3, #2
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	43db      	mvns	r3, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4013      	ands	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	43db      	mvns	r3, r3
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	4013      	ands	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	43db      	mvns	r3, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	3301      	adds	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f47f ae6b 	bne.w	8007e98 <HAL_GPIO_Init+0x14>
  }
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	3724      	adds	r7, #36	; 0x24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	58000400 	.word	0x58000400

080081d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081e2:	4b72      	ldr	r3, [pc, #456]	; (80083ac <HAL_GPIO_DeInit+0x1d8>)
 80081e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80081e6:	e0d3      	b.n	8008390 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80081e8:	2201      	movs	r2, #1
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	4013      	ands	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80c6 	beq.w	800838a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80081fe:	4a6c      	ldr	r2, [pc, #432]	; (80083b0 <HAL_GPIO_DeInit+0x1dc>)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	089b      	lsrs	r3, r3, #2
 8008204:	3302      	adds	r3, #2
 8008206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	220f      	movs	r2, #15
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4013      	ands	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a64      	ldr	r2, [pc, #400]	; (80083b4 <HAL_GPIO_DeInit+0x1e0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d031      	beq.n	800828c <HAL_GPIO_DeInit+0xb8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a63      	ldr	r2, [pc, #396]	; (80083b8 <HAL_GPIO_DeInit+0x1e4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02b      	beq.n	8008288 <HAL_GPIO_DeInit+0xb4>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a62      	ldr	r2, [pc, #392]	; (80083bc <HAL_GPIO_DeInit+0x1e8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d025      	beq.n	8008284 <HAL_GPIO_DeInit+0xb0>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a61      	ldr	r2, [pc, #388]	; (80083c0 <HAL_GPIO_DeInit+0x1ec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d01f      	beq.n	8008280 <HAL_GPIO_DeInit+0xac>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a60      	ldr	r2, [pc, #384]	; (80083c4 <HAL_GPIO_DeInit+0x1f0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d019      	beq.n	800827c <HAL_GPIO_DeInit+0xa8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a5f      	ldr	r2, [pc, #380]	; (80083c8 <HAL_GPIO_DeInit+0x1f4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_GPIO_DeInit+0xa4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a5e      	ldr	r2, [pc, #376]	; (80083cc <HAL_GPIO_DeInit+0x1f8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00d      	beq.n	8008274 <HAL_GPIO_DeInit+0xa0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a5d      	ldr	r2, [pc, #372]	; (80083d0 <HAL_GPIO_DeInit+0x1fc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d007      	beq.n	8008270 <HAL_GPIO_DeInit+0x9c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a5c      	ldr	r2, [pc, #368]	; (80083d4 <HAL_GPIO_DeInit+0x200>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d101      	bne.n	800826c <HAL_GPIO_DeInit+0x98>
 8008268:	2309      	movs	r3, #9
 800826a:	e010      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 800826c:	230a      	movs	r3, #10
 800826e:	e00e      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008270:	2307      	movs	r3, #7
 8008272:	e00c      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008274:	2306      	movs	r3, #6
 8008276:	e00a      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008278:	2305      	movs	r3, #5
 800827a:	e008      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 800827c:	2304      	movs	r3, #4
 800827e:	e006      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008280:	2303      	movs	r3, #3
 8008282:	e004      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008284:	2302      	movs	r3, #2
 8008286:	e002      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <HAL_GPIO_DeInit+0xba>
 800828c:	2300      	movs	r3, #0
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	f002 0203 	and.w	r2, r2, #3
 8008294:	0092      	lsls	r2, r2, #2
 8008296:	4093      	lsls	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d136      	bne.n	800830c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	401a      	ands	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	43db      	mvns	r3, r3
 80082b4:	401a      	ands	r2, r3
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80082ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	43db      	mvns	r3, r3
 80082c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082c8:	4013      	ands	r3, r2
 80082ca:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80082cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082da:	4013      	ands	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	220f      	movs	r2, #15
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80082ee:	4a30      	ldr	r2, [pc, #192]	; (80083b0 <HAL_GPIO_DeInit+0x1dc>)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	089b      	lsrs	r3, r3, #2
 80082f4:	3302      	adds	r3, #2
 80082f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	43da      	mvns	r2, r3
 80082fe:	482c      	ldr	r0, [pc, #176]	; (80083b0 <HAL_GPIO_DeInit+0x1dc>)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	400a      	ands	r2, r1
 8008306:	3302      	adds	r3, #2
 8008308:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	2103      	movs	r1, #3
 8008316:	fa01 f303 	lsl.w	r3, r1, r3
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	08da      	lsrs	r2, r3, #3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3208      	adds	r2, #8
 8008328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	220f      	movs	r2, #15
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	08d2      	lsrs	r2, r2, #3
 8008340:	4019      	ands	r1, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3208      	adds	r2, #8
 8008346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	2103      	movs	r1, #3
 8008354:	fa01 f303 	lsl.w	r3, r1, r3
 8008358:	43db      	mvns	r3, r3
 800835a:	401a      	ands	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	2101      	movs	r1, #1
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	401a      	ands	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	2103      	movs	r1, #3
 800837e:	fa01 f303 	lsl.w	r3, r1, r3
 8008382:	43db      	mvns	r3, r3
 8008384:	401a      	ands	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	609a      	str	r2, [r3, #8]
    }

    position++;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	3301      	adds	r3, #1
 800838e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	f47f af25 	bne.w	80081e8 <HAL_GPIO_DeInit+0x14>
  }
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	58000080 	.word	0x58000080
 80083b0:	58000400 	.word	0x58000400
 80083b4:	58020000 	.word	0x58020000
 80083b8:	58020400 	.word	0x58020400
 80083bc:	58020800 	.word	0x58020800
 80083c0:	58020c00 	.word	0x58020c00
 80083c4:	58021000 	.word	0x58021000
 80083c8:	58021400 	.word	0x58021400
 80083cc:	58021800 	.word	0x58021800
 80083d0:	58021c00 	.word	0x58021c00
 80083d4:	58022400 	.word	0x58022400

080083d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	807b      	strh	r3, [r7, #2]
 80083e4:	4613      	mov	r3, r2
 80083e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083e8:	787b      	ldrb	r3, [r7, #1]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083ee:	887a      	ldrh	r2, [r7, #2]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80083f4:	e003      	b.n	80083fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	041a      	lsls	r2, r3, #16
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	619a      	str	r2, [r3, #24]
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	4603      	mov	r3, r0
 8008412:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008418:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	4013      	ands	r3, r2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f804 	bl	800843e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	4603      	mov	r3, r0
 8008446:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800845c:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <HAL_PWREx_ConfigSupply+0x70>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b04      	cmp	r3, #4
 8008466:	d00a      	beq.n	800847e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <HAL_PWREx_ConfigSupply+0x70>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d001      	beq.n	800847a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e01f      	b.n	80084ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	e01d      	b.n	80084ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f023 0207 	bic.w	r2, r3, #7
 8008486:	490f      	ldr	r1, [pc, #60]	; (80084c4 <HAL_PWREx_ConfigSupply+0x70>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4313      	orrs	r3, r2
 800848c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800848e:	f7fc fbbb 	bl	8004c08 <HAL_GetTick>
 8008492:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008494:	e009      	b.n	80084aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008496:	f7fc fbb7 	bl	8004c08 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084a4:	d901      	bls.n	80084aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e007      	b.n	80084ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <HAL_PWREx_ConfigSupply+0x70>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b6:	d1ee      	bne.n	8008496 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	58024800 	.word	0x58024800

080084c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08c      	sub	sp, #48	; 0x30
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e39d      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8087 	beq.w	80085f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084e8:	4b88      	ldr	r3, [pc, #544]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084f2:	4b86      	ldr	r3, [pc, #536]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d007      	beq.n	800850e <HAL_RCC_OscConfig+0x46>
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2b18      	cmp	r3, #24
 8008502:	d110      	bne.n	8008526 <HAL_RCC_OscConfig+0x5e>
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d10b      	bne.n	8008526 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850e:	4b7f      	ldr	r3, [pc, #508]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06c      	beq.n	80085f4 <HAL_RCC_OscConfig+0x12c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d168      	bne.n	80085f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e377      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852e:	d106      	bne.n	800853e <HAL_RCC_OscConfig+0x76>
 8008530:	4b76      	ldr	r3, [pc, #472]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a75      	ldr	r2, [pc, #468]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	e02e      	b.n	800859c <HAL_RCC_OscConfig+0xd4>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10c      	bne.n	8008560 <HAL_RCC_OscConfig+0x98>
 8008546:	4b71      	ldr	r3, [pc, #452]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a70      	ldr	r2, [pc, #448]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800854c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	4b6e      	ldr	r3, [pc, #440]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a6d      	ldr	r2, [pc, #436]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	e01d      	b.n	800859c <HAL_RCC_OscConfig+0xd4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008568:	d10c      	bne.n	8008584 <HAL_RCC_OscConfig+0xbc>
 800856a:	4b68      	ldr	r3, [pc, #416]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a67      	ldr	r2, [pc, #412]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	4b65      	ldr	r3, [pc, #404]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a64      	ldr	r2, [pc, #400]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800857c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	e00b      	b.n	800859c <HAL_RCC_OscConfig+0xd4>
 8008584:	4b61      	ldr	r3, [pc, #388]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a60      	ldr	r2, [pc, #384]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800858a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4b5e      	ldr	r3, [pc, #376]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a5d      	ldr	r2, [pc, #372]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800859a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d013      	beq.n	80085cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fc fb30 	bl	8004c08 <HAL_GetTick>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085ac:	f7fc fb2c 	bl	8004c08 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b64      	cmp	r3, #100	; 0x64
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e32b      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085be:	4b53      	ldr	r3, [pc, #332]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <HAL_RCC_OscConfig+0xe4>
 80085ca:	e014      	b.n	80085f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7fc fb1c 	bl	8004c08 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085d4:	f7fc fb18 	bl	8004c08 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b64      	cmp	r3, #100	; 0x64
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e317      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085e6:	4b49      	ldr	r3, [pc, #292]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f0      	bne.n	80085d4 <HAL_RCC_OscConfig+0x10c>
 80085f2:	e000      	b.n	80085f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 808c 	beq.w	800871c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008604:	4b41      	ldr	r3, [pc, #260]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800860c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_RCC_OscConfig+0x162>
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	2b18      	cmp	r3, #24
 800861e:	d137      	bne.n	8008690 <HAL_RCC_OscConfig+0x1c8>
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d132      	bne.n	8008690 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800862a:	4b38      	ldr	r3, [pc, #224]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d005      	beq.n	8008642 <HAL_RCC_OscConfig+0x17a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e2e9      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008642:	4b32      	ldr	r3, [pc, #200]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f023 0219 	bic.w	r2, r3, #25
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	492f      	ldr	r1, [pc, #188]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008654:	f7fc fad8 	bl	8004c08 <HAL_GetTick>
 8008658:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800865c:	f7fc fad4 	bl	8004c08 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e2d3      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <HAL_RCC_OscConfig+0x244>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	061b      	lsls	r3, r3, #24
 8008688:	4920      	ldr	r1, [pc, #128]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800868a:	4313      	orrs	r3, r2
 800868c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800868e:	e045      	b.n	800871c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d026      	beq.n	80086e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008698:	4b1c      	ldr	r3, [pc, #112]	; (800870c <HAL_RCC_OscConfig+0x244>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f023 0219 	bic.w	r2, r3, #25
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4919      	ldr	r1, [pc, #100]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086aa:	f7fc faad 	bl	8004c08 <HAL_GetTick>
 80086ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086b0:	e008      	b.n	80086c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b2:	f7fc faa9 	bl	8004c08 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e2a8      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c4:	4b11      	ldr	r3, [pc, #68]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0f0      	beq.n	80086b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	061b      	lsls	r3, r3, #24
 80086de:	490b      	ldr	r1, [pc, #44]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	604b      	str	r3, [r1, #4]
 80086e4:	e01a      	b.n	800871c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a08      	ldr	r2, [pc, #32]	; (800870c <HAL_RCC_OscConfig+0x244>)
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fc fa89 	bl	8004c08 <HAL_GetTick>
 80086f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086fa:	f7fc fa85 	bl	8004c08 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d903      	bls.n	8008710 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e284      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
 800870c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008710:	4b96      	ldr	r3, [pc, #600]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ee      	bne.n	80086fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0310 	and.w	r3, r3, #16
 8008724:	2b00      	cmp	r3, #0
 8008726:	d06a      	beq.n	80087fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008728:	4b90      	ldr	r3, [pc, #576]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008730:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008732:	4b8e      	ldr	r3, [pc, #568]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b08      	cmp	r3, #8
 800873c:	d007      	beq.n	800874e <HAL_RCC_OscConfig+0x286>
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b18      	cmp	r3, #24
 8008742:	d11b      	bne.n	800877c <HAL_RCC_OscConfig+0x2b4>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b01      	cmp	r3, #1
 800874c:	d116      	bne.n	800877c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800874e:	4b87      	ldr	r3, [pc, #540]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_RCC_OscConfig+0x29e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	2b80      	cmp	r3, #128	; 0x80
 8008760:	d001      	beq.n	8008766 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e257      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008766:	4b81      	ldr	r3, [pc, #516]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	061b      	lsls	r3, r3, #24
 8008774:	497d      	ldr	r1, [pc, #500]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008776:	4313      	orrs	r3, r2
 8008778:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800877a:	e040      	b.n	80087fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d023      	beq.n	80087cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008784:	4b79      	ldr	r3, [pc, #484]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a78      	ldr	r2, [pc, #480]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fc fa3a 	bl	8004c08 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008798:	f7fc fa36 	bl	8004c08 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e235      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087aa:	4b70      	ldr	r3, [pc, #448]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087b6:	4b6d      	ldr	r3, [pc, #436]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	061b      	lsls	r3, r3, #24
 80087c4:	4969      	ldr	r1, [pc, #420]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60cb      	str	r3, [r1, #12]
 80087ca:	e018      	b.n	80087fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087cc:	4b67      	ldr	r3, [pc, #412]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a66      	ldr	r2, [pc, #408]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fc fa16 	bl	8004c08 <HAL_GetTick>
 80087dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087e0:	f7fc fa12 	bl	8004c08 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e211      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087f2:	4b5e      	ldr	r3, [pc, #376]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f0      	bne.n	80087e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d036      	beq.n	8008878 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d019      	beq.n	8008846 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008812:	4b56      	ldr	r3, [pc, #344]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008816:	4a55      	ldr	r2, [pc, #340]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881e:	f7fc f9f3 	bl	8004c08 <HAL_GetTick>
 8008822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008826:	f7fc f9ef 	bl	8004c08 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e1ee      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008838:	4b4c      	ldr	r3, [pc, #304]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x35e>
 8008844:	e018      	b.n	8008878 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008846:	4b49      	ldr	r3, [pc, #292]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884a:	4a48      	ldr	r2, [pc, #288]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008852:	f7fc f9d9 	bl	8004c08 <HAL_GetTick>
 8008856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800885a:	f7fc f9d5 	bl	8004c08 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e1d4      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800886c:	4b3f      	ldr	r3, [pc, #252]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800886e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	d036      	beq.n	80088f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d019      	beq.n	80088c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800888c:	4b37      	ldr	r3, [pc, #220]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a36      	ldr	r2, [pc, #216]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008892:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008898:	f7fc f9b6 	bl	8004c08 <HAL_GetTick>
 800889c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088a0:	f7fc f9b2 	bl	8004c08 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e1b1      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088b2:	4b2e      	ldr	r3, [pc, #184]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0f0      	beq.n	80088a0 <HAL_RCC_OscConfig+0x3d8>
 80088be:	e018      	b.n	80088f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088c0:	4b2a      	ldr	r3, [pc, #168]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a29      	ldr	r2, [pc, #164]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80088c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088cc:	f7fc f99c 	bl	8004c08 <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088d4:	f7fc f998 	bl	8004c08 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e197      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088e6:	4b21      	ldr	r3, [pc, #132]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f0      	bne.n	80088d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8086 	beq.w	8008a0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008900:	4b1b      	ldr	r3, [pc, #108]	; (8008970 <HAL_RCC_OscConfig+0x4a8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <HAL_RCC_OscConfig+0x4a8>)
 8008906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800890c:	f7fc f97c 	bl	8004c08 <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008914:	f7fc f978 	bl	8004c08 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b64      	cmp	r3, #100	; 0x64
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e177      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <HAL_RCC_OscConfig+0x4a8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f0      	beq.n	8008914 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d106      	bne.n	8008948 <HAL_RCC_OscConfig+0x480>
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	4a0b      	ldr	r2, [pc, #44]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6713      	str	r3, [r2, #112]	; 0x70
 8008946:	e032      	b.n	80089ae <HAL_RCC_OscConfig+0x4e6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d111      	bne.n	8008974 <HAL_RCC_OscConfig+0x4ac>
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008954:	4a05      	ldr	r2, [pc, #20]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	6713      	str	r3, [r2, #112]	; 0x70
 800895c:	4b03      	ldr	r3, [pc, #12]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	4a02      	ldr	r2, [pc, #8]	; (800896c <HAL_RCC_OscConfig+0x4a4>)
 8008962:	f023 0304 	bic.w	r3, r3, #4
 8008966:	6713      	str	r3, [r2, #112]	; 0x70
 8008968:	e021      	b.n	80089ae <HAL_RCC_OscConfig+0x4e6>
 800896a:	bf00      	nop
 800896c:	58024400 	.word	0x58024400
 8008970:	58024800 	.word	0x58024800
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b05      	cmp	r3, #5
 800897a:	d10c      	bne.n	8008996 <HAL_RCC_OscConfig+0x4ce>
 800897c:	4b83      	ldr	r3, [pc, #524]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	4a82      	ldr	r2, [pc, #520]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008982:	f043 0304 	orr.w	r3, r3, #4
 8008986:	6713      	str	r3, [r2, #112]	; 0x70
 8008988:	4b80      	ldr	r3, [pc, #512]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	4a7f      	ldr	r2, [pc, #508]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	6713      	str	r3, [r2, #112]	; 0x70
 8008994:	e00b      	b.n	80089ae <HAL_RCC_OscConfig+0x4e6>
 8008996:	4b7d      	ldr	r3, [pc, #500]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 800899c:	f023 0301 	bic.w	r3, r3, #1
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	4a79      	ldr	r2, [pc, #484]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 80089a8:	f023 0304 	bic.w	r3, r3, #4
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d015      	beq.n	80089e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b6:	f7fc f927 	bl	8004c08 <HAL_GetTick>
 80089ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089bc:	e00a      	b.n	80089d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089be:	f7fc f923 	bl	8004c08 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e120      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089d4:	4b6d      	ldr	r3, [pc, #436]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0ee      	beq.n	80089be <HAL_RCC_OscConfig+0x4f6>
 80089e0:	e014      	b.n	8008a0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e2:	f7fc f911 	bl	8004c08 <HAL_GetTick>
 80089e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089e8:	e00a      	b.n	8008a00 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ea:	f7fc f90d 	bl	8004c08 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e10a      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a00:	4b62      	ldr	r3, [pc, #392]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1ee      	bne.n	80089ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80ff 	beq.w	8008c14 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a16:	4b5d      	ldr	r3, [pc, #372]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a1e:	2b18      	cmp	r3, #24
 8008a20:	f000 80ba 	beq.w	8008b98 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	f040 8095 	bne.w	8008b58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a2e:	4b57      	ldr	r3, [pc, #348]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a56      	ldr	r2, [pc, #344]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3a:	f7fc f8e5 	bl	8004c08 <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a42:	f7fc f8e1 	bl	8004c08 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e0e0      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a54:	4b4d      	ldr	r3, [pc, #308]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1f0      	bne.n	8008a42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a60:	4b4a      	ldr	r3, [pc, #296]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a64:	4b4a      	ldr	r3, [pc, #296]	; (8008b90 <HAL_RCC_OscConfig+0x6c8>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a70:	0112      	lsls	r2, r2, #4
 8008a72:	430a      	orrs	r2, r1
 8008a74:	4945      	ldr	r1, [pc, #276]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	628b      	str	r3, [r1, #40]	; 0x28
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	025b      	lsls	r3, r3, #9
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	3b01      	subs	r3, #1
 8008a96:	041b      	lsls	r3, r3, #16
 8008a98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008aaa:	4938      	ldr	r1, [pc, #224]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ab0:	4b36      	ldr	r3, [pc, #216]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a35      	ldr	r2, [pc, #212]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008abc:	4b33      	ldr	r3, [pc, #204]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <HAL_RCC_OscConfig+0x6cc>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ac8:	00d2      	lsls	r2, r2, #3
 8008aca:	4930      	ldr	r1, [pc, #192]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ad0:	4b2e      	ldr	r3, [pc, #184]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	f023 020c 	bic.w	r2, r3, #12
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	492b      	ldr	r1, [pc, #172]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ae2:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	f023 0202 	bic.w	r2, r3, #2
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	4927      	ldr	r1, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a24      	ldr	r2, [pc, #144]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b00:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b0c:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4a1e      	ldr	r2, [pc, #120]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b18:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b24:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fc f86a 	bl	8004c08 <HAL_GetTick>
 8008b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b38:	f7fc f866 	bl	8004c08 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e065      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x670>
 8008b56:	e05d      	b.n	8008c14 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7fc f850 	bl	8004c08 <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7fc f84c 	bl	8004c08 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e04b      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <HAL_RCC_OscConfig+0x6c4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x6a4>
 8008b8a:	e043      	b.n	8008c14 <HAL_RCC_OscConfig+0x74c>
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	fffffc0c 	.word	0xfffffc0c
 8008b94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b98:	4b21      	ldr	r3, [pc, #132]	; (8008c20 <HAL_RCC_OscConfig+0x758>)
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b9e:	4b20      	ldr	r3, [pc, #128]	; (8008c20 <HAL_RCC_OscConfig+0x758>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d031      	beq.n	8008c10 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f003 0203 	and.w	r2, r3, #3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d12a      	bne.n	8008c10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d122      	bne.n	8008c10 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d11a      	bne.n	8008c10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	0a5b      	lsrs	r3, r3, #9
 8008bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d111      	bne.n	8008c10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	0c1b      	lsrs	r3, r3, #16
 8008bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d108      	bne.n	8008c10 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	0e1b      	lsrs	r3, r3, #24
 8008c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3730      	adds	r7, #48	; 0x30
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	58024400 	.word	0x58024400

08008c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e19c      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c38:	4b8a      	ldr	r3, [pc, #552]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d910      	bls.n	8008c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c46:	4b87      	ldr	r3, [pc, #540]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f023 020f 	bic.w	r2, r3, #15
 8008c4e:	4985      	ldr	r1, [pc, #532]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c56:	4b83      	ldr	r3, [pc, #524]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d001      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e184      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	4b7b      	ldr	r3, [pc, #492]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d908      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c84:	4b78      	ldr	r3, [pc, #480]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	4975      	ldr	r1, [pc, #468]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	4b70      	ldr	r3, [pc, #448]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d908      	bls.n	8008cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cb2:	4b6d      	ldr	r3, [pc, #436]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	496a      	ldr	r1, [pc, #424]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d010      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	4b64      	ldr	r3, [pc, #400]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d908      	bls.n	8008cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ce0:	4b61      	ldr	r3, [pc, #388]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	495e      	ldr	r1, [pc, #376]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d010      	beq.n	8008d20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69da      	ldr	r2, [r3, #28]
 8008d02:	4b59      	ldr	r3, [pc, #356]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d908      	bls.n	8008d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d0e:	4b56      	ldr	r3, [pc, #344]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	4953      	ldr	r1, [pc, #332]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	4b4d      	ldr	r3, [pc, #308]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d908      	bls.n	8008d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d3c:	4b4a      	ldr	r3, [pc, #296]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f023 020f 	bic.w	r2, r3, #15
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	4947      	ldr	r1, [pc, #284]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d055      	beq.n	8008e06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d5a:	4b43      	ldr	r3, [pc, #268]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	4940      	ldr	r1, [pc, #256]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d107      	bne.n	8008d84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d74:	4b3c      	ldr	r3, [pc, #240]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d121      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e0f6      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d107      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d8c:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d115      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0ea      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d107      	bne.n	8008db4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008da4:	4b30      	ldr	r3, [pc, #192]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e0de      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008db4:	4b2c      	ldr	r3, [pc, #176]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0d6      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dc4:	4b28      	ldr	r3, [pc, #160]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f023 0207 	bic.w	r2, r3, #7
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4925      	ldr	r1, [pc, #148]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd6:	f7fb ff17 	bl	8004c08 <HAL_GetTick>
 8008dda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dde:	f7fb ff13 	bl	8004c08 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0be      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008df4:	4b1c      	ldr	r3, [pc, #112]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d1eb      	bne.n	8008dde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d010      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d208      	bcs.n	8008e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e22:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f023 020f 	bic.w	r2, r3, #15
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	490e      	ldr	r1, [pc, #56]	; (8008e68 <HAL_RCC_ClockConfig+0x244>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d214      	bcs.n	8008e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e42:	4b08      	ldr	r3, [pc, #32]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f023 020f 	bic.w	r2, r3, #15
 8008e4a:	4906      	ldr	r1, [pc, #24]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <HAL_RCC_ClockConfig+0x240>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d005      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e086      	b.n	8008f72 <HAL_RCC_ClockConfig+0x34e>
 8008e64:	52002000 	.word	0x52002000
 8008e68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d010      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	4b3f      	ldr	r3, [pc, #252]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d208      	bcs.n	8008e9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e88:	4b3c      	ldr	r3, [pc, #240]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4939      	ldr	r1, [pc, #228]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d010      	beq.n	8008ec8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	4b34      	ldr	r3, [pc, #208]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d208      	bcs.n	8008ec8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eb6:	4b31      	ldr	r3, [pc, #196]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	492e      	ldr	r1, [pc, #184]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	4b28      	ldr	r3, [pc, #160]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d208      	bcs.n	8008ef6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ee4:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	4922      	ldr	r1, [pc, #136]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d010      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	69da      	ldr	r2, [r3, #28]
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d208      	bcs.n	8008f24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f12:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	4917      	ldr	r1, [pc, #92]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f24:	f000 f834 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4b14      	ldr	r3, [pc, #80]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	4912      	ldr	r1, [pc, #72]	; (8008f80 <HAL_RCC_ClockConfig+0x35c>)
 8008f36:	5ccb      	ldrb	r3, [r1, r3]
 8008f38:	f003 031f 	and.w	r3, r3, #31
 8008f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f42:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <HAL_RCC_ClockConfig+0x358>)
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	4a0d      	ldr	r2, [pc, #52]	; (8008f80 <HAL_RCC_ClockConfig+0x35c>)
 8008f4c:	5cd3      	ldrb	r3, [r2, r3]
 8008f4e:	f003 031f 	and.w	r3, r3, #31
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
 8008f58:	4a0a      	ldr	r2, [pc, #40]	; (8008f84 <HAL_RCC_ClockConfig+0x360>)
 8008f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f5c:	4a0a      	ldr	r2, [pc, #40]	; (8008f88 <HAL_RCC_ClockConfig+0x364>)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f62:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <HAL_RCC_ClockConfig+0x368>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fb fe04 	bl	8004b74 <HAL_InitTick>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	0800eb94 	.word	0x0800eb94
 8008f84:	240001a4 	.word	0x240001a4
 8008f88:	240001a0 	.word	0x240001a0
 8008f8c:	240001a8 	.word	0x240001a8

08008f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b089      	sub	sp, #36	; 0x24
 8008f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f96:	4bb3      	ldr	r3, [pc, #716]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f9e:	2b18      	cmp	r3, #24
 8008fa0:	f200 8155 	bhi.w	800924e <HAL_RCC_GetSysClockFreq+0x2be>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	0800924f 	.word	0x0800924f
 8008fb4:	0800924f 	.word	0x0800924f
 8008fb8:	0800924f 	.word	0x0800924f
 8008fbc:	0800924f 	.word	0x0800924f
 8008fc0:	0800924f 	.word	0x0800924f
 8008fc4:	0800924f 	.word	0x0800924f
 8008fc8:	0800924f 	.word	0x0800924f
 8008fcc:	08009037 	.word	0x08009037
 8008fd0:	0800924f 	.word	0x0800924f
 8008fd4:	0800924f 	.word	0x0800924f
 8008fd8:	0800924f 	.word	0x0800924f
 8008fdc:	0800924f 	.word	0x0800924f
 8008fe0:	0800924f 	.word	0x0800924f
 8008fe4:	0800924f 	.word	0x0800924f
 8008fe8:	0800924f 	.word	0x0800924f
 8008fec:	0800903d 	.word	0x0800903d
 8008ff0:	0800924f 	.word	0x0800924f
 8008ff4:	0800924f 	.word	0x0800924f
 8008ff8:	0800924f 	.word	0x0800924f
 8008ffc:	0800924f 	.word	0x0800924f
 8009000:	0800924f 	.word	0x0800924f
 8009004:	0800924f 	.word	0x0800924f
 8009008:	0800924f 	.word	0x0800924f
 800900c:	08009043 	.word	0x08009043
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009010:	4b94      	ldr	r3, [pc, #592]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901c:	4b91      	ldr	r3, [pc, #580]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	08db      	lsrs	r3, r3, #3
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	4a90      	ldr	r2, [pc, #576]	; (8009268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
 800902c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800902e:	e111      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009030:	4b8d      	ldr	r3, [pc, #564]	; (8009268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009032:	61bb      	str	r3, [r7, #24]
    break;
 8009034:	e10e      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009036:	4b8d      	ldr	r3, [pc, #564]	; (800926c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009038:	61bb      	str	r3, [r7, #24]
    break;
 800903a:	e10b      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800903c:	4b8c      	ldr	r3, [pc, #560]	; (8009270 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800903e:	61bb      	str	r3, [r7, #24]
    break;
 8009040:	e108      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009042:	4b88      	ldr	r3, [pc, #544]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800904c:	4b85      	ldr	r3, [pc, #532]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	091b      	lsrs	r3, r3, #4
 8009052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009056:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009058:	4b82      	ldr	r3, [pc, #520]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009062:	4b80      	ldr	r3, [pc, #512]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	08db      	lsrs	r3, r3, #3
 8009068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 80e1 	beq.w	8009248 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b02      	cmp	r3, #2
 800908a:	f000 8083 	beq.w	8009194 <HAL_RCC_GetSysClockFreq+0x204>
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b02      	cmp	r3, #2
 8009092:	f200 80a1 	bhi.w	80091d8 <HAL_RCC_GetSysClockFreq+0x248>
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_RCC_GetSysClockFreq+0x114>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d056      	beq.n	8009150 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090a2:	e099      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a4:	4b6f      	ldr	r3, [pc, #444]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d02d      	beq.n	800910c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090b0:	4b6c      	ldr	r3, [pc, #432]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	4a6b      	ldr	r2, [pc, #428]	; (8009268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
 80090c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	ee07 3a90 	vmov	s15, r3
 80090c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b62      	ldr	r3, [pc, #392]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800910a:	e087      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009278 <HAL_RCC_GetSysClockFreq+0x2e8>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b51      	ldr	r3, [pc, #324]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009132:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e065      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800927c <HAL_RCC_GetSysClockFreq+0x2ec>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b40      	ldr	r3, [pc, #256]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a02 	vldr	s12, [r7, #8]
 8009176:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009274 <HAL_RCC_GetSysClockFreq+0x2e4>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	e043      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009280 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a6:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d6:	e021      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800927c <HAL_RCC_GetSysClockFreq+0x2ec>
 80091e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ea:	4b1e      	ldr	r3, [pc, #120]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80091fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	0a5b      	lsrs	r3, r3, #9
 8009222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009226:	3301      	adds	r3, #1
 8009228:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	ee07 3a90 	vmov	s15, r3
 8009230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009234:	edd7 6a07 	vldr	s13, [r7, #28]
 8009238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009240:	ee17 3a90 	vmov	r3, s15
 8009244:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009246:	e005      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	61bb      	str	r3, [r7, #24]
    break;
 800924c:	e002      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800924e:	4b07      	ldr	r3, [pc, #28]	; (800926c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009250:	61bb      	str	r3, [r7, #24]
    break;
 8009252:	bf00      	nop
  }

  return sysclockfreq;
 8009254:	69bb      	ldr	r3, [r7, #24]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3724      	adds	r7, #36	; 0x24
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	58024400 	.word	0x58024400
 8009268:	03d09000 	.word	0x03d09000
 800926c:	003d0900 	.word	0x003d0900
 8009270:	017d7840 	.word	0x017d7840
 8009274:	46000000 	.word	0x46000000
 8009278:	4c742400 	.word	0x4c742400
 800927c:	4a742400 	.word	0x4a742400
 8009280:	4bbebc20 	.word	0x4bbebc20

08009284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800928a:	f7ff fe81 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 800928e:	4602      	mov	r2, r0
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	0a1b      	lsrs	r3, r3, #8
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	490f      	ldr	r1, [pc, #60]	; (80092d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800929c:	5ccb      	ldrb	r3, [r1, r3]
 800929e:	f003 031f 	and.w	r3, r3, #31
 80092a2:	fa22 f303 	lsr.w	r3, r2, r3
 80092a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	4a09      	ldr	r2, [pc, #36]	; (80092d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80092b2:	5cd3      	ldrb	r3, [r2, r3]
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	fa22 f303 	lsr.w	r3, r2, r3
 80092be:	4a07      	ldr	r2, [pc, #28]	; (80092dc <HAL_RCC_GetHCLKFreq+0x58>)
 80092c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092c2:	4a07      	ldr	r2, [pc, #28]	; (80092e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092c8:	4b04      	ldr	r3, [pc, #16]	; (80092dc <HAL_RCC_GetHCLKFreq+0x58>)
 80092ca:	681b      	ldr	r3, [r3, #0]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	0800eb94 	.word	0x0800eb94
 80092dc:	240001a4 	.word	0x240001a4
 80092e0:	240001a0 	.word	0x240001a0

080092e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092e8:	f7ff ffcc 	bl	8009284 <HAL_RCC_GetHCLKFreq>
 80092ec:	4602      	mov	r2, r0
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	091b      	lsrs	r3, r3, #4
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	4904      	ldr	r1, [pc, #16]	; (800930c <HAL_RCC_GetPCLK1Freq+0x28>)
 80092fa:	5ccb      	ldrb	r3, [r1, r3]
 80092fc:	f003 031f 	and.w	r3, r3, #31
 8009300:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009304:	4618      	mov	r0, r3
 8009306:	bd80      	pop	{r7, pc}
 8009308:	58024400 	.word	0x58024400
 800930c:	0800eb94 	.word	0x0800eb94

08009310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009314:	f7ff ffb6 	bl	8009284 <HAL_RCC_GetHCLKFreq>
 8009318:	4602      	mov	r2, r0
 800931a:	4b06      	ldr	r3, [pc, #24]	; (8009334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	0a1b      	lsrs	r3, r3, #8
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	4904      	ldr	r1, [pc, #16]	; (8009338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009326:	5ccb      	ldrb	r3, [r1, r3]
 8009328:	f003 031f 	and.w	r3, r3, #31
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009330:	4618      	mov	r0, r3
 8009332:	bd80      	pop	{r7, pc}
 8009334:	58024400 	.word	0x58024400
 8009338:	0800eb94 	.word	0x0800eb94

0800933c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009348:	2300      	movs	r3, #0
 800934a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d03f      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009360:	d02a      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009366:	d824      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800936c:	d018      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800936e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009372:	d81e      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937c:	d007      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800937e:	e018      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4ba4      	ldr	r3, [pc, #656]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4aa3      	ldr	r2, [pc, #652]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800938c:	e015      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3304      	adds	r3, #4
 8009392:	2102      	movs	r1, #2
 8009394:	4618      	mov	r0, r3
 8009396:	f001 f989 	bl	800a6ac <RCCEx_PLL2_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2102      	movs	r1, #2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 fa32 	bl	800a810 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093c0:	4b94      	ldr	r3, [pc, #592]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093cc:	4991      	ldr	r1, [pc, #580]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	650b      	str	r3, [r1, #80]	; 0x50
 80093d2:	e001      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d03d      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d826      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80093ec:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009409 	.word	0x08009409
 80093f8:	08009417 	.word	0x08009417
 80093fc:	08009429 	.word	0x08009429
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009408:	4b82      	ldr	r3, [pc, #520]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	4a81      	ldr	r2, [pc, #516]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800940e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009414:	e015      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3304      	adds	r3, #4
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f001 f945 	bl	800a6ac <RCCEx_PLL2_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009426:	e00c      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3324      	adds	r3, #36	; 0x24
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f001 f9ee 	bl	800a810 <RCCEx_PLL3_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009438:	e003      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	75fb      	strb	r3, [r7, #23]
      break;
 800943e:	e000      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d109      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009448:	4b72      	ldr	r3, [pc, #456]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800944a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800944c:	f023 0207 	bic.w	r2, r3, #7
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009454:	496f      	ldr	r1, [pc, #444]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009456:	4313      	orrs	r3, r2
 8009458:	650b      	str	r3, [r1, #80]	; 0x50
 800945a:	e001      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009468:	2b00      	cmp	r3, #0
 800946a:	d051      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009472:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009476:	d036      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009478:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800947c:	d830      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800947e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009482:	d032      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009488:	d82a      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800948a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800948e:	d02e      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009490:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009494:	d824      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800949a:	d018      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 800949c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a0:	d81e      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x172>
 80094a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094aa:	d007      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80094ac:	e018      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ae:	4b59      	ldr	r3, [pc, #356]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	4a58      	ldr	r2, [pc, #352]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094ba:	e019      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 f8f2 	bl	800a6ac <RCCEx_PLL2_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094cc:	e010      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f99b 	bl	800a810 <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094de:	e007      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
      break;
 80094e4:	e004      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094f6:	4b47      	ldr	r3, [pc, #284]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009504:	4943      	ldr	r1, [pc, #268]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009506:	4313      	orrs	r3, r2
 8009508:	658b      	str	r3, [r1, #88]	; 0x58
 800950a:	e001      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009518:	2b00      	cmp	r3, #0
 800951a:	d051      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009522:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009526:	d036      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009528:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800952c:	d830      	bhi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800952e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009532:	d032      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009538:	d82a      	bhi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800953a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800953e:	d02e      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009544:	d824      	bhi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800954a:	d018      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800954c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009550:	d81e      	bhi.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800955a:	d007      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800955c:	e018      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955e:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	4a2c      	ldr	r2, [pc, #176]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800956a:	e019      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3304      	adds	r3, #4
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f001 f89a 	bl	800a6ac <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800957c:	e010      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3324      	adds	r3, #36	; 0x24
 8009582:	2100      	movs	r1, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f001 f943 	bl	800a810 <RCCEx_PLL3_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800958e:	e007      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
      break;
 8009594:	e004      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009596:	bf00      	nop
 8009598:	e002      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800959a:	bf00      	nop
 800959c:	e000      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800959e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095a6:	4b1b      	ldr	r3, [pc, #108]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095b4:	4917      	ldr	r1, [pc, #92]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	658b      	str	r3, [r1, #88]	; 0x58
 80095ba:	e001      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d035      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d0:	2b30      	cmp	r3, #48	; 0x30
 80095d2:	d01c      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80095d4:	2b30      	cmp	r3, #48	; 0x30
 80095d6:	d817      	bhi.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d00c      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d813      	bhi.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d019      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80095e4:	2b10      	cmp	r3, #16
 80095e6:	d10f      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	4a09      	ldr	r2, [pc, #36]	; (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80095f4:	e011      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	2102      	movs	r1, #2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 f855 	bl	800a6ac <RCCEx_PLL2_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009606:	e008      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	75fb      	strb	r3, [r7, #23]
      break;
 800960c:	e005      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800960e:	bf00      	nop
 8009610:	e003      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009612:	bf00      	nop
 8009614:	58024400 	.word	0x58024400
      break;
 8009618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009620:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962c:	49a0      	ldr	r1, [pc, #640]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800962e:	4313      	orrs	r3, r2
 8009630:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009632:	e001      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d047      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800964c:	d030      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800964e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009652:	d82a      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009654:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009658:	d02c      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800965a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800965e:	d824      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009664:	d018      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966a:	d81e      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009674:	d007      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009676:	e018      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009678:	4b8d      	ldr	r3, [pc, #564]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	4a8c      	ldr	r2, [pc, #560]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800967e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009684:	e017      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3304      	adds	r3, #4
 800968a:	2100      	movs	r1, #0
 800968c:	4618      	mov	r0, r3
 800968e:	f001 f80d 	bl	800a6ac <RCCEx_PLL2_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009696:	e00e      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 f8b6 	bl	800a810 <RCCEx_PLL3_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
      break;
 80096ae:	e002      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80096b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096bc:	4b7c      	ldr	r3, [pc, #496]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c8:	4979      	ldr	r1, [pc, #484]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	650b      	str	r3, [r1, #80]	; 0x50
 80096ce:	e001      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d049      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096e8:	d02e      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096ee:	d828      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096f4:	d02a      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80096f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096fa:	d822      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009700:	d026      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009702:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009706:	d81c      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800970c:	d010      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d816      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01d      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971c:	d111      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3304      	adds	r3, #4
 8009722:	2101      	movs	r1, #1
 8009724:	4618      	mov	r0, r3
 8009726:	f000 ffc1 	bl	800a6ac <RCCEx_PLL2_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800972e:	e012      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3324      	adds	r3, #36	; 0x24
 8009734:	2101      	movs	r1, #1
 8009736:	4618      	mov	r0, r3
 8009738:	f001 f86a 	bl	800a810 <RCCEx_PLL3_Config>
 800973c:	4603      	mov	r3, r0
 800973e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009740:	e009      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	75fb      	strb	r3, [r7, #23]
      break;
 8009746:	e006      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009748:	bf00      	nop
 800974a:	e004      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d109      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800975c:	4b54      	ldr	r3, [pc, #336]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800975e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009760:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	4951      	ldr	r1, [pc, #324]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800976a:	4313      	orrs	r3, r2
 800976c:	650b      	str	r3, [r1, #80]	; 0x50
 800976e:	e001      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d04b      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800978a:	d02e      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800978c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009790:	d828      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009796:	d02a      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979c:	d822      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800979e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097a2:	d026      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80097a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097a8:	d81c      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ae:	d010      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80097b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b4:	d816      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d01d      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80097ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097be:	d111      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	2101      	movs	r1, #1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff70 	bl	800a6ac <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097d0:	e012      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3324      	adds	r3, #36	; 0x24
 80097d6:	2101      	movs	r1, #1
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 f819 	bl	800a810 <RCCEx_PLL3_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097e2:	e009      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]
      break;
 80097e8:	e006      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097ea:	bf00      	nop
 80097ec:	e004      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097ee:	bf00      	nop
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097f2:	bf00      	nop
 80097f4:	e000      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10a      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097fe:	4b2c      	ldr	r3, [pc, #176]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009802:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800980c:	4928      	ldr	r1, [pc, #160]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800980e:	4313      	orrs	r3, r2
 8009810:	658b      	str	r3, [r1, #88]	; 0x58
 8009812:	e001      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d02f      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982c:	d00e      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800982e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009832:	d814      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d015      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800983c:	d10f      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983e:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009842:	4a1b      	ldr	r2, [pc, #108]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009848:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800984a:	e00c      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3304      	adds	r3, #4
 8009850:	2101      	movs	r1, #1
 8009852:	4618      	mov	r0, r3
 8009854:	f000 ff2a 	bl	800a6ac <RCCEx_PLL2_Config>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800985c:	e003      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
      break;
 8009862:	e000      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800986c:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009878:	490d      	ldr	r1, [pc, #52]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800987a:	4313      	orrs	r3, r2
 800987c:	650b      	str	r3, [r1, #80]	; 0x50
 800987e:	e001      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d034      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009894:	2b03      	cmp	r3, #3
 8009896:	d81d      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009898:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	080098db 	.word	0x080098db
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098c3 	.word	0x080098c3
 80098ac:	080098db 	.word	0x080098db
 80098b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4bb1      	ldr	r3, [pc, #708]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4ab0      	ldr	r2, [pc, #704]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098c0:	e00c      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2102      	movs	r1, #2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 feef 	bl	800a6ac <RCCEx_PLL2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80098da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098e2:	4ba6      	ldr	r3, [pc, #664]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e6:	f023 0203 	bic.w	r2, r3, #3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ee:	49a3      	ldr	r1, [pc, #652]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098f4:	e001      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 8086 	beq.w	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009908:	4b9d      	ldr	r3, [pc, #628]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a9c      	ldr	r2, [pc, #624]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800990e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009914:	f7fb f978 	bl	8004c08 <HAL_GetTick>
 8009918:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800991a:	e009      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800991c:	f7fb f974 	bl	8004c08 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b64      	cmp	r3, #100	; 0x64
 8009928:	d902      	bls.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	75fb      	strb	r3, [r7, #23]
        break;
 800992e:	e005      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009930:	4b93      	ldr	r3, [pc, #588]	; (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0ef      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d166      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009942:	4b8e      	ldr	r3, [pc, #568]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800994c:	4053      	eors	r3, r2
 800994e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009952:	2b00      	cmp	r3, #0
 8009954:	d013      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009956:	4b89      	ldr	r3, [pc, #548]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800995e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009960:	4b86      	ldr	r3, [pc, #536]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009964:	4a85      	ldr	r2, [pc, #532]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800996a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800996c:	4b83      	ldr	r3, [pc, #524]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800996e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009970:	4a82      	ldr	r2, [pc, #520]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009976:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009978:	4a80      	ldr	r2, [pc, #512]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009988:	d115      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998a:	f7fb f93d 	bl	8004c08 <HAL_GetTick>
 800998e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009990:	e00b      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009992:	f7fb f939 	bl	8004c08 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d902      	bls.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	75fb      	strb	r3, [r7, #23]
            break;
 80099a8:	e005      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099aa:	4b74      	ldr	r3, [pc, #464]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0ed      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d126      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ca:	d10d      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80099cc:	4b6b      	ldr	r3, [pc, #428]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099da:	0919      	lsrs	r1, r3, #4
 80099dc:	4b69      	ldr	r3, [pc, #420]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80099de:	400b      	ands	r3, r1
 80099e0:	4966      	ldr	r1, [pc, #408]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	610b      	str	r3, [r1, #16]
 80099e6:	e005      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80099e8:	4b64      	ldr	r3, [pc, #400]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	4a63      	ldr	r2, [pc, #396]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099f2:	6113      	str	r3, [r2, #16]
 80099f4:	4b61      	ldr	r3, [pc, #388]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a02:	495e      	ldr	r1, [pc, #376]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	670b      	str	r3, [r1, #112]	; 0x70
 8009a08:	e004      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	75bb      	strb	r3, [r7, #22]
 8009a0e:	e001      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d07e      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a24:	2b28      	cmp	r3, #40	; 0x28
 8009a26:	d867      	bhi.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009a28:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009aff 	.word	0x08009aff
 8009a34:	08009af9 	.word	0x08009af9
 8009a38:	08009af9 	.word	0x08009af9
 8009a3c:	08009af9 	.word	0x08009af9
 8009a40:	08009af9 	.word	0x08009af9
 8009a44:	08009af9 	.word	0x08009af9
 8009a48:	08009af9 	.word	0x08009af9
 8009a4c:	08009af9 	.word	0x08009af9
 8009a50:	08009ad5 	.word	0x08009ad5
 8009a54:	08009af9 	.word	0x08009af9
 8009a58:	08009af9 	.word	0x08009af9
 8009a5c:	08009af9 	.word	0x08009af9
 8009a60:	08009af9 	.word	0x08009af9
 8009a64:	08009af9 	.word	0x08009af9
 8009a68:	08009af9 	.word	0x08009af9
 8009a6c:	08009af9 	.word	0x08009af9
 8009a70:	08009ae7 	.word	0x08009ae7
 8009a74:	08009af9 	.word	0x08009af9
 8009a78:	08009af9 	.word	0x08009af9
 8009a7c:	08009af9 	.word	0x08009af9
 8009a80:	08009af9 	.word	0x08009af9
 8009a84:	08009af9 	.word	0x08009af9
 8009a88:	08009af9 	.word	0x08009af9
 8009a8c:	08009af9 	.word	0x08009af9
 8009a90:	08009aff 	.word	0x08009aff
 8009a94:	08009af9 	.word	0x08009af9
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009af9 	.word	0x08009af9
 8009ab0:	08009aff 	.word	0x08009aff
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	08009aff 	.word	0x08009aff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fde6 	bl	800a6ac <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ae4:	e00c      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	2101      	movs	r1, #1
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fe8f 	bl	800a810 <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	e000      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b06:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b12:	491a      	ldr	r1, [pc, #104]	; (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	654b      	str	r3, [r1, #84]	; 0x54
 8009b18:	e001      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d03e      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d820      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b89 	.word	0x08009b89
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b63 	.word	0x08009b63
 8009b44:	08009b89 	.word	0x08009b89
 8009b48:	08009b89 	.word	0x08009b89
 8009b4c:	08009b89 	.word	0x08009b89
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
 8009b54:	2101      	movs	r1, #1
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fda8 	bl	800a6ac <RCCEx_PLL2_Config>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b60:	e013      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3324      	adds	r3, #36	; 0x24
 8009b66:	2101      	movs	r1, #1
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 fe51 	bl	800a810 <RCCEx_PLL3_Config>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b72:	e00a      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
      break;
 8009b78:	e007      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009b7a:	bf00      	nop
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	58024800 	.word	0x58024800
 8009b84:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b90:	4b9f      	ldr	r3, [pc, #636]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b94:	f023 0207 	bic.w	r2, r3, #7
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9c:	499c      	ldr	r1, [pc, #624]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	654b      	str	r3, [r1, #84]	; 0x54
 8009ba2:	e001      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d039      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d820      	bhi.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c07 	.word	0x08009c07
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009bef 	.word	0x08009bef
 8009bd0:	08009c07 	.word	0x08009c07
 8009bd4:	08009c07 	.word	0x08009c07
 8009bd8:	08009c07 	.word	0x08009c07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3304      	adds	r3, #4
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fd62 	bl	800a6ac <RCCEx_PLL2_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bec:	e00c      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3324      	adds	r3, #36	; 0x24
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fe0b 	bl	800a810 <RCCEx_PLL3_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bfe:	e003      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	75fb      	strb	r3, [r7, #23]
      break;
 8009c04:	e000      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c0e:	4b80      	ldr	r3, [pc, #512]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	f023 0207 	bic.w	r2, r3, #7
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1c:	497c      	ldr	r1, [pc, #496]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	658b      	str	r3, [r1, #88]	; 0x58
 8009c22:	e001      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d04b      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c3e:	d02e      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c44:	d828      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4a:	d02a      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d822      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c56:	d026      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c5c:	d81c      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c62:	d010      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c68:	d816      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01d      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c72:	d111      	bne.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3304      	adds	r3, #4
 8009c78:	2100      	movs	r1, #0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 fd16 	bl	800a6ac <RCCEx_PLL2_Config>
 8009c80:	4603      	mov	r3, r0
 8009c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c84:	e012      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3324      	adds	r3, #36	; 0x24
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fdbf 	bl	800a810 <RCCEx_PLL3_Config>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c96:	e009      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e004      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009ca2:	bf00      	nop
 8009ca4:	e002      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009ca6:	bf00      	nop
 8009ca8:	e000      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cb2:	4b57      	ldr	r3, [pc, #348]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc0:	4953      	ldr	r1, [pc, #332]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8009cc6:	e001      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d04b      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ce2:	d02e      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009ce4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ce8:	d828      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cee:	d02a      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf4:	d822      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cfa:	d026      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d00:	d81c      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d06:	d010      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d0c:	d816      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01d      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d16:	d111      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fcc4 	bl	800a6ac <RCCEx_PLL2_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d28:	e012      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3324      	adds	r3, #36	; 0x24
 8009d2e:	2102      	movs	r1, #2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fd6d 	bl	800a810 <RCCEx_PLL3_Config>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d3a:	e009      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d40:	e006      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d56:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d64:	492a      	ldr	r1, [pc, #168]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	658b      	str	r3, [r1, #88]	; 0x58
 8009d6a:	e001      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d04d      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d86:	d02e      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d8c:	d828      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d92:	d02a      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d98:	d822      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d9e:	d026      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009da0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009da4:	d81c      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009daa:	d010      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db0:	d816      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01d      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dba:	d111      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fc72 	bl	800a6ac <RCCEx_PLL2_Config>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dcc:	e012      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3324      	adds	r3, #36	; 0x24
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fd1b 	bl	800a810 <RCCEx_PLL3_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009dde:	e009      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	75fb      	strb	r3, [r7, #23]
      break;
 8009de4:	e006      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009de6:	bf00      	nop
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009dea:	bf00      	nop
 8009dec:	e002      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009dee:	bf00      	nop
 8009df0:	e000      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10c      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009dfa:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e08:	4901      	ldr	r1, [pc, #4]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e0e:	e003      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
 8009e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0308 	and.w	r3, r3, #8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d018      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e2c:	d10a      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3324      	adds	r3, #36	; 0x24
 8009e32:	2102      	movs	r1, #2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fceb 	bl	800a810 <RCCEx_PLL3_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009e44:	4b8a      	ldr	r3, [pc, #552]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e50:	4987      	ldr	r1, [pc, #540]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01a      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6c:	d10a      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3324      	adds	r3, #36	; 0x24
 8009e72:	2102      	movs	r1, #2
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fccb 	bl	800a810 <RCCEx_PLL3_Config>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e84:	4b7a      	ldr	r3, [pc, #488]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e92:	4977      	ldr	r1, [pc, #476]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d034      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eae:	d01d      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb4:	d817      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ebe:	d009      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ec0:	e011      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fbef 	bl	800a6ac <RCCEx_PLL2_Config>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ed2:	e00c      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3324      	adds	r3, #36	; 0x24
 8009ed8:	2102      	movs	r1, #2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fc98 	bl	800a810 <RCCEx_PLL3_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eea:	e000      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ef4:	4b5e      	ldr	r3, [pc, #376]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f02:	495b      	ldr	r1, [pc, #364]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	658b      	str	r3, [r1, #88]	; 0x58
 8009f08:	e001      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d033      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f24:	d01c      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009f26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f2a:	d816      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f30:	d003      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f36:	d007      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009f38:	e00f      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f3a:	4b4d      	ldr	r3, [pc, #308]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	4a4c      	ldr	r2, [pc, #304]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f46:	e00c      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fc5e 	bl	800a810 <RCCEx_PLL3_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f58:	e003      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f68:	4b41      	ldr	r3, [pc, #260]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f76:	493e      	ldr	r1, [pc, #248]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f7c:	e001      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d029      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f9a:	d007      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009f9c:	e00f      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9e:	4b34      	ldr	r3, [pc, #208]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	4a33      	ldr	r2, [pc, #204]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009faa:	e00b      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fb7a 	bl	800a6ac <RCCEx_PLL2_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009fbc:	e002      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fca:	4b29      	ldr	r3, [pc, #164]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd6:	4926      	ldr	r1, [pc, #152]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009fdc:	e001      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3324      	adds	r3, #36	; 0x24
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fc0b 	bl	800a810 <RCCEx_PLL3_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d033      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a018:	d017      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a01a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a01e:	d811      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a024:	d013      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02a:	d80b      	bhi.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d010      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a034:	d106      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a036:	4b0e      	ldr	r3, [pc, #56]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a0d      	ldr	r2, [pc, #52]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a042:	e007      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	75fb      	strb	r3, [r7, #23]
      break;
 800a048:	e004      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a052:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10c      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a066:	4902      	ldr	r1, [pc, #8]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	654b      	str	r3, [r1, #84]	; 0x54
 800a06c:	e004      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a06e:	bf00      	nop
 800a070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a084:	4b29      	ldr	r3, [pc, #164]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a090:	4926      	ldr	r1, [pc, #152]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a092:	4313      	orrs	r3, r2
 800a094:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d008      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0a2:	4b22      	ldr	r3, [pc, #136]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ae:	491f      	ldr	r1, [pc, #124]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00d      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0c0:	4b1a      	ldr	r3, [pc, #104]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	4a19      	ldr	r2, [pc, #100]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0ca:	6113      	str	r3, [r2, #16]
 800a0cc:	4b17      	ldr	r3, [pc, #92]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ce:	691a      	ldr	r2, [r3, #16]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0d6:	4915      	ldr	r1, [pc, #84]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	da08      	bge.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0e4:	4b11      	ldr	r3, [pc, #68]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f0:	490e      	ldr	r1, [pc, #56]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d009      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a112:	4313      	orrs	r3, r2
 800a114:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a116:	7dbb      	ldrb	r3, [r7, #22]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	e000      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	58024400 	.word	0x58024400

0800a130 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a134:	f7ff f8a6 	bl	8009284 <HAL_RCC_GetHCLKFreq>
 800a138:	4602      	mov	r2, r0
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	091b      	lsrs	r3, r3, #4
 800a140:	f003 0307 	and.w	r3, r3, #7
 800a144:	4904      	ldr	r1, [pc, #16]	; (800a158 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a146:	5ccb      	ldrb	r3, [r1, r3]
 800a148:	f003 031f 	and.w	r3, r3, #31
 800a14c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a150:	4618      	mov	r0, r3
 800a152:	bd80      	pop	{r7, pc}
 800a154:	58024400 	.word	0x58024400
 800a158:	0800eb94 	.word	0x0800eb94

0800a15c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b089      	sub	sp, #36	; 0x24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a164:	4ba1      	ldr	r3, [pc, #644]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a16e:	4b9f      	ldr	r3, [pc, #636]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	0b1b      	lsrs	r3, r3, #12
 800a174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a178:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a17a:	4b9c      	ldr	r3, [pc, #624]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	091b      	lsrs	r3, r3, #4
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a186:	4b99      	ldr	r3, [pc, #612]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	08db      	lsrs	r3, r3, #3
 800a18c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	fb02 f303 	mul.w	r3, r2, r3
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8111 	beq.w	800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	f000 8083 	beq.w	800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	f200 80a1 	bhi.w	800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d056      	beq.n	800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a1c6:	e099      	b.n	800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1c8:	4b88      	ldr	r3, [pc, #544]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0320 	and.w	r3, r3, #32
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d02d      	beq.n	800a230 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1d4:	4b85      	ldr	r3, [pc, #532]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	08db      	lsrs	r3, r3, #3
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	4a84      	ldr	r2, [pc, #528]	; (800a3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1fe:	4b7b      	ldr	r3, [pc, #492]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a212:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a22a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a22e:	e087      	b.n	800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	ee07 3a90 	vmov	s15, r3
 800a236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a242:	4b6a      	ldr	r3, [pc, #424]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a252:	ed97 6a03 	vldr	s12, [r7, #12]
 800a256:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a272:	e065      	b.n	800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a286:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28e:	ee07 3a90 	vmov	s15, r3
 800a292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a296:	ed97 6a03 	vldr	s12, [r7, #12]
 800a29a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2b6:	e043      	b.n	800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ca:	4b48      	ldr	r3, [pc, #288]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2fa:	e021      	b.n	800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a306:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30e:	4b37      	ldr	r3, [pc, #220]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a316:	ee07 3a90 	vmov	s15, r3
 800a31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a322:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a33e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a340:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	0a5b      	lsrs	r3, r3, #9
 800a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a366:	ee17 2a90 	vmov	r2, s15
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a36e:	4b1f      	ldr	r3, [pc, #124]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a372:	0c1b      	lsrs	r3, r3, #16
 800a374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a378:	ee07 3a90 	vmov	s15, r3
 800a37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a384:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a388:	edd7 6a07 	vldr	s13, [r7, #28]
 800a38c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a394:	ee17 2a90 	vmov	r2, s15
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a39c:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	0e1b      	lsrs	r3, r3, #24
 800a3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c2:	ee17 2a90 	vmov	r2, s15
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3ca:	e008      	b.n	800a3de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	609a      	str	r2, [r3, #8]
}
 800a3de:	bf00      	nop
 800a3e0:	3724      	adds	r7, #36	; 0x24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	03d09000 	.word	0x03d09000
 800a3f4:	46000000 	.word	0x46000000
 800a3f8:	4c742400 	.word	0x4c742400
 800a3fc:	4a742400 	.word	0x4a742400
 800a400:	4bbebc20 	.word	0x4bbebc20

0800a404 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a404:	b480      	push	{r7}
 800a406:	b089      	sub	sp, #36	; 0x24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a40c:	4ba1      	ldr	r3, [pc, #644]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a416:	4b9f      	ldr	r3, [pc, #636]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	0d1b      	lsrs	r3, r3, #20
 800a41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a420:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a422:	4b9c      	ldr	r3, [pc, #624]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a42e:	4b99      	ldr	r3, [pc, #612]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	08db      	lsrs	r3, r3, #3
 800a434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 8111 	beq.w	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	2b02      	cmp	r3, #2
 800a456:	f000 8083 	beq.w	800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	f200 80a1 	bhi.w	800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d056      	beq.n	800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a46e:	e099      	b.n	800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a470:	4b88      	ldr	r3, [pc, #544]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d02d      	beq.n	800a4d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a47c:	4b85      	ldr	r3, [pc, #532]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	08db      	lsrs	r3, r3, #3
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	4a84      	ldr	r2, [pc, #528]	; (800a698 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a488:	fa22 f303 	lsr.w	r3, r2, r3
 800a48c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a6:	4b7b      	ldr	r3, [pc, #492]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a4d6:	e087      	b.n	800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ea:	4b6a      	ldr	r3, [pc, #424]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a51a:	e065      	b.n	800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52e:	4b59      	ldr	r3, [pc, #356]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a542:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a55e:	e043      	b.n	800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	ee07 3a90 	vmov	s15, r3
 800a566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a572:	4b48      	ldr	r3, [pc, #288]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a582:	ed97 6a03 	vldr	s12, [r7, #12]
 800a586:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5a2:	e021      	b.n	800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b6:	4b37      	ldr	r3, [pc, #220]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a69c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a5e8:	4b2a      	ldr	r3, [pc, #168]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	0a5b      	lsrs	r3, r3, #9
 800a5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a602:	edd7 6a07 	vldr	s13, [r7, #28]
 800a606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a60e:	ee17 2a90 	vmov	r2, s15
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a616:	4b1f      	ldr	r3, [pc, #124]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	0c1b      	lsrs	r3, r3, #16
 800a61c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a62c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a630:	edd7 6a07 	vldr	s13, [r7, #28]
 800a634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a63c:	ee17 2a90 	vmov	r2, s15
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a644:	4b13      	ldr	r3, [pc, #76]	; (800a694 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a648:	0e1b      	lsrs	r3, r3, #24
 800a64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a65a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a65e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66a:	ee17 2a90 	vmov	r2, s15
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a672:	e008      	b.n	800a686 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	609a      	str	r2, [r3, #8]
}
 800a686:	bf00      	nop
 800a688:	3724      	adds	r7, #36	; 0x24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	58024400 	.word	0x58024400
 800a698:	03d09000 	.word	0x03d09000
 800a69c:	46000000 	.word	0x46000000
 800a6a0:	4c742400 	.word	0x4c742400
 800a6a4:	4a742400 	.word	0x4a742400
 800a6a8:	4bbebc20 	.word	0x4bbebc20

0800a6ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ba:	4b53      	ldr	r3, [pc, #332]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d101      	bne.n	800a6ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e099      	b.n	800a7fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6ca:	4b4f      	ldr	r3, [pc, #316]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a4e      	ldr	r2, [pc, #312]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a6d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d6:	f7fa fa97 	bl	8004c08 <HAL_GetTick>
 800a6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6dc:	e008      	b.n	800a6f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6de:	f7fa fa93 	bl	8004c08 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d901      	bls.n	800a6f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e086      	b.n	800a7fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6f0:	4b45      	ldr	r3, [pc, #276]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f0      	bne.n	800a6de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a6fc:	4b42      	ldr	r3, [pc, #264]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	031b      	lsls	r3, r3, #12
 800a70a:	493f      	ldr	r1, [pc, #252]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	628b      	str	r3, [r1, #40]	; 0x28
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	3b01      	subs	r3, #1
 800a716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	3b01      	subs	r3, #1
 800a720:	025b      	lsls	r3, r3, #9
 800a722:	b29b      	uxth	r3, r3
 800a724:	431a      	orrs	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	041b      	lsls	r3, r3, #16
 800a72e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	3b01      	subs	r3, #1
 800a73a:	061b      	lsls	r3, r3, #24
 800a73c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a740:	4931      	ldr	r1, [pc, #196]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a742:	4313      	orrs	r3, r2
 800a744:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a746:	4b30      	ldr	r3, [pc, #192]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	492d      	ldr	r1, [pc, #180]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a754:	4313      	orrs	r3, r2
 800a756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a758:	4b2b      	ldr	r3, [pc, #172]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	f023 0220 	bic.w	r2, r3, #32
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	4928      	ldr	r1, [pc, #160]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a766:	4313      	orrs	r3, r2
 800a768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a76a:	4b27      	ldr	r3, [pc, #156]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	4a26      	ldr	r2, [pc, #152]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a770:	f023 0310 	bic.w	r3, r3, #16
 800a774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a776:	4b24      	ldr	r3, [pc, #144]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a77a:	4b24      	ldr	r3, [pc, #144]	; (800a80c <RCCEx_PLL2_Config+0x160>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	69d2      	ldr	r2, [r2, #28]
 800a782:	00d2      	lsls	r2, r2, #3
 800a784:	4920      	ldr	r1, [pc, #128]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a786:	4313      	orrs	r3, r2
 800a788:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a78a:	4b1f      	ldr	r3, [pc, #124]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	4a1e      	ldr	r2, [pc, #120]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a790:	f043 0310 	orr.w	r3, r3, #16
 800a794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a79c:	4b1a      	ldr	r3, [pc, #104]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	4a19      	ldr	r2, [pc, #100]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7a8:	e00f      	b.n	800a7ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d106      	bne.n	800a7be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7b0:	4b15      	ldr	r3, [pc, #84]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	4a14      	ldr	r2, [pc, #80]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7bc:	e005      	b.n	800a7ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7be:	4b12      	ldr	r3, [pc, #72]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a11      	ldr	r2, [pc, #68]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d6:	f7fa fa17 	bl	8004c08 <HAL_GetTick>
 800a7da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7dc:	e008      	b.n	800a7f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a7de:	f7fa fa13 	bl	8004c08 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e006      	b.n	800a7fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0f0      	beq.n	800a7de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	58024400 	.word	0x58024400
 800a80c:	ffff0007 	.word	0xffff0007

0800a810 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a81e:	4b53      	ldr	r3, [pc, #332]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	2b03      	cmp	r3, #3
 800a828:	d101      	bne.n	800a82e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e099      	b.n	800a962 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a82e:	4b4f      	ldr	r3, [pc, #316]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a4e      	ldr	r2, [pc, #312]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a83a:	f7fa f9e5 	bl	8004c08 <HAL_GetTick>
 800a83e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a840:	e008      	b.n	800a854 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a842:	f7fa f9e1 	bl	8004c08 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e086      	b.n	800a962 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a854:	4b45      	ldr	r3, [pc, #276]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1f0      	bne.n	800a842 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a860:	4b42      	ldr	r3, [pc, #264]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a864:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	051b      	lsls	r3, r3, #20
 800a86e:	493f      	ldr	r1, [pc, #252]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a870:	4313      	orrs	r3, r2
 800a872:	628b      	str	r3, [r1, #40]	; 0x28
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	3b01      	subs	r3, #1
 800a87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	3b01      	subs	r3, #1
 800a884:	025b      	lsls	r3, r3, #9
 800a886:	b29b      	uxth	r3, r3
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	3b01      	subs	r3, #1
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	061b      	lsls	r3, r3, #24
 800a8a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8a4:	4931      	ldr	r1, [pc, #196]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8aa:	4b30      	ldr	r3, [pc, #192]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	492d      	ldr	r1, [pc, #180]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8bc:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	4928      	ldr	r1, [pc, #160]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8ce:	4b27      	ldr	r3, [pc, #156]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	4a26      	ldr	r2, [pc, #152]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8de:	4b24      	ldr	r3, [pc, #144]	; (800a970 <RCCEx_PLL3_Config+0x160>)
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	69d2      	ldr	r2, [r2, #28]
 800a8e6:	00d2      	lsls	r2, r2, #3
 800a8e8:	4920      	ldr	r1, [pc, #128]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a8ee:	4b1f      	ldr	r3, [pc, #124]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	4a1e      	ldr	r2, [pc, #120]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a8f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a900:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	4a19      	ldr	r2, [pc, #100]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a90a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a90c:	e00f      	b.n	800a92e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d106      	bne.n	800a922 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a914:	4b15      	ldr	r3, [pc, #84]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	4a14      	ldr	r2, [pc, #80]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a91a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a91e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a920:	e005      	b.n	800a92e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a922:	4b12      	ldr	r3, [pc, #72]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a11      	ldr	r2, [pc, #68]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a0e      	ldr	r2, [pc, #56]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93a:	f7fa f965 	bl	8004c08 <HAL_GetTick>
 800a93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a940:	e008      	b.n	800a954 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a942:	f7fa f961 	bl	8004c08 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e006      	b.n	800a962 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <RCCEx_PLL3_Config+0x15c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0f0      	beq.n	800a942 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	58024400 	.word	0x58024400
 800a970:	ffff0007 	.word	0xffff0007

0800a974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e049      	b.n	800aa1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7f9 fc3c 	bl	8004218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	f000 feb8 	bl	800b728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d001      	beq.n	800aa3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e05e      	b.n	800aafa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0201 	orr.w	r2, r2, #1
 800aa52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a2b      	ldr	r2, [pc, #172]	; (800ab08 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d02c      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa66:	d027      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a27      	ldr	r2, [pc, #156]	; (800ab0c <HAL_TIM_Base_Start_IT+0xe8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d022      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a26      	ldr	r2, [pc, #152]	; (800ab10 <HAL_TIM_Base_Start_IT+0xec>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d01d      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a24      	ldr	r2, [pc, #144]	; (800ab14 <HAL_TIM_Base_Start_IT+0xf0>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d018      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a23      	ldr	r2, [pc, #140]	; (800ab18 <HAL_TIM_Base_Start_IT+0xf4>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d013      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a21      	ldr	r2, [pc, #132]	; (800ab1c <HAL_TIM_Base_Start_IT+0xf8>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d00e      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a20      	ldr	r2, [pc, #128]	; (800ab20 <HAL_TIM_Base_Start_IT+0xfc>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d009      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1e      	ldr	r2, [pc, #120]	; (800ab24 <HAL_TIM_Base_Start_IT+0x100>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d004      	beq.n	800aab8 <HAL_TIM_Base_Start_IT+0x94>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a1d      	ldr	r2, [pc, #116]	; (800ab28 <HAL_TIM_Base_Start_IT+0x104>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d115      	bne.n	800aae4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	4b1b      	ldr	r3, [pc, #108]	; (800ab2c <HAL_TIM_Base_Start_IT+0x108>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b06      	cmp	r3, #6
 800aac8:	d015      	beq.n	800aaf6 <HAL_TIM_Base_Start_IT+0xd2>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad0:	d011      	beq.n	800aaf6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f042 0201 	orr.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae2:	e008      	b.n	800aaf6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	e000      	b.n	800aaf8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40010000 	.word	0x40010000
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40001800 	.word	0x40001800
 800ab20:	40014000 	.word	0x40014000
 800ab24:	4000e000 	.word	0x4000e000
 800ab28:	4000e400 	.word	0x4000e400
 800ab2c:	00010007 	.word	0x00010007

0800ab30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e049      	b.n	800abd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7f9 fc96 	bl	8004488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f000 fdda 	bl	800b728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d109      	bne.n	800ac04 <HAL_TIM_PWM_Start+0x24>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	e03c      	b.n	800ac7e <HAL_TIM_PWM_Start+0x9e>
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d109      	bne.n	800ac1e <HAL_TIM_PWM_Start+0x3e>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	bf14      	ite	ne
 800ac16:	2301      	movne	r3, #1
 800ac18:	2300      	moveq	r3, #0
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	e02f      	b.n	800ac7e <HAL_TIM_PWM_Start+0x9e>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	d109      	bne.n	800ac38 <HAL_TIM_PWM_Start+0x58>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	bf14      	ite	ne
 800ac30:	2301      	movne	r3, #1
 800ac32:	2300      	moveq	r3, #0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	e022      	b.n	800ac7e <HAL_TIM_PWM_Start+0x9e>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b0c      	cmp	r3, #12
 800ac3c:	d109      	bne.n	800ac52 <HAL_TIM_PWM_Start+0x72>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	bf14      	ite	ne
 800ac4a:	2301      	movne	r3, #1
 800ac4c:	2300      	moveq	r3, #0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	e015      	b.n	800ac7e <HAL_TIM_PWM_Start+0x9e>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d109      	bne.n	800ac6c <HAL_TIM_PWM_Start+0x8c>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	bf14      	ite	ne
 800ac64:	2301      	movne	r3, #1
 800ac66:	2300      	moveq	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	e008      	b.n	800ac7e <HAL_TIM_PWM_Start+0x9e>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	bf14      	ite	ne
 800ac78:	2301      	movne	r3, #1
 800ac7a:	2300      	moveq	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e0ab      	b.n	800adde <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <HAL_TIM_PWM_Start+0xb6>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac94:	e023      	b.n	800acde <HAL_TIM_PWM_Start+0xfe>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d104      	bne.n	800aca6 <HAL_TIM_PWM_Start+0xc6>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aca4:	e01b      	b.n	800acde <HAL_TIM_PWM_Start+0xfe>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d104      	bne.n	800acb6 <HAL_TIM_PWM_Start+0xd6>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acb4:	e013      	b.n	800acde <HAL_TIM_PWM_Start+0xfe>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b0c      	cmp	r3, #12
 800acba:	d104      	bne.n	800acc6 <HAL_TIM_PWM_Start+0xe6>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2202      	movs	r2, #2
 800acc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acc4:	e00b      	b.n	800acde <HAL_TIM_PWM_Start+0xfe>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b10      	cmp	r3, #16
 800acca:	d104      	bne.n	800acd6 <HAL_TIM_PWM_Start+0xf6>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2202      	movs	r2, #2
 800acd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acd4:	e003      	b.n	800acde <HAL_TIM_PWM_Start+0xfe>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2202      	movs	r2, #2
 800acda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2201      	movs	r2, #1
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f001 f938 	bl	800bf5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a3d      	ldr	r2, [pc, #244]	; (800ade8 <HAL_TIM_PWM_Start+0x208>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d013      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x13e>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a3c      	ldr	r2, [pc, #240]	; (800adec <HAL_TIM_PWM_Start+0x20c>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00e      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x13e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a3a      	ldr	r2, [pc, #232]	; (800adf0 <HAL_TIM_PWM_Start+0x210>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d009      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x13e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a39      	ldr	r2, [pc, #228]	; (800adf4 <HAL_TIM_PWM_Start+0x214>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x13e>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a37      	ldr	r2, [pc, #220]	; (800adf8 <HAL_TIM_PWM_Start+0x218>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d101      	bne.n	800ad22 <HAL_TIM_PWM_Start+0x142>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <HAL_TIM_PWM_Start+0x144>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d007      	beq.n	800ad38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a2a      	ldr	r2, [pc, #168]	; (800ade8 <HAL_TIM_PWM_Start+0x208>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d02c      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad4a:	d027      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a2a      	ldr	r2, [pc, #168]	; (800adfc <HAL_TIM_PWM_Start+0x21c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d022      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <HAL_TIM_PWM_Start+0x220>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01d      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a27      	ldr	r2, [pc, #156]	; (800ae04 <HAL_TIM_PWM_Start+0x224>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d018      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a1f      	ldr	r2, [pc, #124]	; (800adec <HAL_TIM_PWM_Start+0x20c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d013      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <HAL_TIM_PWM_Start+0x228>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00e      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1b      	ldr	r2, [pc, #108]	; (800adf0 <HAL_TIM_PWM_Start+0x210>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d009      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a1f      	ldr	r2, [pc, #124]	; (800ae0c <HAL_TIM_PWM_Start+0x22c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d004      	beq.n	800ad9c <HAL_TIM_PWM_Start+0x1bc>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <HAL_TIM_PWM_Start+0x230>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d115      	bne.n	800adc8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <HAL_TIM_PWM_Start+0x234>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b06      	cmp	r3, #6
 800adac:	d015      	beq.n	800adda <HAL_TIM_PWM_Start+0x1fa>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb4:	d011      	beq.n	800adda <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f042 0201 	orr.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adc6:	e008      	b.n	800adda <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	e000      	b.n	800addc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40010400 	.word	0x40010400
 800adf0:	40014000 	.word	0x40014000
 800adf4:	40014400 	.word	0x40014400
 800adf8:	40014800 	.word	0x40014800
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800
 800ae04:	40000c00 	.word	0x40000c00
 800ae08:	40001800 	.word	0x40001800
 800ae0c:	4000e000 	.word	0x4000e000
 800ae10:	4000e400 	.word	0x4000e400
 800ae14:	00010007 	.word	0x00010007

0800ae18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e08f      	b.n	800af4c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7f9 fa2f 	bl	80042a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6899      	ldr	r1, [r3, #8]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	4b3e      	ldr	r3, [pc, #248]	; (800af54 <HAL_TIM_Encoder_Init+0x13c>)
 800ae5a:	400b      	ands	r3, r1
 800ae5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f000 fc5d 	bl	800b728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	4b31      	ldr	r3, [pc, #196]	; (800af58 <HAL_TIM_Encoder_Init+0x140>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	4313      	orrs	r3, r2
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	4b2b      	ldr	r3, [pc, #172]	; (800af5c <HAL_TIM_Encoder_Init+0x144>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4b2a      	ldr	r3, [pc, #168]	; (800af60 <HAL_TIM_Encoder_Init+0x148>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	4313      	orrs	r3, r2
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	011a      	lsls	r2, r3, #4
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	031b      	lsls	r3, r3, #12
 800aed8:	4313      	orrs	r3, r2
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aee6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aeee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	4313      	orrs	r3, r2
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	fffebff8 	.word	0xfffebff8
 800af58:	fffffcfc 	.word	0xfffffcfc
 800af5c:	fffff3f3 	.word	0xfffff3f3
 800af60:	ffff0f0f 	.word	0xffff0f0f

0800af64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d110      	bne.n	800afb6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d102      	bne.n	800afa0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800af9a:	7b7b      	ldrb	r3, [r7, #13]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d001      	beq.n	800afa4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e069      	b.n	800b078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2202      	movs	r2, #2
 800afb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb4:	e031      	b.n	800b01a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d110      	bne.n	800afde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d102      	bne.n	800afc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afc2:	7b3b      	ldrb	r3, [r7, #12]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d001      	beq.n	800afcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e055      	b.n	800b078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afdc:	e01d      	b.n	800b01a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d108      	bne.n	800aff6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d105      	bne.n	800aff6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afea:	7b7b      	ldrb	r3, [r7, #13]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d102      	bne.n	800aff6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aff0:	7b3b      	ldrb	r3, [r7, #12]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d001      	beq.n	800affa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e03e      	b.n	800b078 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2202      	movs	r2, #2
 800affe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2202      	movs	r2, #2
 800b006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2202      	movs	r2, #2
 800b00e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2202      	movs	r2, #2
 800b016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_TIM_Encoder_Start+0xc4>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b04      	cmp	r3, #4
 800b024:	d008      	beq.n	800b038 <HAL_TIM_Encoder_Start+0xd4>
 800b026:	e00f      	b.n	800b048 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2201      	movs	r2, #1
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f000 ff93 	bl	800bf5c <TIM_CCxChannelCmd>
      break;
 800b036:	e016      	b.n	800b066 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2201      	movs	r2, #1
 800b03e:	2104      	movs	r1, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f000 ff8b 	bl	800bf5c <TIM_CCxChannelCmd>
      break;
 800b046:	e00e      	b.n	800b066 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2201      	movs	r2, #1
 800b04e:	2100      	movs	r1, #0
 800b050:	4618      	mov	r0, r3
 800b052:	f000 ff83 	bl	800bf5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2201      	movs	r2, #1
 800b05c:	2104      	movs	r1, #4
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 ff7c 	bl	800bf5c <TIM_CCxChannelCmd>
      break;
 800b064:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f042 0201 	orr.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b02      	cmp	r3, #2
 800b094:	d122      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d11b      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f06f 0202 	mvn.w	r2, #2
 800b0ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	f003 0303 	and.w	r3, r3, #3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fb12 	bl	800b6ec <HAL_TIM_IC_CaptureCallback>
 800b0c8:	e005      	b.n	800b0d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fb04 	bl	800b6d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fb15 	bl	800b700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f003 0304 	and.w	r3, r3, #4
 800b0e6:	2b04      	cmp	r3, #4
 800b0e8:	d122      	bne.n	800b130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b04      	cmp	r3, #4
 800b0f6:	d11b      	bne.n	800b130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f06f 0204 	mvn.w	r2, #4
 800b100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2202      	movs	r2, #2
 800b106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fae8 	bl	800b6ec <HAL_TIM_IC_CaptureCallback>
 800b11c:	e005      	b.n	800b12a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fada 	bl	800b6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 faeb 	bl	800b700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b08      	cmp	r3, #8
 800b13c:	d122      	bne.n	800b184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0308 	and.w	r3, r3, #8
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0208 	mvn.w	r2, #8
 800b154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2204      	movs	r2, #4
 800b15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fabe 	bl	800b6ec <HAL_TIM_IC_CaptureCallback>
 800b170:	e005      	b.n	800b17e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fab0 	bl	800b6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fac1 	bl	800b700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0310 	and.w	r3, r3, #16
 800b18e:	2b10      	cmp	r3, #16
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b10      	cmp	r3, #16
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0210 	mvn.w	r2, #16
 800b1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa94 	bl	800b6ec <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa86 	bl	800b6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa97 	bl	800b700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d10e      	bne.n	800b204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d107      	bne.n	800b204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0201 	mvn.w	r2, #1
 800b1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7f6 f8ce 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20e:	2b80      	cmp	r3, #128	; 0x80
 800b210:	d10e      	bne.n	800b230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21c:	2b80      	cmp	r3, #128	; 0x80
 800b21e:	d107      	bne.n	800b230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f802 	bl	800c234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b23e:	d10e      	bne.n	800b25e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d107      	bne.n	800b25e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fff5 	bl	800c248 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b268:	2b40      	cmp	r3, #64	; 0x40
 800b26a:	d10e      	bne.n	800b28a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b276:	2b40      	cmp	r3, #64	; 0x40
 800b278:	d107      	bne.n	800b28a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa45 	bl	800b714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	f003 0320 	and.w	r3, r3, #32
 800b294:	2b20      	cmp	r3, #32
 800b296:	d10e      	bne.n	800b2b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b20      	cmp	r3, #32
 800b2a4:	d107      	bne.n	800b2b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f06f 0220 	mvn.w	r2, #32
 800b2ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 ffb5 	bl	800c220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2b6:	bf00      	nop
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d101      	bne.n	800b2de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2da:	2302      	movs	r3, #2
 800b2dc:	e0ff      	b.n	800b4de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b14      	cmp	r3, #20
 800b2ea:	f200 80f0 	bhi.w	800b4ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b349 	.word	0x0800b349
 800b2f8:	0800b4cf 	.word	0x0800b4cf
 800b2fc:	0800b4cf 	.word	0x0800b4cf
 800b300:	0800b4cf 	.word	0x0800b4cf
 800b304:	0800b389 	.word	0x0800b389
 800b308:	0800b4cf 	.word	0x0800b4cf
 800b30c:	0800b4cf 	.word	0x0800b4cf
 800b310:	0800b4cf 	.word	0x0800b4cf
 800b314:	0800b3cb 	.word	0x0800b3cb
 800b318:	0800b4cf 	.word	0x0800b4cf
 800b31c:	0800b4cf 	.word	0x0800b4cf
 800b320:	0800b4cf 	.word	0x0800b4cf
 800b324:	0800b40b 	.word	0x0800b40b
 800b328:	0800b4cf 	.word	0x0800b4cf
 800b32c:	0800b4cf 	.word	0x0800b4cf
 800b330:	0800b4cf 	.word	0x0800b4cf
 800b334:	0800b44d 	.word	0x0800b44d
 800b338:	0800b4cf 	.word	0x0800b4cf
 800b33c:	0800b4cf 	.word	0x0800b4cf
 800b340:	0800b4cf 	.word	0x0800b4cf
 800b344:	0800b48d 	.word	0x0800b48d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fa90 	bl	800b874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f042 0208 	orr.w	r2, r2, #8
 800b362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699a      	ldr	r2, [r3, #24]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0204 	bic.w	r2, r2, #4
 800b372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6999      	ldr	r1, [r3, #24]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	691a      	ldr	r2, [r3, #16]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	619a      	str	r2, [r3, #24]
      break;
 800b386:	e0a5      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fb00 	bl	800b994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699a      	ldr	r2, [r3, #24]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	699a      	ldr	r2, [r3, #24]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6999      	ldr	r1, [r3, #24]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	021a      	lsls	r2, r3, #8
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	619a      	str	r2, [r3, #24]
      break;
 800b3c8:	e084      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fb69 	bl	800baa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	69da      	ldr	r2, [r3, #28]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f042 0208 	orr.w	r2, r2, #8
 800b3e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	69da      	ldr	r2, [r3, #28]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f022 0204 	bic.w	r2, r2, #4
 800b3f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69d9      	ldr	r1, [r3, #28]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	691a      	ldr	r2, [r3, #16]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	61da      	str	r2, [r3, #28]
      break;
 800b408:	e064      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fbd1 	bl	800bbb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	69da      	ldr	r2, [r3, #28]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	69d9      	ldr	r1, [r3, #28]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	021a      	lsls	r2, r3, #8
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	61da      	str	r2, [r3, #28]
      break;
 800b44a:	e043      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68b9      	ldr	r1, [r7, #8]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fc1a 	bl	800bc8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0208 	orr.w	r2, r2, #8
 800b466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0204 	bic.w	r2, r2, #4
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	691a      	ldr	r2, [r3, #16]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b48a:	e023      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fc5e 	bl	800bd54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	021a      	lsls	r2, r3, #8
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b4cc:	e002      	b.n	800b4d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop

0800b4e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_TIM_ConfigClockSource+0x1c>
 800b500:	2302      	movs	r3, #2
 800b502:	e0dc      	b.n	800b6be <HAL_TIM_ConfigClockSource+0x1d6>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2202      	movs	r2, #2
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	4b6a      	ldr	r3, [pc, #424]	; (800b6c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b520:	4013      	ands	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b52a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a64      	ldr	r2, [pc, #400]	; (800b6cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	f000 80a9 	beq.w	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b540:	4a62      	ldr	r2, [pc, #392]	; (800b6cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b542:	4293      	cmp	r3, r2
 800b544:	f200 80ae 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b548:	4a61      	ldr	r2, [pc, #388]	; (800b6d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	f000 80a1 	beq.w	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b550:	4a5f      	ldr	r2, [pc, #380]	; (800b6d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b552:	4293      	cmp	r3, r2
 800b554:	f200 80a6 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b558:	4a5e      	ldr	r2, [pc, #376]	; (800b6d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	f000 8099 	beq.w	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b560:	4a5c      	ldr	r2, [pc, #368]	; (800b6d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f200 809e 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b56c:	f000 8091 	beq.w	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b574:	f200 8096 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b57c:	f000 8089 	beq.w	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b584:	f200 808e 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b58c:	d03e      	beq.n	800b60c <HAL_TIM_ConfigClockSource+0x124>
 800b58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b592:	f200 8087 	bhi.w	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b59a:	f000 8086 	beq.w	800b6aa <HAL_TIM_ConfigClockSource+0x1c2>
 800b59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a2:	d87f      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5a4:	2b70      	cmp	r3, #112	; 0x70
 800b5a6:	d01a      	beq.n	800b5de <HAL_TIM_ConfigClockSource+0xf6>
 800b5a8:	2b70      	cmp	r3, #112	; 0x70
 800b5aa:	d87b      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5ac:	2b60      	cmp	r3, #96	; 0x60
 800b5ae:	d050      	beq.n	800b652 <HAL_TIM_ConfigClockSource+0x16a>
 800b5b0:	2b60      	cmp	r3, #96	; 0x60
 800b5b2:	d877      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5b4:	2b50      	cmp	r3, #80	; 0x50
 800b5b6:	d03c      	beq.n	800b632 <HAL_TIM_ConfigClockSource+0x14a>
 800b5b8:	2b50      	cmp	r3, #80	; 0x50
 800b5ba:	d873      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5bc:	2b40      	cmp	r3, #64	; 0x40
 800b5be:	d058      	beq.n	800b672 <HAL_TIM_ConfigClockSource+0x18a>
 800b5c0:	2b40      	cmp	r3, #64	; 0x40
 800b5c2:	d86f      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5c4:	2b30      	cmp	r3, #48	; 0x30
 800b5c6:	d064      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5c8:	2b30      	cmp	r3, #48	; 0x30
 800b5ca:	d86b      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5cc:	2b20      	cmp	r3, #32
 800b5ce:	d060      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d867      	bhi.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d05c      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5d8:	2b10      	cmp	r3, #16
 800b5da:	d05a      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5dc:	e062      	b.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6899      	ldr	r1, [r3, #8]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f000 fc95 	bl	800bf1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	609a      	str	r2, [r3, #8]
      break;
 800b60a:	e04f      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	6899      	ldr	r1, [r3, #8]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f000 fc7e 	bl	800bf1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b62e:	609a      	str	r2, [r3, #8]
      break;
 800b630:	e03c      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	6859      	ldr	r1, [r3, #4]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	461a      	mov	r2, r3
 800b640:	f000 fbee 	bl	800be20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2150      	movs	r1, #80	; 0x50
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fc48 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800b650:	e02c      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6859      	ldr	r1, [r3, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	f000 fc0d 	bl	800be7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2160      	movs	r1, #96	; 0x60
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fc38 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800b670:	e01c      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6859      	ldr	r1, [r3, #4]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	461a      	mov	r2, r3
 800b680:	f000 fbce 	bl	800be20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2140      	movs	r1, #64	; 0x40
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fc28 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800b690:	e00c      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f000 fc1f 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800b6a2:	e003      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a8:	e000      	b.n	800b6ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b6aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	ffceff88 	.word	0xffceff88
 800b6cc:	00100040 	.word	0x00100040
 800b6d0:	00100030 	.word	0x00100030
 800b6d4:	00100020 	.word	0x00100020

0800b6d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a44      	ldr	r2, [pc, #272]	; (800b84c <TIM_Base_SetConfig+0x124>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d013      	beq.n	800b768 <TIM_Base_SetConfig+0x40>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b746:	d00f      	beq.n	800b768 <TIM_Base_SetConfig+0x40>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a41      	ldr	r2, [pc, #260]	; (800b850 <TIM_Base_SetConfig+0x128>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00b      	beq.n	800b768 <TIM_Base_SetConfig+0x40>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a40      	ldr	r2, [pc, #256]	; (800b854 <TIM_Base_SetConfig+0x12c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d007      	beq.n	800b768 <TIM_Base_SetConfig+0x40>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a3f      	ldr	r2, [pc, #252]	; (800b858 <TIM_Base_SetConfig+0x130>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d003      	beq.n	800b768 <TIM_Base_SetConfig+0x40>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a3e      	ldr	r2, [pc, #248]	; (800b85c <TIM_Base_SetConfig+0x134>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d108      	bne.n	800b77a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a33      	ldr	r2, [pc, #204]	; (800b84c <TIM_Base_SetConfig+0x124>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d027      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b788:	d023      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a30      	ldr	r2, [pc, #192]	; (800b850 <TIM_Base_SetConfig+0x128>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d01f      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a2f      	ldr	r2, [pc, #188]	; (800b854 <TIM_Base_SetConfig+0x12c>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d01b      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a2e      	ldr	r2, [pc, #184]	; (800b858 <TIM_Base_SetConfig+0x130>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d017      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a2d      	ldr	r2, [pc, #180]	; (800b85c <TIM_Base_SetConfig+0x134>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d013      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a2c      	ldr	r2, [pc, #176]	; (800b860 <TIM_Base_SetConfig+0x138>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d00f      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a2b      	ldr	r2, [pc, #172]	; (800b864 <TIM_Base_SetConfig+0x13c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d00b      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a2a      	ldr	r2, [pc, #168]	; (800b868 <TIM_Base_SetConfig+0x140>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d007      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a29      	ldr	r2, [pc, #164]	; (800b86c <TIM_Base_SetConfig+0x144>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d003      	beq.n	800b7d2 <TIM_Base_SetConfig+0xaa>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a28      	ldr	r2, [pc, #160]	; (800b870 <TIM_Base_SetConfig+0x148>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d108      	bne.n	800b7e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	689a      	ldr	r2, [r3, #8]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a10      	ldr	r2, [pc, #64]	; (800b84c <TIM_Base_SetConfig+0x124>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00f      	beq.n	800b830 <TIM_Base_SetConfig+0x108>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a12      	ldr	r2, [pc, #72]	; (800b85c <TIM_Base_SetConfig+0x134>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00b      	beq.n	800b830 <TIM_Base_SetConfig+0x108>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a11      	ldr	r2, [pc, #68]	; (800b860 <TIM_Base_SetConfig+0x138>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d007      	beq.n	800b830 <TIM_Base_SetConfig+0x108>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a10      	ldr	r2, [pc, #64]	; (800b864 <TIM_Base_SetConfig+0x13c>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d003      	beq.n	800b830 <TIM_Base_SetConfig+0x108>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a0f      	ldr	r2, [pc, #60]	; (800b868 <TIM_Base_SetConfig+0x140>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d103      	bne.n	800b838 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	691a      	ldr	r2, [r3, #16]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	615a      	str	r2, [r3, #20]
}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	40010000 	.word	0x40010000
 800b850:	40000400 	.word	0x40000400
 800b854:	40000800 	.word	0x40000800
 800b858:	40000c00 	.word	0x40000c00
 800b85c:	40010400 	.word	0x40010400
 800b860:	40014000 	.word	0x40014000
 800b864:	40014400 	.word	0x40014400
 800b868:	40014800 	.word	0x40014800
 800b86c:	4000e000 	.word	0x4000e000
 800b870:	4000e400 	.word	0x4000e400

0800b874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	f023 0201 	bic.w	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4b37      	ldr	r3, [pc, #220]	; (800b97c <TIM_OC1_SetConfig+0x108>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f023 0302 	bic.w	r3, r3, #2
 800b8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a2d      	ldr	r2, [pc, #180]	; (800b980 <TIM_OC1_SetConfig+0x10c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00f      	beq.n	800b8f0 <TIM_OC1_SetConfig+0x7c>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a2c      	ldr	r2, [pc, #176]	; (800b984 <TIM_OC1_SetConfig+0x110>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d00b      	beq.n	800b8f0 <TIM_OC1_SetConfig+0x7c>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a2b      	ldr	r2, [pc, #172]	; (800b988 <TIM_OC1_SetConfig+0x114>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d007      	beq.n	800b8f0 <TIM_OC1_SetConfig+0x7c>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a2a      	ldr	r2, [pc, #168]	; (800b98c <TIM_OC1_SetConfig+0x118>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d003      	beq.n	800b8f0 <TIM_OC1_SetConfig+0x7c>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a29      	ldr	r2, [pc, #164]	; (800b990 <TIM_OC1_SetConfig+0x11c>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d10c      	bne.n	800b90a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f023 0308 	bic.w	r3, r3, #8
 800b8f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f023 0304 	bic.w	r3, r3, #4
 800b908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a1c      	ldr	r2, [pc, #112]	; (800b980 <TIM_OC1_SetConfig+0x10c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d00f      	beq.n	800b932 <TIM_OC1_SetConfig+0xbe>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a1b      	ldr	r2, [pc, #108]	; (800b984 <TIM_OC1_SetConfig+0x110>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00b      	beq.n	800b932 <TIM_OC1_SetConfig+0xbe>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a1a      	ldr	r2, [pc, #104]	; (800b988 <TIM_OC1_SetConfig+0x114>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d007      	beq.n	800b932 <TIM_OC1_SetConfig+0xbe>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a19      	ldr	r2, [pc, #100]	; (800b98c <TIM_OC1_SetConfig+0x118>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d003      	beq.n	800b932 <TIM_OC1_SetConfig+0xbe>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a18      	ldr	r2, [pc, #96]	; (800b990 <TIM_OC1_SetConfig+0x11c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d111      	bne.n	800b956 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	4313      	orrs	r3, r2
 800b954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	621a      	str	r2, [r3, #32]
}
 800b970:	bf00      	nop
 800b972:	371c      	adds	r7, #28
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	fffeff8f 	.word	0xfffeff8f
 800b980:	40010000 	.word	0x40010000
 800b984:	40010400 	.word	0x40010400
 800b988:	40014000 	.word	0x40014000
 800b98c:	40014400 	.word	0x40014400
 800b990:	40014800 	.word	0x40014800

0800b994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	f023 0210 	bic.w	r2, r3, #16
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4b34      	ldr	r3, [pc, #208]	; (800ba90 <TIM_OC2_SetConfig+0xfc>)
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f023 0320 	bic.w	r3, r3, #32
 800b9de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <TIM_OC2_SetConfig+0x100>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <TIM_OC2_SetConfig+0x68>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a28      	ldr	r2, [pc, #160]	; (800ba98 <TIM_OC2_SetConfig+0x104>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d10d      	bne.n	800ba18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	; (800ba94 <TIM_OC2_SetConfig+0x100>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d00f      	beq.n	800ba40 <TIM_OC2_SetConfig+0xac>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a1d      	ldr	r2, [pc, #116]	; (800ba98 <TIM_OC2_SetConfig+0x104>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00b      	beq.n	800ba40 <TIM_OC2_SetConfig+0xac>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a1c      	ldr	r2, [pc, #112]	; (800ba9c <TIM_OC2_SetConfig+0x108>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d007      	beq.n	800ba40 <TIM_OC2_SetConfig+0xac>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <TIM_OC2_SetConfig+0x10c>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d003      	beq.n	800ba40 <TIM_OC2_SetConfig+0xac>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a1a      	ldr	r2, [pc, #104]	; (800baa4 <TIM_OC2_SetConfig+0x110>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d113      	bne.n	800ba68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	621a      	str	r2, [r3, #32]
}
 800ba82:	bf00      	nop
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	feff8fff 	.word	0xfeff8fff
 800ba94:	40010000 	.word	0x40010000
 800ba98:	40010400 	.word	0x40010400
 800ba9c:	40014000 	.word	0x40014000
 800baa0:	40014400 	.word	0x40014400
 800baa4:	40014800 	.word	0x40014800

0800baa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4b33      	ldr	r3, [pc, #204]	; (800bba0 <TIM_OC3_SetConfig+0xf8>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800baf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a28      	ldr	r2, [pc, #160]	; (800bba4 <TIM_OC3_SetConfig+0xfc>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d003      	beq.n	800bb0e <TIM_OC3_SetConfig+0x66>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a27      	ldr	r2, [pc, #156]	; (800bba8 <TIM_OC3_SetConfig+0x100>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d10d      	bne.n	800bb2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <TIM_OC3_SetConfig+0xfc>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00f      	beq.n	800bb52 <TIM_OC3_SetConfig+0xaa>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a1c      	ldr	r2, [pc, #112]	; (800bba8 <TIM_OC3_SetConfig+0x100>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00b      	beq.n	800bb52 <TIM_OC3_SetConfig+0xaa>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1b      	ldr	r2, [pc, #108]	; (800bbac <TIM_OC3_SetConfig+0x104>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d007      	beq.n	800bb52 <TIM_OC3_SetConfig+0xaa>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a1a      	ldr	r2, [pc, #104]	; (800bbb0 <TIM_OC3_SetConfig+0x108>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d003      	beq.n	800bb52 <TIM_OC3_SetConfig+0xaa>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a19      	ldr	r2, [pc, #100]	; (800bbb4 <TIM_OC3_SetConfig+0x10c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d113      	bne.n	800bb7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	621a      	str	r2, [r3, #32]
}
 800bb94:	bf00      	nop
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	fffeff8f 	.word	0xfffeff8f
 800bba4:	40010000 	.word	0x40010000
 800bba8:	40010400 	.word	0x40010400
 800bbac:	40014000 	.word	0x40014000
 800bbb0:	40014400 	.word	0x40014400
 800bbb4:	40014800 	.word	0x40014800

0800bbb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <TIM_OC4_SetConfig+0xbc>)
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	021b      	lsls	r3, r3, #8
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	031b      	lsls	r3, r3, #12
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a19      	ldr	r2, [pc, #100]	; (800bc78 <TIM_OC4_SetConfig+0xc0>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d00f      	beq.n	800bc38 <TIM_OC4_SetConfig+0x80>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a18      	ldr	r2, [pc, #96]	; (800bc7c <TIM_OC4_SetConfig+0xc4>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00b      	beq.n	800bc38 <TIM_OC4_SetConfig+0x80>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a17      	ldr	r2, [pc, #92]	; (800bc80 <TIM_OC4_SetConfig+0xc8>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d007      	beq.n	800bc38 <TIM_OC4_SetConfig+0x80>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a16      	ldr	r2, [pc, #88]	; (800bc84 <TIM_OC4_SetConfig+0xcc>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d003      	beq.n	800bc38 <TIM_OC4_SetConfig+0x80>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a15      	ldr	r2, [pc, #84]	; (800bc88 <TIM_OC4_SetConfig+0xd0>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d109      	bne.n	800bc4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	019b      	lsls	r3, r3, #6
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	621a      	str	r2, [r3, #32]
}
 800bc66:	bf00      	nop
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	feff8fff 	.word	0xfeff8fff
 800bc78:	40010000 	.word	0x40010000
 800bc7c:	40010400 	.word	0x40010400
 800bc80:	40014000 	.word	0x40014000
 800bc84:	40014400 	.word	0x40014400
 800bc88:	40014800 	.word	0x40014800

0800bc8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	4b21      	ldr	r3, [pc, #132]	; (800bd3c <TIM_OC5_SetConfig+0xb0>)
 800bcb8:	4013      	ands	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	041b      	lsls	r3, r3, #16
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a18      	ldr	r2, [pc, #96]	; (800bd40 <TIM_OC5_SetConfig+0xb4>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d00f      	beq.n	800bd02 <TIM_OC5_SetConfig+0x76>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a17      	ldr	r2, [pc, #92]	; (800bd44 <TIM_OC5_SetConfig+0xb8>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d00b      	beq.n	800bd02 <TIM_OC5_SetConfig+0x76>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <TIM_OC5_SetConfig+0xbc>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d007      	beq.n	800bd02 <TIM_OC5_SetConfig+0x76>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <TIM_OC5_SetConfig+0xc0>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d003      	beq.n	800bd02 <TIM_OC5_SetConfig+0x76>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a14      	ldr	r2, [pc, #80]	; (800bd50 <TIM_OC5_SetConfig+0xc4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d109      	bne.n	800bd16 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	621a      	str	r2, [r3, #32]
}
 800bd30:	bf00      	nop
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	fffeff8f 	.word	0xfffeff8f
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40010400 	.word	0x40010400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	40014400 	.word	0x40014400
 800bd50:	40014800 	.word	0x40014800

0800bd54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4b22      	ldr	r3, [pc, #136]	; (800be08 <TIM_OC6_SetConfig+0xb4>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	051b      	lsls	r3, r3, #20
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a19      	ldr	r2, [pc, #100]	; (800be0c <TIM_OC6_SetConfig+0xb8>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d00f      	beq.n	800bdcc <TIM_OC6_SetConfig+0x78>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a18      	ldr	r2, [pc, #96]	; (800be10 <TIM_OC6_SetConfig+0xbc>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00b      	beq.n	800bdcc <TIM_OC6_SetConfig+0x78>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a17      	ldr	r2, [pc, #92]	; (800be14 <TIM_OC6_SetConfig+0xc0>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d007      	beq.n	800bdcc <TIM_OC6_SetConfig+0x78>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a16      	ldr	r2, [pc, #88]	; (800be18 <TIM_OC6_SetConfig+0xc4>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d003      	beq.n	800bdcc <TIM_OC6_SetConfig+0x78>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a15      	ldr	r2, [pc, #84]	; (800be1c <TIM_OC6_SetConfig+0xc8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d109      	bne.n	800bde0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bdd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	029b      	lsls	r3, r3, #10
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	feff8fff 	.word	0xfeff8fff
 800be0c:	40010000 	.word	0x40010000
 800be10:	40010400 	.word	0x40010400
 800be14:	40014000 	.word	0x40014000
 800be18:	40014400 	.word	0x40014400
 800be1c:	40014800 	.word	0x40014800

0800be20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	f023 0201 	bic.w	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4313      	orrs	r3, r2
 800be54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f023 030a 	bic.w	r3, r3, #10
 800be5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	4313      	orrs	r3, r2
 800be64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	621a      	str	r2, [r3, #32]
}
 800be72:	bf00      	nop
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be7e:	b480      	push	{r7}
 800be80:	b087      	sub	sp, #28
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	f023 0210 	bic.w	r2, r3, #16
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	031b      	lsls	r3, r3, #12
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800beba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	621a      	str	r2, [r3, #32]
}
 800bed2:	bf00      	nop
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <TIM_ITRx_SetConfig+0x38>)
 800bef4:	4013      	ands	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	f043 0307 	orr.w	r3, r3, #7
 800bf02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	609a      	str	r2, [r3, #8]
}
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	ffcfff8f 	.word	0xffcfff8f

0800bf1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	021a      	lsls	r2, r3, #8
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	609a      	str	r2, [r3, #8]
}
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	2201      	movs	r2, #1
 800bf70:	fa02 f303 	lsl.w	r3, r2, r3
 800bf74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	401a      	ands	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	fa01 f303 	lsl.w	r3, r1, r3
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d101      	bne.n	800bfc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e077      	b.n	800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a35      	ldr	r2, [pc, #212]	; (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d004      	beq.n	800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a34      	ldr	r2, [pc, #208]	; (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d108      	bne.n	800c006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bffa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c00c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4313      	orrs	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a25      	ldr	r2, [pc, #148]	; (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d02c      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c032:	d027      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a22      	ldr	r2, [pc, #136]	; (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d022      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a21      	ldr	r2, [pc, #132]	; (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d01d      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a1f      	ldr	r2, [pc, #124]	; (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d018      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a1a      	ldr	r2, [pc, #104]	; (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d013      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00e      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a1a      	ldr	r2, [pc, #104]	; (800c0d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d009      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d004      	beq.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a17      	ldr	r2, [pc, #92]	; (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d10c      	bne.n	800c09e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c08a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	4313      	orrs	r3, r2
 800c094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	40010000 	.word	0x40010000
 800c0c0:	40010400 	.word	0x40010400
 800c0c4:	40000400 	.word	0x40000400
 800c0c8:	40000800 	.word	0x40000800
 800c0cc:	40000c00 	.word	0x40000c00
 800c0d0:	40001800 	.word	0x40001800
 800c0d4:	40014000 	.word	0x40014000
 800c0d8:	4000e000 	.word	0x4000e000
 800c0dc:	4000e400 	.word	0x4000e400

0800c0e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d101      	bne.n	800c0fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e087      	b.n	800c20c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	4313      	orrs	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4313      	orrs	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	4313      	orrs	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	041b      	lsls	r3, r3, #16
 800c172:	4313      	orrs	r3, r2
 800c174:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a27      	ldr	r2, [pc, #156]	; (800c218 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d004      	beq.n	800c18a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a25      	ldr	r2, [pc, #148]	; (800c21c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d106      	bne.n	800c198 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	4313      	orrs	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a1e      	ldr	r2, [pc, #120]	; (800c218 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d004      	beq.n	800c1ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a1d      	ldr	r2, [pc, #116]	; (800c21c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d126      	bne.n	800c1fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b6:	051b      	lsls	r3, r3, #20
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a0e      	ldr	r2, [pc, #56]	; (800c218 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d004      	beq.n	800c1ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a0d      	ldr	r2, [pc, #52]	; (800c21c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d106      	bne.n	800c1fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	40010000 	.word	0x40010000
 800c21c:	40010400 	.word	0x40010400

0800c220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e042      	b.n	800c2f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7f8 f9c1 	bl	8004608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2224      	movs	r2, #36	; 0x24
 800c28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f022 0201 	bic.w	r2, r2, #1
 800c29c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fd18 	bl	800ccd4 <UART_SetConfig>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d101      	bne.n	800c2ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e022      	b.n	800c2f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 fb78 	bl	800d9ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0201 	orr.w	r2, r2, #1
 800c2ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 fbff 	bl	800daf0 <UART_CheckIdleState>
 800c2f2:	4603      	mov	r3, r0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e02e      	b.n	800c36c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2224      	movs	r2, #36	; 0x24
 800c312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f022 0201 	bic.w	r2, r2, #1
 800c324:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2200      	movs	r2, #0
 800c32c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2200      	movs	r2, #0
 800c334:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7f8 fa4a 	bl	80047d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08a      	sub	sp, #40	; 0x28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d17a      	bne.n	800c482 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <HAL_UART_Transmit_DMA+0x24>
 800c392:	88fb      	ldrh	r3, [r7, #6]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	e073      	b.n	800c484 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_UART_Transmit_DMA+0x36>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e06c      	b.n	800c484 <HAL_UART_Transmit_DMA+0x110>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	88fa      	ldrh	r2, [r7, #6]
 800c3bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	88fa      	ldrh	r2, [r7, #6]
 800c3c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2221      	movs	r2, #33	; 0x21
 800c3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d02c      	beq.n	800c43a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3e4:	4a29      	ldr	r2, [pc, #164]	; (800c48c <HAL_UART_Transmit_DMA+0x118>)
 800c3e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3ec:	4a28      	ldr	r2, [pc, #160]	; (800c490 <HAL_UART_Transmit_DMA+0x11c>)
 800c3ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3f4:	4a27      	ldr	r2, [pc, #156]	; (800c494 <HAL_UART_Transmit_DMA+0x120>)
 800c3f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c408:	4619      	mov	r1, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3328      	adds	r3, #40	; 0x28
 800c410:	461a      	mov	r2, r3
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	f7f9 fa56 	bl	80058c4 <HAL_DMA_Start_IT>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00d      	beq.n	800c43a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2210      	movs	r2, #16
 800c422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2220      	movs	r2, #32
 800c432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e024      	b.n	800c484 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2240      	movs	r2, #64	; 0x40
 800c440:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3308      	adds	r3, #8
 800c450:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	613b      	str	r3, [r7, #16]
   return(result);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3308      	adds	r3, #8
 800c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46a:	623a      	str	r2, [r7, #32]
 800c46c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	69f9      	ldr	r1, [r7, #28]
 800c470:	6a3a      	ldr	r2, [r7, #32]
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	61bb      	str	r3, [r7, #24]
   return(result);
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e5      	bne.n	800c44a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	e000      	b.n	800c484 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c482:	2302      	movs	r3, #2
  }
}
 800c484:	4618      	mov	r0, r3
 800c486:	3728      	adds	r7, #40	; 0x28
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	0800dfb9 	.word	0x0800dfb9
 800c490:	0800e04f 	.word	0x0800e04f
 800c494:	0800e1c5 	.word	0x0800e1c5

0800c498 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	; 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d142      	bne.n	800c536 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <HAL_UART_Receive_DMA+0x24>
 800c4b6:	88fb      	ldrh	r3, [r7, #6]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e03b      	b.n	800c538 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d101      	bne.n	800c4ce <HAL_UART_Receive_DMA+0x36>
 800c4ca:	2302      	movs	r3, #2
 800c4cc:	e034      	b.n	800c538 <HAL_UART_Receive_DMA+0xa0>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a17      	ldr	r2, [pc, #92]	; (800c540 <HAL_UART_Receive_DMA+0xa8>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d01f      	beq.n	800c526 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d018      	beq.n	800c526 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	613b      	str	r3, [r7, #16]
   return(result);
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c508:	627b      	str	r3, [r7, #36]	; 0x24
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	623b      	str	r3, [r7, #32]
 800c514:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	69f9      	ldr	r1, [r7, #28]
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e6      	bne.n	800c4f4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c526:	88fb      	ldrh	r3, [r7, #6]
 800c528:	461a      	mov	r2, r3
 800c52a:	68b9      	ldr	r1, [r7, #8]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f001 fbf3 	bl	800dd18 <UART_Start_Receive_DMA>
 800c532:	4603      	mov	r3, r0
 800c534:	e000      	b.n	800c538 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c536:	2302      	movs	r3, #2
  }
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3728      	adds	r7, #40	; 0x28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	58000c00 	.word	0x58000c00

0800c544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b0ba      	sub	sp, #232	; 0xe8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c56a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c56e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c572:	4013      	ands	r3, r2
 800c574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d11b      	bne.n	800c5b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c584:	f003 0320 	and.w	r3, r3, #32
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d015      	beq.n	800c5b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c590:	f003 0320 	and.w	r3, r3, #32
 800c594:	2b00      	cmp	r3, #0
 800c596:	d105      	bne.n	800c5a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c59c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d009      	beq.n	800c5b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 835a 	beq.w	800cc62 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	4798      	blx	r3
      }
      return;
 800c5b6:	e354      	b.n	800cc62 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c5b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 811f 	beq.w	800c800 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c5c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c5c6:	4b8b      	ldr	r3, [pc, #556]	; (800c7f4 <HAL_UART_IRQHandler+0x2b0>)
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c5ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5d2:	4b89      	ldr	r3, [pc, #548]	; (800c7f8 <HAL_UART_IRQHandler+0x2b4>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f000 8112 	beq.w	800c800 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d011      	beq.n	800c60c <HAL_UART_IRQHandler+0xc8>
 800c5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c602:	f043 0201 	orr.w	r2, r3, #1
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c610:	f003 0302 	and.w	r3, r3, #2
 800c614:	2b00      	cmp	r3, #0
 800c616:	d011      	beq.n	800c63c <HAL_UART_IRQHandler+0xf8>
 800c618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2202      	movs	r2, #2
 800c62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c632:	f043 0204 	orr.w	r2, r3, #4
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d011      	beq.n	800c66c <HAL_UART_IRQHandler+0x128>
 800c648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2204      	movs	r2, #4
 800c65a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c662:	f043 0202 	orr.w	r2, r3, #2
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c670:	f003 0308 	and.w	r3, r3, #8
 800c674:	2b00      	cmp	r3, #0
 800c676:	d017      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c67c:	f003 0320 	and.w	r3, r3, #32
 800c680:	2b00      	cmp	r3, #0
 800c682:	d105      	bne.n	800c690 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c688:	4b5a      	ldr	r3, [pc, #360]	; (800c7f4 <HAL_UART_IRQHandler+0x2b0>)
 800c68a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00b      	beq.n	800c6a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2208      	movs	r2, #8
 800c696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69e:	f043 0208 	orr.w	r2, r3, #8
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d012      	beq.n	800c6da <HAL_UART_IRQHandler+0x196>
 800c6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00c      	beq.n	800c6da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6d0:	f043 0220 	orr.w	r2, r3, #32
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 82c0 	beq.w	800cc66 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ea:	f003 0320 	and.w	r3, r3, #32
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d013      	beq.n	800c71a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c6f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d105      	bne.n	800c70a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d007      	beq.n	800c71a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c72e:	2b40      	cmp	r3, #64	; 0x40
 800c730:	d005      	beq.n	800c73e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d04f      	beq.n	800c7de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fbd4 	bl	800deec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74e:	2b40      	cmp	r3, #64	; 0x40
 800c750:	d141      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3308      	adds	r3, #8
 800c77a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c77e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c78a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1d9      	bne.n	800c752 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d013      	beq.n	800c7ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7aa:	4a14      	ldr	r2, [pc, #80]	; (800c7fc <HAL_UART_IRQHandler+0x2b8>)
 800c7ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f9 fe0e 	bl	80063d4 <HAL_DMA_Abort_IT>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d017      	beq.n	800c7ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7cc:	e00f      	b.n	800c7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7f6 fe36 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7d4:	e00b      	b.n	800c7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7f6 fe32 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7dc:	e007      	b.n	800c7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7f6 fe2e 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c7ec:	e23b      	b.n	800cc66 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ee:	bf00      	nop
    return;
 800c7f0:	e239      	b.n	800cc66 <HAL_UART_IRQHandler+0x722>
 800c7f2:	bf00      	nop
 800c7f4:	10000001 	.word	0x10000001
 800c7f8:	04000120 	.word	0x04000120
 800c7fc:	0800e245 	.word	0x0800e245

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c804:	2b01      	cmp	r3, #1
 800c806:	f040 81ce 	bne.w	800cba6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 81c7 	beq.w	800cba6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c81c:	f003 0310 	and.w	r3, r3, #16
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 81c0 	beq.w	800cba6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2210      	movs	r2, #16
 800c82c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c838:	2b40      	cmp	r3, #64	; 0x40
 800c83a:	f040 813b 	bne.w	800cab4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a8b      	ldr	r2, [pc, #556]	; (800ca74 <HAL_UART_IRQHandler+0x530>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d059      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a89      	ldr	r2, [pc, #548]	; (800ca78 <HAL_UART_IRQHandler+0x534>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d053      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a87      	ldr	r2, [pc, #540]	; (800ca7c <HAL_UART_IRQHandler+0x538>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d04d      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a85      	ldr	r2, [pc, #532]	; (800ca80 <HAL_UART_IRQHandler+0x53c>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d047      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a83      	ldr	r2, [pc, #524]	; (800ca84 <HAL_UART_IRQHandler+0x540>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d041      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a81      	ldr	r2, [pc, #516]	; (800ca88 <HAL_UART_IRQHandler+0x544>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d03b      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a7f      	ldr	r2, [pc, #508]	; (800ca8c <HAL_UART_IRQHandler+0x548>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d035      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a7d      	ldr	r2, [pc, #500]	; (800ca90 <HAL_UART_IRQHandler+0x54c>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d02f      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a7b      	ldr	r2, [pc, #492]	; (800ca94 <HAL_UART_IRQHandler+0x550>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d029      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a79      	ldr	r2, [pc, #484]	; (800ca98 <HAL_UART_IRQHandler+0x554>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d023      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a77      	ldr	r2, [pc, #476]	; (800ca9c <HAL_UART_IRQHandler+0x558>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d01d      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a75      	ldr	r2, [pc, #468]	; (800caa0 <HAL_UART_IRQHandler+0x55c>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d017      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a73      	ldr	r2, [pc, #460]	; (800caa4 <HAL_UART_IRQHandler+0x560>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d011      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a71      	ldr	r2, [pc, #452]	; (800caa8 <HAL_UART_IRQHandler+0x564>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00b      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a6f      	ldr	r2, [pc, #444]	; (800caac <HAL_UART_IRQHandler+0x568>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d005      	beq.n	800c8fe <HAL_UART_IRQHandler+0x3ba>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a6d      	ldr	r2, [pc, #436]	; (800cab0 <HAL_UART_IRQHandler+0x56c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d105      	bne.n	800c90a <HAL_UART_IRQHandler+0x3c6>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	b29b      	uxth	r3, r3
 800c908:	e004      	b.n	800c914 <HAL_UART_IRQHandler+0x3d0>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	b29b      	uxth	r3, r3
 800c914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 81a4 	beq.w	800cc6a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c92c:	429a      	cmp	r2, r3
 800c92e:	f080 819c 	bcs.w	800cc6a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c938:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c946:	f000 8086 	beq.w	800ca56 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c95e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c978:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c980:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c984:	e841 2300 	strex	r3, r2, [r1]
 800c988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c98c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1da      	bne.n	800c94a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3308      	adds	r3, #8
 800c99a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c99e:	e853 3f00 	ldrex	r3, [r3]
 800c9a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9a6:	f023 0301 	bic.w	r3, r3, #1
 800c9aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9c4:	e841 2300 	strex	r3, r2, [r1]
 800c9c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1e1      	bne.n	800c994 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c9f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9fc:	e841 2300 	strex	r3, r2, [r1]
 800ca00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e3      	bne.n	800c9d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1e:	e853 3f00 	ldrex	r3, [r3]
 800ca22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca26:	f023 0310 	bic.w	r3, r3, #16
 800ca2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	461a      	mov	r2, r3
 800ca34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca40:	e841 2300 	strex	r3, r2, [r1]
 800ca44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e4      	bne.n	800ca16 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7f9 f9a1 	bl	8005d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f926 	bl	800ccbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca70:	e0fb      	b.n	800cc6a <HAL_UART_IRQHandler+0x726>
 800ca72:	bf00      	nop
 800ca74:	40020010 	.word	0x40020010
 800ca78:	40020028 	.word	0x40020028
 800ca7c:	40020040 	.word	0x40020040
 800ca80:	40020058 	.word	0x40020058
 800ca84:	40020070 	.word	0x40020070
 800ca88:	40020088 	.word	0x40020088
 800ca8c:	400200a0 	.word	0x400200a0
 800ca90:	400200b8 	.word	0x400200b8
 800ca94:	40020410 	.word	0x40020410
 800ca98:	40020428 	.word	0x40020428
 800ca9c:	40020440 	.word	0x40020440
 800caa0:	40020458 	.word	0x40020458
 800caa4:	40020470 	.word	0x40020470
 800caa8:	40020488 	.word	0x40020488
 800caac:	400204a0 	.word	0x400204a0
 800cab0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cace:	b29b      	uxth	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 80cc 	beq.w	800cc6e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 80c7 	beq.w	800cc6e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	e853 3f00 	ldrex	r3, [r3]
 800caec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800caee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	461a      	mov	r2, r3
 800cafe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb02:	647b      	str	r3, [r7, #68]	; 0x44
 800cb04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb0a:	e841 2300 	strex	r3, r2, [r1]
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1e4      	bne.n	800cae0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	e853 3f00 	ldrex	r3, [r3]
 800cb24:	623b      	str	r3, [r7, #32]
   return(result);
 800cb26:	6a3a      	ldr	r2, [r7, #32]
 800cb28:	4b54      	ldr	r3, [pc, #336]	; (800cc7c <HAL_UART_IRQHandler+0x738>)
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb3a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb42:	e841 2300 	strex	r3, r2, [r1]
 800cb46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1e3      	bne.n	800cb16 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2220      	movs	r2, #32
 800cb52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f023 0310 	bic.w	r3, r3, #16
 800cb76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb84:	61fb      	str	r3, [r7, #28]
 800cb86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	69b9      	ldr	r1, [r7, #24]
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	617b      	str	r3, [r7, #20]
   return(result);
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e4      	bne.n	800cb62 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f88c 	bl	800ccbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cba4:	e063      	b.n	800cc6e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00e      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x68c>
 800cbb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d008      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cbc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 fb7c 	bl	800e2c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbce:	e051      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d014      	beq.n	800cc06 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d105      	bne.n	800cbf4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cbe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d008      	beq.n	800cc06 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03a      	beq.n	800cc72 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	4798      	blx	r3
    }
    return;
 800cc04:	e035      	b.n	800cc72 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d009      	beq.n	800cc26 <HAL_UART_IRQHandler+0x6e2>
 800cc12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f001 fb26 	bl	800e270 <UART_EndTransmit_IT>
    return;
 800cc24:	e026      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d009      	beq.n	800cc46 <HAL_UART_IRQHandler+0x702>
 800cc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f001 fb55 	bl	800e2ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc44:	e016      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d010      	beq.n	800cc74 <HAL_UART_IRQHandler+0x730>
 800cc52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da0c      	bge.n	800cc74 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f001 fb3d 	bl	800e2da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc60:	e008      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
      return;
 800cc62:	bf00      	nop
 800cc64:	e006      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
    return;
 800cc66:	bf00      	nop
 800cc68:	e004      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
      return;
 800cc6a:	bf00      	nop
 800cc6c:	e002      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
      return;
 800cc6e:	bf00      	nop
 800cc70:	e000      	b.n	800cc74 <HAL_UART_IRQHandler+0x730>
    return;
 800cc72:	bf00      	nop
  }
}
 800cc74:	37e8      	adds	r7, #232	; 0xe8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	effffffe 	.word	0xeffffffe

0800cc80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccd8:	b092      	sub	sp, #72	; 0x48
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	689a      	ldr	r2, [r3, #8]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	431a      	orrs	r2, r3
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	431a      	orrs	r2, r3
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4bbe      	ldr	r3, [pc, #760]	; (800cffc <UART_SetConfig+0x328>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	6812      	ldr	r2, [r2, #0]
 800cd0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd0c:	430b      	orrs	r3, r1
 800cd0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	68da      	ldr	r2, [r3, #12]
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	430a      	orrs	r2, r1
 800cd24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4ab3      	ldr	r2, [pc, #716]	; (800d000 <UART_SetConfig+0x32c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d004      	beq.n	800cd40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689a      	ldr	r2, [r3, #8]
 800cd46:	4baf      	ldr	r3, [pc, #700]	; (800d004 <UART_SetConfig+0x330>)
 800cd48:	4013      	ands	r3, r2
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	6812      	ldr	r2, [r2, #0]
 800cd4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd50:	430b      	orrs	r3, r1
 800cd52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	f023 010f 	bic.w	r1, r3, #15
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4aa6      	ldr	r2, [pc, #664]	; (800d008 <UART_SetConfig+0x334>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d177      	bne.n	800ce64 <UART_SetConfig+0x190>
 800cd74:	4ba5      	ldr	r3, [pc, #660]	; (800d00c <UART_SetConfig+0x338>)
 800cd76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd7c:	2b28      	cmp	r3, #40	; 0x28
 800cd7e:	d86d      	bhi.n	800ce5c <UART_SetConfig+0x188>
 800cd80:	a201      	add	r2, pc, #4	; (adr r2, 800cd88 <UART_SetConfig+0xb4>)
 800cd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd86:	bf00      	nop
 800cd88:	0800ce2d 	.word	0x0800ce2d
 800cd8c:	0800ce5d 	.word	0x0800ce5d
 800cd90:	0800ce5d 	.word	0x0800ce5d
 800cd94:	0800ce5d 	.word	0x0800ce5d
 800cd98:	0800ce5d 	.word	0x0800ce5d
 800cd9c:	0800ce5d 	.word	0x0800ce5d
 800cda0:	0800ce5d 	.word	0x0800ce5d
 800cda4:	0800ce5d 	.word	0x0800ce5d
 800cda8:	0800ce35 	.word	0x0800ce35
 800cdac:	0800ce5d 	.word	0x0800ce5d
 800cdb0:	0800ce5d 	.word	0x0800ce5d
 800cdb4:	0800ce5d 	.word	0x0800ce5d
 800cdb8:	0800ce5d 	.word	0x0800ce5d
 800cdbc:	0800ce5d 	.word	0x0800ce5d
 800cdc0:	0800ce5d 	.word	0x0800ce5d
 800cdc4:	0800ce5d 	.word	0x0800ce5d
 800cdc8:	0800ce3d 	.word	0x0800ce3d
 800cdcc:	0800ce5d 	.word	0x0800ce5d
 800cdd0:	0800ce5d 	.word	0x0800ce5d
 800cdd4:	0800ce5d 	.word	0x0800ce5d
 800cdd8:	0800ce5d 	.word	0x0800ce5d
 800cddc:	0800ce5d 	.word	0x0800ce5d
 800cde0:	0800ce5d 	.word	0x0800ce5d
 800cde4:	0800ce5d 	.word	0x0800ce5d
 800cde8:	0800ce45 	.word	0x0800ce45
 800cdec:	0800ce5d 	.word	0x0800ce5d
 800cdf0:	0800ce5d 	.word	0x0800ce5d
 800cdf4:	0800ce5d 	.word	0x0800ce5d
 800cdf8:	0800ce5d 	.word	0x0800ce5d
 800cdfc:	0800ce5d 	.word	0x0800ce5d
 800ce00:	0800ce5d 	.word	0x0800ce5d
 800ce04:	0800ce5d 	.word	0x0800ce5d
 800ce08:	0800ce4d 	.word	0x0800ce4d
 800ce0c:	0800ce5d 	.word	0x0800ce5d
 800ce10:	0800ce5d 	.word	0x0800ce5d
 800ce14:	0800ce5d 	.word	0x0800ce5d
 800ce18:	0800ce5d 	.word	0x0800ce5d
 800ce1c:	0800ce5d 	.word	0x0800ce5d
 800ce20:	0800ce5d 	.word	0x0800ce5d
 800ce24:	0800ce5d 	.word	0x0800ce5d
 800ce28:	0800ce55 	.word	0x0800ce55
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce32:	e326      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce34:	2304      	movs	r3, #4
 800ce36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3a:	e322      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce3c:	2308      	movs	r3, #8
 800ce3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce42:	e31e      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce44:	2310      	movs	r3, #16
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4a:	e31a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce4c:	2320      	movs	r3, #32
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce52:	e316      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce54:	2340      	movs	r3, #64	; 0x40
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5a:	e312      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce5c:	2380      	movs	r3, #128	; 0x80
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce62:	e30e      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a69      	ldr	r2, [pc, #420]	; (800d010 <UART_SetConfig+0x33c>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d130      	bne.n	800ced0 <UART_SetConfig+0x1fc>
 800ce6e:	4b67      	ldr	r3, [pc, #412]	; (800d00c <UART_SetConfig+0x338>)
 800ce70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b05      	cmp	r3, #5
 800ce78:	d826      	bhi.n	800cec8 <UART_SetConfig+0x1f4>
 800ce7a:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <UART_SetConfig+0x1ac>)
 800ce7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce80:	0800ce99 	.word	0x0800ce99
 800ce84:	0800cea1 	.word	0x0800cea1
 800ce88:	0800cea9 	.word	0x0800cea9
 800ce8c:	0800ceb1 	.word	0x0800ceb1
 800ce90:	0800ceb9 	.word	0x0800ceb9
 800ce94:	0800cec1 	.word	0x0800cec1
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9e:	e2f0      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cea0:	2304      	movs	r3, #4
 800cea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cea6:	e2ec      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cea8:	2308      	movs	r3, #8
 800ceaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceae:	e2e8      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ceb0:	2310      	movs	r3, #16
 800ceb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceb6:	e2e4      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ceb8:	2320      	movs	r3, #32
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cebe:	e2e0      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cec0:	2340      	movs	r3, #64	; 0x40
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec6:	e2dc      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cec8:	2380      	movs	r3, #128	; 0x80
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cece:	e2d8      	b.n	800d482 <UART_SetConfig+0x7ae>
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a4f      	ldr	r2, [pc, #316]	; (800d014 <UART_SetConfig+0x340>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d130      	bne.n	800cf3c <UART_SetConfig+0x268>
 800ceda:	4b4c      	ldr	r3, [pc, #304]	; (800d00c <UART_SetConfig+0x338>)
 800cedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	d826      	bhi.n	800cf34 <UART_SetConfig+0x260>
 800cee6:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <UART_SetConfig+0x218>)
 800cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceec:	0800cf05 	.word	0x0800cf05
 800cef0:	0800cf0d 	.word	0x0800cf0d
 800cef4:	0800cf15 	.word	0x0800cf15
 800cef8:	0800cf1d 	.word	0x0800cf1d
 800cefc:	0800cf25 	.word	0x0800cf25
 800cf00:	0800cf2d 	.word	0x0800cf2d
 800cf04:	2300      	movs	r3, #0
 800cf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0a:	e2ba      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf12:	e2b6      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf14:	2308      	movs	r3, #8
 800cf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf1a:	e2b2      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf1c:	2310      	movs	r3, #16
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf22:	e2ae      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf24:	2320      	movs	r3, #32
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf2a:	e2aa      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf2c:	2340      	movs	r3, #64	; 0x40
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf32:	e2a6      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf34:	2380      	movs	r3, #128	; 0x80
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3a:	e2a2      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a35      	ldr	r2, [pc, #212]	; (800d018 <UART_SetConfig+0x344>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d130      	bne.n	800cfa8 <UART_SetConfig+0x2d4>
 800cf46:	4b31      	ldr	r3, [pc, #196]	; (800d00c <UART_SetConfig+0x338>)
 800cf48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf4a:	f003 0307 	and.w	r3, r3, #7
 800cf4e:	2b05      	cmp	r3, #5
 800cf50:	d826      	bhi.n	800cfa0 <UART_SetConfig+0x2cc>
 800cf52:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <UART_SetConfig+0x284>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf71 	.word	0x0800cf71
 800cf5c:	0800cf79 	.word	0x0800cf79
 800cf60:	0800cf81 	.word	0x0800cf81
 800cf64:	0800cf89 	.word	0x0800cf89
 800cf68:	0800cf91 	.word	0x0800cf91
 800cf6c:	0800cf99 	.word	0x0800cf99
 800cf70:	2300      	movs	r3, #0
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf76:	e284      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf78:	2304      	movs	r3, #4
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7e:	e280      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf80:	2308      	movs	r3, #8
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf86:	e27c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf88:	2310      	movs	r3, #16
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8e:	e278      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf90:	2320      	movs	r3, #32
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf96:	e274      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cf98:	2340      	movs	r3, #64	; 0x40
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9e:	e270      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cfa0:	2380      	movs	r3, #128	; 0x80
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa6:	e26c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a1b      	ldr	r2, [pc, #108]	; (800d01c <UART_SetConfig+0x348>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d142      	bne.n	800d038 <UART_SetConfig+0x364>
 800cfb2:	4b16      	ldr	r3, [pc, #88]	; (800d00c <UART_SetConfig+0x338>)
 800cfb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfb6:	f003 0307 	and.w	r3, r3, #7
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	d838      	bhi.n	800d030 <UART_SetConfig+0x35c>
 800cfbe:	a201      	add	r2, pc, #4	; (adr r2, 800cfc4 <UART_SetConfig+0x2f0>)
 800cfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc4:	0800cfdd 	.word	0x0800cfdd
 800cfc8:	0800cfe5 	.word	0x0800cfe5
 800cfcc:	0800cfed 	.word	0x0800cfed
 800cfd0:	0800cff5 	.word	0x0800cff5
 800cfd4:	0800d021 	.word	0x0800d021
 800cfd8:	0800d029 	.word	0x0800d029
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe2:	e24e      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cfe4:	2304      	movs	r3, #4
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfea:	e24a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cfec:	2308      	movs	r3, #8
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff2:	e246      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cff4:	2310      	movs	r3, #16
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffa:	e242      	b.n	800d482 <UART_SetConfig+0x7ae>
 800cffc:	cfff69f3 	.word	0xcfff69f3
 800d000:	58000c00 	.word	0x58000c00
 800d004:	11fff4ff 	.word	0x11fff4ff
 800d008:	40011000 	.word	0x40011000
 800d00c:	58024400 	.word	0x58024400
 800d010:	40004400 	.word	0x40004400
 800d014:	40004800 	.word	0x40004800
 800d018:	40004c00 	.word	0x40004c00
 800d01c:	40005000 	.word	0x40005000
 800d020:	2320      	movs	r3, #32
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d026:	e22c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02e:	e228      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d030:	2380      	movs	r3, #128	; 0x80
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d036:	e224      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4ab1      	ldr	r2, [pc, #708]	; (800d304 <UART_SetConfig+0x630>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d176      	bne.n	800d130 <UART_SetConfig+0x45c>
 800d042:	4bb1      	ldr	r3, [pc, #708]	; (800d308 <UART_SetConfig+0x634>)
 800d044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d04a:	2b28      	cmp	r3, #40	; 0x28
 800d04c:	d86c      	bhi.n	800d128 <UART_SetConfig+0x454>
 800d04e:	a201      	add	r2, pc, #4	; (adr r2, 800d054 <UART_SetConfig+0x380>)
 800d050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d054:	0800d0f9 	.word	0x0800d0f9
 800d058:	0800d129 	.word	0x0800d129
 800d05c:	0800d129 	.word	0x0800d129
 800d060:	0800d129 	.word	0x0800d129
 800d064:	0800d129 	.word	0x0800d129
 800d068:	0800d129 	.word	0x0800d129
 800d06c:	0800d129 	.word	0x0800d129
 800d070:	0800d129 	.word	0x0800d129
 800d074:	0800d101 	.word	0x0800d101
 800d078:	0800d129 	.word	0x0800d129
 800d07c:	0800d129 	.word	0x0800d129
 800d080:	0800d129 	.word	0x0800d129
 800d084:	0800d129 	.word	0x0800d129
 800d088:	0800d129 	.word	0x0800d129
 800d08c:	0800d129 	.word	0x0800d129
 800d090:	0800d129 	.word	0x0800d129
 800d094:	0800d109 	.word	0x0800d109
 800d098:	0800d129 	.word	0x0800d129
 800d09c:	0800d129 	.word	0x0800d129
 800d0a0:	0800d129 	.word	0x0800d129
 800d0a4:	0800d129 	.word	0x0800d129
 800d0a8:	0800d129 	.word	0x0800d129
 800d0ac:	0800d129 	.word	0x0800d129
 800d0b0:	0800d129 	.word	0x0800d129
 800d0b4:	0800d111 	.word	0x0800d111
 800d0b8:	0800d129 	.word	0x0800d129
 800d0bc:	0800d129 	.word	0x0800d129
 800d0c0:	0800d129 	.word	0x0800d129
 800d0c4:	0800d129 	.word	0x0800d129
 800d0c8:	0800d129 	.word	0x0800d129
 800d0cc:	0800d129 	.word	0x0800d129
 800d0d0:	0800d129 	.word	0x0800d129
 800d0d4:	0800d119 	.word	0x0800d119
 800d0d8:	0800d129 	.word	0x0800d129
 800d0dc:	0800d129 	.word	0x0800d129
 800d0e0:	0800d129 	.word	0x0800d129
 800d0e4:	0800d129 	.word	0x0800d129
 800d0e8:	0800d129 	.word	0x0800d129
 800d0ec:	0800d129 	.word	0x0800d129
 800d0f0:	0800d129 	.word	0x0800d129
 800d0f4:	0800d121 	.word	0x0800d121
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fe:	e1c0      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d100:	2304      	movs	r3, #4
 800d102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d106:	e1bc      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d108:	2308      	movs	r3, #8
 800d10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10e:	e1b8      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d110:	2310      	movs	r3, #16
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d116:	e1b4      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d118:	2320      	movs	r3, #32
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11e:	e1b0      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d120:	2340      	movs	r3, #64	; 0x40
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d126:	e1ac      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d128:	2380      	movs	r3, #128	; 0x80
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12e:	e1a8      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a75      	ldr	r2, [pc, #468]	; (800d30c <UART_SetConfig+0x638>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d130      	bne.n	800d19c <UART_SetConfig+0x4c8>
 800d13a:	4b73      	ldr	r3, [pc, #460]	; (800d308 <UART_SetConfig+0x634>)
 800d13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13e:	f003 0307 	and.w	r3, r3, #7
 800d142:	2b05      	cmp	r3, #5
 800d144:	d826      	bhi.n	800d194 <UART_SetConfig+0x4c0>
 800d146:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <UART_SetConfig+0x478>)
 800d148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14c:	0800d165 	.word	0x0800d165
 800d150:	0800d16d 	.word	0x0800d16d
 800d154:	0800d175 	.word	0x0800d175
 800d158:	0800d17d 	.word	0x0800d17d
 800d15c:	0800d185 	.word	0x0800d185
 800d160:	0800d18d 	.word	0x0800d18d
 800d164:	2300      	movs	r3, #0
 800d166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16a:	e18a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d16c:	2304      	movs	r3, #4
 800d16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d172:	e186      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d174:	2308      	movs	r3, #8
 800d176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17a:	e182      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d17c:	2310      	movs	r3, #16
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d182:	e17e      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d184:	2320      	movs	r3, #32
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18a:	e17a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d18c:	2340      	movs	r3, #64	; 0x40
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d192:	e176      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d194:	2380      	movs	r3, #128	; 0x80
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19a:	e172      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a5b      	ldr	r2, [pc, #364]	; (800d310 <UART_SetConfig+0x63c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d130      	bne.n	800d208 <UART_SetConfig+0x534>
 800d1a6:	4b58      	ldr	r3, [pc, #352]	; (800d308 <UART_SetConfig+0x634>)
 800d1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	2b05      	cmp	r3, #5
 800d1b0:	d826      	bhi.n	800d200 <UART_SetConfig+0x52c>
 800d1b2:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <UART_SetConfig+0x4e4>)
 800d1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b8:	0800d1d1 	.word	0x0800d1d1
 800d1bc:	0800d1d9 	.word	0x0800d1d9
 800d1c0:	0800d1e1 	.word	0x0800d1e1
 800d1c4:	0800d1e9 	.word	0x0800d1e9
 800d1c8:	0800d1f1 	.word	0x0800d1f1
 800d1cc:	0800d1f9 	.word	0x0800d1f9
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d6:	e154      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d1d8:	2304      	movs	r3, #4
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1de:	e150      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e6:	e14c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d1e8:	2310      	movs	r3, #16
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ee:	e148      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f6:	e144      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d1f8:	2340      	movs	r3, #64	; 0x40
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fe:	e140      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d200:	2380      	movs	r3, #128	; 0x80
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d206:	e13c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a41      	ldr	r2, [pc, #260]	; (800d314 <UART_SetConfig+0x640>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	f040 8082 	bne.w	800d318 <UART_SetConfig+0x644>
 800d214:	4b3c      	ldr	r3, [pc, #240]	; (800d308 <UART_SetConfig+0x634>)
 800d216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d21c:	2b28      	cmp	r3, #40	; 0x28
 800d21e:	d86d      	bhi.n	800d2fc <UART_SetConfig+0x628>
 800d220:	a201      	add	r2, pc, #4	; (adr r2, 800d228 <UART_SetConfig+0x554>)
 800d222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d226:	bf00      	nop
 800d228:	0800d2cd 	.word	0x0800d2cd
 800d22c:	0800d2fd 	.word	0x0800d2fd
 800d230:	0800d2fd 	.word	0x0800d2fd
 800d234:	0800d2fd 	.word	0x0800d2fd
 800d238:	0800d2fd 	.word	0x0800d2fd
 800d23c:	0800d2fd 	.word	0x0800d2fd
 800d240:	0800d2fd 	.word	0x0800d2fd
 800d244:	0800d2fd 	.word	0x0800d2fd
 800d248:	0800d2d5 	.word	0x0800d2d5
 800d24c:	0800d2fd 	.word	0x0800d2fd
 800d250:	0800d2fd 	.word	0x0800d2fd
 800d254:	0800d2fd 	.word	0x0800d2fd
 800d258:	0800d2fd 	.word	0x0800d2fd
 800d25c:	0800d2fd 	.word	0x0800d2fd
 800d260:	0800d2fd 	.word	0x0800d2fd
 800d264:	0800d2fd 	.word	0x0800d2fd
 800d268:	0800d2dd 	.word	0x0800d2dd
 800d26c:	0800d2fd 	.word	0x0800d2fd
 800d270:	0800d2fd 	.word	0x0800d2fd
 800d274:	0800d2fd 	.word	0x0800d2fd
 800d278:	0800d2fd 	.word	0x0800d2fd
 800d27c:	0800d2fd 	.word	0x0800d2fd
 800d280:	0800d2fd 	.word	0x0800d2fd
 800d284:	0800d2fd 	.word	0x0800d2fd
 800d288:	0800d2e5 	.word	0x0800d2e5
 800d28c:	0800d2fd 	.word	0x0800d2fd
 800d290:	0800d2fd 	.word	0x0800d2fd
 800d294:	0800d2fd 	.word	0x0800d2fd
 800d298:	0800d2fd 	.word	0x0800d2fd
 800d29c:	0800d2fd 	.word	0x0800d2fd
 800d2a0:	0800d2fd 	.word	0x0800d2fd
 800d2a4:	0800d2fd 	.word	0x0800d2fd
 800d2a8:	0800d2ed 	.word	0x0800d2ed
 800d2ac:	0800d2fd 	.word	0x0800d2fd
 800d2b0:	0800d2fd 	.word	0x0800d2fd
 800d2b4:	0800d2fd 	.word	0x0800d2fd
 800d2b8:	0800d2fd 	.word	0x0800d2fd
 800d2bc:	0800d2fd 	.word	0x0800d2fd
 800d2c0:	0800d2fd 	.word	0x0800d2fd
 800d2c4:	0800d2fd 	.word	0x0800d2fd
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e0d6      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2da:	e0d2      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2dc:	2308      	movs	r3, #8
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e2:	e0ce      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ea:	e0ca      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2ec:	2320      	movs	r3, #32
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e0c6      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2f4:	2340      	movs	r3, #64	; 0x40
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fa:	e0c2      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d2fc:	2380      	movs	r3, #128	; 0x80
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d302:	e0be      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d304:	40011400 	.word	0x40011400
 800d308:	58024400 	.word	0x58024400
 800d30c:	40007800 	.word	0x40007800
 800d310:	40007c00 	.word	0x40007c00
 800d314:	40011800 	.word	0x40011800
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4aad      	ldr	r2, [pc, #692]	; (800d5d4 <UART_SetConfig+0x900>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d176      	bne.n	800d410 <UART_SetConfig+0x73c>
 800d322:	4bad      	ldr	r3, [pc, #692]	; (800d5d8 <UART_SetConfig+0x904>)
 800d324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d32a:	2b28      	cmp	r3, #40	; 0x28
 800d32c:	d86c      	bhi.n	800d408 <UART_SetConfig+0x734>
 800d32e:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <UART_SetConfig+0x660>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800d3d9 	.word	0x0800d3d9
 800d338:	0800d409 	.word	0x0800d409
 800d33c:	0800d409 	.word	0x0800d409
 800d340:	0800d409 	.word	0x0800d409
 800d344:	0800d409 	.word	0x0800d409
 800d348:	0800d409 	.word	0x0800d409
 800d34c:	0800d409 	.word	0x0800d409
 800d350:	0800d409 	.word	0x0800d409
 800d354:	0800d3e1 	.word	0x0800d3e1
 800d358:	0800d409 	.word	0x0800d409
 800d35c:	0800d409 	.word	0x0800d409
 800d360:	0800d409 	.word	0x0800d409
 800d364:	0800d409 	.word	0x0800d409
 800d368:	0800d409 	.word	0x0800d409
 800d36c:	0800d409 	.word	0x0800d409
 800d370:	0800d409 	.word	0x0800d409
 800d374:	0800d3e9 	.word	0x0800d3e9
 800d378:	0800d409 	.word	0x0800d409
 800d37c:	0800d409 	.word	0x0800d409
 800d380:	0800d409 	.word	0x0800d409
 800d384:	0800d409 	.word	0x0800d409
 800d388:	0800d409 	.word	0x0800d409
 800d38c:	0800d409 	.word	0x0800d409
 800d390:	0800d409 	.word	0x0800d409
 800d394:	0800d3f1 	.word	0x0800d3f1
 800d398:	0800d409 	.word	0x0800d409
 800d39c:	0800d409 	.word	0x0800d409
 800d3a0:	0800d409 	.word	0x0800d409
 800d3a4:	0800d409 	.word	0x0800d409
 800d3a8:	0800d409 	.word	0x0800d409
 800d3ac:	0800d409 	.word	0x0800d409
 800d3b0:	0800d409 	.word	0x0800d409
 800d3b4:	0800d3f9 	.word	0x0800d3f9
 800d3b8:	0800d409 	.word	0x0800d409
 800d3bc:	0800d409 	.word	0x0800d409
 800d3c0:	0800d409 	.word	0x0800d409
 800d3c4:	0800d409 	.word	0x0800d409
 800d3c8:	0800d409 	.word	0x0800d409
 800d3cc:	0800d409 	.word	0x0800d409
 800d3d0:	0800d409 	.word	0x0800d409
 800d3d4:	0800d401 	.word	0x0800d401
 800d3d8:	2301      	movs	r3, #1
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e050      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d3e0:	2304      	movs	r3, #4
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e04c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d3e8:	2308      	movs	r3, #8
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e048      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e044      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d3f8:	2320      	movs	r3, #32
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e040      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d400:	2340      	movs	r3, #64	; 0x40
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d406:	e03c      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d408:	2380      	movs	r3, #128	; 0x80
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40e:	e038      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a71      	ldr	r2, [pc, #452]	; (800d5dc <UART_SetConfig+0x908>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d130      	bne.n	800d47c <UART_SetConfig+0x7a8>
 800d41a:	4b6f      	ldr	r3, [pc, #444]	; (800d5d8 <UART_SetConfig+0x904>)
 800d41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d41e:	f003 0307 	and.w	r3, r3, #7
 800d422:	2b05      	cmp	r3, #5
 800d424:	d826      	bhi.n	800d474 <UART_SetConfig+0x7a0>
 800d426:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <UART_SetConfig+0x758>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d445 	.word	0x0800d445
 800d430:	0800d44d 	.word	0x0800d44d
 800d434:	0800d455 	.word	0x0800d455
 800d438:	0800d45d 	.word	0x0800d45d
 800d43c:	0800d465 	.word	0x0800d465
 800d440:	0800d46d 	.word	0x0800d46d
 800d444:	2302      	movs	r3, #2
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e01a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d44c:	2304      	movs	r3, #4
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e016      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d454:	2308      	movs	r3, #8
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e012      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d45c:	2310      	movs	r3, #16
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e00e      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d464:	2320      	movs	r3, #32
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e00a      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d46c:	2340      	movs	r3, #64	; 0x40
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d472:	e006      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d474:	2380      	movs	r3, #128	; 0x80
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47a:	e002      	b.n	800d482 <UART_SetConfig+0x7ae>
 800d47c:	2380      	movs	r3, #128	; 0x80
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a55      	ldr	r2, [pc, #340]	; (800d5dc <UART_SetConfig+0x908>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	f040 80f8 	bne.w	800d67e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d48e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d492:	2b20      	cmp	r3, #32
 800d494:	dc46      	bgt.n	800d524 <UART_SetConfig+0x850>
 800d496:	2b02      	cmp	r3, #2
 800d498:	db75      	blt.n	800d586 <UART_SetConfig+0x8b2>
 800d49a:	3b02      	subs	r3, #2
 800d49c:	2b1e      	cmp	r3, #30
 800d49e:	d872      	bhi.n	800d586 <UART_SetConfig+0x8b2>
 800d4a0:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <UART_SetConfig+0x7d4>)
 800d4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a6:	bf00      	nop
 800d4a8:	0800d52b 	.word	0x0800d52b
 800d4ac:	0800d587 	.word	0x0800d587
 800d4b0:	0800d533 	.word	0x0800d533
 800d4b4:	0800d587 	.word	0x0800d587
 800d4b8:	0800d587 	.word	0x0800d587
 800d4bc:	0800d587 	.word	0x0800d587
 800d4c0:	0800d543 	.word	0x0800d543
 800d4c4:	0800d587 	.word	0x0800d587
 800d4c8:	0800d587 	.word	0x0800d587
 800d4cc:	0800d587 	.word	0x0800d587
 800d4d0:	0800d587 	.word	0x0800d587
 800d4d4:	0800d587 	.word	0x0800d587
 800d4d8:	0800d587 	.word	0x0800d587
 800d4dc:	0800d587 	.word	0x0800d587
 800d4e0:	0800d553 	.word	0x0800d553
 800d4e4:	0800d587 	.word	0x0800d587
 800d4e8:	0800d587 	.word	0x0800d587
 800d4ec:	0800d587 	.word	0x0800d587
 800d4f0:	0800d587 	.word	0x0800d587
 800d4f4:	0800d587 	.word	0x0800d587
 800d4f8:	0800d587 	.word	0x0800d587
 800d4fc:	0800d587 	.word	0x0800d587
 800d500:	0800d587 	.word	0x0800d587
 800d504:	0800d587 	.word	0x0800d587
 800d508:	0800d587 	.word	0x0800d587
 800d50c:	0800d587 	.word	0x0800d587
 800d510:	0800d587 	.word	0x0800d587
 800d514:	0800d587 	.word	0x0800d587
 800d518:	0800d587 	.word	0x0800d587
 800d51c:	0800d587 	.word	0x0800d587
 800d520:	0800d579 	.word	0x0800d579
 800d524:	2b40      	cmp	r3, #64	; 0x40
 800d526:	d02a      	beq.n	800d57e <UART_SetConfig+0x8aa>
 800d528:	e02d      	b.n	800d586 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d52a:	f7fc fe01 	bl	800a130 <HAL_RCCEx_GetD3PCLK1Freq>
 800d52e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d530:	e02f      	b.n	800d592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fc fe10 	bl	800a15c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d540:	e027      	b.n	800d592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d542:	f107 0318 	add.w	r3, r7, #24
 800d546:	4618      	mov	r0, r3
 800d548:	f7fc ff5c 	bl	800a404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d550:	e01f      	b.n	800d592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d552:	4b21      	ldr	r3, [pc, #132]	; (800d5d8 <UART_SetConfig+0x904>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d55e:	4b1e      	ldr	r3, [pc, #120]	; (800d5d8 <UART_SetConfig+0x904>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	08db      	lsrs	r3, r3, #3
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	4a1d      	ldr	r2, [pc, #116]	; (800d5e0 <UART_SetConfig+0x90c>)
 800d56a:	fa22 f303 	lsr.w	r3, r2, r3
 800d56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d570:	e00f      	b.n	800d592 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d572:	4b1b      	ldr	r3, [pc, #108]	; (800d5e0 <UART_SetConfig+0x90c>)
 800d574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d576:	e00c      	b.n	800d592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d578:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <UART_SetConfig+0x910>)
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d57c:	e009      	b.n	800d592 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d57e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d584:	e005      	b.n	800d592 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d586:	2300      	movs	r3, #0
 800d588:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d590:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 81ee 	beq.w	800d976 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	4a12      	ldr	r2, [pc, #72]	; (800d5e8 <UART_SetConfig+0x914>)
 800d5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d305      	bcc.n	800d5ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d910      	bls.n	800d5ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5d0:	e1d1      	b.n	800d976 <UART_SetConfig+0xca2>
 800d5d2:	bf00      	nop
 800d5d4:	40011c00 	.word	0x40011c00
 800d5d8:	58024400 	.word	0x58024400
 800d5dc:	58000c00 	.word	0x58000c00
 800d5e0:	03d09000 	.word	0x03d09000
 800d5e4:	003d0900 	.word	0x003d0900
 800d5e8:	0800ebac 	.word	0x0800ebac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	60bb      	str	r3, [r7, #8]
 800d5f2:	60fa      	str	r2, [r7, #12]
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	4ac0      	ldr	r2, [pc, #768]	; (800d8fc <UART_SetConfig+0xc28>)
 800d5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2200      	movs	r2, #0
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	607a      	str	r2, [r7, #4]
 800d606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d60a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d60e:	f7f2 fe87 	bl	8000320 <__aeabi_uldivmod>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4610      	mov	r0, r2
 800d618:	4619      	mov	r1, r3
 800d61a:	f04f 0200 	mov.w	r2, #0
 800d61e:	f04f 0300 	mov.w	r3, #0
 800d622:	020b      	lsls	r3, r1, #8
 800d624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d628:	0202      	lsls	r2, r0, #8
 800d62a:	6979      	ldr	r1, [r7, #20]
 800d62c:	6849      	ldr	r1, [r1, #4]
 800d62e:	0849      	lsrs	r1, r1, #1
 800d630:	2000      	movs	r0, #0
 800d632:	460c      	mov	r4, r1
 800d634:	4605      	mov	r5, r0
 800d636:	eb12 0804 	adds.w	r8, r2, r4
 800d63a:	eb43 0905 	adc.w	r9, r3, r5
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	469a      	mov	sl, r3
 800d646:	4693      	mov	fp, r2
 800d648:	4652      	mov	r2, sl
 800d64a:	465b      	mov	r3, fp
 800d64c:	4640      	mov	r0, r8
 800d64e:	4649      	mov	r1, r9
 800d650:	f7f2 fe66 	bl	8000320 <__aeabi_uldivmod>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4613      	mov	r3, r2
 800d65a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d662:	d308      	bcc.n	800d676 <UART_SetConfig+0x9a2>
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d66a:	d204      	bcs.n	800d676 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d672:	60da      	str	r2, [r3, #12]
 800d674:	e17f      	b.n	800d976 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d67c:	e17b      	b.n	800d976 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d686:	f040 80bd 	bne.w	800d804 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d68a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d68e:	2b20      	cmp	r3, #32
 800d690:	dc48      	bgt.n	800d724 <UART_SetConfig+0xa50>
 800d692:	2b00      	cmp	r3, #0
 800d694:	db7b      	blt.n	800d78e <UART_SetConfig+0xaba>
 800d696:	2b20      	cmp	r3, #32
 800d698:	d879      	bhi.n	800d78e <UART_SetConfig+0xaba>
 800d69a:	a201      	add	r2, pc, #4	; (adr r2, 800d6a0 <UART_SetConfig+0x9cc>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d72b 	.word	0x0800d72b
 800d6a4:	0800d733 	.word	0x0800d733
 800d6a8:	0800d78f 	.word	0x0800d78f
 800d6ac:	0800d78f 	.word	0x0800d78f
 800d6b0:	0800d73b 	.word	0x0800d73b
 800d6b4:	0800d78f 	.word	0x0800d78f
 800d6b8:	0800d78f 	.word	0x0800d78f
 800d6bc:	0800d78f 	.word	0x0800d78f
 800d6c0:	0800d74b 	.word	0x0800d74b
 800d6c4:	0800d78f 	.word	0x0800d78f
 800d6c8:	0800d78f 	.word	0x0800d78f
 800d6cc:	0800d78f 	.word	0x0800d78f
 800d6d0:	0800d78f 	.word	0x0800d78f
 800d6d4:	0800d78f 	.word	0x0800d78f
 800d6d8:	0800d78f 	.word	0x0800d78f
 800d6dc:	0800d78f 	.word	0x0800d78f
 800d6e0:	0800d75b 	.word	0x0800d75b
 800d6e4:	0800d78f 	.word	0x0800d78f
 800d6e8:	0800d78f 	.word	0x0800d78f
 800d6ec:	0800d78f 	.word	0x0800d78f
 800d6f0:	0800d78f 	.word	0x0800d78f
 800d6f4:	0800d78f 	.word	0x0800d78f
 800d6f8:	0800d78f 	.word	0x0800d78f
 800d6fc:	0800d78f 	.word	0x0800d78f
 800d700:	0800d78f 	.word	0x0800d78f
 800d704:	0800d78f 	.word	0x0800d78f
 800d708:	0800d78f 	.word	0x0800d78f
 800d70c:	0800d78f 	.word	0x0800d78f
 800d710:	0800d78f 	.word	0x0800d78f
 800d714:	0800d78f 	.word	0x0800d78f
 800d718:	0800d78f 	.word	0x0800d78f
 800d71c:	0800d78f 	.word	0x0800d78f
 800d720:	0800d781 	.word	0x0800d781
 800d724:	2b40      	cmp	r3, #64	; 0x40
 800d726:	d02e      	beq.n	800d786 <UART_SetConfig+0xab2>
 800d728:	e031      	b.n	800d78e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d72a:	f7fb fddb 	bl	80092e4 <HAL_RCC_GetPCLK1Freq>
 800d72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d730:	e033      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d732:	f7fb fded 	bl	8009310 <HAL_RCC_GetPCLK2Freq>
 800d736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d738:	e02f      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fc fd0c 	bl	800a15c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d748:	e027      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d74a:	f107 0318 	add.w	r3, r7, #24
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fc fe58 	bl	800a404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d758:	e01f      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d75a:	4b69      	ldr	r3, [pc, #420]	; (800d900 <UART_SetConfig+0xc2c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 0320 	and.w	r3, r3, #32
 800d762:	2b00      	cmp	r3, #0
 800d764:	d009      	beq.n	800d77a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d766:	4b66      	ldr	r3, [pc, #408]	; (800d900 <UART_SetConfig+0xc2c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	08db      	lsrs	r3, r3, #3
 800d76c:	f003 0303 	and.w	r3, r3, #3
 800d770:	4a64      	ldr	r2, [pc, #400]	; (800d904 <UART_SetConfig+0xc30>)
 800d772:	fa22 f303 	lsr.w	r3, r2, r3
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d778:	e00f      	b.n	800d79a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d77a:	4b62      	ldr	r3, [pc, #392]	; (800d904 <UART_SetConfig+0xc30>)
 800d77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d77e:	e00c      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d780:	4b61      	ldr	r3, [pc, #388]	; (800d908 <UART_SetConfig+0xc34>)
 800d782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d784:	e009      	b.n	800d79a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d78c:	e005      	b.n	800d79a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d78e:	2300      	movs	r3, #0
 800d790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 80ea 	beq.w	800d976 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	4a55      	ldr	r2, [pc, #340]	; (800d8fc <UART_SetConfig+0xc28>)
 800d7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7b4:	005a      	lsls	r2, r3, #1
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	441a      	add	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	2b0f      	cmp	r3, #15
 800d7cc:	d916      	bls.n	800d7fc <UART_SetConfig+0xb28>
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7d4:	d212      	bcs.n	800d7fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	f023 030f 	bic.w	r3, r3, #15
 800d7de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	085b      	lsrs	r3, r3, #1
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d7f8:	60da      	str	r2, [r3, #12]
 800d7fa:	e0bc      	b.n	800d976 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d802:	e0b8      	b.n	800d976 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d804:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d808:	2b20      	cmp	r3, #32
 800d80a:	dc4b      	bgt.n	800d8a4 <UART_SetConfig+0xbd0>
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f2c0 8087 	blt.w	800d920 <UART_SetConfig+0xc4c>
 800d812:	2b20      	cmp	r3, #32
 800d814:	f200 8084 	bhi.w	800d920 <UART_SetConfig+0xc4c>
 800d818:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <UART_SetConfig+0xb4c>)
 800d81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81e:	bf00      	nop
 800d820:	0800d8ab 	.word	0x0800d8ab
 800d824:	0800d8b3 	.word	0x0800d8b3
 800d828:	0800d921 	.word	0x0800d921
 800d82c:	0800d921 	.word	0x0800d921
 800d830:	0800d8bb 	.word	0x0800d8bb
 800d834:	0800d921 	.word	0x0800d921
 800d838:	0800d921 	.word	0x0800d921
 800d83c:	0800d921 	.word	0x0800d921
 800d840:	0800d8cb 	.word	0x0800d8cb
 800d844:	0800d921 	.word	0x0800d921
 800d848:	0800d921 	.word	0x0800d921
 800d84c:	0800d921 	.word	0x0800d921
 800d850:	0800d921 	.word	0x0800d921
 800d854:	0800d921 	.word	0x0800d921
 800d858:	0800d921 	.word	0x0800d921
 800d85c:	0800d921 	.word	0x0800d921
 800d860:	0800d8db 	.word	0x0800d8db
 800d864:	0800d921 	.word	0x0800d921
 800d868:	0800d921 	.word	0x0800d921
 800d86c:	0800d921 	.word	0x0800d921
 800d870:	0800d921 	.word	0x0800d921
 800d874:	0800d921 	.word	0x0800d921
 800d878:	0800d921 	.word	0x0800d921
 800d87c:	0800d921 	.word	0x0800d921
 800d880:	0800d921 	.word	0x0800d921
 800d884:	0800d921 	.word	0x0800d921
 800d888:	0800d921 	.word	0x0800d921
 800d88c:	0800d921 	.word	0x0800d921
 800d890:	0800d921 	.word	0x0800d921
 800d894:	0800d921 	.word	0x0800d921
 800d898:	0800d921 	.word	0x0800d921
 800d89c:	0800d921 	.word	0x0800d921
 800d8a0:	0800d913 	.word	0x0800d913
 800d8a4:	2b40      	cmp	r3, #64	; 0x40
 800d8a6:	d037      	beq.n	800d918 <UART_SetConfig+0xc44>
 800d8a8:	e03a      	b.n	800d920 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8aa:	f7fb fd1b 	bl	80092e4 <HAL_RCC_GetPCLK1Freq>
 800d8ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8b0:	e03c      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8b2:	f7fb fd2d 	bl	8009310 <HAL_RCC_GetPCLK2Freq>
 800d8b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8b8:	e038      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fc fc4c 	bl	800a15c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8c8:	e030      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8ca:	f107 0318 	add.w	r3, r7, #24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fc fd98 	bl	800a404 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8d8:	e028      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8da:	4b09      	ldr	r3, [pc, #36]	; (800d900 <UART_SetConfig+0xc2c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d012      	beq.n	800d90c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8e6:	4b06      	ldr	r3, [pc, #24]	; (800d900 <UART_SetConfig+0xc2c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	08db      	lsrs	r3, r3, #3
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	4a04      	ldr	r2, [pc, #16]	; (800d904 <UART_SetConfig+0xc30>)
 800d8f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8f8:	e018      	b.n	800d92c <UART_SetConfig+0xc58>
 800d8fa:	bf00      	nop
 800d8fc:	0800ebac 	.word	0x0800ebac
 800d900:	58024400 	.word	0x58024400
 800d904:	03d09000 	.word	0x03d09000
 800d908:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d90c:	4b24      	ldr	r3, [pc, #144]	; (800d9a0 <UART_SetConfig+0xccc>)
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d910:	e00c      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d912:	4b24      	ldr	r3, [pc, #144]	; (800d9a4 <UART_SetConfig+0xcd0>)
 800d914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d916:	e009      	b.n	800d92c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d91e:	e005      	b.n	800d92c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d92a:	bf00      	nop
    }

    if (pclk != 0U)
 800d92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d021      	beq.n	800d976 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d936:	4a1c      	ldr	r2, [pc, #112]	; (800d9a8 <UART_SetConfig+0xcd4>)
 800d938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d940:	fbb3 f2f2 	udiv	r2, r3, r2
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	085b      	lsrs	r3, r3, #1
 800d94a:	441a      	add	r2, r3
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	fbb2 f3f3 	udiv	r3, r2, r3
 800d954:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	2b0f      	cmp	r3, #15
 800d95a:	d909      	bls.n	800d970 <UART_SetConfig+0xc9c>
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d962:	d205      	bcs.n	800d970 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	b29a      	uxth	r2, r3
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	60da      	str	r2, [r3, #12]
 800d96e:	e002      	b.n	800d976 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2201      	movs	r2, #1
 800d97a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2201      	movs	r2, #1
 800d982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2200      	movs	r2, #0
 800d98a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2200      	movs	r2, #0
 800d990:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d992:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d996:	4618      	mov	r0, r3
 800d998:	3748      	adds	r7, #72	; 0x48
 800d99a:	46bd      	mov	sp, r7
 800d99c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9a0:	03d09000 	.word	0x03d09000
 800d9a4:	003d0900 	.word	0x003d0900
 800d9a8:	0800ebac 	.word	0x0800ebac

0800d9ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00a      	beq.n	800d9d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9da:	f003 0302 	and.w	r3, r3, #2
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fc:	f003 0304 	and.w	r3, r3, #4
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00a      	beq.n	800da1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1e:	f003 0308 	and.w	r3, r3, #8
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da40:	f003 0310 	and.w	r3, r3, #16
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	430a      	orrs	r2, r1
 800da7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01a      	beq.n	800dac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daaa:	d10a      	bne.n	800dac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	430a      	orrs	r2, r1
 800dac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	430a      	orrs	r2, r1
 800dae2:	605a      	str	r2, [r3, #4]
  }
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db00:	f7f7 f882 	bl	8004c08 <HAL_GetTick>
 800db04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0308 	and.w	r3, r3, #8
 800db10:	2b08      	cmp	r3, #8
 800db12:	d10e      	bne.n	800db32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f82f 	bl	800db86 <UART_WaitOnFlagUntilTimeout>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db2e:	2303      	movs	r3, #3
 800db30:	e025      	b.n	800db7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d10e      	bne.n	800db5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f819 	bl	800db86 <UART_WaitOnFlagUntilTimeout>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e00f      	b.n	800db7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2220      	movs	r2, #32
 800db62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2220      	movs	r2, #32
 800db6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b09c      	sub	sp, #112	; 0x70
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	60b9      	str	r1, [r7, #8]
 800db90:	603b      	str	r3, [r7, #0]
 800db92:	4613      	mov	r3, r2
 800db94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db96:	e0a9      	b.n	800dcec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	f000 80a5 	beq.w	800dcec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dba2:	f7f7 f831 	bl	8004c08 <HAL_GetTick>
 800dba6:	4602      	mov	r2, r0
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d302      	bcc.n	800dbb8 <UART_WaitOnFlagUntilTimeout+0x32>
 800dbb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d140      	bne.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc0:	e853 3f00 	ldrex	r3, [r3]
 800dbc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbcc:	667b      	str	r3, [r7, #100]	; 0x64
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbde:	e841 2300 	strex	r3, r2, [r1]
 800dbe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1e6      	bne.n	800dbb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3308      	adds	r3, #8
 800dbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf4:	e853 3f00 	ldrex	r3, [r3]
 800dbf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	f023 0301 	bic.w	r3, r3, #1
 800dc00:	663b      	str	r3, [r7, #96]	; 0x60
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3308      	adds	r3, #8
 800dc08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc12:	e841 2300 	strex	r3, r2, [r1]
 800dc16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1e5      	bne.n	800dbea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2220      	movs	r2, #32
 800dc22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2220      	movs	r2, #32
 800dc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc36:	2303      	movs	r3, #3
 800dc38:	e069      	b.n	800dd0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d051      	beq.n	800dcec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	69db      	ldr	r3, [r3, #28]
 800dc4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc56:	d149      	bne.n	800dcec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc80:	637b      	str	r3, [r7, #52]	; 0x34
 800dc82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc88:	e841 2300 	strex	r3, r2, [r1]
 800dc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1e6      	bne.n	800dc62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3308      	adds	r3, #8
 800dc9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	e853 3f00 	ldrex	r3, [r3]
 800dca2:	613b      	str	r3, [r7, #16]
   return(result);
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	f023 0301 	bic.w	r3, r3, #1
 800dcaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dcb4:	623a      	str	r2, [r7, #32]
 800dcb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb8:	69f9      	ldr	r1, [r7, #28]
 800dcba:	6a3a      	ldr	r2, [r7, #32]
 800dcbc:	e841 2300 	strex	r3, r2, [r1]
 800dcc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1e5      	bne.n	800dc94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2220      	movs	r2, #32
 800dccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2220      	movs	r2, #32
 800dcd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2220      	movs	r2, #32
 800dcdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dce8:	2303      	movs	r3, #3
 800dcea:	e010      	b.n	800dd0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	69da      	ldr	r2, [r3, #28]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	bf0c      	ite	eq
 800dcfc:	2301      	moveq	r3, #1
 800dcfe:	2300      	movne	r3, #0
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	461a      	mov	r2, r3
 800dd04:	79fb      	ldrb	r3, [r7, #7]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	f43f af46 	beq.w	800db98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3770      	adds	r7, #112	; 0x70
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b096      	sub	sp, #88	; 0x58
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	4613      	mov	r3, r2
 800dd24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	88fa      	ldrh	r2, [r7, #6]
 800dd30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2222      	movs	r2, #34	; 0x22
 800dd40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d02c      	beq.n	800dda6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd50:	4a42      	ldr	r2, [pc, #264]	; (800de5c <UART_Start_Receive_DMA+0x144>)
 800dd52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd58:	4a41      	ldr	r2, [pc, #260]	; (800de60 <UART_Start_Receive_DMA+0x148>)
 800dd5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd60:	4a40      	ldr	r2, [pc, #256]	; (800de64 <UART_Start_Receive_DMA+0x14c>)
 800dd62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd68:	2200      	movs	r2, #0
 800dd6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3324      	adds	r3, #36	; 0x24
 800dd76:	4619      	mov	r1, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	88fb      	ldrh	r3, [r7, #6]
 800dd80:	f7f7 fda0 	bl	80058c4 <HAL_DMA_Start_IT>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00d      	beq.n	800dda6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e055      	b.n	800de52 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d018      	beq.n	800dde8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddbe:	e853 3f00 	ldrex	r3, [r3]
 800ddc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddca:	657b      	str	r3, [r7, #84]	; 0x54
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddd6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dddc:	e841 2300 	strex	r3, r2, [r1]
 800dde0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1e6      	bne.n	800ddb6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3308      	adds	r3, #8
 800ddee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	e853 3f00 	ldrex	r3, [r3]
 800ddf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	f043 0301 	orr.w	r3, r3, #1
 800ddfe:	653b      	str	r3, [r7, #80]	; 0x50
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3308      	adds	r3, #8
 800de06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de08:	637a      	str	r2, [r7, #52]	; 0x34
 800de0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de10:	e841 2300 	strex	r3, r2, [r1]
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d1e5      	bne.n	800dde8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3308      	adds	r3, #8
 800de22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	e853 3f00 	ldrex	r3, [r3]
 800de2a:	613b      	str	r3, [r7, #16]
   return(result);
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	3308      	adds	r3, #8
 800de3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de3c:	623a      	str	r2, [r7, #32]
 800de3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de40:	69f9      	ldr	r1, [r7, #28]
 800de42:	6a3a      	ldr	r2, [r7, #32]
 800de44:	e841 2300 	strex	r3, r2, [r1]
 800de48:	61bb      	str	r3, [r7, #24]
   return(result);
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1e5      	bne.n	800de1c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3758      	adds	r7, #88	; 0x58
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	0800e06b 	.word	0x0800e06b
 800de60:	0800e18d 	.word	0x0800e18d
 800de64:	0800e1c5 	.word	0x0800e1c5

0800de68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de68:	b480      	push	{r7}
 800de6a:	b08f      	sub	sp, #60	; 0x3c
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de76:	6a3b      	ldr	r3, [r7, #32]
 800de78:	e853 3f00 	ldrex	r3, [r3]
 800de7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800de84:	637b      	str	r3, [r7, #52]	; 0x34
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	461a      	mov	r2, r3
 800de8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de90:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de96:	e841 2300 	strex	r3, r2, [r1]
 800de9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1e6      	bne.n	800de70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3308      	adds	r3, #8
 800dea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	e853 3f00 	ldrex	r3, [r3]
 800deb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800deb8:	633b      	str	r3, [r7, #48]	; 0x30
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	3308      	adds	r3, #8
 800dec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec2:	61ba      	str	r2, [r7, #24]
 800dec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec6:	6979      	ldr	r1, [r7, #20]
 800dec8:	69ba      	ldr	r2, [r7, #24]
 800deca:	e841 2300 	strex	r3, r2, [r1]
 800dece:	613b      	str	r3, [r7, #16]
   return(result);
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e5      	bne.n	800dea2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2220      	movs	r2, #32
 800deda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800dede:	bf00      	nop
 800dee0:	373c      	adds	r7, #60	; 0x3c
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
	...

0800deec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800deec:	b480      	push	{r7}
 800deee:	b095      	sub	sp, #84	; 0x54
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	e853 3f00 	ldrex	r3, [r3]
 800df00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df12:	643b      	str	r3, [r7, #64]	; 0x40
 800df14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e6      	bne.n	800def4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3308      	adds	r3, #8
 800df2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2e:	6a3b      	ldr	r3, [r7, #32]
 800df30:	e853 3f00 	ldrex	r3, [r3]
 800df34:	61fb      	str	r3, [r7, #28]
   return(result);
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	4b1e      	ldr	r3, [pc, #120]	; (800dfb4 <UART_EndRxTransfer+0xc8>)
 800df3a:	4013      	ands	r3, r2
 800df3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3308      	adds	r3, #8
 800df44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df4e:	e841 2300 	strex	r3, r2, [r1]
 800df52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1e5      	bne.n	800df26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d118      	bne.n	800df94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	e853 3f00 	ldrex	r3, [r3]
 800df6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f023 0310 	bic.w	r3, r3, #16
 800df76:	647b      	str	r3, [r7, #68]	; 0x44
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	461a      	mov	r2, r3
 800df7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df80:	61bb      	str	r3, [r7, #24]
 800df82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df84:	6979      	ldr	r1, [r7, #20]
 800df86:	69ba      	ldr	r2, [r7, #24]
 800df88:	e841 2300 	strex	r3, r2, [r1]
 800df8c:	613b      	str	r3, [r7, #16]
   return(result);
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e6      	bne.n	800df62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2220      	movs	r2, #32
 800df98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dfa8:	bf00      	nop
 800dfaa:	3754      	adds	r7, #84	; 0x54
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	effffffe 	.word	0xeffffffe

0800dfb8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b090      	sub	sp, #64	; 0x40
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfce:	d037      	beq.n	800e040 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800dfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3308      	adds	r3, #8
 800dfde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	e853 3f00 	ldrex	r3, [r3]
 800dfe6:	623b      	str	r3, [r7, #32]
   return(result);
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfee:	63bb      	str	r3, [r7, #56]	; 0x38
 800dff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3308      	adds	r3, #8
 800dff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dff8:	633a      	str	r2, [r7, #48]	; 0x30
 800dffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e5      	bne.n	800dfd8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	e853 3f00 	ldrex	r3, [r3]
 800e018:	60fb      	str	r3, [r7, #12]
   return(result);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e020:	637b      	str	r3, [r7, #52]	; 0x34
 800e022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02a:	61fb      	str	r3, [r7, #28]
 800e02c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02e:	69b9      	ldr	r1, [r7, #24]
 800e030:	69fa      	ldr	r2, [r7, #28]
 800e032:	e841 2300 	strex	r3, r2, [r1]
 800e036:	617b      	str	r3, [r7, #20]
   return(result);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d1e6      	bne.n	800e00c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e03e:	e002      	b.n	800e046 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e040:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e042:	f7fe fe1d 	bl	800cc80 <HAL_UART_TxCpltCallback>
}
 800e046:	bf00      	nop
 800e048:	3740      	adds	r7, #64	; 0x40
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7fe fe19 	bl	800cc94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e062:	bf00      	nop
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b09c      	sub	sp, #112	; 0x70
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e076:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	69db      	ldr	r3, [r3, #28]
 800e07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e080:	d071      	beq.n	800e166 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e092:	e853 3f00 	ldrex	r3, [r3]
 800e096:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e09a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e09e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0b0:	e841 2300 	strex	r3, r2, [r1]
 800e0b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1e6      	bne.n	800e08a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	e853 3f00 	ldrex	r3, [r3]
 800e0ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ce:	f023 0301 	bic.w	r3, r3, #1
 800e0d2:	667b      	str	r3, [r7, #100]	; 0x64
 800e0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0dc:	647a      	str	r2, [r7, #68]	; 0x44
 800e0de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0e4:	e841 2300 	strex	r3, r2, [r1]
 800e0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e5      	bne.n	800e0bc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	e853 3f00 	ldrex	r3, [r3]
 800e0fe:	623b      	str	r3, [r7, #32]
   return(result);
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e106:	663b      	str	r3, [r7, #96]	; 0x60
 800e108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3308      	adds	r3, #8
 800e10e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e110:	633a      	str	r2, [r7, #48]	; 0x30
 800e112:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e118:	e841 2300 	strex	r3, r2, [r1]
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1e5      	bne.n	800e0f0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e126:	2220      	movs	r2, #32
 800e128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e12c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e130:	2b01      	cmp	r3, #1
 800e132:	d118      	bne.n	800e166 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	e853 3f00 	ldrex	r3, [r3]
 800e140:	60fb      	str	r3, [r7, #12]
   return(result);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f023 0310 	bic.w	r3, r3, #16
 800e148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e156:	69b9      	ldr	r1, [r7, #24]
 800e158:	69fa      	ldr	r2, [r7, #28]
 800e15a:	e841 2300 	strex	r3, r2, [r1]
 800e15e:	617b      	str	r3, [r7, #20]
   return(result);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1e6      	bne.n	800e134 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d107      	bne.n	800e17e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e16e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e174:	4619      	mov	r1, r3
 800e176:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e178:	f7fe fda0 	bl	800ccbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e17c:	e002      	b.n	800e184 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e17e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e180:	f7f5 f996 	bl	80034b0 <HAL_UART_RxCpltCallback>
}
 800e184:	bf00      	nop
 800e186:	3770      	adds	r7, #112	; 0x70
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e198:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d109      	bne.n	800e1b6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1a8:	085b      	lsrs	r3, r3, #1
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f7fe fd84 	bl	800ccbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1b4:	e002      	b.n	800e1bc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7fe fd76 	bl	800cca8 <HAL_UART_RxHalfCpltCallback>
}
 800e1bc:	bf00      	nop
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1ec:	2b80      	cmp	r3, #128	; 0x80
 800e1ee:	d109      	bne.n	800e204 <UART_DMAError+0x40>
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	2b21      	cmp	r3, #33	; 0x21
 800e1f4:	d106      	bne.n	800e204 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e1fe:	6978      	ldr	r0, [r7, #20]
 800e200:	f7ff fe32 	bl	800de68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e20e:	2b40      	cmp	r3, #64	; 0x40
 800e210:	d109      	bne.n	800e226 <UART_DMAError+0x62>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b22      	cmp	r3, #34	; 0x22
 800e216:	d106      	bne.n	800e226 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e220:	6978      	ldr	r0, [r7, #20]
 800e222:	f7ff fe63 	bl	800deec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22c:	f043 0210 	orr.w	r2, r3, #16
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e236:	6978      	ldr	r0, [r7, #20]
 800e238:	f7f5 f902 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e23c:	bf00      	nop
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7f5 f8ec 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e268:	bf00      	nop
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	e853 3f00 	ldrex	r3, [r3]
 800e284:	60bb      	str	r3, [r7, #8]
   return(result);
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	461a      	mov	r2, r3
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	61bb      	str	r3, [r7, #24]
 800e298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29a:	6979      	ldr	r1, [r7, #20]
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	e841 2300 	strex	r3, r2, [r1]
 800e2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1e6      	bne.n	800e278 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7fe fce1 	bl	800cc80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2be:	bf00      	nop
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2ce:	bf00      	nop
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b083      	sub	sp, #12
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2e2:	bf00      	nop
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b083      	sub	sp, #12
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e2f6:	bf00      	nop
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e310:	2b01      	cmp	r3, #1
 800e312:	d101      	bne.n	800e318 <HAL_UARTEx_DisableFifoMode+0x16>
 800e314:	2302      	movs	r3, #2
 800e316:	e027      	b.n	800e368 <HAL_UARTEx_DisableFifoMode+0x66>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2224      	movs	r2, #36	; 0x24
 800e324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 0201 	bic.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2220      	movs	r2, #32
 800e35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e388:	2302      	movs	r3, #2
 800e38a:	e02d      	b.n	800e3e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2224      	movs	r2, #36	; 0x24
 800e398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f022 0201 	bic.w	r2, r2, #1
 800e3b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	430a      	orrs	r2, r1
 800e3c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 f84f 	bl	800e46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2220      	movs	r2, #32
 800e3da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e400:	2b01      	cmp	r3, #1
 800e402:	d101      	bne.n	800e408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e404:	2302      	movs	r3, #2
 800e406:	e02d      	b.n	800e464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2224      	movs	r2, #36	; 0x24
 800e414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f022 0201 	bic.w	r2, r2, #1
 800e42e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	683a      	ldr	r2, [r7, #0]
 800e440:	430a      	orrs	r2, r1
 800e442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f811 	bl	800e46c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2220      	movs	r2, #32
 800e456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d108      	bne.n	800e48e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e48c:	e031      	b.n	800e4f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e48e:	2310      	movs	r3, #16
 800e490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e492:	2310      	movs	r3, #16
 800e494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	0e5b      	lsrs	r3, r3, #25
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	f003 0307 	and.w	r3, r3, #7
 800e4a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	0f5b      	lsrs	r3, r3, #29
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	f003 0307 	and.w	r3, r3, #7
 800e4b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	7b3a      	ldrb	r2, [r7, #12]
 800e4ba:	4911      	ldr	r1, [pc, #68]	; (800e500 <UARTEx_SetNbDataToProcess+0x94>)
 800e4bc:	5c8a      	ldrb	r2, [r1, r2]
 800e4be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e4c2:	7b3a      	ldrb	r2, [r7, #12]
 800e4c4:	490f      	ldr	r1, [pc, #60]	; (800e504 <UARTEx_SetNbDataToProcess+0x98>)
 800e4c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	7b7a      	ldrb	r2, [r7, #13]
 800e4d8:	4909      	ldr	r1, [pc, #36]	; (800e500 <UARTEx_SetNbDataToProcess+0x94>)
 800e4da:	5c8a      	ldrb	r2, [r1, r2]
 800e4dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4e0:	7b7a      	ldrb	r2, [r7, #13]
 800e4e2:	4908      	ldr	r1, [pc, #32]	; (800e504 <UARTEx_SetNbDataToProcess+0x98>)
 800e4e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e4f2:	bf00      	nop
 800e4f4:	3714      	adds	r7, #20
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	0800ebc4 	.word	0x0800ebc4
 800e504:	0800ebcc 	.word	0x0800ebcc

0800e508 <__cxa_pure_virtual>:
 800e508:	b508      	push	{r3, lr}
 800e50a:	f000 f80d 	bl	800e528 <_ZSt9terminatev>

0800e50e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e50e:	b508      	push	{r3, lr}
 800e510:	4780      	blx	r0
 800e512:	f000 f80e 	bl	800e532 <abort>
	...

0800e518 <_ZSt13get_terminatev>:
 800e518:	4b02      	ldr	r3, [pc, #8]	; (800e524 <_ZSt13get_terminatev+0xc>)
 800e51a:	6818      	ldr	r0, [r3, #0]
 800e51c:	f3bf 8f5b 	dmb	ish
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	240001b0 	.word	0x240001b0

0800e528 <_ZSt9terminatev>:
 800e528:	b508      	push	{r3, lr}
 800e52a:	f7ff fff5 	bl	800e518 <_ZSt13get_terminatev>
 800e52e:	f7ff ffee 	bl	800e50e <_ZN10__cxxabiv111__terminateEPFvvE>

0800e532 <abort>:
 800e532:	b508      	push	{r3, lr}
 800e534:	2006      	movs	r0, #6
 800e536:	f000 f873 	bl	800e620 <raise>
 800e53a:	2001      	movs	r0, #1
 800e53c:	f7f6 f9fc 	bl	8004938 <_exit>

0800e540 <__errno>:
 800e540:	4b01      	ldr	r3, [pc, #4]	; (800e548 <__errno+0x8>)
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	240001b4 	.word	0x240001b4

0800e54c <__libc_init_array>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	4d0d      	ldr	r5, [pc, #52]	; (800e584 <__libc_init_array+0x38>)
 800e550:	4c0d      	ldr	r4, [pc, #52]	; (800e588 <__libc_init_array+0x3c>)
 800e552:	1b64      	subs	r4, r4, r5
 800e554:	10a4      	asrs	r4, r4, #2
 800e556:	2600      	movs	r6, #0
 800e558:	42a6      	cmp	r6, r4
 800e55a:	d109      	bne.n	800e570 <__libc_init_array+0x24>
 800e55c:	4d0b      	ldr	r5, [pc, #44]	; (800e58c <__libc_init_array+0x40>)
 800e55e:	4c0c      	ldr	r4, [pc, #48]	; (800e590 <__libc_init_array+0x44>)
 800e560:	f000 f9b0 	bl	800e8c4 <_init>
 800e564:	1b64      	subs	r4, r4, r5
 800e566:	10a4      	asrs	r4, r4, #2
 800e568:	2600      	movs	r6, #0
 800e56a:	42a6      	cmp	r6, r4
 800e56c:	d105      	bne.n	800e57a <__libc_init_array+0x2e>
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	f855 3b04 	ldr.w	r3, [r5], #4
 800e574:	4798      	blx	r3
 800e576:	3601      	adds	r6, #1
 800e578:	e7ee      	b.n	800e558 <__libc_init_array+0xc>
 800e57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e57e:	4798      	blx	r3
 800e580:	3601      	adds	r6, #1
 800e582:	e7f2      	b.n	800e56a <__libc_init_array+0x1e>
 800e584:	0800ebdc 	.word	0x0800ebdc
 800e588:	0800ebdc 	.word	0x0800ebdc
 800e58c:	0800ebdc 	.word	0x0800ebdc
 800e590:	0800ebe4 	.word	0x0800ebe4

0800e594 <memcpy>:
 800e594:	440a      	add	r2, r1
 800e596:	4291      	cmp	r1, r2
 800e598:	f100 33ff 	add.w	r3, r0, #4294967295
 800e59c:	d100      	bne.n	800e5a0 <memcpy+0xc>
 800e59e:	4770      	bx	lr
 800e5a0:	b510      	push	{r4, lr}
 800e5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5aa:	4291      	cmp	r1, r2
 800e5ac:	d1f9      	bne.n	800e5a2 <memcpy+0xe>
 800e5ae:	bd10      	pop	{r4, pc}

0800e5b0 <memset>:
 800e5b0:	4402      	add	r2, r0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d100      	bne.n	800e5ba <memset+0xa>
 800e5b8:	4770      	bx	lr
 800e5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e5be:	e7f9      	b.n	800e5b4 <memset+0x4>

0800e5c0 <realloc>:
 800e5c0:	4b02      	ldr	r3, [pc, #8]	; (800e5cc <realloc+0xc>)
 800e5c2:	460a      	mov	r2, r1
 800e5c4:	4601      	mov	r1, r0
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	f000 b8da 	b.w	800e780 <_realloc_r>
 800e5cc:	240001b4 	.word	0x240001b4

0800e5d0 <_raise_r>:
 800e5d0:	291f      	cmp	r1, #31
 800e5d2:	b538      	push	{r3, r4, r5, lr}
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	460d      	mov	r5, r1
 800e5d8:	d904      	bls.n	800e5e4 <_raise_r+0x14>
 800e5da:	2316      	movs	r3, #22
 800e5dc:	6003      	str	r3, [r0, #0]
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
 800e5e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5e6:	b112      	cbz	r2, 800e5ee <_raise_r+0x1e>
 800e5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5ec:	b94b      	cbnz	r3, 800e602 <_raise_r+0x32>
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f000 f830 	bl	800e654 <_getpid_r>
 800e5f4:	462a      	mov	r2, r5
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5fe:	f000 b817 	b.w	800e630 <_kill_r>
 800e602:	2b01      	cmp	r3, #1
 800e604:	d00a      	beq.n	800e61c <_raise_r+0x4c>
 800e606:	1c59      	adds	r1, r3, #1
 800e608:	d103      	bne.n	800e612 <_raise_r+0x42>
 800e60a:	2316      	movs	r3, #22
 800e60c:	6003      	str	r3, [r0, #0]
 800e60e:	2001      	movs	r0, #1
 800e610:	e7e7      	b.n	800e5e2 <_raise_r+0x12>
 800e612:	2400      	movs	r4, #0
 800e614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e618:	4628      	mov	r0, r5
 800e61a:	4798      	blx	r3
 800e61c:	2000      	movs	r0, #0
 800e61e:	e7e0      	b.n	800e5e2 <_raise_r+0x12>

0800e620 <raise>:
 800e620:	4b02      	ldr	r3, [pc, #8]	; (800e62c <raise+0xc>)
 800e622:	4601      	mov	r1, r0
 800e624:	6818      	ldr	r0, [r3, #0]
 800e626:	f7ff bfd3 	b.w	800e5d0 <_raise_r>
 800e62a:	bf00      	nop
 800e62c:	240001b4 	.word	0x240001b4

0800e630 <_kill_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d07      	ldr	r5, [pc, #28]	; (800e650 <_kill_r+0x20>)
 800e634:	2300      	movs	r3, #0
 800e636:	4604      	mov	r4, r0
 800e638:	4608      	mov	r0, r1
 800e63a:	4611      	mov	r1, r2
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	f7f6 f96b 	bl	8004918 <_kill>
 800e642:	1c43      	adds	r3, r0, #1
 800e644:	d102      	bne.n	800e64c <_kill_r+0x1c>
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	b103      	cbz	r3, 800e64c <_kill_r+0x1c>
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	bd38      	pop	{r3, r4, r5, pc}
 800e64e:	bf00      	nop
 800e650:	2400105c 	.word	0x2400105c

0800e654 <_getpid_r>:
 800e654:	f7f6 b958 	b.w	8004908 <_getpid>

0800e658 <sbrk_aligned>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	4e0e      	ldr	r6, [pc, #56]	; (800e694 <sbrk_aligned+0x3c>)
 800e65c:	460c      	mov	r4, r1
 800e65e:	6831      	ldr	r1, [r6, #0]
 800e660:	4605      	mov	r5, r0
 800e662:	b911      	cbnz	r1, 800e66a <sbrk_aligned+0x12>
 800e664:	f000 f8bc 	bl	800e7e0 <_sbrk_r>
 800e668:	6030      	str	r0, [r6, #0]
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f000 f8b7 	bl	800e7e0 <_sbrk_r>
 800e672:	1c43      	adds	r3, r0, #1
 800e674:	d00a      	beq.n	800e68c <sbrk_aligned+0x34>
 800e676:	1cc4      	adds	r4, r0, #3
 800e678:	f024 0403 	bic.w	r4, r4, #3
 800e67c:	42a0      	cmp	r0, r4
 800e67e:	d007      	beq.n	800e690 <sbrk_aligned+0x38>
 800e680:	1a21      	subs	r1, r4, r0
 800e682:	4628      	mov	r0, r5
 800e684:	f000 f8ac 	bl	800e7e0 <_sbrk_r>
 800e688:	3001      	adds	r0, #1
 800e68a:	d101      	bne.n	800e690 <sbrk_aligned+0x38>
 800e68c:	f04f 34ff 	mov.w	r4, #4294967295
 800e690:	4620      	mov	r0, r4
 800e692:	bd70      	pop	{r4, r5, r6, pc}
 800e694:	24001058 	.word	0x24001058

0800e698 <_malloc_r>:
 800e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69c:	1ccd      	adds	r5, r1, #3
 800e69e:	f025 0503 	bic.w	r5, r5, #3
 800e6a2:	3508      	adds	r5, #8
 800e6a4:	2d0c      	cmp	r5, #12
 800e6a6:	bf38      	it	cc
 800e6a8:	250c      	movcc	r5, #12
 800e6aa:	2d00      	cmp	r5, #0
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	db01      	blt.n	800e6b4 <_malloc_r+0x1c>
 800e6b0:	42a9      	cmp	r1, r5
 800e6b2:	d905      	bls.n	800e6c0 <_malloc_r+0x28>
 800e6b4:	230c      	movs	r3, #12
 800e6b6:	603b      	str	r3, [r7, #0]
 800e6b8:	2600      	movs	r6, #0
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c0:	4e2e      	ldr	r6, [pc, #184]	; (800e77c <_malloc_r+0xe4>)
 800e6c2:	f000 f89d 	bl	800e800 <__malloc_lock>
 800e6c6:	6833      	ldr	r3, [r6, #0]
 800e6c8:	461c      	mov	r4, r3
 800e6ca:	bb34      	cbnz	r4, 800e71a <_malloc_r+0x82>
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f7ff ffc2 	bl	800e658 <sbrk_aligned>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	d14d      	bne.n	800e776 <_malloc_r+0xde>
 800e6da:	6834      	ldr	r4, [r6, #0]
 800e6dc:	4626      	mov	r6, r4
 800e6de:	2e00      	cmp	r6, #0
 800e6e0:	d140      	bne.n	800e764 <_malloc_r+0xcc>
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4638      	mov	r0, r7
 800e6e8:	eb04 0803 	add.w	r8, r4, r3
 800e6ec:	f000 f878 	bl	800e7e0 <_sbrk_r>
 800e6f0:	4580      	cmp	r8, r0
 800e6f2:	d13a      	bne.n	800e76a <_malloc_r+0xd2>
 800e6f4:	6821      	ldr	r1, [r4, #0]
 800e6f6:	3503      	adds	r5, #3
 800e6f8:	1a6d      	subs	r5, r5, r1
 800e6fa:	f025 0503 	bic.w	r5, r5, #3
 800e6fe:	3508      	adds	r5, #8
 800e700:	2d0c      	cmp	r5, #12
 800e702:	bf38      	it	cc
 800e704:	250c      	movcc	r5, #12
 800e706:	4629      	mov	r1, r5
 800e708:	4638      	mov	r0, r7
 800e70a:	f7ff ffa5 	bl	800e658 <sbrk_aligned>
 800e70e:	3001      	adds	r0, #1
 800e710:	d02b      	beq.n	800e76a <_malloc_r+0xd2>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	442b      	add	r3, r5
 800e716:	6023      	str	r3, [r4, #0]
 800e718:	e00e      	b.n	800e738 <_malloc_r+0xa0>
 800e71a:	6822      	ldr	r2, [r4, #0]
 800e71c:	1b52      	subs	r2, r2, r5
 800e71e:	d41e      	bmi.n	800e75e <_malloc_r+0xc6>
 800e720:	2a0b      	cmp	r2, #11
 800e722:	d916      	bls.n	800e752 <_malloc_r+0xba>
 800e724:	1961      	adds	r1, r4, r5
 800e726:	42a3      	cmp	r3, r4
 800e728:	6025      	str	r5, [r4, #0]
 800e72a:	bf18      	it	ne
 800e72c:	6059      	strne	r1, [r3, #4]
 800e72e:	6863      	ldr	r3, [r4, #4]
 800e730:	bf08      	it	eq
 800e732:	6031      	streq	r1, [r6, #0]
 800e734:	5162      	str	r2, [r4, r5]
 800e736:	604b      	str	r3, [r1, #4]
 800e738:	4638      	mov	r0, r7
 800e73a:	f104 060b 	add.w	r6, r4, #11
 800e73e:	f000 f865 	bl	800e80c <__malloc_unlock>
 800e742:	f026 0607 	bic.w	r6, r6, #7
 800e746:	1d23      	adds	r3, r4, #4
 800e748:	1af2      	subs	r2, r6, r3
 800e74a:	d0b6      	beq.n	800e6ba <_malloc_r+0x22>
 800e74c:	1b9b      	subs	r3, r3, r6
 800e74e:	50a3      	str	r3, [r4, r2]
 800e750:	e7b3      	b.n	800e6ba <_malloc_r+0x22>
 800e752:	6862      	ldr	r2, [r4, #4]
 800e754:	42a3      	cmp	r3, r4
 800e756:	bf0c      	ite	eq
 800e758:	6032      	streq	r2, [r6, #0]
 800e75a:	605a      	strne	r2, [r3, #4]
 800e75c:	e7ec      	b.n	800e738 <_malloc_r+0xa0>
 800e75e:	4623      	mov	r3, r4
 800e760:	6864      	ldr	r4, [r4, #4]
 800e762:	e7b2      	b.n	800e6ca <_malloc_r+0x32>
 800e764:	4634      	mov	r4, r6
 800e766:	6876      	ldr	r6, [r6, #4]
 800e768:	e7b9      	b.n	800e6de <_malloc_r+0x46>
 800e76a:	230c      	movs	r3, #12
 800e76c:	603b      	str	r3, [r7, #0]
 800e76e:	4638      	mov	r0, r7
 800e770:	f000 f84c 	bl	800e80c <__malloc_unlock>
 800e774:	e7a1      	b.n	800e6ba <_malloc_r+0x22>
 800e776:	6025      	str	r5, [r4, #0]
 800e778:	e7de      	b.n	800e738 <_malloc_r+0xa0>
 800e77a:	bf00      	nop
 800e77c:	24001054 	.word	0x24001054

0800e780 <_realloc_r>:
 800e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e784:	4680      	mov	r8, r0
 800e786:	4614      	mov	r4, r2
 800e788:	460e      	mov	r6, r1
 800e78a:	b921      	cbnz	r1, 800e796 <_realloc_r+0x16>
 800e78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e790:	4611      	mov	r1, r2
 800e792:	f7ff bf81 	b.w	800e698 <_malloc_r>
 800e796:	b92a      	cbnz	r2, 800e7a4 <_realloc_r+0x24>
 800e798:	f000 f83e 	bl	800e818 <_free_r>
 800e79c:	4625      	mov	r5, r4
 800e79e:	4628      	mov	r0, r5
 800e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a4:	f000 f884 	bl	800e8b0 <_malloc_usable_size_r>
 800e7a8:	4284      	cmp	r4, r0
 800e7aa:	4607      	mov	r7, r0
 800e7ac:	d802      	bhi.n	800e7b4 <_realloc_r+0x34>
 800e7ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7b2:	d812      	bhi.n	800e7da <_realloc_r+0x5a>
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	4640      	mov	r0, r8
 800e7b8:	f7ff ff6e 	bl	800e698 <_malloc_r>
 800e7bc:	4605      	mov	r5, r0
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d0ed      	beq.n	800e79e <_realloc_r+0x1e>
 800e7c2:	42bc      	cmp	r4, r7
 800e7c4:	4622      	mov	r2, r4
 800e7c6:	4631      	mov	r1, r6
 800e7c8:	bf28      	it	cs
 800e7ca:	463a      	movcs	r2, r7
 800e7cc:	f7ff fee2 	bl	800e594 <memcpy>
 800e7d0:	4631      	mov	r1, r6
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f000 f820 	bl	800e818 <_free_r>
 800e7d8:	e7e1      	b.n	800e79e <_realloc_r+0x1e>
 800e7da:	4635      	mov	r5, r6
 800e7dc:	e7df      	b.n	800e79e <_realloc_r+0x1e>
	...

0800e7e0 <_sbrk_r>:
 800e7e0:	b538      	push	{r3, r4, r5, lr}
 800e7e2:	4d06      	ldr	r5, [pc, #24]	; (800e7fc <_sbrk_r+0x1c>)
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	602b      	str	r3, [r5, #0]
 800e7ec:	f7f6 f8ae 	bl	800494c <_sbrk>
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	d102      	bne.n	800e7fa <_sbrk_r+0x1a>
 800e7f4:	682b      	ldr	r3, [r5, #0]
 800e7f6:	b103      	cbz	r3, 800e7fa <_sbrk_r+0x1a>
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	bd38      	pop	{r3, r4, r5, pc}
 800e7fc:	2400105c 	.word	0x2400105c

0800e800 <__malloc_lock>:
 800e800:	4801      	ldr	r0, [pc, #4]	; (800e808 <__malloc_lock+0x8>)
 800e802:	f000 b85d 	b.w	800e8c0 <__retarget_lock_acquire_recursive>
 800e806:	bf00      	nop
 800e808:	24001060 	.word	0x24001060

0800e80c <__malloc_unlock>:
 800e80c:	4801      	ldr	r0, [pc, #4]	; (800e814 <__malloc_unlock+0x8>)
 800e80e:	f000 b858 	b.w	800e8c2 <__retarget_lock_release_recursive>
 800e812:	bf00      	nop
 800e814:	24001060 	.word	0x24001060

0800e818 <_free_r>:
 800e818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e81a:	2900      	cmp	r1, #0
 800e81c:	d044      	beq.n	800e8a8 <_free_r+0x90>
 800e81e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e822:	9001      	str	r0, [sp, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f1a1 0404 	sub.w	r4, r1, #4
 800e82a:	bfb8      	it	lt
 800e82c:	18e4      	addlt	r4, r4, r3
 800e82e:	f7ff ffe7 	bl	800e800 <__malloc_lock>
 800e832:	4a1e      	ldr	r2, [pc, #120]	; (800e8ac <_free_r+0x94>)
 800e834:	9801      	ldr	r0, [sp, #4]
 800e836:	6813      	ldr	r3, [r2, #0]
 800e838:	b933      	cbnz	r3, 800e848 <_free_r+0x30>
 800e83a:	6063      	str	r3, [r4, #4]
 800e83c:	6014      	str	r4, [r2, #0]
 800e83e:	b003      	add	sp, #12
 800e840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e844:	f7ff bfe2 	b.w	800e80c <__malloc_unlock>
 800e848:	42a3      	cmp	r3, r4
 800e84a:	d908      	bls.n	800e85e <_free_r+0x46>
 800e84c:	6825      	ldr	r5, [r4, #0]
 800e84e:	1961      	adds	r1, r4, r5
 800e850:	428b      	cmp	r3, r1
 800e852:	bf01      	itttt	eq
 800e854:	6819      	ldreq	r1, [r3, #0]
 800e856:	685b      	ldreq	r3, [r3, #4]
 800e858:	1949      	addeq	r1, r1, r5
 800e85a:	6021      	streq	r1, [r4, #0]
 800e85c:	e7ed      	b.n	800e83a <_free_r+0x22>
 800e85e:	461a      	mov	r2, r3
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	b10b      	cbz	r3, 800e868 <_free_r+0x50>
 800e864:	42a3      	cmp	r3, r4
 800e866:	d9fa      	bls.n	800e85e <_free_r+0x46>
 800e868:	6811      	ldr	r1, [r2, #0]
 800e86a:	1855      	adds	r5, r2, r1
 800e86c:	42a5      	cmp	r5, r4
 800e86e:	d10b      	bne.n	800e888 <_free_r+0x70>
 800e870:	6824      	ldr	r4, [r4, #0]
 800e872:	4421      	add	r1, r4
 800e874:	1854      	adds	r4, r2, r1
 800e876:	42a3      	cmp	r3, r4
 800e878:	6011      	str	r1, [r2, #0]
 800e87a:	d1e0      	bne.n	800e83e <_free_r+0x26>
 800e87c:	681c      	ldr	r4, [r3, #0]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	6053      	str	r3, [r2, #4]
 800e882:	4421      	add	r1, r4
 800e884:	6011      	str	r1, [r2, #0]
 800e886:	e7da      	b.n	800e83e <_free_r+0x26>
 800e888:	d902      	bls.n	800e890 <_free_r+0x78>
 800e88a:	230c      	movs	r3, #12
 800e88c:	6003      	str	r3, [r0, #0]
 800e88e:	e7d6      	b.n	800e83e <_free_r+0x26>
 800e890:	6825      	ldr	r5, [r4, #0]
 800e892:	1961      	adds	r1, r4, r5
 800e894:	428b      	cmp	r3, r1
 800e896:	bf04      	itt	eq
 800e898:	6819      	ldreq	r1, [r3, #0]
 800e89a:	685b      	ldreq	r3, [r3, #4]
 800e89c:	6063      	str	r3, [r4, #4]
 800e89e:	bf04      	itt	eq
 800e8a0:	1949      	addeq	r1, r1, r5
 800e8a2:	6021      	streq	r1, [r4, #0]
 800e8a4:	6054      	str	r4, [r2, #4]
 800e8a6:	e7ca      	b.n	800e83e <_free_r+0x26>
 800e8a8:	b003      	add	sp, #12
 800e8aa:	bd30      	pop	{r4, r5, pc}
 800e8ac:	24001054 	.word	0x24001054

0800e8b0 <_malloc_usable_size_r>:
 800e8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8b4:	1f18      	subs	r0, r3, #4
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	bfbc      	itt	lt
 800e8ba:	580b      	ldrlt	r3, [r1, r0]
 800e8bc:	18c0      	addlt	r0, r0, r3
 800e8be:	4770      	bx	lr

0800e8c0 <__retarget_lock_acquire_recursive>:
 800e8c0:	4770      	bx	lr

0800e8c2 <__retarget_lock_release_recursive>:
 800e8c2:	4770      	bx	lr

0800e8c4 <_init>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	bf00      	nop
 800e8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ca:	bc08      	pop	{r3}
 800e8cc:	469e      	mov	lr, r3
 800e8ce:	4770      	bx	lr

0800e8d0 <_fini>:
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d2:	bf00      	nop
 800e8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d6:	bc08      	pop	{r3}
 800e8d8:	469e      	mov	lr, r3
 800e8da:	4770      	bx	lr
