
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e818  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800eae8  0800eae8  0001eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ede0  0800ede0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800edf0  0800edf0  0001edf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  0800edf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a50  24000218  0800f00c  00020218  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001c68  0800f00c  00021c68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002134e  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036be  00000000  00000000  00041594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  00044c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001398  00000000  00000000  00046100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035170  00000000  00000000  00047498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b600  00000000  00000000  0007c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015365f  00000000  00000000  00097c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eb267  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c40  00000000  00000000  001eb2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000218 	.word	0x24000218
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ead0 	.word	0x0800ead0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400021c 	.word	0x2400021c
 800030c:	0800ead0 	.word	0x0800ead0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	4aa9      	ldr	r2, [pc, #676]	; (8000930 <pidCtrl+0x2b0>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2168      	movs	r1, #104	; 0x68
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	3318      	adds	r3, #24
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000908 <pidCtrl+0x288>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000910 <pidCtrl+0x290>
 80006ae:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b2:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8000918 <pidCtrl+0x298>
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000920 <pidCtrl+0x2a0>
 80006be:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c2:	4a9b      	ldr	r2, [pc, #620]	; (8000930 <pidCtrl+0x2b0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2168      	movs	r1, #104	; 0x68
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3328      	adds	r3, #40	; 0x28
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d4:	4a96      	ldr	r2, [pc, #600]	; (8000930 <pidCtrl+0x2b0>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2168      	movs	r1, #104	; 0x68
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	3320      	adds	r3, #32
 80006e2:	ed93 6b00 	vldr	d6, [r3]
 80006e6:	4a92      	ldr	r2, [pc, #584]	; (8000930 <pidCtrl+0x2b0>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2168      	movs	r1, #104	; 0x68
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <pidCtrl+0x2b0>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2168      	movs	r1, #104	; 0x68
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 800070e:	4a88      	ldr	r2, [pc, #544]	; (8000930 <pidCtrl+0x2b0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2168      	movs	r1, #104	; 0x68
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	ed93 6b00 	vldr	d6, [r3]
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <pidCtrl+0x2b0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2168      	movs	r1, #104	; 0x68
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	ed93 7b00 	vldr	d7, [r3]
 8000730:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000734:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <pidCtrl+0x2b0>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2168      	movs	r1, #104	; 0x68
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	3348      	adds	r3, #72	; 0x48
 8000742:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000746:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <pidCtrl+0x2b0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2168      	movs	r1, #104	; 0x68
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	ed93 6b00 	vldr	d6, [r3]
 8000758:	4a75      	ldr	r2, [pc, #468]	; (8000930 <pidCtrl+0x2b0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	ed93 5b00 	vldr	d5, [r3]
 800076a:	4a71      	ldr	r2, [pc, #452]	; (8000930 <pidCtrl+0x2b0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	3338      	adds	r3, #56	; 0x38
 8000778:	ed93 7b00 	vldr	d7, [r3]
 800077c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000780:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8000920 <pidCtrl+0x2a0>
 8000784:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	4a68      	ldr	r2, [pc, #416]	; (8000930 <pidCtrl+0x2b0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <pidCtrl+0x2b0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2168      	movs	r1, #104	; 0x68
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	3310      	adds	r3, #16
 80007ac:	ed93 6b00 	vldr	d6, [r3]
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <pidCtrl+0x2b0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2168      	movs	r1, #104	; 0x68
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	ed93 5b00 	vldr	d5, [r3]
 80007c2:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <pidCtrl+0x2b0>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2168      	movs	r1, #104	; 0x68
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	3338      	adds	r3, #56	; 0x38
 80007d0:	ed93 7b00 	vldr	d7, [r3]
 80007d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007dc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000920 <pidCtrl+0x2a0>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <pidCtrl+0x2b0>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	3358      	adds	r3, #88	; 0x58
 80007f2:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80007f6:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <pidCtrl+0x2b0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2168      	movs	r1, #104	; 0x68
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3350      	adds	r3, #80	; 0x50
 8000804:	ed93 7b00 	vldr	d7, [r3]
 8000808:	eeb0 7bc7 	vabs.f64	d7, d7
 800080c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000810:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	dd1d      	ble.n	8000856 <pidCtrl+0x1d6>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <pidCtrl+0x2b0>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2168      	movs	r1, #104	; 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	3350      	adds	r3, #80	; 0x50
 8000828:	ed93 7b00 	vldr	d7, [r3]
 800082c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	db03      	blt.n	800083e <pidCtrl+0x1be>
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <pidCtrl+0x2b4>)
 800083c:	e002      	b.n	8000844 <pidCtrl+0x1c4>
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pidCtrl+0x2b8>)
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <pidCtrl+0x2b0>)
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2468      	movs	r4, #104	; 0x68
 800084a:	fb04 f101 	mul.w	r1, r4, r1
 800084e:	4401      	add	r1, r0
 8000850:	3150      	adds	r1, #80	; 0x50
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <pidCtrl+0x2b0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2168      	movs	r1, #104	; 0x68
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	3348      	adds	r3, #72	; 0x48
 8000864:	ed93 6b00 	vldr	d6, [r3]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <pidCtrl+0x2b0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2168      	movs	r1, #104	; 0x68
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <pidCtrl+0x2b0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2168      	movs	r1, #104	; 0x68
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	ed93 7b00 	vldr	d7, [r3]
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <pidCtrl+0x2b0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	3340      	adds	r3, #64	; 0x40
 80008a2:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <pidCtrl+0x2b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <pidCtrl+0x2b0>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2468      	movs	r4, #104	; 0x68
 80008be:	fb04 f101 	mul.w	r1, r4, r1
 80008c2:	4401      	add	r1, r0
 80008c4:	3138      	adds	r1, #56	; 0x38
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]

	Kpid[i].pulse = fabs(Kpid[i].u) * 3200;
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <pidCtrl+0x2b0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	3340      	adds	r3, #64	; 0x40
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000928 <pidCtrl+0x2a8>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <pidCtrl+0x2b0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2168      	movs	r1, #104	; 0x68
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	ed83 7b00 	vstr	d7, [r3]
//	if(Kpid[i].pulse > 3200)	Kpid[i].pulse = 3200;
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	f3af 8000 	nop.w
 8000908:	54cadf99 	.word	0x54cadf99
 800090c:	400921fb 	.word	0x400921fb
 8000910:	b6ae7d56 	.word	0xb6ae7d56
 8000914:	3fb97f62 	.word	0x3fb97f62
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	40e4cccc 	.word	0x40e4cccc
 8000920:	00000000 	.word	0x00000000
 8000924:	408f4000 	.word	0x408f4000
 8000928:	00000000 	.word	0x00000000
 800092c:	40a90000 	.word	0x40a90000
 8000930:	24000000 	.word	0x24000000
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f004 f9ec 	bl	8004d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f862 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fc68 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 fc3e 	bl	80011cc <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000950:	f000 fbf0 	bl	8001134 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000954:	f000 f91a 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000958:	f000 f96e 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000960:	f000 fa0e 	bl	8000d80 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000964:	f000 faa8 	bl	8000eb8 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000968:	f000 fb38 	bl	8000fdc <MX_TIM23_Init>
  MX_TIM24_Init();
 800096c:	f000 fb8c 	bl	8001088 <MX_TIM24_Init>
  MX_TIM2_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0xb0>)
 8000976:	f00a f965 	bl	800ac44 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xb4>)
 800097c:	f00a f962 	bl	800ac44 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0xb8>)
 8000984:	f00a fa3c 	bl	800ae00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000988:	210c      	movs	r1, #12
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0xb8>)
 800098c:	f00a fa38 	bl	800ae00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0xbc>)
 8000994:	f00a fa34 	bl	800ae00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <main+0xbc>)
 800099c:	f00a fa30 	bl	800ae00 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0xc0>)
 80009a4:	f00a fbee 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xc0>)
 80009ac:	f00a fbea 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xc4>)
 80009b4:	f00a fbe6 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xc4>)
 80009bc:	f00a fbe2 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0xc8>)
 80009c4:	f00a fbde 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xc8>)
 80009cc:	f00a fbda 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0xcc>)
 80009d4:	f00a fbd6 	bl	800b184 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <main+0xcc>)
 80009dc:	f00a fbd2 	bl	800b184 <HAL_TIM_Encoder_Start>


    setup();
 80009e0:	f002 fbe8 	bl	80031b4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 80009e4:	f002 fbfc 	bl	80031e0 <loop>
 80009e8:	e7fc      	b.n	80009e4 <main+0xa8>
 80009ea:	bf00      	nop
 80009ec:	24000318 	.word	0x24000318
 80009f0:	24000234 	.word	0x24000234
 80009f4:	24000364 	.word	0x24000364
 80009f8:	240003b0 	.word	0x240003b0
 80009fc:	24000448 	.word	0x24000448
 8000a00:	24000280 	.word	0x24000280
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240003fc 	.word	0x240003fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00d fece 	bl	800e7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fec8 	bl	800e7bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f007 fe21 	bl	8008674 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0xe0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <SystemClock_Config+0xe0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xe0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a7a:	2315      	movs	r3, #21
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fe24 	bl	80086e8 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fc79 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f9b6 	bl	8008e44 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ade:	f000 fc5d 	bl	800139c <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	223f      	movs	r2, #63	; 0x3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b38:	f00a f82c 	bl	800ab94 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b42:	f000 fc2b 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b54:	f00a fdd8 	bl	800b708 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f000 fc1d 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b70:	f00b fb2a 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b7a:	f000 fc0f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000234 	.word	0x24000234

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00d fe0e 	bl	800e7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f00a fa1c 	bl	800b038 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fbc9 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f00b fad6 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fbbb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000280 	.word	0x24000280
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fdb8 	bl	800e7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f00a f9c6 	bl	800b038 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fb73 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f00b fa80 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 fb65 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240002cc 	.word	0x240002cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_TIM5_Init+0x98>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d2a:	f009 ff33 	bl	800ab94 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fb32 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d46:	f00a fcdf 	bl	800b708 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fb24 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d62:	f00b fa31 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fb16 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	40000c00 	.word	0x40000c00

08000d80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00d fd05 	bl	800e7bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x134>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000de0:	f009 ffb6 	bl	800ad50 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fad7 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e02:	f00b f9e1 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fac6 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e36:	f00a fb53 	bl	800b4e0 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 faac 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e4e:	f00a fb47 	bl	800b4e0 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 faa0 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e92:	f00b fa35 	bl	800c300 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000e9c:	f000 fa7e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000ea2:	f003 fa51 	bl	8004348 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d fc69 	bl	800e7bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM15_Init+0x120>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000efe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f18:	f009 ff1a 	bl	800ad50 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fa3b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f36:	f00b f947 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fa2c 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f6a:	f00a fab9 	bl	800b4e0 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f74:	f000 fa12 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f82:	f00a faad 	bl	800b4e0 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 fa06 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fb8:	f00b f9a2 	bl	800c300 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fc2:	f000 f9eb 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fc8:	f003 f9be 	bl	8004348 <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3760      	adds	r7, #96	; 0x60
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240003b0 	.word	0x240003b0
 8000fd8:	40014000 	.word	0x40014000

08000fdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d fbe6 	bl	800e7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM23_Init+0xa4>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM23_Init+0xa8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM23_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM23_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM23_Init+0xa4>)
 800104c:	f009 fff4 	bl	800b038 <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 f9a1 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001068:	f00b f8ae 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 f993 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240003fc 	.word	0x240003fc
 8001084:	4000e000 	.word	0x4000e000

08001088 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fb90 	bl	800e7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_TIM24_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM24_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM24_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM24_Init+0xa4>)
 80010f8:	f009 ff9e 	bl	800b038 <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 f94b 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM24_Init+0xa4>)
 8001114:	f00b f858 	bl	800c1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 f93d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000448 	.word	0x24000448
 8001130:	4000e400 	.word	0x4000e400

08001134 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_USART10_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 57600;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001140:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001144:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800117e:	f00b f97d 	bl	800c47c <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 f908 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001190:	f00d f9f6 	bl	800e580 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 f8ff 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011a2:	f00d fa2b 	bl	800e5fc <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 f8f6 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011b2:	f00d f9ac 	bl	800e50e <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 f8ee 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000494 	.word	0x24000494
 80011c8:	40011c00 	.word	0x40011c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x4c>)
 80011d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x4c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 ff22 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fa:	200b      	movs	r0, #11
 80011fc:	f003 ff39 	bl	8005072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200c      	movs	r0, #12
 8001206:	f003 ff1a 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800120a:	200c      	movs	r0, #12
 800120c:	f003 ff31 	bl	8005072 <HAL_NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <MX_GPIO_Init+0x170>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <MX_GPIO_Init+0x170>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_GPIO_Init+0x170>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x170>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_GPIO_Init+0x170>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x170>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <MX_GPIO_Init+0x170>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x170>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_GPIO_Init+0x170>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x170>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x170>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x170>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0x170>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_GPIO_Init+0x174>)
 800130c:	f007 f974 	bl	80085f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <MX_GPIO_Init+0x178>)
 8001318:	f007 f96e 	bl	80085f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800131c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001320:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0x174>)
 8001336:	f006 feb5 	bl	80080a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x17c>)
 8001352:	f006 fea7 	bl	80080a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x178>)
 8001370:	f006 fe98 	bl	80080a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f003 fe60 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fe77 	bl	8005072 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58021000 	.word	0x58021000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>

080013a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	0800ed90 	.word	0x0800ed90

080013e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      data()
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffe8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffcf 	bl	80013a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0800ed78 	.word	0x0800ed78

08001418 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0a19      	lsrs	r1, r3, #8
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3302      	adds	r3, #2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b2ca      	uxtb	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0e19      	lsrs	r1, r3, #24
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a19      	lsrs	r1, r3, #8
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0c19      	lsrs	r1, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3302      	adds	r3, #2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0e19      	lsrs	r1, r3, #24
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3303      	adds	r3, #3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3304      	adds	r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80014ba:	68fb      	ldr	r3, [r7, #12]
    }
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	440b      	add	r3, r1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3302      	adds	r3, #2
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	440b      	add	r3, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3303      	adds	r3, #3
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	6839      	ldr	r1, [r7, #0]
 8001544:	440b      	add	r3, r1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3302      	adds	r3, #2
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	440b      	add	r3, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3303      	adds	r3, #3
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3304      	adds	r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
     return offset;
 8001582:	68fb      	ldr	r3, [r7, #12]
    }
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	0800eae8 	.word	0x0800eae8

080015ac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	0800eafc 	.word	0x0800eafc

080015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fef8 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	809a      	strh	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    {
    }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800ed60 	.word	0x0800ed60
 800160c:	0800eb20 	.word	0x0800eb20

08001610 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8899      	ldrh	r1, [r3, #4]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b299      	uxth	r1, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3302      	adds	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe60 	bl	8000310 <strlen>
 8001650:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fdca 	bl	80031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3304      	adds	r3, #4
 8001664:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	18d0      	adds	r0, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4619      	mov	r1, r3
 8001674:	f00d f894 	bl	800e7a0 <memcpy>
      offset += length_topic_name;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fe43 	bl	8000310 <strlen>
 800168a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fdad 	bl	80031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	18d0      	adds	r0, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f00d f877 	bl	800e7a0 <memcpy>
      offset += length_message_type;
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fe26 	bl	8000310 <strlen>
 80016c4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd90 	bl	80031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	18d0      	adds	r0, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f00d f85a 	bl	800e7a0 <memcpy>
      offset += length_md5sum;
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4413      	add	r3, r2
 80016f2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c19      	lsrs	r1, r3, #16
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3302      	adds	r3, #2
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0e19      	lsrs	r1, r3, #24
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3303      	adds	r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	4413      	add	r3, r2
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
      return offset;
 800173c:	69fb      	ldr	r3, [r7, #28]
    }
 800173e:	4618      	mov	r0, r3
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	b21a      	sxth	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3301      	adds	r3, #1
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21b      	sxth	r3, r3
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3302      	adds	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fd4c 	bl	8003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3304      	adds	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4413      	add	r3, r2
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	441a      	add	r2, r3
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e7ec      	b.n	80017a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3b01      	subs	r3, #1
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	441a      	add	r2, r3
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fd19 	bl	8003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3304      	adds	r3, #4
 8001802:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	429a      	cmp	r2, r3
 8001812:	d20c      	bcs.n	800182e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	441a      	add	r2, r3
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	3b01      	subs	r3, #1
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	440b      	add	r3, r1
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	3301      	adds	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	e7ec      	b.n	8001808 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	3b01      	subs	r3, #1
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fce6 	bl	8003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3304      	adds	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	441a      	add	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3b01      	subs	r3, #1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	440b      	add	r3, r1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e7ec      	b.n	800186e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	3b01      	subs	r3, #1
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	441a      	add	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	440a      	add	r2, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	3301      	adds	r3, #1
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	440b      	add	r3, r1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	4313      	orrs	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	3302      	adds	r3, #2
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	440b      	add	r3, r1
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3303      	adds	r3, #3
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	440b      	add	r3, r1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	061b      	lsls	r3, r3, #24
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	3304      	adds	r3, #4
 800190a:	61bb      	str	r3, [r7, #24]
     return offset;
 800190c:	69bb      	ldr	r3, [r7, #24]
    }
 800190e:	4618      	mov	r0, r3
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	0800eb24 	.word	0x0800eb24

08001934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	0800eb40 	.word	0x0800eb40

08001950 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd34 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	711a      	strb	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001970:	609a      	str	r2, [r3, #8]
    {
    }
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	0800ed48 	.word	0x0800ed48
 8001980:	0800eb20 	.word	0x0800eb20

08001984 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	7912      	ldrb	r2, [r2, #4]
 800199c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fcb1 	bl	8000310 <strlen>
 80019ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fc1b 	bl	80031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	18d0      	adds	r0, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f00c fee5 	bl	800e7a0 <memcpy>
      offset += length_msg;
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80019de:	68fb      	ldr	r3, [r7, #12]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 fc0b 	bl	8003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d20c      	bcs.n	8001a4a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	441a      	add	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	440b      	add	r3, r1
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e7ec      	b.n	8001a24 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b01      	subs	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
     return offset;
 8001a6e:	693b      	ldr	r3, [r7, #16]
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0800eb64 	.word	0x0800eb64

08001a94 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0800eb78 	.word	0x0800eb78

08001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc84 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800ed30 	.word	0x0800ed30

08001af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0a19      	lsrs	r1, r3, #8
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0c19      	lsrs	r1, r3, #16
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3302      	adds	r3, #2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0e19      	lsrs	r1, r3, #24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3303      	adds	r3, #3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d22b      	bcs.n	8001bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	0a19      	lsrs	r1, r3, #8
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3301      	adds	r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	0c19      	lsrs	r1, r3, #16
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	0e19      	lsrs	r1, r3, #24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3304      	adds	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	e7ce      	b.n	8001b54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	0a19      	lsrs	r1, r3, #8
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	0c19      	lsrs	r1, r3, #16
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3302      	adds	r3, #2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	0e19      	lsrs	r1, r3, #24
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d22b      	bcs.n	8001c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0a19      	lsrs	r1, r3, #8
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3301      	adds	r3, #1
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0c19      	lsrs	r1, r3, #16
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3302      	adds	r3, #2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	0e19      	lsrs	r1, r3, #24
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3303      	adds	r3, #3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e7ce      	b.n	8001c04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69d9      	ldr	r1, [r3, #28]
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	0a19      	lsrs	r1, r3, #8
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	0c19      	lsrs	r1, r3, #16
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3302      	adds	r3, #2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	0e19      	lsrs	r1, r3, #24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	3304      	adds	r3, #4
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d228      	bcs.n	8001d10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fb20 	bl	8000310 <strlen>
 8001cd0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fa8a 	bl	80031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	18d0      	adds	r0, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f00c fd50 	bl	800e7a0 <memcpy>
      offset += length_stringsi;
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4413      	add	r3, r2
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e7d1      	b.n	8001cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d12:	4618      	mov	r0, r3
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08e      	sub	sp, #56	; 0x38
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	3301      	adds	r3, #1
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	6a3a      	ldr	r2, [r7, #32]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3302      	adds	r3, #2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3303      	adds	r3, #3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	6a3a      	ldr	r2, [r7, #32]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	6a3a      	ldr	r2, [r7, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d90a      	bls.n	8001d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f00c fd22 	bl	800e7cc <realloc>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d236      	bcs.n	8001e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	440a      	add	r2, r1
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	3301      	adds	r3, #1
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	3302      	adds	r3, #2
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	440b      	add	r3, r1
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3303      	adds	r3, #3
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	440b      	add	r3, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	3304      	adds	r3, #4
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0e:	e7c3      	b.n	8001d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	3302      	adds	r3, #2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	3303      	adds	r3, #3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3304      	adds	r3, #4
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d90a      	bls.n	8001e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f00c fcae 	bl	800e7cc <realloc>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d236      	bcs.n	8001ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	440a      	add	r2, r1
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	440b      	add	r3, r1
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec4:	3303      	adds	r3, #3
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	440b      	add	r3, r1
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	3304      	adds	r3, #4
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	3214      	adds	r2, #20
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	e7c3      	b.n	8001e80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	3301      	adds	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	3302      	adds	r3, #2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	3303      	adds	r3, #3
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d90a      	bls.n	8001f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f00c fc3a 	bl	800e7cc <realloc>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d23f      	bcs.n	8001ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	441a      	add	r2, r3
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f956 	bl	8003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	3304      	adds	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3301      	adds	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e7ec      	b.n	8001f8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	3220      	adds	r2, #32
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3301      	adds	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff0:	e7ba      	b.n	8001f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3738      	adds	r7, #56	; 0x38
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	0800ec84 	.word	0x0800ec84

08002018 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	0800eb9c 	.word	0x0800eb9c

08002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68d8      	ldr	r0, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6891      	ldr	r1, [r2, #8]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4798      	blx	r3
 8002080:	4603      	mov	r3, r0
  };
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
  }
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d068      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d061      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d05a      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d053      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d04c      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a36      	ldr	r2, [pc, #216]	; (80021d4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d045      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03e      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d037      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d030      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d029      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d01b      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d014      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d006      	beq.n	800218c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d109      	bne.n	80021a0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800219a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800219e:	e008      	b.n	80021b2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80021ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40020010 	.word	0x40020010
 80021c4:	40020028 	.word	0x40020028
 80021c8:	40020040 	.word	0x40020040
 80021cc:	40020058 	.word	0x40020058
 80021d0:	40020070 	.word	0x40020070
 80021d4:	40020088 	.word	0x40020088
 80021d8:	400200a0 	.word	0x400200a0
 80021dc:	400200b8 	.word	0x400200b8
 80021e0:	40020410 	.word	0x40020410
 80021e4:	40020428 	.word	0x40020428
 80021e8:	40020440 	.word	0x40020440
 80021ec:	40020458 	.word	0x40020458
 80021f0:	40020470 	.word	0x40020470
 80021f4:	40020488 	.word	0x40020488
 80021f8:	400204a0 	.word	0x400204a0
 80021fc:	400204b8 	.word	0x400204b8

08002200 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <_ZN13STM32HardwareC1Ev+0x3c>)
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	461a      	mov	r2, r3
 800221e:	2300      	movs	r3, #0
 8002220:	6093      	str	r3, [r2, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	461a      	mov	r2, r3
 800222a:	2300      	movs	r3, #0
 800222c:	60d3      	str	r3, [r2, #12]
    }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	24000494 	.word	0x24000494

08002240 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f804 	bl	8002256 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226a:	4619      	mov	r1, r3
 800226c:	f00a fa24 	bl	800c6b8 <HAL_UART_Receive_DMA>
    }
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff09 	bl	80020a4 <_ZN13STM32Hardware10getRdmaIndEv>
 8002292:	4603      	mov	r3, r0
 8002294:	429c      	cmp	r4, r3
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80022a8:	1c59      	adds	r1, r3, #1
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80022be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80022c8:	68fb      	ldr	r3, [r7, #12]
    }
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
	...

080022d4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d108      	bne.n	80022fa <_ZN13STM32Hardware5flushEv+0x26>
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <_ZN13STM32Hardware5flushEv+0xc8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_ZN13STM32Hardware5flushEv+0x26>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <_ZN13STM32Hardware5flushEv+0x28>
 80022fa:	2300      	movs	r3, #0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d049      	beq.n	8002394 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	429a      	cmp	r2, r3
 8002318:	d039      	beq.n	800238e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d20c      	bcs.n	8002348 <_ZN13STM32Hardware5flushEv+0x74>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	b29b      	uxth	r3, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	b29b      	uxth	r3, r3
 8002346:	e007      	b.n	8002358 <_ZN13STM32Hardware5flushEv+0x84>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002356:	b29b      	uxth	r3, r3
 8002358:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	89fa      	ldrh	r2, [r7, #14]
 8002370:	4619      	mov	r1, r3
 8002372:	f00a f90f 	bl	800c594 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	4413      	add	r3, r2
 8002382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800238c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 800238e:	4b03      	ldr	r3, [pc, #12]	; (800239c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
      }
    }
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	24000614 	.word	0x24000614

080023a0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
      int n = length;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b6:	bfa8      	it	ge
 80023b8:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80023bc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf28      	it	cs
 80023d0:	4613      	movcs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00c f9d9 	bl	800e7a0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4413      	add	r3, r2
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002404:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d00b      	beq.n	8002426 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	18d1      	adds	r1, r2, r3
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	461a      	mov	r2, r3
 8002422:	f00c f9bd 	bl	800e7a0 <memcpy>
      }

      flush();
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff ff54 	bl	80022d4 <_ZN13STM32Hardware5flushEv>
    }
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	f002 fcf4 	bl	8004e28 <HAL_GetTick>
 8002440:	4603      	mov	r3, r0
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ffb6 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	0800ecec 	.word	0x0800ecec

0800249c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800249c:	b480      	push	{r7}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80024b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	4401      	add	r1, r0
 80024be:	b2d3      	uxtb	r3, r2
 80024c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80024c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	0a02      	lsrs	r2, r0, #8
 80024d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024d4:	0a0b      	lsrs	r3, r1, #8
 80024d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d8:	3101      	adds	r1, #1
 80024da:	6838      	ldr	r0, [r7, #0]
 80024dc:	4401      	add	r1, r0
 80024de:	b2d3      	uxtb	r3, r2
 80024e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80024e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	0c02      	lsrs	r2, r0, #16
 80024f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024f4:	0c0b      	lsrs	r3, r1, #16
 80024f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f8:	3102      	adds	r1, #2
 80024fa:	6838      	ldr	r0, [r7, #0]
 80024fc:	4401      	add	r1, r0
 80024fe:	b2d3      	uxtb	r3, r2
 8002500:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002502:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	0e02      	lsrs	r2, r0, #24
 8002510:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002514:	0e0b      	lsrs	r3, r1, #24
 8002516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002518:	3103      	adds	r1, #3
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	4401      	add	r1, r0
 800251e:	b2d3      	uxtb	r3, r2
 8002520:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002522:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	000a      	movs	r2, r1
 8002530:	2300      	movs	r3, #0
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	3104      	adds	r1, #4
 8002536:	6838      	ldr	r0, [r7, #0]
 8002538:	4401      	add	r1, r0
 800253a:	b2d3      	uxtb	r3, r2
 800253c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800253e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	0a0a      	lsrs	r2, r1, #8
 800254c:	2300      	movs	r3, #0
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	3105      	adds	r1, #5
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	4401      	add	r1, r0
 8002556:	b2d3      	uxtb	r3, r2
 8002558:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800255a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0c0a      	lsrs	r2, r1, #16
 8002568:	2300      	movs	r3, #0
 800256a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256c:	3106      	adds	r1, #6
 800256e:	6838      	ldr	r0, [r7, #0]
 8002570:	4401      	add	r1, r0
 8002572:	b2d3      	uxtb	r3, r2
 8002574:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002576:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0e0a      	lsrs	r2, r1, #24
 8002584:	2300      	movs	r3, #0
 8002586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002588:	3107      	adds	r1, #7
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	4401      	add	r1, r0
 800258e:	b2d3      	uxtb	r3, r2
 8002590:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3308      	adds	r3, #8
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800259e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80025a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	4401      	add	r1, r0
 80025ac:	b2d3      	uxtb	r3, r2
 80025ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80025b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	0a02      	lsrs	r2, r0, #8
 80025be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025c2:	0a0b      	lsrs	r3, r1, #8
 80025c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c6:	3101      	adds	r1, #1
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	4401      	add	r1, r0
 80025cc:	b2d3      	uxtb	r3, r2
 80025ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80025d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	0c02      	lsrs	r2, r0, #16
 80025de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025e2:	0c0b      	lsrs	r3, r1, #16
 80025e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e6:	3102      	adds	r1, #2
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	4401      	add	r1, r0
 80025ec:	b2d3      	uxtb	r3, r2
 80025ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80025f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	0e02      	lsrs	r2, r0, #24
 80025fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002602:	0e0b      	lsrs	r3, r1, #24
 8002604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002606:	3103      	adds	r1, #3
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	4401      	add	r1, r0
 800260c:	b2d3      	uxtb	r3, r2
 800260e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002610:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	000a      	movs	r2, r1
 800261e:	2300      	movs	r3, #0
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	3104      	adds	r1, #4
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	4401      	add	r1, r0
 8002628:	b2d3      	uxtb	r3, r2
 800262a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800262c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	0a0a      	lsrs	r2, r1, #8
 800263a:	2300      	movs	r3, #0
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	3105      	adds	r1, #5
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	4401      	add	r1, r0
 8002644:	b2d3      	uxtb	r3, r2
 8002646:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	0c0a      	lsrs	r2, r1, #16
 8002656:	2300      	movs	r3, #0
 8002658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265a:	3106      	adds	r1, #6
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	4401      	add	r1, r0
 8002660:	b2d3      	uxtb	r3, r2
 8002662:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	0e0a      	lsrs	r2, r1, #24
 8002672:	2300      	movs	r3, #0
 8002674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002676:	3107      	adds	r1, #7
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	4401      	add	r1, r0
 800267c:	b2d3      	uxtb	r3, r2
 800267e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3308      	adds	r3, #8
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800268c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	4401      	add	r1, r0
 800269a:	b2d3      	uxtb	r3, r2
 800269c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800269e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	0a02      	lsrs	r2, r0, #8
 80026ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026b0:	0a0b      	lsrs	r3, r1, #8
 80026b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b4:	3101      	adds	r1, #1
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	4401      	add	r1, r0
 80026ba:	b2d3      	uxtb	r3, r2
 80026bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80026be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	0c02      	lsrs	r2, r0, #16
 80026cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026d0:	0c0b      	lsrs	r3, r1, #16
 80026d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d4:	3102      	adds	r1, #2
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	4401      	add	r1, r0
 80026da:	b2d3      	uxtb	r3, r2
 80026dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80026de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	0e02      	lsrs	r2, r0, #24
 80026ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026f0:	0e0b      	lsrs	r3, r1, #24
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	3103      	adds	r1, #3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	4401      	add	r1, r0
 80026fa:	b2d3      	uxtb	r3, r2
 80026fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80026fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	000a      	movs	r2, r1
 800270c:	2300      	movs	r3, #0
 800270e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002710:	3104      	adds	r1, #4
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	4401      	add	r1, r0
 8002716:	b2d3      	uxtb	r3, r2
 8002718:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800271a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	0a0a      	lsrs	r2, r1, #8
 8002728:	2300      	movs	r3, #0
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	3105      	adds	r1, #5
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	4401      	add	r1, r0
 8002732:	b2d3      	uxtb	r3, r2
 8002734:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002736:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	0c0a      	lsrs	r2, r1, #16
 8002744:	2300      	movs	r3, #0
 8002746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002748:	3106      	adds	r1, #6
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	4401      	add	r1, r0
 800274e:	b2d3      	uxtb	r3, r2
 8002750:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002752:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	0e0a      	lsrs	r2, r1, #24
 8002760:	2300      	movs	r3, #0
 8002762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002764:	3107      	adds	r1, #7
 8002766:	6838      	ldr	r0, [r7, #0]
 8002768:	4401      	add	r1, r0
 800276a:	b2d3      	uxtb	r3, r2
 800276c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3308      	adds	r3, #8
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002776:	4618      	mov	r0, r3
 8002778:	372c      	adds	r7, #44	; 0x2c
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002782:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002786:	b0eb      	sub	sp, #428	; 0x1ac
 8002788:	af00      	add	r7, sp, #0
 800278a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800278e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027a8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80027ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2200      	movs	r2, #0
 80027b8:	461c      	mov	r4, r3
 80027ba:	4615      	mov	r5, r2
 80027bc:	ea40 0804 	orr.w	r8, r0, r4
 80027c0:	ea41 0905 	orr.w	r9, r1, r5
 80027c4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80027cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	469a      	mov	sl, r3
 80027e0:	4693      	mov	fp, r2
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80027ee:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80027f2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80027f6:	ea40 0402 	orr.w	r4, r0, r2
 80027fa:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80027fe:	430b      	orrs	r3, r1
 8002800:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002804:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002808:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800280c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002810:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002814:	1c9a      	adds	r2, r3, #2
 8002816:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002826:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002836:	464c      	mov	r4, r9
 8002838:	0423      	lsls	r3, r4, #16
 800283a:	4644      	mov	r4, r8
 800283c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002840:	4644      	mov	r4, r8
 8002842:	0422      	lsls	r2, r4, #16
 8002844:	ea40 0402 	orr.w	r4, r0, r2
 8002848:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800284c:	430b      	orrs	r3, r1
 800284e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002852:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002856:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800285a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800285e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002862:	1cda      	adds	r2, r3, #3
 8002864:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002874:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002878:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800287c:	4623      	mov	r3, r4
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002884:	4623      	mov	r3, r4
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800288c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002890:	4623      	mov	r3, r4
 8002892:	4303      	orrs	r3, r0
 8002894:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002898:	462b      	mov	r3, r5
 800289a:	430b      	orrs	r3, r1
 800289c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028a0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80028a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028b6:	4413      	add	r3, r2
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80028c2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80028d2:	0023      	movs	r3, r4
 80028d4:	2200      	movs	r2, #0
 80028d6:	ea40 0402 	orr.w	r4, r0, r2
 80028da:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80028de:	430b      	orrs	r3, r1
 80028e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80028e4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80028e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f4:	1d5a      	adds	r2, r3, #5
 80028f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002906:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002916:	0223      	lsls	r3, r4, #8
 8002918:	2200      	movs	r2, #0
 800291a:	ea40 0402 	orr.w	r4, r0, r2
 800291e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002922:	430b      	orrs	r3, r1
 8002924:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002928:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800292c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002930:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002934:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002938:	1d9a      	adds	r2, r3, #6
 800293a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2200      	movs	r2, #0
 8002946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800294a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800295a:	0423      	lsls	r3, r4, #16
 800295c:	2200      	movs	r2, #0
 800295e:	ea40 0402 	orr.w	r4, r0, r2
 8002962:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002966:	430b      	orrs	r3, r1
 8002968:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800296c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002970:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002974:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002978:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800297c:	1dda      	adds	r2, r3, #7
 800297e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800298e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800299e:	0623      	lsls	r3, r4, #24
 80029a0:	2200      	movs	r2, #0
 80029a2:	ea40 0402 	orr.w	r4, r0, r2
 80029a6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80029aa:	430b      	orrs	r3, r1
 80029ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80029b0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80029b4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80029b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80029c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c8:	3308      	adds	r3, #8
 80029ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029da:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029de:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80029f2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80029f6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80029fa:	4623      	mov	r3, r4
 80029fc:	4303      	orrs	r3, r0
 80029fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a02:	462b      	mov	r3, r5
 8002a04:	430b      	orrs	r3, r1
 8002a06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a0a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002a0e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a12:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a20:	4413      	add	r3, r2
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a2c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002a3c:	464c      	mov	r4, r9
 8002a3e:	0223      	lsls	r3, r4, #8
 8002a40:	4644      	mov	r4, r8
 8002a42:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a46:	4644      	mov	r4, r8
 8002a48:	0222      	lsls	r2, r4, #8
 8002a4a:	ea40 0402 	orr.w	r4, r0, r2
 8002a4e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002a52:	430b      	orrs	r3, r1
 8002a54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a58:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002a5c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a60:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a68:	1c9a      	adds	r2, r3, #2
 8002a6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a6e:	4413      	add	r3, r2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002a8a:	464c      	mov	r4, r9
 8002a8c:	0423      	lsls	r3, r4, #16
 8002a8e:	4644      	mov	r4, r8
 8002a90:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a94:	4644      	mov	r4, r8
 8002a96:	0422      	lsls	r2, r4, #16
 8002a98:	ea40 0402 	orr.w	r4, r0, r2
 8002a9c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002aa6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002aaa:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ab2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ab6:	1cda      	adds	r2, r3, #3
 8002ab8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ac8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002acc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002ad0:	4623      	mov	r3, r4
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ad8:	4623      	mov	r3, r4
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ae0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	4303      	orrs	r3, r0
 8002ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aec:	462b      	mov	r3, r5
 8002aee:	430b      	orrs	r3, r1
 8002af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002af4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002af8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002afc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b04:	1d1a      	adds	r2, r3, #4
 8002b06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b16:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002b26:	0023      	movs	r3, r4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	ea40 0402 	orr.w	r4, r0, r2
 8002b2e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002b32:	430b      	orrs	r3, r1
 8002b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002b38:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002b3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b48:	1d5a      	adds	r2, r3, #5
 8002b4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b5a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002b6a:	0223      	lsls	r3, r4, #8
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	ea40 0402 	orr.w	r4, r0, r2
 8002b72:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002b76:	430b      	orrs	r3, r1
 8002b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b7c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002b80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8c:	1d9a      	adds	r2, r3, #6
 8002b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002bae:	0423      	lsls	r3, r4, #16
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	ea40 0402 	orr.w	r4, r0, r2
 8002bb6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bc0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002bc4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002bc8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bd0:	1dda      	adds	r2, r3, #7
 8002bd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002bf2:	0623      	lsls	r3, r4, #24
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	ea40 0402 	orr.w	r4, r0, r2
 8002bfa:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c04:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002c08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002c0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c10:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c14:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002c18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c2e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c32:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c46:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002c4e:	4623      	mov	r3, r4
 8002c50:	4303      	orrs	r3, r0
 8002c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c54:	462b      	mov	r3, r5
 8002c56:	430b      	orrs	r3, r1
 8002c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c5a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002c5e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c62:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002c66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
 8002c7a:	677a      	str	r2, [r7, #116]	; 0x74
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c88:	464c      	mov	r4, r9
 8002c8a:	0223      	lsls	r3, r4, #8
 8002c8c:	4644      	mov	r4, r8
 8002c8e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c92:	4644      	mov	r4, r8
 8002c94:	0222      	lsls	r2, r4, #8
 8002c96:	ea40 0402 	orr.w	r4, r0, r2
 8002c9a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ca0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002ca4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ca8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cce:	464c      	mov	r4, r9
 8002cd0:	0423      	lsls	r3, r4, #16
 8002cd2:	4644      	mov	r4, r8
 8002cd4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002cd8:	4644      	mov	r4, r8
 8002cda:	0422      	lsls	r2, r4, #16
 8002cdc:	ea40 0402 	orr.w	r4, r0, r2
 8002ce0:	65bc      	str	r4, [r7, #88]	; 0x58
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002cea:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cf2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf6:	1cda      	adds	r2, r3, #3
 8002cf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	653b      	str	r3, [r7, #80]	; 0x50
 8002d06:	657a      	str	r2, [r7, #84]	; 0x54
 8002d08:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d12:	4623      	mov	r3, r4
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	643b      	str	r3, [r7, #64]	; 0x40
 8002d22:	462b      	mov	r3, r5
 8002d24:	430b      	orrs	r3, r1
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
 8002d28:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d30:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d38:	1d1a      	adds	r2, r3, #4
 8002d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002d54:	0023      	movs	r3, r4
 8002d56:	2200      	movs	r2, #0
 8002d58:	ea40 0402 	orr.w	r4, r0, r2
 8002d5c:	633c      	str	r4, [r7, #48]	; 0x30
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d66:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d72:	1d5a      	adds	r2, r3, #5
 8002d74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2200      	movs	r2, #0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002d8e:	0223      	lsls	r3, r4, #8
 8002d90:	2200      	movs	r2, #0
 8002d92:	ea40 0402 	orr.w	r4, r0, r2
 8002d96:	623c      	str	r4, [r7, #32]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002da0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002da4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002da8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dac:	3306      	adds	r3, #6
 8002dae:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	69bc      	ldr	r4, [r7, #24]
 8002dc8:	0423      	lsls	r3, r4, #16
 8002dca:	2200      	movs	r2, #0
 8002dcc:	ea40 0402 	orr.w	r4, r0, r2
 8002dd0:	613c      	str	r4, [r7, #16]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002dda:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002dde:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de6:	3307      	adds	r3, #7
 8002de8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	60fa      	str	r2, [r7, #12]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	68bc      	ldr	r4, [r7, #8]
 8002e02:	0623      	lsls	r3, r4, #24
 8002e04:	2200      	movs	r2, #0
 8002e06:	ea40 0402 	orr.w	r4, r0, r2
 8002e0a:	603c      	str	r4, [r7, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e14:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002e18:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e1c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002e20:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002e24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e28:	3308      	adds	r3, #8
 8002e2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002e2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002e32:	4618      	mov	r0, r3
 8002e34:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e3e:	4770      	bx	lr

08002e40 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	0800ebc0 	.word	0x0800ebc0

08002e5c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	0800ebd8 	.word	0x0800ebd8

08002e78 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe faa0 	bl	80013c8 <_ZN3ros3MsgC1Ev>
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3308      	adds	r3, #8
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fada 	bl	800244c <_ZN13geometry_msgs7Vector3C1Ev>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3328      	adds	r3, #40	; 0x28
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fad5 	bl	800244c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	0800ecd4 	.word	0x0800ecd4

08002eb0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f103 0008 	add.w	r0, r3, #8
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7ff fae6 	bl	800249c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7ff fad9 	bl	800249c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 0008 	add.w	r0, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7ff fc33 	bl	8002782 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7ff fc26 	bl	8002782 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	0800ebfc 	.word	0x0800ebfc

08002f64 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	0800ec10 	.word	0x0800ec10

08002f80 <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);

void callback(const geometry_msgs::Twist &msg)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8002f90:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f9a:	4908      	ldr	r1, [pc, #32]	; (8002fbc <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002f9c:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002fa6:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8002fa8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	24001b60 	.word	0x24001b60
 8002fbc:	24001b68 	.word	0x24001b68
 8002fc0:	24001b70 	.word	0x24001b70

08002fc4 <interPub>:
void interPub(void){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <interPub+0x50>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	4912      	ldr	r1, [pc, #72]	; (8003018 <interPub+0x54>)
 8002fd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <interPub+0x58>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	490f      	ldr	r1, [pc, #60]	; (8003018 <interPub+0x54>)
 8002fdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <interPub+0x5c>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	490c      	ldr	r1, [pc, #48]	; (8003018 <interPub+0x54>)
 8002fe8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <interPub+0x60>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <interPub+0x60>)
 8002ff4:	6013      	str	r3, [r2, #0]

	if(run_inter0 > 1)
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <interPub+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	dd03      	ble.n	8003006 <interPub+0x42>
		pub.publish(&insVel);
 8002ffe:	4906      	ldr	r1, [pc, #24]	; (8003018 <interPub+0x54>)
 8003000:	4809      	ldr	r0, [pc, #36]	; (8003028 <interPub+0x64>)
 8003002:	f7ff f82e 	bl	8002062 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <interPub+0x68>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a07      	ldr	r2, [pc, #28]	; (800302c <interPub+0x68>)
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	24001b78 	.word	0x24001b78
 8003018:	24001b90 	.word	0x24001b90
 800301c:	24001b80 	.word	0x24001b80
 8003020:	24001b88 	.word	0x24001b88
 8003024:	24001b54 	.word	0x24001b54
 8003028:	24001bd8 	.word	0x24001bd8
 800302c:	24001b58 	.word	0x24001b58

08003030 <_Z13Error_Handlerv>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

/* UART Communication */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003038:	e7fe      	b.n	8003038 <_Z13Error_Handlerv+0x8>
	...

0800303c <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003042:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003044:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800304c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003084:	481b      	ldr	r0, [pc, #108]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003086:	f009 f9f9 	bl	800c47c <HAL_UART_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 800309a:	f7ff ffc9 	bl	8003030 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800309e:	2100      	movs	r1, #0
 80030a0:	4814      	ldr	r0, [pc, #80]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030a2:	f00b fa6d 	bl	800e580 <HAL_UARTEx_SetTxFifoThreshold>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80030b6:	f7ff ffbb 	bl	8003030 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ba:	2100      	movs	r1, #0
 80030bc:	480d      	ldr	r0, [pc, #52]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030be:	f00b fa9d 	bl	800e5fc <HAL_UARTEx_SetRxFifoThreshold>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80030d2:	f7ff ffad 	bl	8003030 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80030d6:	4807      	ldr	r0, [pc, #28]	; (80030f4 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80030d8:	f00b fa19 	bl	800e50e <HAL_UARTEx_DisableFifoMode>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80030ec:	f7ff ffa0 	bl	8003030 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	24000494 	.word	0x24000494
 80030f8:	40011c00 	.word	0x40011c00

080030fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <HAL_UART_ErrorCallback+0x5c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d120      	bne.n	800314e <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 800310c:	4913      	ldr	r1, [pc, #76]	; (800315c <HAL_UART_ErrorCallback+0x60>)
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 800311a:	4911      	ldr	r1, [pc, #68]	; (8003160 <HAL_UART_ErrorCallback+0x64>)
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_UART_ErrorCallback+0x68>)
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003136:	4808      	ldr	r0, [pc, #32]	; (8003158 <HAL_UART_ErrorCallback+0x5c>)
 8003138:	f009 f9f0 	bl	800c51c <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 800313c:	f7ff ff7e 	bl	800303c <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <HAL_UART_ErrorCallback+0x6c>)
 8003142:	f000 f979 	bl	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003146:	4603      	mov	r3, r0
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f879 	bl	8002240 <_ZN13STM32Hardware4initEv>
    }
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	24000494 	.word	0x24000494
 800315c:	24001b60 	.word	0x24001b60
 8003160:	24001b68 	.word	0x24001b68
 8003164:	24001b70 	.word	0x24001b70
 8003168:	24000618 	.word	0x24000618

0800316c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003174:	4805      	ldr	r0, [pc, #20]	; (800318c <HAL_UART_TxCpltCallback+0x20>)
 8003176:	f000 f95f 	bl	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f8a9 	bl	80022d4 <_ZN13STM32Hardware5flushEv>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	24000618 	.word	0x24000618

08003190 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <HAL_UART_RxCpltCallback+0x20>)
 800319a:	f000 f94d 	bl	8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800319e:	4603      	mov	r3, r0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f858 	bl	8002256 <_ZN13STM32Hardware10reset_rbufEv>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	24000618 	.word	0x24000618

080031b4 <setup>:
void setup(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
    nh.initNode();
 80031b8:	4806      	ldr	r0, [pc, #24]	; (80031d4 <setup+0x20>)
 80031ba:	f000 f949 	bl	8003450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80031be:	4906      	ldr	r1, [pc, #24]	; (80031d8 <setup+0x24>)
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <setup+0x20>)
 80031c2:	f000 f96e 	bl	80034a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80031c6:	4905      	ldr	r1, [pc, #20]	; (80031dc <setup+0x28>)
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <setup+0x20>)
 80031ca:	f000 f995 	bl	80034f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000618 	.word	0x24000618
 80031d8:	24001bf0 	.word	0x24001bf0
 80031dc:	24001bd8 	.word	0x24001bd8

080031e0 <loop>:
void loop(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <loop+0x10>)
 80031e6:	f000 f9b7 	bl	8003558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	24000618 	.word	0x24000618

080031f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d80d      	bhi.n	8003224 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	fa22 f103 	lsr.w	r1, r2, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e7ee      	b.n	8003202 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d811      	bhi.n	800326e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	440a      	add	r2, r1
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	4611      	mov	r1, r2
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	00d2      	lsls	r2, r2, #3
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e7ea      	b.n	8003244 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	4a04      	ldr	r2, [pc, #16]	; (8003298 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	0800ed1c 	.word	0x0800ed1c

0800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffe8 	bl	800327c <_ZN3ros15NodeHandleBase_C1Ev>
 80032ac:	4a47      	ldr	r2, [pc, #284]	; (80033cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe ffa2 	bl	8002200 <_ZN13STM32HardwareC1Ev>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	f241 5314 	movw	r3, #5396	; 0x1514
 80032ce:	4413      	add	r3, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fbed 	bl	8001ab0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b18      	cmp	r3, #24
 80032de:	d80b      	bhi.n	80032f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	2200      	movs	r2, #0
 80032ee:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e7f0      	b.n	80032da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b18      	cmp	r3, #24
 8003300:	d80a      	bhi.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800330a:	2100      	movs	r1, #0
 800330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3301      	adds	r3, #1
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e7f1      	b.n	80032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	d20b      	bcs.n	800333c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	441a      	add	r2, r3
 800332a:	f241 0324 	movw	r3, #4132	; 0x1024
 800332e:	4413      	add	r3, r2
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e7ef      	b.n	800331c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d20b      	bcs.n	8003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	441a      	add	r2, r3
 800334e:	f241 2324 	movw	r3, #4644	; 0x1224
 8003352:	4413      	add	r3, r2
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	e7ef      	b.n	8003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	461a      	mov	r2, r3
 8003368:	2300      	movs	r3, #0
 800336a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	461a      	mov	r2, r3
 8003376:	2300      	movs	r3, #0
 8003378:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	461a      	mov	r2, r3
 8003384:	2300      	movs	r3, #0
 8003386:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003390:	461a      	mov	r2, r3
 8003392:	2300      	movs	r3, #0
 8003394:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	461a      	mov	r2, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ba:	461a      	mov	r2, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	6213      	str	r3, [r2, #32]
  }
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	0800ecc0 	.word	0x0800ecc0

080033d0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	0800ed04 	.word	0x0800ed04

080033f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffe5 	bl	80033d0 <_ZN3ros11Subscriber_C1Ev>
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3310      	adds	r3, #16
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fd31 	bl	8002e78 <_ZN13geometry_msgs5TwistC1Ev>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	659a      	str	r2, [r3, #88]	; 0x58
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  };
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	0800eca8 	.word	0x0800eca8

08003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
  }
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe feef 	bl	8002240 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003468:	461a      	mov	r2, r3
 800346a:	2300      	movs	r3, #0
 800346c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003476:	461a      	mov	r2, r3
 8003478:	2300      	movs	r3, #0
 800347a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003484:	461a      	mov	r2, r3
 8003486:	2300      	movs	r3, #0
 8003488:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003492:	461a      	mov	r2, r3
 8003494:	2300      	movs	r3, #0
 8003496:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b18      	cmp	r3, #24
 80034b4:	dc19      	bgt.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80034be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	605a      	str	r2, [r3, #4]
        return true;
 80034de:	2301      	movs	r3, #1
 80034e0:	e004      	b.n	80034ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e7e2      	b.n	80034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80034ea:	2300      	movs	r3, #0
  }
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b18      	cmp	r3, #24
 800350a:	dc1e      	bgt.n	800354a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d111      	bne.n	8003542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	60da      	str	r2, [r3, #12]
        return true;
 800353e:	2301      	movs	r3, #1
 8003540:	e004      	b.n	800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3301      	adds	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e7dd      	b.n	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800354a:	2300      	movs	r3, #0
  }
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe ff65 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 800356a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800357e:	4293      	cmp	r3, r2
 8003580:	d905      	bls.n	800358e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003594:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d906      	bls.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe ff32 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	429a      	cmp	r2, r3
 80035e0:	bf8c      	ite	hi
 80035e2:	2301      	movhi	r3, #1
 80035e4:	2300      	movls	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80035ec:	f06f 0301 	mvn.w	r3, #1
 80035f0:	e226      	b.n	8003a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fe3e 	bl	8002278 <_ZN13STM32Hardware4readEv>
 80035fc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f2c0 81ff 	blt.w	8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4413      	add	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800361a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003624:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003628:	2b07      	cmp	r3, #7
 800362a:	d12d      	bne.n	8003688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003632:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800363e:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	b2d1      	uxtb	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	441a      	add	r2, r3
 800364a:	f241 0324 	movw	r3, #4132	; 0x1024
 800364e:	4413      	add	r3, r2
 8003650:	460a      	mov	r2, r1
 8003652:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800365e:	3b01      	subs	r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003666:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003670:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1a0      	bne.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367e:	461a      	mov	r2, r3
 8003680:	2308      	movs	r3, #8
 8003682:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003686:	e798      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003692:	2b00      	cmp	r3, #0
 8003694:	d130      	bne.n	80036f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2bff      	cmp	r3, #255	; 0xff
 800369a:	d112      	bne.n	80036c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036a6:	3301      	adds	r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ae:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3314      	adds	r3, #20
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036bc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80036c0:	e77b      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe feb4 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bf8c      	ite	hi
 80036da:	2301      	movhi	r3, #1
 80036dc:	2300      	movls	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f43f af6a 	beq.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80036f2:	f06f 0301 	mvn.w	r3, #1
 80036f6:	e1a3      	b.n	8003a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003702:	2b01      	cmp	r3, #1
 8003704:	d121      	bne.n	800374a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2bfe      	cmp	r3, #254	; 0xfe
 800370a:	d10b      	bne.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003712:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800371e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003722:	e74a      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af3c 	bne.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f980 	bl	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003748:	e737      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003750:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003754:	2b02      	cmp	r3, #2
 8003756:	d120      	bne.n	800379a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376c:	461a      	mov	r2, r3
 800376e:	2300      	movs	r3, #0
 8003770:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800377e:	3301      	adds	r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003786:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003798:	e70f      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d118      	bne.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ae:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4413      	add	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037be:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037cc:	3301      	adds	r3, #1
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037d4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037d8:	e6ef      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11f      	bne.n	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037f2:	425a      	negs	r2, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	bf58      	it	pl
 80037fa:	4253      	negpl	r3, r2
 80037fc:	2bff      	cmp	r3, #255	; 0xff
 80037fe:	d10b      	bne.n	8003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003806:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800380a:	3301      	adds	r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003812:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003816:	e6d0      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381e:	461a      	mov	r2, r3
 8003820:	2300      	movs	r3, #0
 8003822:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003826:	e6c8      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003832:	2b05      	cmp	r3, #5
 8003834:	d119      	bne.n	800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800384e:	3301      	adds	r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003856:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003868:	e6a7      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003874:	2b06      	cmp	r3, #6
 8003876:	d123      	bne.n	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4413      	add	r3, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800388e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003898:	461a      	mov	r2, r3
 800389a:	2307      	movs	r3, #7
 800389c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f ae85 	bne.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	461a      	mov	r2, r3
 80038b8:	2308      	movs	r3, #8
 80038ba:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038be:	e67c      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	f47f ae75 	bne.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	461a      	mov	r2, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038e8:	425a      	negs	r2, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	bf58      	it	pl
 80038f0:	4253      	negpl	r3, r2
 80038f2:	2bff      	cmp	r3, #255	; 0xff
 80038f4:	f47f ae61 	bne.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fe:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f89e 	bl	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8ba 	bl	8003a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	e085      	b.n	8003a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800393e:	2b0a      	cmp	r3, #10
 8003940:	d108      	bne.n	8003954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	f241 0324 	movw	r3, #4132	; 0x1024
 8003948:	4413      	add	r3, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f97b 	bl	8003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003952:	e632      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d112      	bne.n	8003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	f241 5314 	movw	r3, #5396	; 0x1514
 8003968:	4413      	add	r3, r2
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	f241 0224 	movw	r2, #4132	; 0x1024
 8003970:	440a      	add	r2, r1
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe f9d0 	bl	8001d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003986:	e618      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8003992:	2b0b      	cmp	r3, #11
 8003994:	d106      	bne.n	80039a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80039a2:	e60a      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039aa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f43f adfc 	beq.w	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039cc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039e4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	f241 0324 	movw	r3, #4132	; 0x1024
 80039fc:	440b      	add	r3, r1
 80039fe:	4619      	mov	r1, r3
 8003a00:	4790      	blx	r2
    while (true)
 8003a02:	e5da      	b.n	80035ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003a04:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d014      	beq.n	8003a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d909      	bls.n	8003a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f80c 	bl	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003a3e:	2300      	movs	r3, #0
  }
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fcc7 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f107 020c 	add.w	r2, r7, #12
 8003a64:	210a      	movs	r1, #10
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
    rt_time = hardware_.time();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fce0 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	615a      	str	r2, [r3, #20]
  }
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003a86:	b590      	push	{r4, r7, lr}
 8003a88:	b08b      	sub	sp, #44	; 0x2c
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fd98 	bl	80015c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	2b18      	cmp	r3, #24
 8003aa0:	dc63      	bgt.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d056      	beq.n	8003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3308      	adds	r3, #8
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4608      	mov	r0, r1
 8003b02:	4798      	blx	r3
 8003b04:	4603      	mov	r3, r0
 8003b06:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4608      	mov	r0, r1
 8003b30:	4798      	blx	r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b3a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681c      	ldr	r4, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fa9a 	bl	800208a <_ZN3ros9Publisher15getEndpointTypeEv>
 8003b56:	4601      	mov	r1, r0
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	e798      	b.n	8003a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b18      	cmp	r3, #24
 8003b72:	dc5f      	bgt.n	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d053      	beq.n	8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4798      	blx	r3
 8003bc8:	4603      	mov	r3, r0
 8003bca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4608      	mov	r0, r1
 8003bec:	4798      	blx	r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681c      	ldr	r4, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4798      	blx	r3
 8003c20:	4601      	mov	r1, r0
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	461a      	mov	r2, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	3301      	adds	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e79c      	b.n	8003b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003c40:	bf00      	nop
 8003c42:	372c      	adds	r7, #44	; 0x2c
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003c52:	f107 0308 	add.w	r3, r7, #8
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fbc6 	bl	80013e8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fbe7 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003c74:	f107 0308 	add.w	r3, r7, #8
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd fc24 	bl	80014c8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4915      	ldr	r1, [pc, #84]	; (8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c86:	fba1 1303 	umull	r1, r3, r1, r3
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003c90:	6939      	ldr	r1, [r7, #16]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c96:	fba3 0302 	umull	r0, r3, r3, r2
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca0:	fb00 f303 	mul.w	r3, r0, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	440b      	add	r3, r1
 8003cae:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f8bf 	bl	8003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fbb6 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003cd4:	bf00      	nop
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	10624dd3 	.word	0x10624dd3
 8003ce0:	000f4240 	.word	0x000f4240

08003ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b63      	cmp	r3, #99	; 0x63
 8003cf4:	dd0b      	ble.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfc:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003d00:	f083 0301 	eor.w	r3, r3, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e090      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68f9      	ldr	r1, [r7, #12]
 8003d16:	f241 2324 	movw	r3, #4644	; 0x1224
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3307      	adds	r3, #7
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4790      	blx	r2
 8003d24:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d38:	22fe      	movs	r2, #254	; 0xfe
 8003d3a:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d48:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d66:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003d74:	4413      	add	r3, r2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	121b      	asrs	r3, r3, #8
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da4:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003dac:	2305      	movs	r3, #5
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3306      	adds	r3, #6
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	dc0e      	bgt.n	8003dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	441a      	add	r2, r3
 8003dc0:	f241 2324 	movw	r3, #4644	; 0x1224
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e7eb      	b.n	8003db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3307      	adds	r3, #7
 8003ddc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	425a      	negs	r2, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	bf58      	it	pl
 8003de8:	4253      	negpl	r3, r2
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	6179      	str	r1, [r7, #20]
 8003df2:	43d2      	mvns	r2, r2
 8003df4:	b2d1      	uxtb	r1, r2
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	441a      	add	r2, r3
 8003dfa:	f241 2324 	movw	r3, #4644	; 0x1224
 8003dfe:	4413      	add	r3, r2
 8003e00:	460a      	mov	r2, r1
 8003e02:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	dc0b      	bgt.n	8003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1d18      	adds	r0, r3, #4
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e16:	4413      	add	r3, r2
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7fe fac0 	bl	80023a0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	e005      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003e24:	4904      	ldr	r1, [pc, #16]	; (8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f84c 	bl	8003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	0800ec34 	.word	0x0800ec34

08003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe faf2 	bl	8002434 <_ZN13STM32Hardware4timeEv>
 8003e50:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4917      	ldr	r1, [pc, #92]	; (8003eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e5a:	fba1 1303 	umull	r1, r3, r1, r3
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e6a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e74:	fba3 0302 	umull	r0, r3, r3, r2
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e7e:	fb00 f303 	mul.w	r3, r0, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	1aca      	subs	r2, r1, r3
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e96:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e9e:	4413      	add	r3, r2
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	f241 021c 	movw	r2, #4124	; 0x101c
 8003ea6:	440a      	add	r2, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fbba 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	10624dd3 	.word	0x10624dd3
 8003ebc:	000f4240 	.word	0x000f4240
 8003ec0:	3b9aca00 	.word	0x3b9aca00

08003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	2103      	movs	r1, #3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f804 	bl	8003ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd fd2c 	bl	8001950 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f107 0214 	add.w	r2, r7, #20
 8003f0a:	2107      	movs	r1, #7
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	4798      	blx	r3
  }
 8003f10:	bf00      	nop
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_Z41__static_initialization_and_destruction_0ii>:
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d116      	bne.n	8003f56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d111      	bne.n	8003f56 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003f32:	480b      	ldr	r0, [pc, #44]	; (8003f60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003f34:	f7ff f9b2 	bl	800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8003f38:	480a      	ldr	r0, [pc, #40]	; (8003f64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003f3a:	f7fe ff9d 	bl	8002e78 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003f42:	4909      	ldr	r1, [pc, #36]	; (8003f68 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003f46:	f7fe f875 	bl	8002034 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003f4e:	4909      	ldr	r1, [pc, #36]	; (8003f74 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003f50:	4809      	ldr	r0, [pc, #36]	; (8003f78 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003f52:	f7ff fa4d 	bl	80033f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	24000618 	.word	0x24000618
 8003f64:	24001b90 	.word	0x24001b90
 8003f68:	0800ec70 	.word	0x0800ec70
 8003f6c:	24001bd8 	.word	0x24001bd8
 8003f70:	08002f81 	.word	0x08002f81
 8003f74:	0800ec7c 	.word	0x0800ec7c
 8003f78:	24001bf0 	.word	0x24001bf0

08003f7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3310      	adds	r3, #16
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe ffb5 	bl	8002efc <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	3210      	adds	r2, #16
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4798      	blx	r3
  }
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3310      	adds	r3, #16
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe ffbc 	bl	8002f48 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003fd0:	4603      	mov	r3, r0
  }
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe ffbc 	bl	8002f64 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003fec:	4603      	mov	r3, r0
  }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
    return configured_;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_GLOBAL__sub_I_nh>:
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
 8004018:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800401c:	2001      	movs	r0, #1
 800401e:	f7ff ff7b 	bl	8003f18 <_Z41__static_initialization_and_destruction_0ii>
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_MspInit+0x3c>)
 800402c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004030:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <HAL_MspInit+0x3c>)
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_MspInit+0x3c>)
 800403c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	2005      	movs	r0, #5
 800404e:	f000 fff6 	bl	800503e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004052:	2005      	movs	r0, #5
 8004054:	f001 f80d 	bl	8005072 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	58024400 	.word	0x58024400

08004064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d117      	bne.n	80040a6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 8004078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 8004088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004094:	2200      	movs	r2, #0
 8004096:	2100      	movs	r1, #0
 8004098:	201c      	movs	r0, #28
 800409a:	f000 ffd0 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800409e:	201c      	movs	r0, #28
 80040a0:	f000 ffe7 	bl	8005072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80040a4:	e01b      	b.n	80040de <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <HAL_TIM_Base_MspInit+0x88>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d116      	bne.n	80040de <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 80040b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 80040b8:	f043 0308 	orr.w	r3, r3, #8
 80040bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_TIM_Base_MspInit+0x84>)
 80040c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2100      	movs	r1, #0
 80040d2:	2032      	movs	r0, #50	; 0x32
 80040d4:	f000 ffb3 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80040d8:	2032      	movs	r0, #50	; 0x32
 80040da:	f000 ffca 	bl	8005072 <HAL_NVIC_EnableIRQ>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	58024400 	.word	0x58024400
 80040ec:	40000c00 	.word	0x40000c00

080040f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b090      	sub	sp, #64	; 0x40
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a69      	ldr	r2, [pc, #420]	; (80042b4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12e      	bne.n	8004170 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004112:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004118:	4a67      	ldr	r2, [pc, #412]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004130:	4b61      	ldr	r3, [pc, #388]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004136:	4a60      	ldr	r2, [pc, #384]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004140:	4b5d      	ldr	r3, [pc, #372]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800414e:	23c0      	movs	r3, #192	; 0xc0
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800415e:	2302      	movs	r3, #2
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004166:	4619      	mov	r1, r3
 8004168:	4854      	ldr	r0, [pc, #336]	; (80042bc <HAL_TIM_Encoder_MspInit+0x1cc>)
 800416a:	f003 ff9b 	bl	80080a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800416e:	e09c      	b.n	80042aa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a52      	ldr	r2, [pc, #328]	; (80042c0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d12f      	bne.n	80041da <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800417a:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800417c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004180:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800418a:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800418c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004198:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800419a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419e:	4a46      	ldr	r2, [pc, #280]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041a0:	f043 0308 	orr.w	r3, r3, #8
 80041a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041c8:	2302      	movs	r3, #2
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d0:	4619      	mov	r1, r3
 80041d2:	483c      	ldr	r0, [pc, #240]	; (80042c4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80041d4:	f003 ff66 	bl	80080a4 <HAL_GPIO_Init>
}
 80041d8:	e067      	b.n	80042aa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d12e      	bne.n	8004242 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80041e4:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80041ea:	4a33      	ldr	r2, [pc, #204]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80041f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004208:	4a2b      	ldr	r2, [pc, #172]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004220:	2303      	movs	r3, #3
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	2300      	movs	r3, #0
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004230:	230d      	movs	r3, #13
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004238:	4619      	mov	r1, r3
 800423a:	4824      	ldr	r0, [pc, #144]	; (80042cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 800423c:	f003 ff32 	bl	80080a4 <HAL_GPIO_Init>
}
 8004240:	e033      	b.n	80042aa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a22      	ldr	r2, [pc, #136]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d12e      	bne.n	80042aa <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800424e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004252:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004258:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800425e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800426c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004272:	f043 0320 	orr.w	r3, r3, #32
 8004276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800427c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004288:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428e:	2302      	movs	r3, #2
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	2300      	movs	r3, #0
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800429a:	230e      	movs	r3, #14
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800429e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a2:	4619      	mov	r1, r3
 80042a4:	4809      	ldr	r0, [pc, #36]	; (80042cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 80042a6:	f003 fefd 	bl	80080a4 <HAL_GPIO_Init>
}
 80042aa:	bf00      	nop
 80042ac:	3740      	adds	r7, #64	; 0x40
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40000400 	.word	0x40000400
 80042b8:	58024400 	.word	0x58024400
 80042bc:	58020000 	.word	0x58020000
 80042c0:	40000800 	.word	0x40000800
 80042c4:	58020c00 	.word	0x58020c00
 80042c8:	4000e000 	.word	0x4000e000
 80042cc:	58021400 	.word	0x58021400
 80042d0:	4000e400 	.word	0x4000e400

080042d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_PWM_MspInit+0x68>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10f      	bne.n	8004306 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 80042e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 80042f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004304:	e013      	b.n	800432e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_TIM_PWM_MspInit+0x70>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10e      	bne.n	800432e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 8004312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <HAL_TIM_PWM_MspInit+0x6c>)
 8004322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010400 	.word	0x40010400
 8004340:	58024400 	.word	0x58024400
 8004344:	40014000 	.word	0x40014000

08004348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a35      	ldr	r2, [pc, #212]	; (800443c <HAL_TIM_MspPostInit+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d120      	bne.n	80043ac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436a:	4b35      	ldr	r3, [pc, #212]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 800436c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004370:	4a33      	ldr	r2, [pc, #204]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 8004372:	f043 0304 	orr.w	r3, r3, #4
 8004376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 800437c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800438c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004396:	2300      	movs	r3, #0
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800439a:	2303      	movs	r3, #3
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	4619      	mov	r1, r3
 80043a4:	4827      	ldr	r0, [pc, #156]	; (8004444 <HAL_TIM_MspPostInit+0xfc>)
 80043a6:	f003 fe7d 	bl	80080a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80043aa:	e042      	b.n	8004432 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_TIM_MspPostInit+0x100>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d13d      	bne.n	8004432 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043b6:	4b22      	ldr	r3, [pc, #136]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043be:	f043 0310 	orr.w	r3, r3, #16
 80043c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d4:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <HAL_TIM_MspPostInit+0xf8>)
 80043e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80043f2:	2320      	movs	r3, #32
 80043f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004402:	2304      	movs	r3, #4
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	4619      	mov	r1, r3
 800440c:	480f      	ldr	r0, [pc, #60]	; (800444c <HAL_TIM_MspPostInit+0x104>)
 800440e:	f003 fe49 	bl	80080a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004412:	2308      	movs	r3, #8
 8004414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004422:	2304      	movs	r3, #4
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	4619      	mov	r1, r3
 800442c:	4808      	ldr	r0, [pc, #32]	; (8004450 <HAL_TIM_MspPostInit+0x108>)
 800442e:	f003 fe39 	bl	80080a4 <HAL_GPIO_Init>
}
 8004432:	bf00      	nop
 8004434:	3728      	adds	r7, #40	; 0x28
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40010400 	.word	0x40010400
 8004440:	58024400 	.word	0x58024400
 8004444:	58020800 	.word	0x58020800
 8004448:	40014000 	.word	0x40014000
 800444c:	58021000 	.word	0x58021000
 8004450:	58020000 	.word	0x58020000

08004454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b0b6      	sub	sp, #216	; 0xd8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	22b4      	movs	r2, #180	; 0xb4
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f00a f9a1 	bl	800e7bc <memset>
  if(huart->Instance==USART10)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a62      	ldr	r2, [pc, #392]	; (8004608 <HAL_UART_MspInit+0x1b4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	f040 80bc 	bne.w	80045fe <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8004486:	2301      	movs	r3, #1
 8004488:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004490:	f107 0310 	add.w	r3, r7, #16
 8004494:	4618      	mov	r0, r3
 8004496:	f005 f861 	bl	800955c <HAL_RCCEx_PeriphCLKConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80044a0:	f7fc ff7c 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044aa:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044b4:	4b55      	ldr	r3, [pc, #340]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044c2:	4b52      	ldr	r3, [pc, #328]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c8:	4a50      	ldr	r2, [pc, #320]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044ca:	f043 0310 	orr.w	r3, r3, #16
 80044ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <HAL_UART_MspInit+0x1b8>)
 80044d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044e0:	2304      	movs	r3, #4
 80044e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80044f8:	2304      	movs	r3, #4
 80044fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004502:	4619      	mov	r1, r3
 8004504:	4842      	ldr	r0, [pc, #264]	; (8004610 <HAL_UART_MspInit+0x1bc>)
 8004506:	f003 fdcd 	bl	80080a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800450a:	2308      	movs	r3, #8
 800450c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004510:	2302      	movs	r3, #2
 8004512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004522:	230b      	movs	r3, #11
 8004524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004528:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800452c:	4619      	mov	r1, r3
 800452e:	4838      	ldr	r0, [pc, #224]	; (8004610 <HAL_UART_MspInit+0x1bc>)
 8004530:	f003 fdb8 	bl	80080a4 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004536:	4a38      	ldr	r2, [pc, #224]	; (8004618 <HAL_UART_MspInit+0x1c4>)
 8004538:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800453c:	2276      	movs	r2, #118	; 0x76
 800453e:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004546:	4b33      	ldr	r3, [pc, #204]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004548:	2200      	movs	r2, #0
 800454a:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800454e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004552:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004554:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004556:	2200      	movs	r2, #0
 8004558:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800455a:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004566:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800456a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800456e:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004570:	4b28      	ldr	r3, [pc, #160]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004572:	2200      	movs	r2, #0
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 8004576:	4827      	ldr	r0, [pc, #156]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 8004578:	f000 fda4 	bl	80050c4 <HAL_DMA_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8004582:	f7fc ff0b 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a22      	ldr	r2, [pc, #136]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800458a:	67da      	str	r2, [r3, #124]	; 0x7c
 800458c:	4a21      	ldr	r2, [pc, #132]	; (8004614 <HAL_UART_MspInit+0x1c0>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_UART_MspInit+0x1c8>)
 8004594:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_UART_MspInit+0x1cc>)
 8004596:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_UART_MspInit+0x1c8>)
 800459a:	2277      	movs	r2, #119	; 0x77
 800459c:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045a0:	2240      	movs	r2, #64	; 0x40
 80045a2:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045a4:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045b0:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80045be:	4b17      	ldr	r3, [pc, #92]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ca:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045cc:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 80045d2:	4812      	ldr	r0, [pc, #72]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045d4:	f000 fd76 	bl	80050c4 <HAL_DMA_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 80045de:	f7fc fedd 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045e6:	679a      	str	r2, [r3, #120]	; 0x78
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <HAL_UART_MspInit+0x1c8>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2100      	movs	r1, #0
 80045f2:	209c      	movs	r0, #156	; 0x9c
 80045f4:	f000 fd23 	bl	800503e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80045f8:	209c      	movs	r0, #156	; 0x9c
 80045fa:	f000 fd3a 	bl	8005072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 80045fe:	bf00      	nop
 8004600:	37d8      	adds	r7, #216	; 0xd8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40011c00 	.word	0x40011c00
 800460c:	58024400 	.word	0x58024400
 8004610:	58021000 	.word	0x58021000
 8004614:	24000524 	.word	0x24000524
 8004618:	40020010 	.word	0x40020010
 800461c:	2400059c 	.word	0x2400059c
 8004620:	40020028 	.word	0x40020028

08004624 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_UART_MspDeInit+0x4c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d118      	bne.n	8004668 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_UART_MspDeInit+0x50>)
 8004638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800463c:	4a0d      	ldr	r2, [pc, #52]	; (8004674 <HAL_UART_MspDeInit+0x50>)
 800463e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004646:	210c      	movs	r1, #12
 8004648:	480b      	ldr	r0, [pc, #44]	; (8004678 <HAL_UART_MspDeInit+0x54>)
 800464a:	f003 fed3 	bl	80083f4 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f890 	bl	8005778 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f88b 	bl	8005778 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 8004662:	209c      	movs	r0, #156	; 0x9c
 8004664:	f000 fd13 	bl	800508e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40011c00 	.word	0x40011c00
 8004674:	58024400 	.word	0x58024400
 8004678:	58021000 	.word	0x58021000

0800467c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004680:	e7fe      	b.n	8004680 <NMI_Handler+0x4>

08004682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004686:	e7fe      	b.n	8004686 <HardFault_Handler+0x4>

08004688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800468c:	e7fe      	b.n	800468c <MemManage_Handler+0x4>

0800468e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <BusFault_Handler+0x4>

08004694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <UsageFault_Handler+0x4>

0800469a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c8:	f000 fb9a 	bl	8004e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046cc:	bf00      	nop
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <DMA1_Stream0_IRQHandler+0x10>)
 80046e6:	f002 f9cb 	bl	8006a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	24000524 	.word	0x24000524

080046f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <DMA1_Stream1_IRQHandler+0x10>)
 80046fa:	f002 f9c1 	bl	8006a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2400059c 	.word	0x2400059c

08004708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <TIM2_IRQHandler+0x10>)
 800470e:	f006 fdc7 	bl	800b2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	24000234 	.word	0x24000234

0800471c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004720:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004724:	f003 ff81 	bl	800862a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}

0800472c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004730:	4802      	ldr	r0, [pc, #8]	; (800473c <TIM5_IRQHandler+0x10>)
 8004732:	f006 fdb5 	bl	800b2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	24000318 	.word	0x24000318

08004740 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004744:	4802      	ldr	r0, [pc, #8]	; (8004750 <USART10_IRQHandler+0x10>)
 8004746:	f008 f80d 	bl	800c764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	24000494 	.word	0x24000494

08004754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
	return 1;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_kill>:

int _kill(int pid, int sig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800476e:	f009 ffed 	bl	800e74c <__errno>
 8004772:	4603      	mov	r3, r0
 8004774:	2216      	movs	r2, #22
 8004776:	601a      	str	r2, [r3, #0]
	return -1;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <_exit>:

void _exit (int status)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffe7 	bl	8004764 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004796:	e7fe      	b.n	8004796 <_exit+0x12>

08004798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <_sbrk+0x5c>)
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <_sbrk+0x60>)
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <_sbrk+0x64>)
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <_sbrk+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d207      	bcs.n	80047d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047c8:	f009 ffc0 	bl	800e74c <__errno>
 80047cc:	4603      	mov	r3, r0
 80047ce:	220c      	movs	r2, #12
 80047d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	e009      	b.n	80047ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <_sbrk+0x64>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_sbrk+0x64>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <_sbrk+0x64>)
 80047e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	24050000 	.word	0x24050000
 80047f8:	00000400 	.word	0x00000400
 80047fc:	24001c50 	.word	0x24001c50
 8004800:	24001c68 	.word	0x24001c68

08004804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <SystemInit+0xd0>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <SystemInit+0xd0>)
 8004810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004818:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <SystemInit+0xd4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	2b06      	cmp	r3, #6
 8004822:	d807      	bhi.n	8004834 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004824:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <SystemInit+0xd4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 030f 	bic.w	r3, r3, #15
 800482c:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <SystemInit+0xd4>)
 800482e:	f043 0307 	orr.w	r3, r3, #7
 8004832:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004834:	4b29      	ldr	r3, [pc, #164]	; (80048dc <SystemInit+0xd8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a28      	ldr	r2, [pc, #160]	; (80048dc <SystemInit+0xd8>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <SystemInit+0xd8>)
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <SystemInit+0xd8>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4924      	ldr	r1, [pc, #144]	; (80048dc <SystemInit+0xd8>)
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <SystemInit+0xdc>)
 800484e:	4013      	ands	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <SystemInit+0xd4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <SystemInit+0xd4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 030f 	bic.w	r3, r3, #15
 8004866:	4a1c      	ldr	r2, [pc, #112]	; (80048d8 <SystemInit+0xd4>)
 8004868:	f043 0307 	orr.w	r3, r3, #7
 800486c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <SystemInit+0xd8>)
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <SystemInit+0xd8>)
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <SystemInit+0xd8>)
 800487c:	2200      	movs	r2, #0
 800487e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <SystemInit+0xd8>)
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <SystemInit+0xe0>)
 8004884:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <SystemInit+0xd8>)
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <SystemInit+0xe4>)
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <SystemInit+0xd8>)
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <SystemInit+0xe8>)
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <SystemInit+0xd8>)
 8004894:	2200      	movs	r2, #0
 8004896:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <SystemInit+0xd8>)
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <SystemInit+0xe8>)
 800489c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <SystemInit+0xd8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <SystemInit+0xd8>)
 80048a6:	4a11      	ldr	r2, [pc, #68]	; (80048ec <SystemInit+0xe8>)
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <SystemInit+0xd8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <SystemInit+0xd8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <SystemInit+0xd8>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <SystemInit+0xd8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <SystemInit+0xec>)
 80048c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80048c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000ed00 	.word	0xe000ed00
 80048d8:	52002000 	.word	0x52002000
 80048dc:	58024400 	.word	0x58024400
 80048e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80048e4:	02020200 	.word	0x02020200
 80048e8:	01ff0000 	.word	0x01ff0000
 80048ec:	01010280 	.word	0x01010280
 80048f0:	52004000 	.word	0x52004000
 80048f4:	00000000 	.word	0x00000000

080048f8 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d101      	bne.n	800490e <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 800490a:	f7fe fb5b 	bl	8002fc4 <interPub>
	}
	if (htim->Instance == TIM5) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4aad      	ldr	r2, [pc, #692]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	f040 81c9 	bne.w	8004cac <HAL_TIM_PeriodElapsedCallback+0x3b4>
		Kpid[0].goalVel = Vy + Vx + (W * 0.152767);
 800491a:	4bac      	ldr	r3, [pc, #688]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800491c:	ed93 6b00 	vldr	d6, [r3]
 8004920:	4bab      	ldr	r3, [pc, #684]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004922:	ed93 7b00 	vldr	d7, [r3]
 8004926:	ee36 6b07 	vadd.f64	d6, d6, d7
 800492a:	4baa      	ldr	r3, [pc, #680]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800492c:	ed93 7b00 	vldr	d7, [r3]
 8004930:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8004ba8 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8004934:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004938:	ee36 7b07 	vadd.f64	d7, d6, d7
 800493c:	4ba6      	ldr	r3, [pc, #664]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800493e:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * 0.152844);
 8004942:	4ba2      	ldr	r3, [pc, #648]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004944:	ed93 6b00 	vldr	d6, [r3]
 8004948:	4ba1      	ldr	r3, [pc, #644]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800494a:	ed93 7b00 	vldr	d7, [r3]
 800494e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004952:	4ba0      	ldr	r3, [pc, #640]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004954:	ed93 7b00 	vldr	d7, [r3]
 8004958:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8004bb0 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 800495c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004960:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004964:	4b9c      	ldr	r3, [pc, #624]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004966:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
		Kpid[2].goalVel = Vy + Vx - (W * 0.152998);
 800496a:	4b98      	ldr	r3, [pc, #608]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800496c:	ed93 6b00 	vldr	d6, [r3]
 8004970:	4b97      	ldr	r3, [pc, #604]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004972:	ed93 7b00 	vldr	d7, [r3]
 8004976:	ee36 6b07 	vadd.f64	d6, d6, d7
 800497a:	4b96      	ldr	r3, [pc, #600]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800497c:	ed93 7b00 	vldr	d7, [r3]
 8004980:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 8004bb8 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8004984:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004988:	ee36 7b47 	vsub.f64	d7, d6, d7
 800498c:	4b92      	ldr	r3, [pc, #584]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800498e:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
		Kpid[3].goalVel = Vy - Vx + (W * 0.154852);
 8004992:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004994:	ed93 6b00 	vldr	d6, [r3]
 8004998:	4b8d      	ldr	r3, [pc, #564]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800499a:	ed93 7b00 	vldr	d7, [r3]
 800499e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80049a2:	4b8c      	ldr	r3, [pc, #560]	; (8004bd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80049a4:	ed93 7b00 	vldr	d7, [r3]
 80049a8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8004bc0 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 80049ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80049b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049b4:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80049b6:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	b21a      	sxth	r2, r3
 80049c2:	4b85      	ldr	r3, [pc, #532]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80049c4:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 80049c6:	4b86      	ldr	r3, [pc, #536]	; (8004be0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	425b      	negs	r3, r3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	b21a      	sxth	r2, r3
 80049d4:	4b80      	ldr	r3, [pc, #512]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80049d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 80049da:	4b82      	ldr	r3, [pc, #520]	; (8004be4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b21a      	sxth	r2, r3
 80049e2:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80049e4:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 80049e8:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b21a      	sxth	r2, r3
 80049f0:	4b79      	ldr	r3, [pc, #484]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80049f2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		__HAL_TIM_SetCounter(&htim24, 0);
 80049f6:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 80049fe:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8004a06:	4b78      	ldr	r3, [pc, #480]	; (8004be8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8004a0e:	4b74      	ldr	r3, [pc, #464]	; (8004be0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	dc06      	bgt.n	8004a2e <HAL_TIM_PeriodElapsedCallback+0x136>
			pidCtrl(i);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7fb fe2d 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e7f5      	b.n	8004a1a <HAL_TIM_PeriodElapsedCallback+0x122>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 8004a2e:	4b6a      	ldr	r3, [pc, #424]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004a30:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8004a34:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a3c:	ee17 2a90 	vmov	r2, s15
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 8004a42:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004a44:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a50:	ee17 2a90 	vmov	r2, s15
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 8004a56:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004a58:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a64:	ee17 2a90 	vmov	r2, s15
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8004a6a:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004a6c:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 8004a70:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a78:	ee17 2a90 	vmov	r2, s15
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a84:	485b      	ldr	r0, [pc, #364]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004a86:	f003 fdb7 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a90:	4858      	ldr	r0, [pc, #352]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004a92:	f003 fdb1 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a9c:	4856      	ldr	r0, [pc, #344]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004a9e:	f003 fdab 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	4854      	ldr	r0, [pc, #336]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004aa8:	f003 fda6 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ab2:	4851      	ldr	r0, [pc, #324]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004ab4:	f003 fda0 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004abe:	484e      	ldr	r0, [pc, #312]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004ac0:	f003 fd9a 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aca:	484b      	ldr	r0, [pc, #300]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004acc:	f003 fd94 	bl	80085f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	4848      	ldr	r0, [pc, #288]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004ad6:	f003 fd8f 	bl	80085f8 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004ada:	4b3f      	ldr	r3, [pc, #252]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004adc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004ae0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae8:	dd06      	ble.n	8004af8 <HAL_TIM_PeriodElapsedCallback+0x200>
 8004aea:	2201      	movs	r2, #1
 8004aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004af0:	4840      	ldr	r0, [pc, #256]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004af2:	f003 fd81 	bl	80085f8 <HAL_GPIO_WritePin>
 8004af6:	e00d      	b.n	8004b14 <HAL_TIM_PeriodElapsedCallback+0x21c>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004afa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8004afe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b06:	d505      	bpl.n	8004b14 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b0e:	4839      	ldr	r0, [pc, #228]	; (8004bf4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004b10:	f003 fd72 	bl	80085f8 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004b14:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b16:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004b1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b22:	dd06      	ble.n	8004b32 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8004b24:	2201      	movs	r2, #1
 8004b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b2a:	4833      	ldr	r0, [pc, #204]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b2c:	f003 fd64 	bl	80085f8 <HAL_GPIO_WritePin>
 8004b30:	e00c      	b.n	8004b4c <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b34:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004b38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b40:	d504      	bpl.n	8004b4c <HAL_TIM_PeriodElapsedCallback+0x254>
 8004b42:	2201      	movs	r2, #1
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	482c      	ldr	r0, [pc, #176]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b48:	f003 fd56 	bl	80085f8 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004b4c:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b4e:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004b52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	dd06      	ble.n	8004b6a <HAL_TIM_PeriodElapsedCallback+0x272>
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b62:	4825      	ldr	r0, [pc, #148]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b64:	f003 fd48 	bl	80085f8 <HAL_GPIO_WritePin>
 8004b68:	e00d      	b.n	8004b86 <HAL_TIM_PeriodElapsedCallback+0x28e>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b6c:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004b70:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b78:	d505      	bpl.n	8004b86 <HAL_TIM_PeriodElapsedCallback+0x28e>
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b80:	481d      	ldr	r0, [pc, #116]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b82:	f003 fd39 	bl	80085f8 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b88:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004b8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	dd32      	ble.n	8004bfc <HAL_TIM_PeriodElapsedCallback+0x304>
 8004b96:	2201      	movs	r2, #1
 8004b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b9c:	4816      	ldr	r0, [pc, #88]	; (8004bf8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004b9e:	f003 fd2b 	bl	80085f8 <HAL_GPIO_WritePin>
 8004ba2:	e038      	b.n	8004c16 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	7a743a64 	.word	0x7a743a64
 8004bac:	3fc38dde 	.word	0x3fc38dde
 8004bb0:	66b1e5c1 	.word	0x66b1e5c1
 8004bb4:	3fc39064 	.word	0x3fc39064
 8004bb8:	3f2d3c79 	.word	0x3f2d3c79
 8004bbc:	3fc39570 	.word	0x3fc39570
 8004bc0:	b9dc2f40 	.word	0xb9dc2f40
 8004bc4:	3fc3d230 	.word	0x3fc3d230
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	24001b68 	.word	0x24001b68
 8004bd0:	24001b60 	.word	0x24001b60
 8004bd4:	24001b70 	.word	0x24001b70
 8004bd8:	24000000 	.word	0x24000000
 8004bdc:	240003fc 	.word	0x240003fc
 8004be0:	240002cc 	.word	0x240002cc
 8004be4:	24000448 	.word	0x24000448
 8004be8:	24000280 	.word	0x24000280
 8004bec:	24000364 	.word	0x24000364
 8004bf0:	240003b0 	.word	0x240003b0
 8004bf4:	58020400 	.word	0x58020400
 8004bf8:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004bfe:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004c02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d504      	bpl.n	8004c16 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	4829      	ldr	r0, [pc, #164]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004c12:	f003 fcf1 	bl	80085f8 <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c18:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c1e:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004c22:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c28:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004c2c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c30:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c32:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004c36:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 8004c3a:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004c44:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c4a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c50:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004c54:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c5a:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004c5e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c64:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004c68:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004c6c:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004c70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004c76:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c7c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c82:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004c86:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c8c:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8004c90:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8004c96:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8004c9a:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8004c9e:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8004ca2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8004ca8:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	24000000 	.word	0x24000000
 8004cb8:	58021000 	.word	0x58021000
 8004cbc:	24001b80 	.word	0x24001b80
 8004cc0:	24001b78 	.word	0x24001b78
 8004cc4:	24001b88 	.word	0x24001b88

08004cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ccc:	f7ff fd9a 	bl	8004804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cd0:	480c      	ldr	r0, [pc, #48]	; (8004d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cd2:	490d      	ldr	r1, [pc, #52]	; (8004d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cd8:	e002      	b.n	8004ce0 <LoopCopyDataInit>

08004cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cde:	3304      	adds	r3, #4

08004ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ce4:	d3f9      	bcc.n	8004cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ce8:	4c0a      	ldr	r4, [pc, #40]	; (8004d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cec:	e001      	b.n	8004cf2 <LoopFillZerobss>

08004cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cf0:	3204      	adds	r2, #4

08004cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cf4:	d3fb      	bcc.n	8004cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cf6:	f009 fd2f 	bl	800e758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cfa:	f7fb fe1f 	bl	800093c <main>
  bx  lr
 8004cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d00:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d08:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8004d0c:	0800edf4 	.word	0x0800edf4
  ldr r2, =_sbss
 8004d10:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8004d14:	24001c68 	.word	0x24001c68

08004d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d18:	e7fe      	b.n	8004d18 <ADC3_IRQHandler>
	...

08004d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d22:	2003      	movs	r0, #3
 8004d24:	f000 f980 	bl	8005028 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d28:	f004 fa42 	bl	80091b0 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_Init+0x68>)
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4913      	ldr	r1, [pc, #76]	; (8004d88 <HAL_Init+0x6c>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d46:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <HAL_Init+0x68>)
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <HAL_Init+0x6c>)
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <HAL_Init+0x70>)
 8004d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d60:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <HAL_Init+0x74>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d66:	200f      	movs	r0, #15
 8004d68:	f000 f814 	bl	8004d94 <HAL_InitTick>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e002      	b.n	8004d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d76:	f7ff f955 	bl	8004024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58024400 	.word	0x58024400
 8004d88:	0800eda0 	.word	0x0800eda0
 8004d8c:	240001a4 	.word	0x240001a4
 8004d90:	240001a0 	.word	0x240001a0

08004d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_InitTick+0x60>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e021      	b.n	8004dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_InitTick+0x64>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_InitTick+0x60>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f973 	bl	80050aa <HAL_SYSTICK_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e00e      	b.n	8004dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d80a      	bhi.n	8004dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	f000 f92f 	bl	800503e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de0:	4a06      	ldr	r2, [pc, #24]	; (8004dfc <HAL_InitTick+0x68>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	240001ac 	.word	0x240001ac
 8004df8:	240001a0 	.word	0x240001a0
 8004dfc:	240001a8 	.word	0x240001a8

08004e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_IncTick+0x20>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_IncTick+0x24>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4413      	add	r3, r2
 8004e10:	4a04      	ldr	r2, [pc, #16]	; (8004e24 <HAL_IncTick+0x24>)
 8004e12:	6013      	str	r3, [r2, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	240001ac 	.word	0x240001ac
 8004e24:	24001c54 	.word	0x24001c54

08004e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_GetTick+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	24001c54 	.word	0x24001c54

08004e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <__NVIC_SetPriorityGrouping+0x40>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e6e:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <__NVIC_SetPriorityGrouping+0x40>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	60d3      	str	r3, [r2, #12]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000ed00 	.word	0xe000ed00
 8004e84:	05fa0000 	.word	0x05fa0000

08004e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f003 0307 	and.w	r3, r3, #7
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db0b      	blt.n	8004ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f003 021f 	and.w	r2, r3, #31
 8004ebc:	4907      	ldr	r1, [pc, #28]	; (8004edc <__NVIC_EnableIRQ+0x38>)
 8004ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e100 	.word	0xe000e100

08004ee0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db12      	blt.n	8004f18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	490a      	ldr	r1, [pc, #40]	; (8004f24 <__NVIC_DisableIRQ+0x44>)
 8004efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2001      	movs	r0, #1
 8004f02:	fa00 f202 	lsl.w	r2, r0, r2
 8004f06:	3320      	adds	r3, #32
 8004f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f0c:	f3bf 8f4f 	dsb	sy
}
 8004f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f12:	f3bf 8f6f 	isb	sy
}
 8004f16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000e100 	.word	0xe000e100

08004f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6039      	str	r1, [r7, #0]
 8004f32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db0a      	blt.n	8004f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	490c      	ldr	r1, [pc, #48]	; (8004f74 <__NVIC_SetPriority+0x4c>)
 8004f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f50:	e00a      	b.n	8004f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <__NVIC_SetPriority+0x50>)
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	3b04      	subs	r3, #4
 8004f60:	0112      	lsls	r2, r2, #4
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	440b      	add	r3, r1
 8004f66:	761a      	strb	r2, [r3, #24]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000e100 	.word	0xe000e100
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f1c3 0307 	rsb	r3, r3, #7
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	bf28      	it	cs
 8004f9a:	2304      	movcs	r3, #4
 8004f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d902      	bls.n	8004fac <NVIC_EncodePriority+0x30>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3b03      	subs	r3, #3
 8004faa:	e000      	b.n	8004fae <NVIC_EncodePriority+0x32>
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	43d9      	mvns	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd4:	4313      	orrs	r3, r2
         );
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff4:	d301      	bcc.n	8004ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00f      	b.n	800501a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <SysTick_Config+0x40>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005002:	210f      	movs	r1, #15
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	f7ff ff8e 	bl	8004f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <SysTick_Config+0x40>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <SysTick_Config+0x40>)
 8005014:	2207      	movs	r2, #7
 8005016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	e000e010 	.word	0xe000e010

08005028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff05 	bl	8004e40 <__NVIC_SetPriorityGrouping>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800504c:	f7ff ff1c 	bl	8004e88 <__NVIC_GetPriorityGrouping>
 8005050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	6978      	ldr	r0, [r7, #20]
 8005058:	f7ff ff90 	bl	8004f7c <NVIC_EncodePriority>
 800505c:	4602      	mov	r2, r0
 800505e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff ff5f 	bl	8004f28 <__NVIC_SetPriority>
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	4603      	mov	r3, r0
 800507a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800507c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ff0f 	bl	8004ea4 <__NVIC_EnableIRQ>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff1f 	bl	8004ee0 <__NVIC_DisableIRQ>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ff96 	bl	8004fe4 <SysTick_Config>
 80050b8:	4603      	mov	r3, r0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80050cc:	f7ff feac 	bl	8004e28 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e314      	b.n	8005706 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a66      	ldr	r2, [pc, #408]	; (800527c <HAL_DMA_Init+0x1b8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d04a      	beq.n	800517c <HAL_DMA_Init+0xb8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a65      	ldr	r2, [pc, #404]	; (8005280 <HAL_DMA_Init+0x1bc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d045      	beq.n	800517c <HAL_DMA_Init+0xb8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a63      	ldr	r2, [pc, #396]	; (8005284 <HAL_DMA_Init+0x1c0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d040      	beq.n	800517c <HAL_DMA_Init+0xb8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a62      	ldr	r2, [pc, #392]	; (8005288 <HAL_DMA_Init+0x1c4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d03b      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a60      	ldr	r2, [pc, #384]	; (800528c <HAL_DMA_Init+0x1c8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d036      	beq.n	800517c <HAL_DMA_Init+0xb8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5f      	ldr	r2, [pc, #380]	; (8005290 <HAL_DMA_Init+0x1cc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d031      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5d      	ldr	r2, [pc, #372]	; (8005294 <HAL_DMA_Init+0x1d0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d02c      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5c      	ldr	r2, [pc, #368]	; (8005298 <HAL_DMA_Init+0x1d4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d027      	beq.n	800517c <HAL_DMA_Init+0xb8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5a      	ldr	r2, [pc, #360]	; (800529c <HAL_DMA_Init+0x1d8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a59      	ldr	r2, [pc, #356]	; (80052a0 <HAL_DMA_Init+0x1dc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <HAL_DMA_Init+0x1e0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_DMA_Init+0xb8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a56      	ldr	r2, [pc, #344]	; (80052a8 <HAL_DMA_Init+0x1e4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a54      	ldr	r2, [pc, #336]	; (80052ac <HAL_DMA_Init+0x1e8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_DMA_Init+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a53      	ldr	r2, [pc, #332]	; (80052b0 <HAL_DMA_Init+0x1ec>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a51      	ldr	r2, [pc, #324]	; (80052b4 <HAL_DMA_Init+0x1f0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_DMA_Init+0xb8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a50      	ldr	r2, [pc, #320]	; (80052b8 <HAL_DMA_Init+0x1f4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_DMA_Init+0xbc>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_DMA_Init+0xbe>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 813c 	beq.w	8005400 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a37      	ldr	r2, [pc, #220]	; (800527c <HAL_DMA_Init+0x1b8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d04a      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a36      	ldr	r2, [pc, #216]	; (8005280 <HAL_DMA_Init+0x1bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d045      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a34      	ldr	r2, [pc, #208]	; (8005284 <HAL_DMA_Init+0x1c0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d040      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a33      	ldr	r2, [pc, #204]	; (8005288 <HAL_DMA_Init+0x1c4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d03b      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a31      	ldr	r2, [pc, #196]	; (800528c <HAL_DMA_Init+0x1c8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d036      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a30      	ldr	r2, [pc, #192]	; (8005290 <HAL_DMA_Init+0x1cc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d031      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2e      	ldr	r2, [pc, #184]	; (8005294 <HAL_DMA_Init+0x1d0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02c      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2d      	ldr	r2, [pc, #180]	; (8005298 <HAL_DMA_Init+0x1d4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d027      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <HAL_DMA_Init+0x1d8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <HAL_DMA_Init+0x1dc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01d      	beq.n	8005238 <HAL_DMA_Init+0x174>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <HAL_DMA_Init+0x1e0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_DMA_Init+0x174>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <HAL_DMA_Init+0x1e4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_DMA_Init+0x174>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a25      	ldr	r2, [pc, #148]	; (80052ac <HAL_DMA_Init+0x1e8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_DMA_Init+0x174>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <HAL_DMA_Init+0x1ec>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_DMA_Init+0x174>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_DMA_Init+0x1f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_DMA_Init+0x174>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <HAL_DMA_Init+0x1f4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <HAL_DMA_Init+0x186>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	e007      	b.n	800525a <HAL_DMA_Init+0x196>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800525a:	e02f      	b.n	80052bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800525c:	f7ff fde4 	bl	8004e28 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b05      	cmp	r3, #5
 8005268:	d928      	bls.n	80052bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2203      	movs	r2, #3
 8005274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e244      	b.n	8005706 <HAL_DMA_Init+0x642>
 800527c:	40020010 	.word	0x40020010
 8005280:	40020028 	.word	0x40020028
 8005284:	40020040 	.word	0x40020040
 8005288:	40020058 	.word	0x40020058
 800528c:	40020070 	.word	0x40020070
 8005290:	40020088 	.word	0x40020088
 8005294:	400200a0 	.word	0x400200a0
 8005298:	400200b8 	.word	0x400200b8
 800529c:	40020410 	.word	0x40020410
 80052a0:	40020428 	.word	0x40020428
 80052a4:	40020440 	.word	0x40020440
 80052a8:	40020458 	.word	0x40020458
 80052ac:	40020470 	.word	0x40020470
 80052b0:	40020488 	.word	0x40020488
 80052b4:	400204a0 	.word	0x400204a0
 80052b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1c8      	bne.n	800525c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4b84      	ldr	r3, [pc, #528]	; (80054e8 <HAL_DMA_Init+0x424>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80052e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b04      	cmp	r3, #4
 800530e:	d107      	bne.n	8005320 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	4313      	orrs	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b28      	cmp	r3, #40	; 0x28
 8005326:	d903      	bls.n	8005330 <HAL_DMA_Init+0x26c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b2e      	cmp	r3, #46	; 0x2e
 800532e:	d91f      	bls.n	8005370 <HAL_DMA_Init+0x2ac>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b3e      	cmp	r3, #62	; 0x3e
 8005336:	d903      	bls.n	8005340 <HAL_DMA_Init+0x27c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b42      	cmp	r3, #66	; 0x42
 800533e:	d917      	bls.n	8005370 <HAL_DMA_Init+0x2ac>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b46      	cmp	r3, #70	; 0x46
 8005346:	d903      	bls.n	8005350 <HAL_DMA_Init+0x28c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b48      	cmp	r3, #72	; 0x48
 800534e:	d90f      	bls.n	8005370 <HAL_DMA_Init+0x2ac>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b4e      	cmp	r3, #78	; 0x4e
 8005356:	d903      	bls.n	8005360 <HAL_DMA_Init+0x29c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b52      	cmp	r3, #82	; 0x52
 800535e:	d907      	bls.n	8005370 <HAL_DMA_Init+0x2ac>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b73      	cmp	r3, #115	; 0x73
 8005366:	d905      	bls.n	8005374 <HAL_DMA_Init+0x2b0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b77      	cmp	r3, #119	; 0x77
 800536e:	d801      	bhi.n	8005374 <HAL_DMA_Init+0x2b0>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_DMA_Init+0x2b2>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005380:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d117      	bne.n	80053dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 fce6 	bl	8007d90 <DMA_CheckFifoParam>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e194      	b.n	8005706 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f002 fc21 	bl	8007c2c <DMA_CalcBaseAndBitshift>
 80053ea:	4603      	mov	r3, r0
 80053ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	223f      	movs	r2, #63	; 0x3f
 80053f8:	409a      	lsls	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	e0ca      	b.n	8005596 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a39      	ldr	r2, [pc, #228]	; (80054ec <HAL_DMA_Init+0x428>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a38      	ldr	r2, [pc, #224]	; (80054f0 <HAL_DMA_Init+0x42c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a36      	ldr	r2, [pc, #216]	; (80054f4 <HAL_DMA_Init+0x430>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a35      	ldr	r2, [pc, #212]	; (80054f8 <HAL_DMA_Init+0x434>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_DMA_Init+0x438>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a32      	ldr	r2, [pc, #200]	; (8005500 <HAL_DMA_Init+0x43c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a30      	ldr	r2, [pc, #192]	; (8005504 <HAL_DMA_Init+0x440>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_DMA_Init+0x38c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <HAL_DMA_Init+0x444>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Init+0x390>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_DMA_Init+0x392>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8094 	beq.w	8005584 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a22      	ldr	r2, [pc, #136]	; (80054ec <HAL_DMA_Init+0x428>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d021      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a21      	ldr	r2, [pc, #132]	; (80054f0 <HAL_DMA_Init+0x42c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01c      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <HAL_DMA_Init+0x430>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d017      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <HAL_DMA_Init+0x434>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d012      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <HAL_DMA_Init+0x438>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00d      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <HAL_DMA_Init+0x43c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d008      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_DMA_Init+0x440>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <HAL_DMA_Init+0x3e6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_DMA_Init+0x444>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <HAL_DMA_Init+0x448>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d01d      	beq.n	8005510 <HAL_DMA_Init+0x44c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d102      	bne.n	80054e2 <HAL_DMA_Init+0x41e>
 80054dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054e0:	e017      	b.n	8005512 <HAL_DMA_Init+0x44e>
 80054e2:	2300      	movs	r3, #0
 80054e4:	e015      	b.n	8005512 <HAL_DMA_Init+0x44e>
 80054e6:	bf00      	nop
 80054e8:	fe10803f 	.word	0xfe10803f
 80054ec:	58025408 	.word	0x58025408
 80054f0:	5802541c 	.word	0x5802541c
 80054f4:	58025430 	.word	0x58025430
 80054f8:	58025444 	.word	0x58025444
 80054fc:	58025458 	.word	0x58025458
 8005500:	5802546c 	.word	0x5802546c
 8005504:	58025480 	.word	0x58025480
 8005508:	58025494 	.word	0x58025494
 800550c:	fffe000f 	.word	0xfffe000f
 8005510:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68d2      	ldr	r2, [r2, #12]
 8005516:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005520:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005540:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <HAL_DMA_Init+0x64c>)
 8005558:	4413      	add	r3, r2
 800555a:	4a6e      	ldr	r2, [pc, #440]	; (8005714 <HAL_DMA_Init+0x650>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	009a      	lsls	r2, r3, #2
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fb5f 	bl	8007c2c <DMA_CalcBaseAndBitshift>
 800556e:	4603      	mov	r3, r0
 8005570:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	2201      	movs	r2, #1
 800557c:	409a      	lsls	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e008      	b.n	8005596 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2203      	movs	r2, #3
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0b7      	b.n	8005706 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5f      	ldr	r2, [pc, #380]	; (8005718 <HAL_DMA_Init+0x654>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d072      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5d      	ldr	r2, [pc, #372]	; (800571c <HAL_DMA_Init+0x658>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d06d      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5c      	ldr	r2, [pc, #368]	; (8005720 <HAL_DMA_Init+0x65c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d068      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5a      	ldr	r2, [pc, #360]	; (8005724 <HAL_DMA_Init+0x660>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d063      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a59      	ldr	r2, [pc, #356]	; (8005728 <HAL_DMA_Init+0x664>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d05e      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_DMA_Init+0x668>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d059      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a56      	ldr	r2, [pc, #344]	; (8005730 <HAL_DMA_Init+0x66c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d054      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a54      	ldr	r2, [pc, #336]	; (8005734 <HAL_DMA_Init+0x670>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d04f      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a53      	ldr	r2, [pc, #332]	; (8005738 <HAL_DMA_Init+0x674>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d04a      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a51      	ldr	r2, [pc, #324]	; (800573c <HAL_DMA_Init+0x678>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d045      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a50      	ldr	r2, [pc, #320]	; (8005740 <HAL_DMA_Init+0x67c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d040      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <HAL_DMA_Init+0x680>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d03b      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_DMA_Init+0x684>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d036      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4b      	ldr	r2, [pc, #300]	; (800574c <HAL_DMA_Init+0x688>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d031      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4a      	ldr	r2, [pc, #296]	; (8005750 <HAL_DMA_Init+0x68c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d02c      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a48      	ldr	r2, [pc, #288]	; (8005754 <HAL_DMA_Init+0x690>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d027      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a47      	ldr	r2, [pc, #284]	; (8005758 <HAL_DMA_Init+0x694>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d022      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a45      	ldr	r2, [pc, #276]	; (800575c <HAL_DMA_Init+0x698>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01d      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a44      	ldr	r2, [pc, #272]	; (8005760 <HAL_DMA_Init+0x69c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d018      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a42      	ldr	r2, [pc, #264]	; (8005764 <HAL_DMA_Init+0x6a0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a41      	ldr	r2, [pc, #260]	; (8005768 <HAL_DMA_Init+0x6a4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3f      	ldr	r2, [pc, #252]	; (800576c <HAL_DMA_Init+0x6a8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3e      	ldr	r2, [pc, #248]	; (8005770 <HAL_DMA_Init+0x6ac>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_DMA_Init+0x5c2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3c      	ldr	r2, [pc, #240]	; (8005774 <HAL_DMA_Init+0x6b0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d101      	bne.n	800568a <HAL_DMA_Init+0x5c6>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_DMA_Init+0x5c8>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d032      	beq.n	80056f6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 fbf9 	bl	8007e88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d102      	bne.n	80056a4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <HAL_DMA_Init+0x620>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d80c      	bhi.n	80056e4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f002 fc76 	bl	8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	e008      	b.n	80056f6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	a7fdabf8 	.word	0xa7fdabf8
 8005714:	cccccccd 	.word	0xcccccccd
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
 8005758:	58025408 	.word	0x58025408
 800575c:	5802541c 	.word	0x5802541c
 8005760:	58025430 	.word	0x58025430
 8005764:	58025444 	.word	0x58025444
 8005768:	58025458 	.word	0x58025458
 800576c:	5802546c 	.word	0x5802546c
 8005770:	58025480 	.word	0x58025480
 8005774:	58025494 	.word	0x58025494

08005778 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e1a8      	b.n	8005adc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a82      	ldr	r2, [pc, #520]	; (8005998 <HAL_DMA_DeInit+0x220>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a80      	ldr	r2, [pc, #512]	; (800599c <HAL_DMA_DeInit+0x224>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7f      	ldr	r2, [pc, #508]	; (80059a0 <HAL_DMA_DeInit+0x228>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a7d      	ldr	r2, [pc, #500]	; (80059a4 <HAL_DMA_DeInit+0x22c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a7c      	ldr	r2, [pc, #496]	; (80059a8 <HAL_DMA_DeInit+0x230>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a7a      	ldr	r2, [pc, #488]	; (80059ac <HAL_DMA_DeInit+0x234>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a79      	ldr	r2, [pc, #484]	; (80059b0 <HAL_DMA_DeInit+0x238>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a77      	ldr	r2, [pc, #476]	; (80059b4 <HAL_DMA_DeInit+0x23c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a76      	ldr	r2, [pc, #472]	; (80059b8 <HAL_DMA_DeInit+0x240>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a74      	ldr	r2, [pc, #464]	; (80059bc <HAL_DMA_DeInit+0x244>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a73      	ldr	r2, [pc, #460]	; (80059c0 <HAL_DMA_DeInit+0x248>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a71      	ldr	r2, [pc, #452]	; (80059c4 <HAL_DMA_DeInit+0x24c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a70      	ldr	r2, [pc, #448]	; (80059c8 <HAL_DMA_DeInit+0x250>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a6e      	ldr	r2, [pc, #440]	; (80059cc <HAL_DMA_DeInit+0x254>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a6d      	ldr	r2, [pc, #436]	; (80059d0 <HAL_DMA_DeInit+0x258>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_DeInit+0xb2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_DMA_DeInit+0x25c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <HAL_DMA_DeInit+0xc4>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e007      	b.n	800584c <HAL_DMA_DeInit+0xd4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a51      	ldr	r2, [pc, #324]	; (8005998 <HAL_DMA_DeInit+0x220>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04a      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a50      	ldr	r2, [pc, #320]	; (800599c <HAL_DMA_DeInit+0x224>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d045      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a4e      	ldr	r2, [pc, #312]	; (80059a0 <HAL_DMA_DeInit+0x228>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d040      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a4d      	ldr	r2, [pc, #308]	; (80059a4 <HAL_DMA_DeInit+0x22c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d03b      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a4b      	ldr	r2, [pc, #300]	; (80059a8 <HAL_DMA_DeInit+0x230>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d036      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a4a      	ldr	r2, [pc, #296]	; (80059ac <HAL_DMA_DeInit+0x234>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d031      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a48      	ldr	r2, [pc, #288]	; (80059b0 <HAL_DMA_DeInit+0x238>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02c      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a47      	ldr	r2, [pc, #284]	; (80059b4 <HAL_DMA_DeInit+0x23c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d027      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a45      	ldr	r2, [pc, #276]	; (80059b8 <HAL_DMA_DeInit+0x240>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d022      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a44      	ldr	r2, [pc, #272]	; (80059bc <HAL_DMA_DeInit+0x244>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d01d      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a42      	ldr	r2, [pc, #264]	; (80059c0 <HAL_DMA_DeInit+0x248>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a41      	ldr	r2, [pc, #260]	; (80059c4 <HAL_DMA_DeInit+0x24c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a3f      	ldr	r2, [pc, #252]	; (80059c8 <HAL_DMA_DeInit+0x250>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a3e      	ldr	r2, [pc, #248]	; (80059cc <HAL_DMA_DeInit+0x254>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3c      	ldr	r2, [pc, #240]	; (80059d0 <HAL_DMA_DeInit+0x258>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_DMA_DeInit+0x174>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a3b      	ldr	r2, [pc, #236]	; (80059d4 <HAL_DMA_DeInit+0x25c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d101      	bne.n	80058f0 <HAL_DMA_DeInit+0x178>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <HAL_DMA_DeInit+0x17a>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d025      	beq.n	8005942 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2221      	movs	r2, #33	; 0x21
 8005924:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f002 f980 	bl	8007c2c <DMA_CalcBaseAndBitshift>
 800592c:	4603      	mov	r3, r0
 800592e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	223f      	movs	r2, #63	; 0x3f
 800593a:	409a      	lsls	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	e081      	b.n	8005a46 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <HAL_DMA_DeInit+0x260>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a22      	ldr	r2, [pc, #136]	; (80059dc <HAL_DMA_DeInit+0x264>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01d      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <HAL_DMA_DeInit+0x268>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	; (80059e4 <HAL_DMA_DeInit+0x26c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <HAL_DMA_DeInit+0x270>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <HAL_DMA_DeInit+0x274>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_DMA_DeInit+0x278>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_DMA_DeInit+0x21a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <HAL_DMA_DeInit+0x27c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d132      	bne.n	80059f8 <HAL_DMA_DeInit+0x280>
 8005992:	2301      	movs	r3, #1
 8005994:	e031      	b.n	80059fa <HAL_DMA_DeInit+0x282>
 8005996:	bf00      	nop
 8005998:	40020010 	.word	0x40020010
 800599c:	40020028 	.word	0x40020028
 80059a0:	40020040 	.word	0x40020040
 80059a4:	40020058 	.word	0x40020058
 80059a8:	40020070 	.word	0x40020070
 80059ac:	40020088 	.word	0x40020088
 80059b0:	400200a0 	.word	0x400200a0
 80059b4:	400200b8 	.word	0x400200b8
 80059b8:	40020410 	.word	0x40020410
 80059bc:	40020428 	.word	0x40020428
 80059c0:	40020440 	.word	0x40020440
 80059c4:	40020458 	.word	0x40020458
 80059c8:	40020470 	.word	0x40020470
 80059cc:	40020488 	.word	0x40020488
 80059d0:	400204a0 	.word	0x400204a0
 80059d4:	400204b8 	.word	0x400204b8
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d021      	beq.n	8005a42 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f002 f900 	bl	8007c2c <DMA_CalcBaseAndBitshift>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2201      	movs	r2, #1
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e001      	b.n	8005a46 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e04a      	b.n	8005adc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f002 fa1e 	bl	8007e88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a64:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00f      	beq.n	8005a8e <HAL_DMA_DeInit+0x316>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d80b      	bhi.n	8005a8e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 faa0 	bl	8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a8c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e226      	b.n	8005f4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_DMA_Start_IT+0x2a>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e21f      	b.n	8005f4e <HAL_DMA_Start_IT+0x46a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	f040 820a 	bne.w	8005f38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <HAL_DMA_Start_IT+0x1f4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04a      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a66      	ldr	r2, [pc, #408]	; (8005cdc <HAL_DMA_Start_IT+0x1f8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d045      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a65      	ldr	r2, [pc, #404]	; (8005ce0 <HAL_DMA_Start_IT+0x1fc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d040      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a63      	ldr	r2, [pc, #396]	; (8005ce4 <HAL_DMA_Start_IT+0x200>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d03b      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a62      	ldr	r2, [pc, #392]	; (8005ce8 <HAL_DMA_Start_IT+0x204>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d036      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a60      	ldr	r2, [pc, #384]	; (8005cec <HAL_DMA_Start_IT+0x208>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a5f      	ldr	r2, [pc, #380]	; (8005cf0 <HAL_DMA_Start_IT+0x20c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02c      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a5d      	ldr	r2, [pc, #372]	; (8005cf4 <HAL_DMA_Start_IT+0x210>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d027      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a5c      	ldr	r2, [pc, #368]	; (8005cf8 <HAL_DMA_Start_IT+0x214>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5a      	ldr	r2, [pc, #360]	; (8005cfc <HAL_DMA_Start_IT+0x218>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01d      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a59      	ldr	r2, [pc, #356]	; (8005d00 <HAL_DMA_Start_IT+0x21c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a57      	ldr	r2, [pc, #348]	; (8005d04 <HAL_DMA_Start_IT+0x220>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a56      	ldr	r2, [pc, #344]	; (8005d08 <HAL_DMA_Start_IT+0x224>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a54      	ldr	r2, [pc, #336]	; (8005d0c <HAL_DMA_Start_IT+0x228>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a53      	ldr	r2, [pc, #332]	; (8005d10 <HAL_DMA_Start_IT+0x22c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMA_Start_IT+0xee>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a51      	ldr	r2, [pc, #324]	; (8005d14 <HAL_DMA_Start_IT+0x230>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <HAL_DMA_Start_IT+0x100>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e007      	b.n	8005bf4 <HAL_DMA_Start_IT+0x110>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f001 fe6a 	bl	80078d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a34      	ldr	r2, [pc, #208]	; (8005cd8 <HAL_DMA_Start_IT+0x1f4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d04a      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a33      	ldr	r2, [pc, #204]	; (8005cdc <HAL_DMA_Start_IT+0x1f8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d045      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a31      	ldr	r2, [pc, #196]	; (8005ce0 <HAL_DMA_Start_IT+0x1fc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d040      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <HAL_DMA_Start_IT+0x200>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d03b      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ce8 <HAL_DMA_Start_IT+0x204>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d036      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2d      	ldr	r2, [pc, #180]	; (8005cec <HAL_DMA_Start_IT+0x208>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d031      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	; (8005cf0 <HAL_DMA_Start_IT+0x20c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d02c      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <HAL_DMA_Start_IT+0x210>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d027      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <HAL_DMA_Start_IT+0x214>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d022      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <HAL_DMA_Start_IT+0x218>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d01d      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a25      	ldr	r2, [pc, #148]	; (8005d00 <HAL_DMA_Start_IT+0x21c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d018      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <HAL_DMA_Start_IT+0x220>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <HAL_DMA_Start_IT+0x224>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00e      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <HAL_DMA_Start_IT+0x228>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d009      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <HAL_DMA_Start_IT+0x22c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_DMA_Start_IT+0x1bc>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <HAL_DMA_Start_IT+0x230>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d101      	bne.n	8005ca4 <HAL_DMA_Start_IT+0x1c0>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <HAL_DMA_Start_IT+0x1c2>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d036      	beq.n	8005d18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 021e 	bic.w	r2, r3, #30
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0216 	orr.w	r2, r2, #22
 8005cbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d03e      	beq.n	8005d44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0208 	orr.w	r2, r2, #8
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e035      	b.n	8005d44 <HAL_DMA_Start_IT+0x260>
 8005cd8:	40020010 	.word	0x40020010
 8005cdc:	40020028 	.word	0x40020028
 8005ce0:	40020040 	.word	0x40020040
 8005ce4:	40020058 	.word	0x40020058
 8005ce8:	40020070 	.word	0x40020070
 8005cec:	40020088 	.word	0x40020088
 8005cf0:	400200a0 	.word	0x400200a0
 8005cf4:	400200b8 	.word	0x400200b8
 8005cf8:	40020410 	.word	0x40020410
 8005cfc:	40020428 	.word	0x40020428
 8005d00:	40020440 	.word	0x40020440
 8005d04:	40020458 	.word	0x40020458
 8005d08:	40020470 	.word	0x40020470
 8005d0c:	40020488 	.word	0x40020488
 8005d10:	400204a0 	.word	0x400204a0
 8005d14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 020e 	bic.w	r2, r3, #14
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 020a 	orr.w	r2, r2, #10
 8005d2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0204 	orr.w	r2, r2, #4
 8005d42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a83      	ldr	r2, [pc, #524]	; (8005f58 <HAL_DMA_Start_IT+0x474>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d072      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a82      	ldr	r2, [pc, #520]	; (8005f5c <HAL_DMA_Start_IT+0x478>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d06d      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a80      	ldr	r2, [pc, #512]	; (8005f60 <HAL_DMA_Start_IT+0x47c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d068      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a7f      	ldr	r2, [pc, #508]	; (8005f64 <HAL_DMA_Start_IT+0x480>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d063      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a7d      	ldr	r2, [pc, #500]	; (8005f68 <HAL_DMA_Start_IT+0x484>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d05e      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a7c      	ldr	r2, [pc, #496]	; (8005f6c <HAL_DMA_Start_IT+0x488>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d059      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7a      	ldr	r2, [pc, #488]	; (8005f70 <HAL_DMA_Start_IT+0x48c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d054      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a79      	ldr	r2, [pc, #484]	; (8005f74 <HAL_DMA_Start_IT+0x490>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04f      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a77      	ldr	r2, [pc, #476]	; (8005f78 <HAL_DMA_Start_IT+0x494>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d04a      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a76      	ldr	r2, [pc, #472]	; (8005f7c <HAL_DMA_Start_IT+0x498>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a74      	ldr	r2, [pc, #464]	; (8005f80 <HAL_DMA_Start_IT+0x49c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d040      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a73      	ldr	r2, [pc, #460]	; (8005f84 <HAL_DMA_Start_IT+0x4a0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a71      	ldr	r2, [pc, #452]	; (8005f88 <HAL_DMA_Start_IT+0x4a4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a70      	ldr	r2, [pc, #448]	; (8005f8c <HAL_DMA_Start_IT+0x4a8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a6e      	ldr	r2, [pc, #440]	; (8005f90 <HAL_DMA_Start_IT+0x4ac>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6d      	ldr	r2, [pc, #436]	; (8005f94 <HAL_DMA_Start_IT+0x4b0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6b      	ldr	r2, [pc, #428]	; (8005f98 <HAL_DMA_Start_IT+0x4b4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6a      	ldr	r2, [pc, #424]	; (8005f9c <HAL_DMA_Start_IT+0x4b8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a68      	ldr	r2, [pc, #416]	; (8005fa0 <HAL_DMA_Start_IT+0x4bc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a67      	ldr	r2, [pc, #412]	; (8005fa4 <HAL_DMA_Start_IT+0x4c0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a65      	ldr	r2, [pc, #404]	; (8005fa8 <HAL_DMA_Start_IT+0x4c4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a64      	ldr	r2, [pc, #400]	; (8005fac <HAL_DMA_Start_IT+0x4c8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a62      	ldr	r2, [pc, #392]	; (8005fb0 <HAL_DMA_Start_IT+0x4cc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_DMA_Start_IT+0x350>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a61      	ldr	r2, [pc, #388]	; (8005fb4 <HAL_DMA_Start_IT+0x4d0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_DMA_Start_IT+0x354>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_DMA_Start_IT+0x356>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01a      	beq.n	8005e74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <HAL_DMA_Start_IT+0x474>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d04a      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <HAL_DMA_Start_IT+0x478>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d045      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <HAL_DMA_Start_IT+0x47c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d040      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <HAL_DMA_Start_IT+0x480>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d03b      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a31      	ldr	r2, [pc, #196]	; (8005f68 <HAL_DMA_Start_IT+0x484>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d036      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <HAL_DMA_Start_IT+0x488>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d031      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <HAL_DMA_Start_IT+0x48c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02c      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <HAL_DMA_Start_IT+0x490>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d027      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_DMA_Start_IT+0x494>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2a      	ldr	r2, [pc, #168]	; (8005f7c <HAL_DMA_Start_IT+0x498>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d01d      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a28      	ldr	r2, [pc, #160]	; (8005f80 <HAL_DMA_Start_IT+0x49c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <HAL_DMA_Start_IT+0x4a0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <HAL_DMA_Start_IT+0x4a4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <HAL_DMA_Start_IT+0x4a8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_DMA_Start_IT+0x4ac>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_DMA_Start_IT+0x430>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_DMA_Start_IT+0x4b0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d108      	bne.n	8005f26 <HAL_DMA_Start_IT+0x442>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e012      	b.n	8005f4c <HAL_DMA_Start_IT+0x468>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e009      	b.n	8005f4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40020010 	.word	0x40020010
 8005f5c:	40020028 	.word	0x40020028
 8005f60:	40020040 	.word	0x40020040
 8005f64:	40020058 	.word	0x40020058
 8005f68:	40020070 	.word	0x40020070
 8005f6c:	40020088 	.word	0x40020088
 8005f70:	400200a0 	.word	0x400200a0
 8005f74:	400200b8 	.word	0x400200b8
 8005f78:	40020410 	.word	0x40020410
 8005f7c:	40020428 	.word	0x40020428
 8005f80:	40020440 	.word	0x40020440
 8005f84:	40020458 	.word	0x40020458
 8005f88:	40020470 	.word	0x40020470
 8005f8c:	40020488 	.word	0x40020488
 8005f90:	400204a0 	.word	0x400204a0
 8005f94:	400204b8 	.word	0x400204b8
 8005f98:	58025408 	.word	0x58025408
 8005f9c:	5802541c 	.word	0x5802541c
 8005fa0:	58025430 	.word	0x58025430
 8005fa4:	58025444 	.word	0x58025444
 8005fa8:	58025458 	.word	0x58025458
 8005fac:	5802546c 	.word	0x5802546c
 8005fb0:	58025480 	.word	0x58025480
 8005fb4:	58025494 	.word	0x58025494

08005fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005fc0:	f7fe ff32 	bl	8004e28 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e2dc      	b.n	800658a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d008      	beq.n	8005fee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e2cd      	b.n	800658a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a76      	ldr	r2, [pc, #472]	; (80061cc <HAL_DMA_Abort+0x214>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d04a      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a74      	ldr	r2, [pc, #464]	; (80061d0 <HAL_DMA_Abort+0x218>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d045      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a73      	ldr	r2, [pc, #460]	; (80061d4 <HAL_DMA_Abort+0x21c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d040      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a71      	ldr	r2, [pc, #452]	; (80061d8 <HAL_DMA_Abort+0x220>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d03b      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a70      	ldr	r2, [pc, #448]	; (80061dc <HAL_DMA_Abort+0x224>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d036      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6e      	ldr	r2, [pc, #440]	; (80061e0 <HAL_DMA_Abort+0x228>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d031      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a6d      	ldr	r2, [pc, #436]	; (80061e4 <HAL_DMA_Abort+0x22c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d02c      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a6b      	ldr	r2, [pc, #428]	; (80061e8 <HAL_DMA_Abort+0x230>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d027      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a6a      	ldr	r2, [pc, #424]	; (80061ec <HAL_DMA_Abort+0x234>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d022      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a68      	ldr	r2, [pc, #416]	; (80061f0 <HAL_DMA_Abort+0x238>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01d      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a67      	ldr	r2, [pc, #412]	; (80061f4 <HAL_DMA_Abort+0x23c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d018      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a65      	ldr	r2, [pc, #404]	; (80061f8 <HAL_DMA_Abort+0x240>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a64      	ldr	r2, [pc, #400]	; (80061fc <HAL_DMA_Abort+0x244>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00e      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a62      	ldr	r2, [pc, #392]	; (8006200 <HAL_DMA_Abort+0x248>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a61      	ldr	r2, [pc, #388]	; (8006204 <HAL_DMA_Abort+0x24c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d004      	beq.n	800608e <HAL_DMA_Abort+0xd6>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a5f      	ldr	r2, [pc, #380]	; (8006208 <HAL_DMA_Abort+0x250>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d101      	bne.n	8006092 <HAL_DMA_Abort+0xda>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <HAL_DMA_Abort+0xdc>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 021e 	bic.w	r2, r2, #30
 80060a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e00a      	b.n	80060d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 020e 	bic.w	r2, r2, #14
 80060ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3c      	ldr	r2, [pc, #240]	; (80061cc <HAL_DMA_Abort+0x214>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d072      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3a      	ldr	r2, [pc, #232]	; (80061d0 <HAL_DMA_Abort+0x218>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d06d      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a39      	ldr	r2, [pc, #228]	; (80061d4 <HAL_DMA_Abort+0x21c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d068      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a37      	ldr	r2, [pc, #220]	; (80061d8 <HAL_DMA_Abort+0x220>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d063      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a36      	ldr	r2, [pc, #216]	; (80061dc <HAL_DMA_Abort+0x224>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d05e      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a34      	ldr	r2, [pc, #208]	; (80061e0 <HAL_DMA_Abort+0x228>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d059      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a33      	ldr	r2, [pc, #204]	; (80061e4 <HAL_DMA_Abort+0x22c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d054      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a31      	ldr	r2, [pc, #196]	; (80061e8 <HAL_DMA_Abort+0x230>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d04f      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a30      	ldr	r2, [pc, #192]	; (80061ec <HAL_DMA_Abort+0x234>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d04a      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2e      	ldr	r2, [pc, #184]	; (80061f0 <HAL_DMA_Abort+0x238>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d045      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <HAL_DMA_Abort+0x23c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d040      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <HAL_DMA_Abort+0x240>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d03b      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2a      	ldr	r2, [pc, #168]	; (80061fc <HAL_DMA_Abort+0x244>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d036      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a28      	ldr	r2, [pc, #160]	; (8006200 <HAL_DMA_Abort+0x248>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a27      	ldr	r2, [pc, #156]	; (8006204 <HAL_DMA_Abort+0x24c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d02c      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a25      	ldr	r2, [pc, #148]	; (8006208 <HAL_DMA_Abort+0x250>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d027      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a24      	ldr	r2, [pc, #144]	; (800620c <HAL_DMA_Abort+0x254>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a22      	ldr	r2, [pc, #136]	; (8006210 <HAL_DMA_Abort+0x258>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <HAL_DMA_Abort+0x25c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <HAL_DMA_Abort+0x260>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <HAL_DMA_Abort+0x264>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <HAL_DMA_Abort+0x268>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_DMA_Abort+0x26c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_DMA_Abort+0x20e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <HAL_DMA_Abort+0x270>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d132      	bne.n	800622c <HAL_DMA_Abort+0x274>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e031      	b.n	800622e <HAL_DMA_Abort+0x276>
 80061ca:	bf00      	nop
 80061cc:	40020010 	.word	0x40020010
 80061d0:	40020028 	.word	0x40020028
 80061d4:	40020040 	.word	0x40020040
 80061d8:	40020058 	.word	0x40020058
 80061dc:	40020070 	.word	0x40020070
 80061e0:	40020088 	.word	0x40020088
 80061e4:	400200a0 	.word	0x400200a0
 80061e8:	400200b8 	.word	0x400200b8
 80061ec:	40020410 	.word	0x40020410
 80061f0:	40020428 	.word	0x40020428
 80061f4:	40020440 	.word	0x40020440
 80061f8:	40020458 	.word	0x40020458
 80061fc:	40020470 	.word	0x40020470
 8006200:	40020488 	.word	0x40020488
 8006204:	400204a0 	.word	0x400204a0
 8006208:	400204b8 	.word	0x400204b8
 800620c:	58025408 	.word	0x58025408
 8006210:	5802541c 	.word	0x5802541c
 8006214:	58025430 	.word	0x58025430
 8006218:	58025444 	.word	0x58025444
 800621c:	58025458 	.word	0x58025458
 8006220:	5802546c 	.word	0x5802546c
 8006224:	58025480 	.word	0x58025480
 8006228:	58025494 	.word	0x58025494
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006240:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a6d      	ldr	r2, [pc, #436]	; (80063fc <HAL_DMA_Abort+0x444>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_DMA_Abort+0x448>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6a      	ldr	r2, [pc, #424]	; (8006404 <HAL_DMA_Abort+0x44c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a68      	ldr	r2, [pc, #416]	; (8006408 <HAL_DMA_Abort+0x450>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_DMA_Abort+0x454>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a65      	ldr	r2, [pc, #404]	; (8006410 <HAL_DMA_Abort+0x458>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a64      	ldr	r2, [pc, #400]	; (8006414 <HAL_DMA_Abort+0x45c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a62      	ldr	r2, [pc, #392]	; (8006418 <HAL_DMA_Abort+0x460>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a61      	ldr	r2, [pc, #388]	; (800641c <HAL_DMA_Abort+0x464>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a5f      	ldr	r2, [pc, #380]	; (8006420 <HAL_DMA_Abort+0x468>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5e      	ldr	r2, [pc, #376]	; (8006424 <HAL_DMA_Abort+0x46c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5c      	ldr	r2, [pc, #368]	; (8006428 <HAL_DMA_Abort+0x470>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5b      	ldr	r2, [pc, #364]	; (800642c <HAL_DMA_Abort+0x474>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a59      	ldr	r2, [pc, #356]	; (8006430 <HAL_DMA_Abort+0x478>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a58      	ldr	r2, [pc, #352]	; (8006434 <HAL_DMA_Abort+0x47c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_DMA_Abort+0x32a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a56      	ldr	r2, [pc, #344]	; (8006438 <HAL_DMA_Abort+0x480>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d108      	bne.n	80062f4 <HAL_DMA_Abort+0x33c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0201 	bic.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e007      	b.n	8006304 <HAL_DMA_Abort+0x34c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006304:	e013      	b.n	800632e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006306:	f7fe fd8f 	bl	8004e28 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b05      	cmp	r3, #5
 8006312:	d90c      	bls.n	800632e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2203      	movs	r2, #3
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e12d      	b.n	800658a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e5      	bne.n	8006306 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2f      	ldr	r2, [pc, #188]	; (80063fc <HAL_DMA_Abort+0x444>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d04a      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <HAL_DMA_Abort+0x448>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_DMA_Abort+0x422>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2c      	ldr	r2, [pc, #176]	; (8006404 <HAL_DMA_Abort+0x44c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d040      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <HAL_DMA_Abort+0x450>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d03b      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a29      	ldr	r2, [pc, #164]	; (800640c <HAL_DMA_Abort+0x454>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d036      	beq.n	80063da <HAL_DMA_Abort+0x422>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <HAL_DMA_Abort+0x458>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d031      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a26      	ldr	r2, [pc, #152]	; (8006414 <HAL_DMA_Abort+0x45c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d02c      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a24      	ldr	r2, [pc, #144]	; (8006418 <HAL_DMA_Abort+0x460>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d027      	beq.n	80063da <HAL_DMA_Abort+0x422>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <HAL_DMA_Abort+0x464>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_DMA_Abort+0x422>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a21      	ldr	r2, [pc, #132]	; (8006420 <HAL_DMA_Abort+0x468>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01d      	beq.n	80063da <HAL_DMA_Abort+0x422>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a20      	ldr	r2, [pc, #128]	; (8006424 <HAL_DMA_Abort+0x46c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_DMA_Abort+0x422>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <HAL_DMA_Abort+0x470>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_DMA_Abort+0x422>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1d      	ldr	r2, [pc, #116]	; (800642c <HAL_DMA_Abort+0x474>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_DMA_Abort+0x422>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <HAL_DMA_Abort+0x478>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_DMA_Abort+0x422>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <HAL_DMA_Abort+0x47c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_DMA_Abort+0x422>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_DMA_Abort+0x480>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d101      	bne.n	80063de <HAL_DMA_Abort+0x426>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_DMA_Abort+0x428>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02b      	beq.n	800643c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	223f      	movs	r2, #63	; 0x3f
 80063f4:	409a      	lsls	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	e02a      	b.n	8006452 <HAL_DMA_Abort+0x49a>
 80063fc:	40020010 	.word	0x40020010
 8006400:	40020028 	.word	0x40020028
 8006404:	40020040 	.word	0x40020040
 8006408:	40020058 	.word	0x40020058
 800640c:	40020070 	.word	0x40020070
 8006410:	40020088 	.word	0x40020088
 8006414:	400200a0 	.word	0x400200a0
 8006418:	400200b8 	.word	0x400200b8
 800641c:	40020410 	.word	0x40020410
 8006420:	40020428 	.word	0x40020428
 8006424:	40020440 	.word	0x40020440
 8006428:	40020458 	.word	0x40020458
 800642c:	40020470 	.word	0x40020470
 8006430:	40020488 	.word	0x40020488
 8006434:	400204a0 	.word	0x400204a0
 8006438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006440:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2201      	movs	r2, #1
 800644c:	409a      	lsls	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a4f      	ldr	r2, [pc, #316]	; (8006594 <HAL_DMA_Abort+0x5dc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d072      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a4d      	ldr	r2, [pc, #308]	; (8006598 <HAL_DMA_Abort+0x5e0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d06d      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a4c      	ldr	r2, [pc, #304]	; (800659c <HAL_DMA_Abort+0x5e4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d068      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a4a      	ldr	r2, [pc, #296]	; (80065a0 <HAL_DMA_Abort+0x5e8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d063      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a49      	ldr	r2, [pc, #292]	; (80065a4 <HAL_DMA_Abort+0x5ec>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d05e      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_DMA_Abort+0x5f0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d059      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a46      	ldr	r2, [pc, #280]	; (80065ac <HAL_DMA_Abort+0x5f4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d054      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a44      	ldr	r2, [pc, #272]	; (80065b0 <HAL_DMA_Abort+0x5f8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d04f      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a43      	ldr	r2, [pc, #268]	; (80065b4 <HAL_DMA_Abort+0x5fc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d04a      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a41      	ldr	r2, [pc, #260]	; (80065b8 <HAL_DMA_Abort+0x600>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d045      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a40      	ldr	r2, [pc, #256]	; (80065bc <HAL_DMA_Abort+0x604>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d040      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3e      	ldr	r2, [pc, #248]	; (80065c0 <HAL_DMA_Abort+0x608>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d03b      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3d      	ldr	r2, [pc, #244]	; (80065c4 <HAL_DMA_Abort+0x60c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d036      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a3b      	ldr	r2, [pc, #236]	; (80065c8 <HAL_DMA_Abort+0x610>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d031      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a3a      	ldr	r2, [pc, #232]	; (80065cc <HAL_DMA_Abort+0x614>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d02c      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <HAL_DMA_Abort+0x618>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d027      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a37      	ldr	r2, [pc, #220]	; (80065d4 <HAL_DMA_Abort+0x61c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d022      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a35      	ldr	r2, [pc, #212]	; (80065d8 <HAL_DMA_Abort+0x620>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01d      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a34      	ldr	r2, [pc, #208]	; (80065dc <HAL_DMA_Abort+0x624>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d018      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_DMA_Abort+0x628>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <HAL_DMA_Abort+0x62c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <HAL_DMA_Abort+0x630>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <HAL_DMA_Abort+0x634>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_DMA_Abort+0x58a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <HAL_DMA_Abort+0x638>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_DMA_Abort+0x58e>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_DMA_Abort+0x590>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006554:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800656c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006576:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
 80065d4:	58025408 	.word	0x58025408
 80065d8:	5802541c 	.word	0x5802541c
 80065dc:	58025430 	.word	0x58025430
 80065e0:	58025444 	.word	0x58025444
 80065e4:	58025458 	.word	0x58025458
 80065e8:	5802546c 	.word	0x5802546c
 80065ec:	58025480 	.word	0x58025480
 80065f0:	58025494 	.word	0x58025494

080065f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e237      	b.n	8006a76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d004      	beq.n	800661c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2280      	movs	r2, #128	; 0x80
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e22c      	b.n	8006a76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a5c      	ldr	r2, [pc, #368]	; (8006794 <HAL_DMA_Abort_IT+0x1a0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d04a      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a5b      	ldr	r2, [pc, #364]	; (8006798 <HAL_DMA_Abort_IT+0x1a4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d045      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a59      	ldr	r2, [pc, #356]	; (800679c <HAL_DMA_Abort_IT+0x1a8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d040      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a58      	ldr	r2, [pc, #352]	; (80067a0 <HAL_DMA_Abort_IT+0x1ac>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d03b      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a56      	ldr	r2, [pc, #344]	; (80067a4 <HAL_DMA_Abort_IT+0x1b0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d036      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a55      	ldr	r2, [pc, #340]	; (80067a8 <HAL_DMA_Abort_IT+0x1b4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d031      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a53      	ldr	r2, [pc, #332]	; (80067ac <HAL_DMA_Abort_IT+0x1b8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d02c      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <HAL_DMA_Abort_IT+0x1bc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d027      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a50      	ldr	r2, [pc, #320]	; (80067b4 <HAL_DMA_Abort_IT+0x1c0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d022      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a4f      	ldr	r2, [pc, #316]	; (80067b8 <HAL_DMA_Abort_IT+0x1c4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d01d      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a4d      	ldr	r2, [pc, #308]	; (80067bc <HAL_DMA_Abort_IT+0x1c8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d018      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4c      	ldr	r2, [pc, #304]	; (80067c0 <HAL_DMA_Abort_IT+0x1cc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a4a      	ldr	r2, [pc, #296]	; (80067c4 <HAL_DMA_Abort_IT+0x1d0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00e      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a49      	ldr	r2, [pc, #292]	; (80067c8 <HAL_DMA_Abort_IT+0x1d4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a47      	ldr	r2, [pc, #284]	; (80067cc <HAL_DMA_Abort_IT+0x1d8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_DMA_Abort_IT+0xc8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a46      	ldr	r2, [pc, #280]	; (80067d0 <HAL_DMA_Abort_IT+0x1dc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <HAL_DMA_Abort_IT+0xcc>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <HAL_DMA_Abort_IT+0xce>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8086 	beq.w	80067d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2204      	movs	r2, #4
 80066cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2f      	ldr	r2, [pc, #188]	; (8006794 <HAL_DMA_Abort_IT+0x1a0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d04a      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <HAL_DMA_Abort_IT+0x1a4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d045      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2c      	ldr	r2, [pc, #176]	; (800679c <HAL_DMA_Abort_IT+0x1a8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d040      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2b      	ldr	r2, [pc, #172]	; (80067a0 <HAL_DMA_Abort_IT+0x1ac>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d03b      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <HAL_DMA_Abort_IT+0x1b0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d036      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a28      	ldr	r2, [pc, #160]	; (80067a8 <HAL_DMA_Abort_IT+0x1b4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d031      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a26      	ldr	r2, [pc, #152]	; (80067ac <HAL_DMA_Abort_IT+0x1b8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d02c      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a25      	ldr	r2, [pc, #148]	; (80067b0 <HAL_DMA_Abort_IT+0x1bc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d027      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a23      	ldr	r2, [pc, #140]	; (80067b4 <HAL_DMA_Abort_IT+0x1c0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d022      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <HAL_DMA_Abort_IT+0x1c4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d01d      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a20      	ldr	r2, [pc, #128]	; (80067bc <HAL_DMA_Abort_IT+0x1c8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d018      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <HAL_DMA_Abort_IT+0x1cc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <HAL_DMA_Abort_IT+0x1d0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00e      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <HAL_DMA_Abort_IT+0x1d4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d009      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <HAL_DMA_Abort_IT+0x1d8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d004      	beq.n	8006770 <HAL_DMA_Abort_IT+0x17c>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <HAL_DMA_Abort_IT+0x1dc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d108      	bne.n	8006782 <HAL_DMA_Abort_IT+0x18e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	e178      	b.n	8006a74 <HAL_DMA_Abort_IT+0x480>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e16f      	b.n	8006a74 <HAL_DMA_Abort_IT+0x480>
 8006794:	40020010 	.word	0x40020010
 8006798:	40020028 	.word	0x40020028
 800679c:	40020040 	.word	0x40020040
 80067a0:	40020058 	.word	0x40020058
 80067a4:	40020070 	.word	0x40020070
 80067a8:	40020088 	.word	0x40020088
 80067ac:	400200a0 	.word	0x400200a0
 80067b0:	400200b8 	.word	0x400200b8
 80067b4:	40020410 	.word	0x40020410
 80067b8:	40020428 	.word	0x40020428
 80067bc:	40020440 	.word	0x40020440
 80067c0:	40020458 	.word	0x40020458
 80067c4:	40020470 	.word	0x40020470
 80067c8:	40020488 	.word	0x40020488
 80067cc:	400204a0 	.word	0x400204a0
 80067d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 020e 	bic.w	r2, r2, #14
 80067e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6c      	ldr	r2, [pc, #432]	; (800699c <HAL_DMA_Abort_IT+0x3a8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d04a      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a6b      	ldr	r2, [pc, #428]	; (80069a0 <HAL_DMA_Abort_IT+0x3ac>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d045      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a69      	ldr	r2, [pc, #420]	; (80069a4 <HAL_DMA_Abort_IT+0x3b0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d040      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a68      	ldr	r2, [pc, #416]	; (80069a8 <HAL_DMA_Abort_IT+0x3b4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d03b      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a66      	ldr	r2, [pc, #408]	; (80069ac <HAL_DMA_Abort_IT+0x3b8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d036      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a65      	ldr	r2, [pc, #404]	; (80069b0 <HAL_DMA_Abort_IT+0x3bc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d031      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a63      	ldr	r2, [pc, #396]	; (80069b4 <HAL_DMA_Abort_IT+0x3c0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d02c      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a62      	ldr	r2, [pc, #392]	; (80069b8 <HAL_DMA_Abort_IT+0x3c4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d027      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a60      	ldr	r2, [pc, #384]	; (80069bc <HAL_DMA_Abort_IT+0x3c8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5f      	ldr	r2, [pc, #380]	; (80069c0 <HAL_DMA_Abort_IT+0x3cc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d01d      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a5d      	ldr	r2, [pc, #372]	; (80069c4 <HAL_DMA_Abort_IT+0x3d0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a5c      	ldr	r2, [pc, #368]	; (80069c8 <HAL_DMA_Abort_IT+0x3d4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a5a      	ldr	r2, [pc, #360]	; (80069cc <HAL_DMA_Abort_IT+0x3d8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a59      	ldr	r2, [pc, #356]	; (80069d0 <HAL_DMA_Abort_IT+0x3dc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a57      	ldr	r2, [pc, #348]	; (80069d4 <HAL_DMA_Abort_IT+0x3e0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_DMA_Abort_IT+0x290>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <HAL_DMA_Abort_IT+0x3e4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <HAL_DMA_Abort_IT+0x2a2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e007      	b.n	80068a6 <HAL_DMA_Abort_IT+0x2b2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3c      	ldr	r2, [pc, #240]	; (800699c <HAL_DMA_Abort_IT+0x3a8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d072      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a3a      	ldr	r2, [pc, #232]	; (80069a0 <HAL_DMA_Abort_IT+0x3ac>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d06d      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a39      	ldr	r2, [pc, #228]	; (80069a4 <HAL_DMA_Abort_IT+0x3b0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d068      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a37      	ldr	r2, [pc, #220]	; (80069a8 <HAL_DMA_Abort_IT+0x3b4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d063      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a36      	ldr	r2, [pc, #216]	; (80069ac <HAL_DMA_Abort_IT+0x3b8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d05e      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a34      	ldr	r2, [pc, #208]	; (80069b0 <HAL_DMA_Abort_IT+0x3bc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d059      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a33      	ldr	r2, [pc, #204]	; (80069b4 <HAL_DMA_Abort_IT+0x3c0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d054      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a31      	ldr	r2, [pc, #196]	; (80069b8 <HAL_DMA_Abort_IT+0x3c4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d04f      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a30      	ldr	r2, [pc, #192]	; (80069bc <HAL_DMA_Abort_IT+0x3c8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d04a      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2e      	ldr	r2, [pc, #184]	; (80069c0 <HAL_DMA_Abort_IT+0x3cc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d045      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <HAL_DMA_Abort_IT+0x3d0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d040      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <HAL_DMA_Abort_IT+0x3d4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d03b      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2a      	ldr	r2, [pc, #168]	; (80069cc <HAL_DMA_Abort_IT+0x3d8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d036      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a28      	ldr	r2, [pc, #160]	; (80069d0 <HAL_DMA_Abort_IT+0x3dc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d031      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a27      	ldr	r2, [pc, #156]	; (80069d4 <HAL_DMA_Abort_IT+0x3e0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d02c      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a25      	ldr	r2, [pc, #148]	; (80069d8 <HAL_DMA_Abort_IT+0x3e4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d027      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a24      	ldr	r2, [pc, #144]	; (80069dc <HAL_DMA_Abort_IT+0x3e8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d022      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <HAL_DMA_Abort_IT+0x3ec>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d01d      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <HAL_DMA_Abort_IT+0x3f0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d018      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <HAL_DMA_Abort_IT+0x3f4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <HAL_DMA_Abort_IT+0x3f8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00e      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <HAL_DMA_Abort_IT+0x3fc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <HAL_DMA_Abort_IT+0x400>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_DMA_Abort_IT+0x3a2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <HAL_DMA_Abort_IT+0x404>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d132      	bne.n	80069fc <HAL_DMA_Abort_IT+0x408>
 8006996:	2301      	movs	r3, #1
 8006998:	e031      	b.n	80069fe <HAL_DMA_Abort_IT+0x40a>
 800699a:	bf00      	nop
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8
 80069dc:	58025408 	.word	0x58025408
 80069e0:	5802541c 	.word	0x5802541c
 80069e4:	58025430 	.word	0x58025430
 80069e8:	58025444 	.word	0x58025444
 80069ec:	58025458 	.word	0x58025458
 80069f0:	5802546c 	.word	0x5802546c
 80069f4:	58025480 	.word	0x58025480
 80069f8:	58025494 	.word	0x58025494
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d028      	beq.n	8006a54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2201      	movs	r2, #1
 8006a22:	409a      	lsls	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop

08006a80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a8c:	4b67      	ldr	r3, [pc, #412]	; (8006c2c <HAL_DMA_IRQHandler+0x1ac>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a67      	ldr	r2, [pc, #412]	; (8006c30 <HAL_DMA_IRQHandler+0x1b0>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0a9b      	lsrs	r3, r3, #10
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5f      	ldr	r2, [pc, #380]	; (8006c34 <HAL_DMA_IRQHandler+0x1b4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5d      	ldr	r2, [pc, #372]	; (8006c38 <HAL_DMA_IRQHandler+0x1b8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a5c      	ldr	r2, [pc, #368]	; (8006c3c <HAL_DMA_IRQHandler+0x1bc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5a      	ldr	r2, [pc, #360]	; (8006c40 <HAL_DMA_IRQHandler+0x1c0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a59      	ldr	r2, [pc, #356]	; (8006c44 <HAL_DMA_IRQHandler+0x1c4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a57      	ldr	r2, [pc, #348]	; (8006c48 <HAL_DMA_IRQHandler+0x1c8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a56      	ldr	r2, [pc, #344]	; (8006c4c <HAL_DMA_IRQHandler+0x1cc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a54      	ldr	r2, [pc, #336]	; (8006c50 <HAL_DMA_IRQHandler+0x1d0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a53      	ldr	r2, [pc, #332]	; (8006c54 <HAL_DMA_IRQHandler+0x1d4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a51      	ldr	r2, [pc, #324]	; (8006c58 <HAL_DMA_IRQHandler+0x1d8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a50      	ldr	r2, [pc, #320]	; (8006c5c <HAL_DMA_IRQHandler+0x1dc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a4e      	ldr	r2, [pc, #312]	; (8006c60 <HAL_DMA_IRQHandler+0x1e0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4d      	ldr	r2, [pc, #308]	; (8006c64 <HAL_DMA_IRQHandler+0x1e4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a4b      	ldr	r2, [pc, #300]	; (8006c68 <HAL_DMA_IRQHandler+0x1e8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4a      	ldr	r2, [pc, #296]	; (8006c6c <HAL_DMA_IRQHandler+0x1ec>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xd2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a48      	ldr	r2, [pc, #288]	; (8006c70 <HAL_DMA_IRQHandler+0x1f0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <HAL_DMA_IRQHandler+0xd6>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_DMA_IRQHandler+0xd8>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 842b 	beq.w	80073b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	2208      	movs	r2, #8
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a2 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2e      	ldr	r2, [pc, #184]	; (8006c34 <HAL_DMA_IRQHandler+0x1b4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d04a      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <HAL_DMA_IRQHandler+0x1b8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d045      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <HAL_DMA_IRQHandler+0x1bc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d040      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <HAL_DMA_IRQHandler+0x1c0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d03b      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <HAL_DMA_IRQHandler+0x1c4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d036      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <HAL_DMA_IRQHandler+0x1c8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d031      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <HAL_DMA_IRQHandler+0x1cc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d02c      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a24      	ldr	r2, [pc, #144]	; (8006c50 <HAL_DMA_IRQHandler+0x1d0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d027      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a22      	ldr	r2, [pc, #136]	; (8006c54 <HAL_DMA_IRQHandler+0x1d4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d022      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <HAL_DMA_IRQHandler+0x1d8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d01d      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <HAL_DMA_IRQHandler+0x1dc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d018      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_DMA_IRQHandler+0x1e0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <HAL_DMA_IRQHandler+0x1e4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <HAL_DMA_IRQHandler+0x1e8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <HAL_DMA_IRQHandler+0x1ec>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x194>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <HAL_DMA_IRQHandler+0x1f0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d12f      	bne.n	8006c74 <HAL_DMA_IRQHandler+0x1f4>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bf14      	ite	ne
 8006c22:	2301      	movne	r3, #1
 8006c24:	2300      	moveq	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	e02e      	b.n	8006c88 <HAL_DMA_IRQHandler+0x208>
 8006c2a:	bf00      	nop
 8006c2c:	240001a0 	.word	0x240001a0
 8006c30:	1b4e81b5 	.word	0x1b4e81b5
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0204 	bic.w	r2, r2, #4
 8006c9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d06e      	beq.n	8006dac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a69      	ldr	r2, [pc, #420]	; (8006e78 <HAL_DMA_IRQHandler+0x3f8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a67      	ldr	r2, [pc, #412]	; (8006e7c <HAL_DMA_IRQHandler+0x3fc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a66      	ldr	r2, [pc, #408]	; (8006e80 <HAL_DMA_IRQHandler+0x400>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a64      	ldr	r2, [pc, #400]	; (8006e84 <HAL_DMA_IRQHandler+0x404>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a63      	ldr	r2, [pc, #396]	; (8006e88 <HAL_DMA_IRQHandler+0x408>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a61      	ldr	r2, [pc, #388]	; (8006e8c <HAL_DMA_IRQHandler+0x40c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a60      	ldr	r2, [pc, #384]	; (8006e90 <HAL_DMA_IRQHandler+0x410>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a5e      	ldr	r2, [pc, #376]	; (8006e94 <HAL_DMA_IRQHandler+0x414>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a5d      	ldr	r2, [pc, #372]	; (8006e98 <HAL_DMA_IRQHandler+0x418>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5b      	ldr	r2, [pc, #364]	; (8006e9c <HAL_DMA_IRQHandler+0x41c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5a      	ldr	r2, [pc, #360]	; (8006ea0 <HAL_DMA_IRQHandler+0x420>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a58      	ldr	r2, [pc, #352]	; (8006ea4 <HAL_DMA_IRQHandler+0x424>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a57      	ldr	r2, [pc, #348]	; (8006ea8 <HAL_DMA_IRQHandler+0x428>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a55      	ldr	r2, [pc, #340]	; (8006eac <HAL_DMA_IRQHandler+0x42c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a54      	ldr	r2, [pc, #336]	; (8006eb0 <HAL_DMA_IRQHandler+0x430>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x2ee>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a52      	ldr	r2, [pc, #328]	; (8006eb4 <HAL_DMA_IRQHandler+0x434>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10a      	bne.n	8006d84 <HAL_DMA_IRQHandler+0x304>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	bf14      	ite	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	2300      	moveq	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	e003      	b.n	8006d8c <HAL_DMA_IRQHandler+0x30c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2201      	movs	r2, #1
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	f043 0202 	orr.w	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2204      	movs	r2, #4
 8006db6:	409a      	lsls	r2, r3
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 808f 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2c      	ldr	r2, [pc, #176]	; (8006e78 <HAL_DMA_IRQHandler+0x3f8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d04a      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2a      	ldr	r2, [pc, #168]	; (8006e7c <HAL_DMA_IRQHandler+0x3fc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d045      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a29      	ldr	r2, [pc, #164]	; (8006e80 <HAL_DMA_IRQHandler+0x400>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d040      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a27      	ldr	r2, [pc, #156]	; (8006e84 <HAL_DMA_IRQHandler+0x404>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d03b      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <HAL_DMA_IRQHandler+0x408>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d036      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <HAL_DMA_IRQHandler+0x40c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d031      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <HAL_DMA_IRQHandler+0x410>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d02c      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <HAL_DMA_IRQHandler+0x414>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d027      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <HAL_DMA_IRQHandler+0x418>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d022      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <HAL_DMA_IRQHandler+0x41c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_DMA_IRQHandler+0x420>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <HAL_DMA_IRQHandler+0x424>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_DMA_IRQHandler+0x428>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a18      	ldr	r2, [pc, #96]	; (8006eac <HAL_DMA_IRQHandler+0x42c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <HAL_DMA_IRQHandler+0x430>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x3e2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <HAL_DMA_IRQHandler+0x434>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d12a      	bne.n	8006eb8 <HAL_DMA_IRQHandler+0x438>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e023      	b.n	8006ec0 <HAL_DMA_IRQHandler+0x440>
 8006e78:	40020010 	.word	0x40020010
 8006e7c:	40020028 	.word	0x40020028
 8006e80:	40020040 	.word	0x40020040
 8006e84:	40020058 	.word	0x40020058
 8006e88:	40020070 	.word	0x40020070
 8006e8c:	40020088 	.word	0x40020088
 8006e90:	400200a0 	.word	0x400200a0
 8006e94:	400200b8 	.word	0x400200b8
 8006e98:	40020410 	.word	0x40020410
 8006e9c:	40020428 	.word	0x40020428
 8006ea0:	40020440 	.word	0x40020440
 8006ea4:	40020458 	.word	0x40020458
 8006ea8:	40020470 	.word	0x40020470
 8006eac:	40020488 	.word	0x40020488
 8006eb0:	400204a0 	.word	0x400204a0
 8006eb4:	400204b8 	.word	0x400204b8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2204      	movs	r2, #4
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	f043 0204 	orr.w	r2, r3, #4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2210      	movs	r2, #16
 8006eea:	409a      	lsls	r2, r3
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80a6 	beq.w	8007042 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a85      	ldr	r2, [pc, #532]	; (8007110 <HAL_DMA_IRQHandler+0x690>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d04a      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a83      	ldr	r2, [pc, #524]	; (8007114 <HAL_DMA_IRQHandler+0x694>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d045      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a82      	ldr	r2, [pc, #520]	; (8007118 <HAL_DMA_IRQHandler+0x698>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d040      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a80      	ldr	r2, [pc, #512]	; (800711c <HAL_DMA_IRQHandler+0x69c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d03b      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a7f      	ldr	r2, [pc, #508]	; (8007120 <HAL_DMA_IRQHandler+0x6a0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d036      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a7d      	ldr	r2, [pc, #500]	; (8007124 <HAL_DMA_IRQHandler+0x6a4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d031      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a7c      	ldr	r2, [pc, #496]	; (8007128 <HAL_DMA_IRQHandler+0x6a8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d02c      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a7a      	ldr	r2, [pc, #488]	; (800712c <HAL_DMA_IRQHandler+0x6ac>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d027      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a79      	ldr	r2, [pc, #484]	; (8007130 <HAL_DMA_IRQHandler+0x6b0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a77      	ldr	r2, [pc, #476]	; (8007134 <HAL_DMA_IRQHandler+0x6b4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01d      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a76      	ldr	r2, [pc, #472]	; (8007138 <HAL_DMA_IRQHandler+0x6b8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d018      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a74      	ldr	r2, [pc, #464]	; (800713c <HAL_DMA_IRQHandler+0x6bc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a73      	ldr	r2, [pc, #460]	; (8007140 <HAL_DMA_IRQHandler+0x6c0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a71      	ldr	r2, [pc, #452]	; (8007144 <HAL_DMA_IRQHandler+0x6c4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a70      	ldr	r2, [pc, #448]	; (8007148 <HAL_DMA_IRQHandler+0x6c8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x516>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6e      	ldr	r2, [pc, #440]	; (800714c <HAL_DMA_IRQHandler+0x6cc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10a      	bne.n	8006fac <HAL_DMA_IRQHandler+0x52c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e009      	b.n	8006fc0 <HAL_DMA_IRQHandler+0x540>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d03e      	beq.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2210      	movs	r2, #16
 8006fce:	409a      	lsls	r2, r3
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d018      	beq.n	8007014 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d108      	bne.n	8007002 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d024      	beq.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
 8007000:	e01f      	b.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01b      	beq.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
 8007012:	e016      	b.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d107      	bne.n	8007032 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0208 	bic.w	r2, r2, #8
 8007030:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	2220      	movs	r2, #32
 800704c:	409a      	lsls	r2, r3
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8110 	beq.w	8007278 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <HAL_DMA_IRQHandler+0x690>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d04a      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <HAL_DMA_IRQHandler+0x694>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d045      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a29      	ldr	r2, [pc, #164]	; (8007118 <HAL_DMA_IRQHandler+0x698>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d040      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a28      	ldr	r2, [pc, #160]	; (800711c <HAL_DMA_IRQHandler+0x69c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d03b      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a26      	ldr	r2, [pc, #152]	; (8007120 <HAL_DMA_IRQHandler+0x6a0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d036      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a25      	ldr	r2, [pc, #148]	; (8007124 <HAL_DMA_IRQHandler+0x6a4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d031      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a23      	ldr	r2, [pc, #140]	; (8007128 <HAL_DMA_IRQHandler+0x6a8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d02c      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a22      	ldr	r2, [pc, #136]	; (800712c <HAL_DMA_IRQHandler+0x6ac>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d027      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a20      	ldr	r2, [pc, #128]	; (8007130 <HAL_DMA_IRQHandler+0x6b0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d022      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1f      	ldr	r2, [pc, #124]	; (8007134 <HAL_DMA_IRQHandler+0x6b4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d01d      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1d      	ldr	r2, [pc, #116]	; (8007138 <HAL_DMA_IRQHandler+0x6b8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1c      	ldr	r2, [pc, #112]	; (800713c <HAL_DMA_IRQHandler+0x6bc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_DMA_IRQHandler+0x6c0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_DMA_IRQHandler+0x6c4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <HAL_DMA_IRQHandler+0x6c8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x678>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <HAL_DMA_IRQHandler+0x6cc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d12b      	bne.n	8007150 <HAL_DMA_IRQHandler+0x6d0>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	e02a      	b.n	8007164 <HAL_DMA_IRQHandler+0x6e4>
 800710e:	bf00      	nop
 8007110:	40020010 	.word	0x40020010
 8007114:	40020028 	.word	0x40020028
 8007118:	40020040 	.word	0x40020040
 800711c:	40020058 	.word	0x40020058
 8007120:	40020070 	.word	0x40020070
 8007124:	40020088 	.word	0x40020088
 8007128:	400200a0 	.word	0x400200a0
 800712c:	400200b8 	.word	0x400200b8
 8007130:	40020410 	.word	0x40020410
 8007134:	40020428 	.word	0x40020428
 8007138:	40020440 	.word	0x40020440
 800713c:	40020458 	.word	0x40020458
 8007140:	40020470 	.word	0x40020470
 8007144:	40020488 	.word	0x40020488
 8007148:	400204a0 	.word	0x400204a0
 800714c:	400204b8 	.word	0x400204b8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	bf14      	ite	ne
 800715e:	2301      	movne	r3, #1
 8007160:	2300      	moveq	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8087 	beq.w	8007278 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2220      	movs	r2, #32
 8007174:	409a      	lsls	r2, r3
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b04      	cmp	r3, #4
 8007184:	d139      	bne.n	80071fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0216 	bic.w	r2, r2, #22
 8007194:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695a      	ldr	r2, [r3, #20]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <HAL_DMA_IRQHandler+0x736>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0208 	bic.w	r2, r2, #8
 80071c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	223f      	movs	r2, #63	; 0x3f
 80071d0:	409a      	lsls	r2, r3
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 834a 	beq.w	8007884 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
          }
          return;
 80071f8:	e344      	b.n	8007884 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d018      	beq.n	800723a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d108      	bne.n	8007228 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	2b00      	cmp	r3, #0
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
 8007226:	e027      	b.n	8007278 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d023      	beq.n	8007278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e01e      	b.n	8007278 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10f      	bne.n	8007268 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0210 	bic.w	r2, r2, #16
 8007256:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8306 	beq.w	800788e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8088 	beq.w	80073a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2204      	movs	r2, #4
 8007294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a7a      	ldr	r2, [pc, #488]	; (8007488 <HAL_DMA_IRQHandler+0xa08>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d04a      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a79      	ldr	r2, [pc, #484]	; (800748c <HAL_DMA_IRQHandler+0xa0c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d045      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a77      	ldr	r2, [pc, #476]	; (8007490 <HAL_DMA_IRQHandler+0xa10>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d040      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a76      	ldr	r2, [pc, #472]	; (8007494 <HAL_DMA_IRQHandler+0xa14>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d03b      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a74      	ldr	r2, [pc, #464]	; (8007498 <HAL_DMA_IRQHandler+0xa18>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d036      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a73      	ldr	r2, [pc, #460]	; (800749c <HAL_DMA_IRQHandler+0xa1c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d031      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a71      	ldr	r2, [pc, #452]	; (80074a0 <HAL_DMA_IRQHandler+0xa20>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02c      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a70      	ldr	r2, [pc, #448]	; (80074a4 <HAL_DMA_IRQHandler+0xa24>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d027      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a6e      	ldr	r2, [pc, #440]	; (80074a8 <HAL_DMA_IRQHandler+0xa28>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d022      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a6d      	ldr	r2, [pc, #436]	; (80074ac <HAL_DMA_IRQHandler+0xa2c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01d      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a6b      	ldr	r2, [pc, #428]	; (80074b0 <HAL_DMA_IRQHandler+0xa30>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d018      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a6a      	ldr	r2, [pc, #424]	; (80074b4 <HAL_DMA_IRQHandler+0xa34>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a68      	ldr	r2, [pc, #416]	; (80074b8 <HAL_DMA_IRQHandler+0xa38>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00e      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a67      	ldr	r2, [pc, #412]	; (80074bc <HAL_DMA_IRQHandler+0xa3c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d009      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a65      	ldr	r2, [pc, #404]	; (80074c0 <HAL_DMA_IRQHandler+0xa40>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <HAL_DMA_IRQHandler+0x8b8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a64      	ldr	r2, [pc, #400]	; (80074c4 <HAL_DMA_IRQHandler+0xa44>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d108      	bne.n	800734a <HAL_DMA_IRQHandler+0x8ca>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e007      	b.n	800735a <HAL_DMA_IRQHandler+0x8da>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	429a      	cmp	r2, r3
 8007364:	d307      	bcc.n	8007376 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f2      	bne.n	800735a <HAL_DMA_IRQHandler+0x8da>
 8007374:	e000      	b.n	8007378 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007376:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2203      	movs	r2, #3
 800738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800738e:	e003      	b.n	8007398 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8272 	beq.w	800788e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	e26c      	b.n	800788e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a43      	ldr	r2, [pc, #268]	; (80074c8 <HAL_DMA_IRQHandler+0xa48>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d022      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a42      	ldr	r2, [pc, #264]	; (80074cc <HAL_DMA_IRQHandler+0xa4c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d01d      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a40      	ldr	r2, [pc, #256]	; (80074d0 <HAL_DMA_IRQHandler+0xa50>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d018      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3f      	ldr	r2, [pc, #252]	; (80074d4 <HAL_DMA_IRQHandler+0xa54>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a3d      	ldr	r2, [pc, #244]	; (80074d8 <HAL_DMA_IRQHandler+0xa58>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a3c      	ldr	r2, [pc, #240]	; (80074dc <HAL_DMA_IRQHandler+0xa5c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a3a      	ldr	r2, [pc, #232]	; (80074e0 <HAL_DMA_IRQHandler+0xa60>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <HAL_DMA_IRQHandler+0x984>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a39      	ldr	r2, [pc, #228]	; (80074e4 <HAL_DMA_IRQHandler+0xa64>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d101      	bne.n	8007408 <HAL_DMA_IRQHandler+0x988>
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <HAL_DMA_IRQHandler+0x98a>
 8007408:	2300      	movs	r3, #0
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 823f 	beq.w	800788e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2204      	movs	r2, #4
 8007422:	409a      	lsls	r2, r3
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80cd 	beq.w	80075c8 <HAL_DMA_IRQHandler+0xb48>
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80c7 	beq.w	80075c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2204      	movs	r2, #4
 8007444:	409a      	lsls	r2, r3
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d049      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8210 	beq.w	8007888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007470:	e20a      	b.n	8007888 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 8206 	beq.w	8007888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007484:	e200      	b.n	8007888 <HAL_DMA_IRQHandler+0xe08>
 8007486:	bf00      	nop
 8007488:	40020010 	.word	0x40020010
 800748c:	40020028 	.word	0x40020028
 8007490:	40020040 	.word	0x40020040
 8007494:	40020058 	.word	0x40020058
 8007498:	40020070 	.word	0x40020070
 800749c:	40020088 	.word	0x40020088
 80074a0:	400200a0 	.word	0x400200a0
 80074a4:	400200b8 	.word	0x400200b8
 80074a8:	40020410 	.word	0x40020410
 80074ac:	40020428 	.word	0x40020428
 80074b0:	40020440 	.word	0x40020440
 80074b4:	40020458 	.word	0x40020458
 80074b8:	40020470 	.word	0x40020470
 80074bc:	40020488 	.word	0x40020488
 80074c0:	400204a0 	.word	0x400204a0
 80074c4:	400204b8 	.word	0x400204b8
 80074c8:	58025408 	.word	0x58025408
 80074cc:	5802541c 	.word	0x5802541c
 80074d0:	58025430 	.word	0x58025430
 80074d4:	58025444 	.word	0x58025444
 80074d8:	58025458 	.word	0x58025458
 80074dc:	5802546c 	.word	0x5802546c
 80074e0:	58025480 	.word	0x58025480
 80074e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d160      	bne.n	80075b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7f      	ldr	r2, [pc, #508]	; (80076f4 <HAL_DMA_IRQHandler+0xc74>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d04a      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a7d      	ldr	r2, [pc, #500]	; (80076f8 <HAL_DMA_IRQHandler+0xc78>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d045      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a7c      	ldr	r2, [pc, #496]	; (80076fc <HAL_DMA_IRQHandler+0xc7c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d040      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7a      	ldr	r2, [pc, #488]	; (8007700 <HAL_DMA_IRQHandler+0xc80>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d03b      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a79      	ldr	r2, [pc, #484]	; (8007704 <HAL_DMA_IRQHandler+0xc84>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d036      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a77      	ldr	r2, [pc, #476]	; (8007708 <HAL_DMA_IRQHandler+0xc88>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d031      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a76      	ldr	r2, [pc, #472]	; (800770c <HAL_DMA_IRQHandler+0xc8c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d02c      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a74      	ldr	r2, [pc, #464]	; (8007710 <HAL_DMA_IRQHandler+0xc90>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d027      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a73      	ldr	r2, [pc, #460]	; (8007714 <HAL_DMA_IRQHandler+0xc94>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a71      	ldr	r2, [pc, #452]	; (8007718 <HAL_DMA_IRQHandler+0xc98>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a70      	ldr	r2, [pc, #448]	; (800771c <HAL_DMA_IRQHandler+0xc9c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a6e      	ldr	r2, [pc, #440]	; (8007720 <HAL_DMA_IRQHandler+0xca0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a6d      	ldr	r2, [pc, #436]	; (8007724 <HAL_DMA_IRQHandler+0xca4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a6b      	ldr	r2, [pc, #428]	; (8007728 <HAL_DMA_IRQHandler+0xca8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a6a      	ldr	r2, [pc, #424]	; (800772c <HAL_DMA_IRQHandler+0xcac>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_DMA_IRQHandler+0xb12>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a68      	ldr	r2, [pc, #416]	; (8007730 <HAL_DMA_IRQHandler+0xcb0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d108      	bne.n	80075a4 <HAL_DMA_IRQHandler+0xb24>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0208 	bic.w	r2, r2, #8
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e007      	b.n	80075b4 <HAL_DMA_IRQHandler+0xb34>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0204 	bic.w	r2, r2, #4
 80075b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8165 	beq.w	8007888 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075c6:	e15f      	b.n	8007888 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2202      	movs	r2, #2
 80075d2:	409a      	lsls	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80c5 	beq.w	8007768 <HAL_DMA_IRQHandler+0xce8>
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80bf 	beq.w	8007768 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2202      	movs	r2, #2
 80075f4:	409a      	lsls	r2, r3
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d018      	beq.n	8007636 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 813a 	beq.w	800788c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007620:	e134      	b.n	800788c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8130 	beq.w	800788c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007634:	e12a      	b.n	800788c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8089 	bne.w	8007754 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <HAL_DMA_IRQHandler+0xc74>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d04a      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a29      	ldr	r2, [pc, #164]	; (80076f8 <HAL_DMA_IRQHandler+0xc78>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d045      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a28      	ldr	r2, [pc, #160]	; (80076fc <HAL_DMA_IRQHandler+0xc7c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d040      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a26      	ldr	r2, [pc, #152]	; (8007700 <HAL_DMA_IRQHandler+0xc80>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d03b      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a25      	ldr	r2, [pc, #148]	; (8007704 <HAL_DMA_IRQHandler+0xc84>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d036      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a23      	ldr	r2, [pc, #140]	; (8007708 <HAL_DMA_IRQHandler+0xc88>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d031      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a22      	ldr	r2, [pc, #136]	; (800770c <HAL_DMA_IRQHandler+0xc8c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d02c      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a20      	ldr	r2, [pc, #128]	; (8007710 <HAL_DMA_IRQHandler+0xc90>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d027      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <HAL_DMA_IRQHandler+0xc94>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <HAL_DMA_IRQHandler+0xc98>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01d      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1c      	ldr	r2, [pc, #112]	; (800771c <HAL_DMA_IRQHandler+0xc9c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <HAL_DMA_IRQHandler+0xca0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <HAL_DMA_IRQHandler+0xca4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a17      	ldr	r2, [pc, #92]	; (8007728 <HAL_DMA_IRQHandler+0xca8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a16      	ldr	r2, [pc, #88]	; (800772c <HAL_DMA_IRQHandler+0xcac>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_DMA_IRQHandler+0xc62>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a14      	ldr	r2, [pc, #80]	; (8007730 <HAL_DMA_IRQHandler+0xcb0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d128      	bne.n	8007734 <HAL_DMA_IRQHandler+0xcb4>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0214 	bic.w	r2, r2, #20
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e027      	b.n	8007744 <HAL_DMA_IRQHandler+0xcc4>
 80076f4:	40020010 	.word	0x40020010
 80076f8:	40020028 	.word	0x40020028
 80076fc:	40020040 	.word	0x40020040
 8007700:	40020058 	.word	0x40020058
 8007704:	40020070 	.word	0x40020070
 8007708:	40020088 	.word	0x40020088
 800770c:	400200a0 	.word	0x400200a0
 8007710:	400200b8 	.word	0x400200b8
 8007714:	40020410 	.word	0x40020410
 8007718:	40020428 	.word	0x40020428
 800771c:	40020440 	.word	0x40020440
 8007720:	40020458 	.word	0x40020458
 8007724:	40020470 	.word	0x40020470
 8007728:	40020488 	.word	0x40020488
 800772c:	400204a0 	.word	0x400204a0
 8007730:	400204b8 	.word	0x400204b8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 020a 	bic.w	r2, r2, #10
 8007742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8097 	beq.w	800788c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007766:	e091      	b.n	800788c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2208      	movs	r2, #8
 8007772:	409a      	lsls	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	4013      	ands	r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8088 	beq.w	800788e <HAL_DMA_IRQHandler+0xe0e>
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8082 	beq.w	800788e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a41      	ldr	r2, [pc, #260]	; (8007894 <HAL_DMA_IRQHandler+0xe14>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d04a      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a3f      	ldr	r2, [pc, #252]	; (8007898 <HAL_DMA_IRQHandler+0xe18>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d045      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a3e      	ldr	r2, [pc, #248]	; (800789c <HAL_DMA_IRQHandler+0xe1c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d040      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a3c      	ldr	r2, [pc, #240]	; (80078a0 <HAL_DMA_IRQHandler+0xe20>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d03b      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a3b      	ldr	r2, [pc, #236]	; (80078a4 <HAL_DMA_IRQHandler+0xe24>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d036      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a39      	ldr	r2, [pc, #228]	; (80078a8 <HAL_DMA_IRQHandler+0xe28>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d031      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a38      	ldr	r2, [pc, #224]	; (80078ac <HAL_DMA_IRQHandler+0xe2c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d02c      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a36      	ldr	r2, [pc, #216]	; (80078b0 <HAL_DMA_IRQHandler+0xe30>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d027      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a35      	ldr	r2, [pc, #212]	; (80078b4 <HAL_DMA_IRQHandler+0xe34>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <HAL_DMA_IRQHandler+0xe38>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a32      	ldr	r2, [pc, #200]	; (80078bc <HAL_DMA_IRQHandler+0xe3c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <HAL_DMA_IRQHandler+0xe40>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2f      	ldr	r2, [pc, #188]	; (80078c4 <HAL_DMA_IRQHandler+0xe44>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a2d      	ldr	r2, [pc, #180]	; (80078c8 <HAL_DMA_IRQHandler+0xe48>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <HAL_DMA_IRQHandler+0xe4c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_DMA_IRQHandler+0xdaa>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <HAL_DMA_IRQHandler+0xe50>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d108      	bne.n	800783c <HAL_DMA_IRQHandler+0xdbc>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 021c 	bic.w	r2, r2, #28
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e007      	b.n	800784c <HAL_DMA_IRQHandler+0xdcc>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 020e 	bic.w	r2, r2, #14
 800784a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2201      	movs	r2, #1
 8007856:	409a      	lsls	r2, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	e004      	b.n	800788e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007884:	bf00      	nop
 8007886:	e002      	b.n	800788e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800788c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800788e:	3728      	adds	r7, #40	; 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40020010 	.word	0x40020010
 8007898:	40020028 	.word	0x40020028
 800789c:	40020040 	.word	0x40020040
 80078a0:	40020058 	.word	0x40020058
 80078a4:	40020070 	.word	0x40020070
 80078a8:	40020088 	.word	0x40020088
 80078ac:	400200a0 	.word	0x400200a0
 80078b0:	400200b8 	.word	0x400200b8
 80078b4:	40020410 	.word	0x40020410
 80078b8:	40020428 	.word	0x40020428
 80078bc:	40020440 	.word	0x40020440
 80078c0:	40020458 	.word	0x40020458
 80078c4:	40020470 	.word	0x40020470
 80078c8:	40020488 	.word	0x40020488
 80078cc:	400204a0 	.word	0x400204a0
 80078d0:	400204b8 	.word	0x400204b8

080078d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a7f      	ldr	r2, [pc, #508]	; (8007af0 <DMA_SetConfig+0x21c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d072      	beq.n	80079de <DMA_SetConfig+0x10a>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a7d      	ldr	r2, [pc, #500]	; (8007af4 <DMA_SetConfig+0x220>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d06d      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a7c      	ldr	r2, [pc, #496]	; (8007af8 <DMA_SetConfig+0x224>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d068      	beq.n	80079de <DMA_SetConfig+0x10a>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a7a      	ldr	r2, [pc, #488]	; (8007afc <DMA_SetConfig+0x228>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d063      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a79      	ldr	r2, [pc, #484]	; (8007b00 <DMA_SetConfig+0x22c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d05e      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a77      	ldr	r2, [pc, #476]	; (8007b04 <DMA_SetConfig+0x230>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d059      	beq.n	80079de <DMA_SetConfig+0x10a>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a76      	ldr	r2, [pc, #472]	; (8007b08 <DMA_SetConfig+0x234>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d054      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a74      	ldr	r2, [pc, #464]	; (8007b0c <DMA_SetConfig+0x238>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d04f      	beq.n	80079de <DMA_SetConfig+0x10a>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a73      	ldr	r2, [pc, #460]	; (8007b10 <DMA_SetConfig+0x23c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d04a      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a71      	ldr	r2, [pc, #452]	; (8007b14 <DMA_SetConfig+0x240>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d045      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a70      	ldr	r2, [pc, #448]	; (8007b18 <DMA_SetConfig+0x244>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d040      	beq.n	80079de <DMA_SetConfig+0x10a>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6e      	ldr	r2, [pc, #440]	; (8007b1c <DMA_SetConfig+0x248>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d03b      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6d      	ldr	r2, [pc, #436]	; (8007b20 <DMA_SetConfig+0x24c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d036      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a6b      	ldr	r2, [pc, #428]	; (8007b24 <DMA_SetConfig+0x250>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d031      	beq.n	80079de <DMA_SetConfig+0x10a>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a6a      	ldr	r2, [pc, #424]	; (8007b28 <DMA_SetConfig+0x254>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d02c      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a68      	ldr	r2, [pc, #416]	; (8007b2c <DMA_SetConfig+0x258>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d027      	beq.n	80079de <DMA_SetConfig+0x10a>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a67      	ldr	r2, [pc, #412]	; (8007b30 <DMA_SetConfig+0x25c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d022      	beq.n	80079de <DMA_SetConfig+0x10a>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a65      	ldr	r2, [pc, #404]	; (8007b34 <DMA_SetConfig+0x260>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01d      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a64      	ldr	r2, [pc, #400]	; (8007b38 <DMA_SetConfig+0x264>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d018      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a62      	ldr	r2, [pc, #392]	; (8007b3c <DMA_SetConfig+0x268>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a61      	ldr	r2, [pc, #388]	; (8007b40 <DMA_SetConfig+0x26c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a5f      	ldr	r2, [pc, #380]	; (8007b44 <DMA_SetConfig+0x270>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a5e      	ldr	r2, [pc, #376]	; (8007b48 <DMA_SetConfig+0x274>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <DMA_SetConfig+0x10a>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a5c      	ldr	r2, [pc, #368]	; (8007b4c <DMA_SetConfig+0x278>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d101      	bne.n	80079e2 <DMA_SetConfig+0x10e>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <DMA_SetConfig+0x110>
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00d      	beq.n	8007a04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a39      	ldr	r2, [pc, #228]	; (8007af0 <DMA_SetConfig+0x21c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d04a      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a38      	ldr	r2, [pc, #224]	; (8007af4 <DMA_SetConfig+0x220>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d045      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a36      	ldr	r2, [pc, #216]	; (8007af8 <DMA_SetConfig+0x224>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d040      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a35      	ldr	r2, [pc, #212]	; (8007afc <DMA_SetConfig+0x228>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d03b      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a33      	ldr	r2, [pc, #204]	; (8007b00 <DMA_SetConfig+0x22c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d036      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a32      	ldr	r2, [pc, #200]	; (8007b04 <DMA_SetConfig+0x230>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d031      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <DMA_SetConfig+0x234>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d02c      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2f      	ldr	r2, [pc, #188]	; (8007b0c <DMA_SetConfig+0x238>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d027      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <DMA_SetConfig+0x23c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d022      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a2c      	ldr	r2, [pc, #176]	; (8007b14 <DMA_SetConfig+0x240>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d01d      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <DMA_SetConfig+0x244>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d018      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <DMA_SetConfig+0x248>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d013      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <DMA_SetConfig+0x24c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00e      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a26      	ldr	r2, [pc, #152]	; (8007b24 <DMA_SetConfig+0x250>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d009      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a24      	ldr	r2, [pc, #144]	; (8007b28 <DMA_SetConfig+0x254>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <DMA_SetConfig+0x1d0>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a23      	ldr	r2, [pc, #140]	; (8007b2c <DMA_SetConfig+0x258>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d101      	bne.n	8007aa8 <DMA_SetConfig+0x1d4>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <DMA_SetConfig+0x1d6>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d059      	beq.n	8007b62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	223f      	movs	r2, #63	; 0x3f
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007acc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d138      	bne.n	8007b50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007aee:	e086      	b.n	8007bfe <DMA_SetConfig+0x32a>
 8007af0:	40020010 	.word	0x40020010
 8007af4:	40020028 	.word	0x40020028
 8007af8:	40020040 	.word	0x40020040
 8007afc:	40020058 	.word	0x40020058
 8007b00:	40020070 	.word	0x40020070
 8007b04:	40020088 	.word	0x40020088
 8007b08:	400200a0 	.word	0x400200a0
 8007b0c:	400200b8 	.word	0x400200b8
 8007b10:	40020410 	.word	0x40020410
 8007b14:	40020428 	.word	0x40020428
 8007b18:	40020440 	.word	0x40020440
 8007b1c:	40020458 	.word	0x40020458
 8007b20:	40020470 	.word	0x40020470
 8007b24:	40020488 	.word	0x40020488
 8007b28:	400204a0 	.word	0x400204a0
 8007b2c:	400204b8 	.word	0x400204b8
 8007b30:	58025408 	.word	0x58025408
 8007b34:	5802541c 	.word	0x5802541c
 8007b38:	58025430 	.word	0x58025430
 8007b3c:	58025444 	.word	0x58025444
 8007b40:	58025458 	.word	0x58025458
 8007b44:	5802546c 	.word	0x5802546c
 8007b48:	58025480 	.word	0x58025480
 8007b4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
}
 8007b60:	e04d      	b.n	8007bfe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a29      	ldr	r2, [pc, #164]	; (8007c0c <DMA_SetConfig+0x338>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <DMA_SetConfig+0x33c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <DMA_SetConfig+0x340>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a24      	ldr	r2, [pc, #144]	; (8007c18 <DMA_SetConfig+0x344>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <DMA_SetConfig+0x348>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <DMA_SetConfig+0x34c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <DMA_SetConfig+0x350>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <DMA_SetConfig+0x2de>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <DMA_SetConfig+0x354>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d101      	bne.n	8007bb6 <DMA_SetConfig+0x2e2>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <DMA_SetConfig+0x2e4>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d020      	beq.n	8007bfe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc0:	f003 031f 	and.w	r3, r3, #31
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b40      	cmp	r3, #64	; 0x40
 8007bda:	d108      	bne.n	8007bee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	60da      	str	r2, [r3, #12]
}
 8007bec:	e007      	b.n	8007bfe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	58025408 	.word	0x58025408
 8007c10:	5802541c 	.word	0x5802541c
 8007c14:	58025430 	.word	0x58025430
 8007c18:	58025444 	.word	0x58025444
 8007c1c:	58025458 	.word	0x58025458
 8007c20:	5802546c 	.word	0x5802546c
 8007c24:	58025480 	.word	0x58025480
 8007c28:	58025494 	.word	0x58025494

08007c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a42      	ldr	r2, [pc, #264]	; (8007d44 <DMA_CalcBaseAndBitshift+0x118>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d04a      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a41      	ldr	r2, [pc, #260]	; (8007d48 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d045      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a3f      	ldr	r2, [pc, #252]	; (8007d4c <DMA_CalcBaseAndBitshift+0x120>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d040      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a3e      	ldr	r2, [pc, #248]	; (8007d50 <DMA_CalcBaseAndBitshift+0x124>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d03b      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3c      	ldr	r2, [pc, #240]	; (8007d54 <DMA_CalcBaseAndBitshift+0x128>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d036      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3b      	ldr	r2, [pc, #236]	; (8007d58 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d031      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a39      	ldr	r2, [pc, #228]	; (8007d5c <DMA_CalcBaseAndBitshift+0x130>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d02c      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a38      	ldr	r2, [pc, #224]	; (8007d60 <DMA_CalcBaseAndBitshift+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d027      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a36      	ldr	r2, [pc, #216]	; (8007d64 <DMA_CalcBaseAndBitshift+0x138>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d022      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a35      	ldr	r2, [pc, #212]	; (8007d68 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d01d      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a33      	ldr	r2, [pc, #204]	; (8007d6c <DMA_CalcBaseAndBitshift+0x140>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d018      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a32      	ldr	r2, [pc, #200]	; (8007d70 <DMA_CalcBaseAndBitshift+0x144>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d013      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a30      	ldr	r2, [pc, #192]	; (8007d74 <DMA_CalcBaseAndBitshift+0x148>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00e      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a2f      	ldr	r2, [pc, #188]	; (8007d78 <DMA_CalcBaseAndBitshift+0x14c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d009      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <DMA_CalcBaseAndBitshift+0x150>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d004      	beq.n	8007cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a2c      	ldr	r2, [pc, #176]	; (8007d80 <DMA_CalcBaseAndBitshift+0x154>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d101      	bne.n	8007cd8 <DMA_CalcBaseAndBitshift+0xac>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e000      	b.n	8007cda <DMA_CalcBaseAndBitshift+0xae>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d024      	beq.n	8007d28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	3b10      	subs	r3, #16
 8007ce6:	4a27      	ldr	r2, [pc, #156]	; (8007d84 <DMA_CalcBaseAndBitshift+0x158>)
 8007ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	4a24      	ldr	r2, [pc, #144]	; (8007d88 <DMA_CalcBaseAndBitshift+0x15c>)
 8007cf8:	5cd3      	ldrb	r3, [r2, r3]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d908      	bls.n	8007d18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <DMA_CalcBaseAndBitshift+0x160>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	659a      	str	r2, [r3, #88]	; 0x58
 8007d16:	e00d      	b.n	8007d34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b1b      	ldr	r3, [pc, #108]	; (8007d8c <DMA_CalcBaseAndBitshift+0x160>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6593      	str	r3, [r2, #88]	; 0x58
 8007d26:	e005      	b.n	8007d34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	40020010 	.word	0x40020010
 8007d48:	40020028 	.word	0x40020028
 8007d4c:	40020040 	.word	0x40020040
 8007d50:	40020058 	.word	0x40020058
 8007d54:	40020070 	.word	0x40020070
 8007d58:	40020088 	.word	0x40020088
 8007d5c:	400200a0 	.word	0x400200a0
 8007d60:	400200b8 	.word	0x400200b8
 8007d64:	40020410 	.word	0x40020410
 8007d68:	40020428 	.word	0x40020428
 8007d6c:	40020440 	.word	0x40020440
 8007d70:	40020458 	.word	0x40020458
 8007d74:	40020470 	.word	0x40020470
 8007d78:	40020488 	.word	0x40020488
 8007d7c:	400204a0 	.word	0x400204a0
 8007d80:	400204b8 	.word	0x400204b8
 8007d84:	aaaaaaab 	.word	0xaaaaaaab
 8007d88:	0800edb0 	.word	0x0800edb0
 8007d8c:	fffffc00 	.word	0xfffffc00

08007d90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d120      	bne.n	8007de6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d858      	bhi.n	8007e5e <DMA_CheckFifoParam+0xce>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <DMA_CheckFifoParam+0x24>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007dd7 	.word	0x08007dd7
 8007dbc:	08007dc5 	.word	0x08007dc5
 8007dc0:	08007e5f 	.word	0x08007e5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d048      	beq.n	8007e62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dd4:	e045      	b.n	8007e62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dde:	d142      	bne.n	8007e66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007de4:	e03f      	b.n	8007e66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dee:	d123      	bne.n	8007e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d838      	bhi.n	8007e6a <DMA_CheckFifoParam+0xda>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <DMA_CheckFifoParam+0x70>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e11 	.word	0x08007e11
 8007e04:	08007e17 	.word	0x08007e17
 8007e08:	08007e11 	.word	0x08007e11
 8007e0c:	08007e29 	.word	0x08007e29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
        break;
 8007e14:	e030      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d025      	beq.n	8007e6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e26:	e022      	b.n	8007e6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e30:	d11f      	bne.n	8007e72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e36:	e01c      	b.n	8007e72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d902      	bls.n	8007e46 <DMA_CheckFifoParam+0xb6>
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d003      	beq.n	8007e4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e44:	e018      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
        break;
 8007e4a:	e015      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00e      	beq.n	8007e76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e5c:	e00b      	b.n	8007e76 <DMA_CheckFifoParam+0xe6>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e00a      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        break;
 8007e62:	bf00      	nop
 8007e64:	e008      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        break;
 8007e66:	bf00      	nop
 8007e68:	e006      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e004      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        break;
 8007e6e:	bf00      	nop
 8007e70:	e002      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
        break;
 8007e72:	bf00      	nop
 8007e74:	e000      	b.n	8007e78 <DMA_CheckFifoParam+0xe8>
    break;
 8007e76:	bf00      	nop
    }
  }

  return status;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop

08007e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a38      	ldr	r2, [pc, #224]	; (8007f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a36      	ldr	r2, [pc, #216]	; (8007f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a35      	ldr	r2, [pc, #212]	; (8007f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a33      	ldr	r2, [pc, #204]	; (8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a32      	ldr	r2, [pc, #200]	; (8007f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a30      	ldr	r2, [pc, #192]	; (8007f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2f      	ldr	r2, [pc, #188]	; (8007f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d101      	bne.n	8007eea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01a      	beq.n	8007f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	3b08      	subs	r3, #8
 8007ef8:	4a28      	ldr	r2, [pc, #160]	; (8007f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007efa:	fba2 2303 	umull	r2, r3, r2, r3
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4b26      	ldr	r3, [pc, #152]	; (8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a24      	ldr	r2, [pc, #144]	; (8007fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f24:	e024      	b.n	8007f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	3b10      	subs	r3, #16
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	091b      	lsrs	r3, r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d806      	bhi.n	8007f4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d902      	bls.n	8007f4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a16      	ldr	r2, [pc, #88]	; (8007fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	2201      	movs	r2, #1
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	58025408 	.word	0x58025408
 8007f80:	5802541c 	.word	0x5802541c
 8007f84:	58025430 	.word	0x58025430
 8007f88:	58025444 	.word	0x58025444
 8007f8c:	58025458 	.word	0x58025458
 8007f90:	5802546c 	.word	0x5802546c
 8007f94:	58025480 	.word	0x58025480
 8007f98:	58025494 	.word	0x58025494
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	16009600 	.word	0x16009600
 8007fa4:	58025880 	.word	0x58025880
 8007fa8:	aaaaaaab 	.word	0xaaaaaaab
 8007fac:	400204b8 	.word	0x400204b8
 8007fb0:	4002040f 	.word	0x4002040f
 8007fb4:	10008200 	.word	0x10008200
 8007fb8:	40020880 	.word	0x40020880

08007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d04a      	beq.n	8008068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d847      	bhi.n	8008068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a25      	ldr	r2, [pc, #148]	; (8008074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d022      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	; (8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d01d      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a22      	ldr	r2, [pc, #136]	; (800807c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d018      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a21      	ldr	r2, [pc, #132]	; (8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d013      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1f      	ldr	r2, [pc, #124]	; (8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a1b      	ldr	r2, [pc, #108]	; (8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d101      	bne.n	800802c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4b17      	ldr	r3, [pc, #92]	; (8008094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008044:	671a      	str	r2, [r3, #112]	; 0x70
 8008046:	e009      	b.n	800805c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a11      	ldr	r2, [pc, #68]	; (80080a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800805a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	2201      	movs	r2, #1
 8008062:	409a      	lsls	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008068:	bf00      	nop
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	58025408 	.word	0x58025408
 8008078:	5802541c 	.word	0x5802541c
 800807c:	58025430 	.word	0x58025430
 8008080:	58025444 	.word	0x58025444
 8008084:	58025458 	.word	0x58025458
 8008088:	5802546c 	.word	0x5802546c
 800808c:	58025480 	.word	0x58025480
 8008090:	58025494 	.word	0x58025494
 8008094:	1600963f 	.word	0x1600963f
 8008098:	58025940 	.word	0x58025940
 800809c:	1000823f 	.word	0x1000823f
 80080a0:	40020940 	.word	0x40020940

080080a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b089      	sub	sp, #36	; 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080b2:	4b86      	ldr	r3, [pc, #536]	; (80082cc <HAL_GPIO_Init+0x228>)
 80080b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080b6:	e18c      	b.n	80083d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	2101      	movs	r1, #1
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	fa01 f303 	lsl.w	r3, r1, r3
 80080c4:	4013      	ands	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 817e 	beq.w	80083cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d005      	beq.n	80080e8 <HAL_GPIO_Init+0x44>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d130      	bne.n	800814a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	2203      	movs	r2, #3
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	43db      	mvns	r3, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4013      	ands	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	4313      	orrs	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800811e:	2201      	movs	r2, #1
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	f003 0201 	and.w	r2, r3, #1
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	4313      	orrs	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d017      	beq.n	8008186 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	2203      	movs	r2, #3
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	43db      	mvns	r3, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4013      	ands	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	4313      	orrs	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d123      	bne.n	80081da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	08da      	lsrs	r2, r3, #3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3208      	adds	r2, #8
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	220f      	movs	r2, #15
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	4013      	ands	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	fa02 f303 	lsl.w	r3, r2, r3
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	08da      	lsrs	r2, r3, #3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3208      	adds	r2, #8
 80081d4:	69b9      	ldr	r1, [r7, #24]
 80081d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	2203      	movs	r2, #3
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4013      	ands	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f003 0203 	and.w	r2, r3, #3
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	4313      	orrs	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80d8 	beq.w	80083cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800821c:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <HAL_GPIO_Init+0x22c>)
 800821e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008222:	4a2b      	ldr	r2, [pc, #172]	; (80082d0 <HAL_GPIO_Init+0x22c>)
 8008224:	f043 0302 	orr.w	r3, r3, #2
 8008228:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <HAL_GPIO_Init+0x22c>)
 800822e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800823a:	4a26      	ldr	r2, [pc, #152]	; (80082d4 <HAL_GPIO_Init+0x230>)
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	089b      	lsrs	r3, r3, #2
 8008240:	3302      	adds	r3, #2
 8008242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	220f      	movs	r2, #15
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	43db      	mvns	r3, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4013      	ands	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <HAL_GPIO_Init+0x234>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d04a      	beq.n	80082fc <HAL_GPIO_Init+0x258>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1c      	ldr	r2, [pc, #112]	; (80082dc <HAL_GPIO_Init+0x238>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d02b      	beq.n	80082c6 <HAL_GPIO_Init+0x222>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1b      	ldr	r2, [pc, #108]	; (80082e0 <HAL_GPIO_Init+0x23c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d025      	beq.n	80082c2 <HAL_GPIO_Init+0x21e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <HAL_GPIO_Init+0x240>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d01f      	beq.n	80082be <HAL_GPIO_Init+0x21a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <HAL_GPIO_Init+0x244>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d019      	beq.n	80082ba <HAL_GPIO_Init+0x216>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <HAL_GPIO_Init+0x248>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_GPIO_Init+0x212>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <HAL_GPIO_Init+0x24c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00d      	beq.n	80082b2 <HAL_GPIO_Init+0x20e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <HAL_GPIO_Init+0x250>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d007      	beq.n	80082ae <HAL_GPIO_Init+0x20a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <HAL_GPIO_Init+0x254>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d101      	bne.n	80082aa <HAL_GPIO_Init+0x206>
 80082a6:	2309      	movs	r3, #9
 80082a8:	e029      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082aa:	230a      	movs	r3, #10
 80082ac:	e027      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082ae:	2307      	movs	r3, #7
 80082b0:	e025      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082b2:	2306      	movs	r3, #6
 80082b4:	e023      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082b6:	2305      	movs	r3, #5
 80082b8:	e021      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082ba:	2304      	movs	r3, #4
 80082bc:	e01f      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082be:	2303      	movs	r3, #3
 80082c0:	e01d      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e01b      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e019      	b.n	80082fe <HAL_GPIO_Init+0x25a>
 80082ca:	bf00      	nop
 80082cc:	58000080 	.word	0x58000080
 80082d0:	58024400 	.word	0x58024400
 80082d4:	58000400 	.word	0x58000400
 80082d8:	58020000 	.word	0x58020000
 80082dc:	58020400 	.word	0x58020400
 80082e0:	58020800 	.word	0x58020800
 80082e4:	58020c00 	.word	0x58020c00
 80082e8:	58021000 	.word	0x58021000
 80082ec:	58021400 	.word	0x58021400
 80082f0:	58021800 	.word	0x58021800
 80082f4:	58021c00 	.word	0x58021c00
 80082f8:	58022400 	.word	0x58022400
 80082fc:	2300      	movs	r3, #0
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	f002 0203 	and.w	r2, r2, #3
 8008304:	0092      	lsls	r2, r2, #2
 8008306:	4093      	lsls	r3, r2
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4313      	orrs	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800830e:	4938      	ldr	r1, [pc, #224]	; (80083f0 <HAL_GPIO_Init+0x34c>)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	089b      	lsrs	r3, r3, #2
 8008314:	3302      	adds	r3, #2
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800831c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	43db      	mvns	r3, r3
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	4013      	ands	r3, r2
 800832c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800834a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	43db      	mvns	r3, r3
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	4013      	ands	r3, r2
 800835a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	43db      	mvns	r3, r3
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	4013      	ands	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	43db      	mvns	r3, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4013      	ands	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f47f ae6b 	bne.w	80080b8 <HAL_GPIO_Init+0x14>
  }
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	3724      	adds	r7, #36	; 0x24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	58000400 	.word	0x58000400

080083f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008402:	4b72      	ldr	r3, [pc, #456]	; (80085cc <HAL_GPIO_DeInit+0x1d8>)
 8008404:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008406:	e0d3      	b.n	80085b0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008408:	2201      	movs	r2, #1
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	4013      	ands	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80c6 	beq.w	80085aa <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800841e:	4a6c      	ldr	r2, [pc, #432]	; (80085d0 <HAL_GPIO_DeInit+0x1dc>)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	089b      	lsrs	r3, r3, #2
 8008424:	3302      	adds	r3, #2
 8008426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	220f      	movs	r2, #15
 8008436:	fa02 f303 	lsl.w	r3, r2, r3
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a64      	ldr	r2, [pc, #400]	; (80085d4 <HAL_GPIO_DeInit+0x1e0>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d031      	beq.n	80084ac <HAL_GPIO_DeInit+0xb8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a63      	ldr	r2, [pc, #396]	; (80085d8 <HAL_GPIO_DeInit+0x1e4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d02b      	beq.n	80084a8 <HAL_GPIO_DeInit+0xb4>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a62      	ldr	r2, [pc, #392]	; (80085dc <HAL_GPIO_DeInit+0x1e8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d025      	beq.n	80084a4 <HAL_GPIO_DeInit+0xb0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a61      	ldr	r2, [pc, #388]	; (80085e0 <HAL_GPIO_DeInit+0x1ec>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d01f      	beq.n	80084a0 <HAL_GPIO_DeInit+0xac>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a60      	ldr	r2, [pc, #384]	; (80085e4 <HAL_GPIO_DeInit+0x1f0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d019      	beq.n	800849c <HAL_GPIO_DeInit+0xa8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a5f      	ldr	r2, [pc, #380]	; (80085e8 <HAL_GPIO_DeInit+0x1f4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <HAL_GPIO_DeInit+0xa4>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a5e      	ldr	r2, [pc, #376]	; (80085ec <HAL_GPIO_DeInit+0x1f8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00d      	beq.n	8008494 <HAL_GPIO_DeInit+0xa0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a5d      	ldr	r2, [pc, #372]	; (80085f0 <HAL_GPIO_DeInit+0x1fc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <HAL_GPIO_DeInit+0x9c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a5c      	ldr	r2, [pc, #368]	; (80085f4 <HAL_GPIO_DeInit+0x200>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d101      	bne.n	800848c <HAL_GPIO_DeInit+0x98>
 8008488:	2309      	movs	r3, #9
 800848a:	e010      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 800848c:	230a      	movs	r3, #10
 800848e:	e00e      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 8008490:	2307      	movs	r3, #7
 8008492:	e00c      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 8008494:	2306      	movs	r3, #6
 8008496:	e00a      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 8008498:	2305      	movs	r3, #5
 800849a:	e008      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 800849c:	2304      	movs	r3, #4
 800849e:	e006      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 80084a0:	2303      	movs	r3, #3
 80084a2:	e004      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e002      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <HAL_GPIO_DeInit+0xba>
 80084ac:	2300      	movs	r3, #0
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	f002 0203 	and.w	r2, r2, #3
 80084b4:	0092      	lsls	r2, r2, #2
 80084b6:	4093      	lsls	r3, r2
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d136      	bne.n	800852c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	43db      	mvns	r3, r3
 80084c6:	401a      	ands	r2, r3
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	43db      	mvns	r3, r3
 80084d4:	401a      	ands	r2, r3
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80084da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	43db      	mvns	r3, r3
 80084e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e8:	4013      	ands	r3, r2
 80084ea:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	43db      	mvns	r3, r3
 80084f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084fa:	4013      	ands	r3, r2
 80084fc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	220f      	movs	r2, #15
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800850e:	4a30      	ldr	r2, [pc, #192]	; (80085d0 <HAL_GPIO_DeInit+0x1dc>)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	089b      	lsrs	r3, r3, #2
 8008514:	3302      	adds	r3, #2
 8008516:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	43da      	mvns	r2, r3
 800851e:	482c      	ldr	r0, [pc, #176]	; (80085d0 <HAL_GPIO_DeInit+0x1dc>)
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	400a      	ands	r2, r1
 8008526:	3302      	adds	r3, #2
 8008528:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	2103      	movs	r1, #3
 8008536:	fa01 f303 	lsl.w	r3, r1, r3
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	08da      	lsrs	r2, r3, #3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3208      	adds	r2, #8
 8008548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	220f      	movs	r2, #15
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	43db      	mvns	r3, r3
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	08d2      	lsrs	r2, r2, #3
 8008560:	4019      	ands	r1, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3208      	adds	r2, #8
 8008566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	2103      	movs	r1, #3
 8008574:	fa01 f303 	lsl.w	r3, r1, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	2101      	movs	r1, #1
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	fa01 f303 	lsl.w	r3, r1, r3
 800858c:	43db      	mvns	r3, r3
 800858e:	401a      	ands	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	2103      	movs	r1, #3
 800859e:	fa01 f303 	lsl.w	r3, r1, r3
 80085a2:	43db      	mvns	r3, r3
 80085a4:	401a      	ands	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	3301      	adds	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f af25 	bne.w	8008408 <HAL_GPIO_DeInit+0x14>
  }
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	58000080 	.word	0x58000080
 80085d0:	58000400 	.word	0x58000400
 80085d4:	58020000 	.word	0x58020000
 80085d8:	58020400 	.word	0x58020400
 80085dc:	58020800 	.word	0x58020800
 80085e0:	58020c00 	.word	0x58020c00
 80085e4:	58021000 	.word	0x58021000
 80085e8:	58021400 	.word	0x58021400
 80085ec:	58021800 	.word	0x58021800
 80085f0:	58021c00 	.word	0x58021c00
 80085f4:	58022400 	.word	0x58022400

080085f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
 8008604:	4613      	mov	r3, r2
 8008606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008608:	787b      	ldrb	r3, [r7, #1]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008614:	e003      	b.n	800861e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	041a      	lsls	r2, r3, #16
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	619a      	str	r2, [r3, #24]
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	4603      	mov	r3, r0
 8008632:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008638:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	4013      	ands	r3, r2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f804 	bl	800865e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	4603      	mov	r3, r0
 8008666:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800867c:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d00a      	beq.n	800869e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008688:	4b16      	ldr	r3, [pc, #88]	; (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d001      	beq.n	800869a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e01f      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	e01d      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800869e:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f023 0207 	bic.w	r2, r3, #7
 80086a6:	490f      	ldr	r1, [pc, #60]	; (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086ae:	f7fc fbbb 	bl	8004e28 <HAL_GetTick>
 80086b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086b4:	e009      	b.n	80086ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086b6:	f7fc fbb7 	bl	8004e28 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086c4:	d901      	bls.n	80086ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e007      	b.n	80086da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <HAL_PWREx_ConfigSupply+0x70>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d6:	d1ee      	bne.n	80086b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	58024800 	.word	0x58024800

080086e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08c      	sub	sp, #48	; 0x30
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e39d      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8087 	beq.w	8008816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008708:	4b88      	ldr	r3, [pc, #544]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008712:	4b86      	ldr	r3, [pc, #536]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	2b10      	cmp	r3, #16
 800871c:	d007      	beq.n	800872e <HAL_RCC_OscConfig+0x46>
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	2b18      	cmp	r3, #24
 8008722:	d110      	bne.n	8008746 <HAL_RCC_OscConfig+0x5e>
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d10b      	bne.n	8008746 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872e:	4b7f      	ldr	r3, [pc, #508]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d06c      	beq.n	8008814 <HAL_RCC_OscConfig+0x12c>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d168      	bne.n	8008814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e377      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874e:	d106      	bne.n	800875e <HAL_RCC_OscConfig+0x76>
 8008750:	4b76      	ldr	r3, [pc, #472]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a75      	ldr	r2, [pc, #468]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e02e      	b.n	80087bc <HAL_RCC_OscConfig+0xd4>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <HAL_RCC_OscConfig+0x98>
 8008766:	4b71      	ldr	r3, [pc, #452]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a70      	ldr	r2, [pc, #448]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800876c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	4b6e      	ldr	r3, [pc, #440]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a6d      	ldr	r2, [pc, #436]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	e01d      	b.n	80087bc <HAL_RCC_OscConfig+0xd4>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008788:	d10c      	bne.n	80087a4 <HAL_RCC_OscConfig+0xbc>
 800878a:	4b68      	ldr	r3, [pc, #416]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a67      	ldr	r2, [pc, #412]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	4b65      	ldr	r3, [pc, #404]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a64      	ldr	r2, [pc, #400]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800879c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	e00b      	b.n	80087bc <HAL_RCC_OscConfig+0xd4>
 80087a4:	4b61      	ldr	r3, [pc, #388]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a60      	ldr	r2, [pc, #384]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80087aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	4b5e      	ldr	r3, [pc, #376]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a5d      	ldr	r2, [pc, #372]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80087b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d013      	beq.n	80087ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c4:	f7fc fb30 	bl	8004e28 <HAL_GetTick>
 80087c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087cc:	f7fc fb2c 	bl	8004e28 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b64      	cmp	r3, #100	; 0x64
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e32b      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087de:	4b53      	ldr	r3, [pc, #332]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f0      	beq.n	80087cc <HAL_RCC_OscConfig+0xe4>
 80087ea:	e014      	b.n	8008816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ec:	f7fc fb1c 	bl	8004e28 <HAL_GetTick>
 80087f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f4:	f7fc fb18 	bl	8004e28 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b64      	cmp	r3, #100	; 0x64
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e317      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008806:	4b49      	ldr	r3, [pc, #292]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f0      	bne.n	80087f4 <HAL_RCC_OscConfig+0x10c>
 8008812:	e000      	b.n	8008816 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 808c 	beq.w	800893c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008824:	4b41      	ldr	r3, [pc, #260]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800882c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800882e:	4b3f      	ldr	r3, [pc, #252]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <HAL_RCC_OscConfig+0x162>
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2b18      	cmp	r3, #24
 800883e:	d137      	bne.n	80088b0 <HAL_RCC_OscConfig+0x1c8>
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d132      	bne.n	80088b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800884a:	4b38      	ldr	r3, [pc, #224]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_RCC_OscConfig+0x17a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e2e9      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008862:	4b32      	ldr	r3, [pc, #200]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f023 0219 	bic.w	r2, r3, #25
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	492f      	ldr	r1, [pc, #188]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008870:	4313      	orrs	r3, r2
 8008872:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008874:	f7fc fad8 	bl	8004e28 <HAL_GetTick>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800887c:	f7fc fad4 	bl	8004e28 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e2d3      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800888e:	4b27      	ldr	r3, [pc, #156]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0f0      	beq.n	800887c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889a:	4b24      	ldr	r3, [pc, #144]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	4920      	ldr	r1, [pc, #128]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ae:	e045      	b.n	800893c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d026      	beq.n	8008906 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088b8:	4b1c      	ldr	r3, [pc, #112]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f023 0219 	bic.w	r2, r3, #25
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4919      	ldr	r1, [pc, #100]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ca:	f7fc faad 	bl	8004e28 <HAL_GetTick>
 80088ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088d2:	f7fc faa9 	bl	8004e28 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e2a8      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088e4:	4b11      	ldr	r3, [pc, #68]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f0:	4b0e      	ldr	r3, [pc, #56]	; (800892c <HAL_RCC_OscConfig+0x244>)
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	490b      	ldr	r1, [pc, #44]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008900:	4313      	orrs	r3, r2
 8008902:	604b      	str	r3, [r1, #4]
 8008904:	e01a      	b.n	800893c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <HAL_RCC_OscConfig+0x244>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a08      	ldr	r2, [pc, #32]	; (800892c <HAL_RCC_OscConfig+0x244>)
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008912:	f7fc fa89 	bl	8004e28 <HAL_GetTick>
 8008916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008918:	e00a      	b.n	8008930 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800891a:	f7fc fa85 	bl	8004e28 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d903      	bls.n	8008930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e284      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
 800892c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008930:	4b96      	ldr	r3, [pc, #600]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1ee      	bne.n	800891a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d06a      	beq.n	8008a1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008948:	4b90      	ldr	r3, [pc, #576]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008950:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008952:	4b8e      	ldr	r3, [pc, #568]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b08      	cmp	r3, #8
 800895c:	d007      	beq.n	800896e <HAL_RCC_OscConfig+0x286>
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b18      	cmp	r3, #24
 8008962:	d11b      	bne.n	800899c <HAL_RCC_OscConfig+0x2b4>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b01      	cmp	r3, #1
 800896c:	d116      	bne.n	800899c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800896e:	4b87      	ldr	r3, [pc, #540]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <HAL_RCC_OscConfig+0x29e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	2b80      	cmp	r3, #128	; 0x80
 8008980:	d001      	beq.n	8008986 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e257      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008986:	4b81      	ldr	r3, [pc, #516]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	497d      	ldr	r1, [pc, #500]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008996:	4313      	orrs	r3, r2
 8008998:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800899a:	e040      	b.n	8008a1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d023      	beq.n	80089ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089a4:	4b79      	ldr	r3, [pc, #484]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a78      	ldr	r2, [pc, #480]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fc fa3a 	bl	8004e28 <HAL_GetTick>
 80089b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80089b8:	f7fc fa36 	bl	8004e28 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e235      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089ca:	4b70      	ldr	r3, [pc, #448]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f0      	beq.n	80089b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089d6:	4b6d      	ldr	r3, [pc, #436]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	061b      	lsls	r3, r3, #24
 80089e4:	4969      	ldr	r1, [pc, #420]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60cb      	str	r3, [r1, #12]
 80089ea:	e018      	b.n	8008a1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089ec:	4b67      	ldr	r3, [pc, #412]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a66      	ldr	r2, [pc, #408]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 80089f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fc fa16 	bl	8004e28 <HAL_GetTick>
 80089fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a00:	f7fc fa12 	bl	8004e28 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e211      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a12:	4b5e      	ldr	r3, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d036      	beq.n	8008a98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d019      	beq.n	8008a66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a32:	4b56      	ldr	r3, [pc, #344]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a36:	4a55      	ldr	r2, [pc, #340]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a38:	f043 0301 	orr.w	r3, r3, #1
 8008a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3e:	f7fc f9f3 	bl	8004e28 <HAL_GetTick>
 8008a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a44:	e008      	b.n	8008a58 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a46:	f7fc f9ef 	bl	8004e28 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e1ee      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a58:	4b4c      	ldr	r3, [pc, #304]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0f0      	beq.n	8008a46 <HAL_RCC_OscConfig+0x35e>
 8008a64:	e018      	b.n	8008a98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a66:	4b49      	ldr	r3, [pc, #292]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6a:	4a48      	ldr	r2, [pc, #288]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a72:	f7fc f9d9 	bl	8004e28 <HAL_GetTick>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a78:	e008      	b.n	8008a8c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a7a:	f7fc f9d5 	bl	8004e28 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e1d4      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1f0      	bne.n	8008a7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d036      	beq.n	8008b12 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d019      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008aac:	4b37      	ldr	r3, [pc, #220]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a36      	ldr	r2, [pc, #216]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ab8:	f7fc f9b6 	bl	8004e28 <HAL_GetTick>
 8008abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ac0:	f7fc f9b2 	bl	8004e28 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e1b1      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ad2:	4b2e      	ldr	r3, [pc, #184]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x3d8>
 8008ade:	e018      	b.n	8008b12 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ae0:	4b2a      	ldr	r3, [pc, #168]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a29      	ldr	r2, [pc, #164]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008aec:	f7fc f99c 	bl	8004e28 <HAL_GetTick>
 8008af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008af4:	f7fc f998 	bl	8004e28 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e197      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b06:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f0      	bne.n	8008af4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8086 	beq.w	8008c2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b20:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <HAL_RCC_OscConfig+0x4a8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1a      	ldr	r2, [pc, #104]	; (8008b90 <HAL_RCC_OscConfig+0x4a8>)
 8008b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b2c:	f7fc f97c 	bl	8004e28 <HAL_GetTick>
 8008b30:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b34:	f7fc f978 	bl	8004e28 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b64      	cmp	r3, #100	; 0x64
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e177      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <HAL_RCC_OscConfig+0x4a8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0f0      	beq.n	8008b34 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d106      	bne.n	8008b68 <HAL_RCC_OscConfig+0x480>
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	4a0b      	ldr	r2, [pc, #44]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b60:	f043 0301 	orr.w	r3, r3, #1
 8008b64:	6713      	str	r3, [r2, #112]	; 0x70
 8008b66:	e032      	b.n	8008bce <HAL_RCC_OscConfig+0x4e6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d111      	bne.n	8008b94 <HAL_RCC_OscConfig+0x4ac>
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b74:	4a05      	ldr	r2, [pc, #20]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b7c:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	4a02      	ldr	r2, [pc, #8]	; (8008b8c <HAL_RCC_OscConfig+0x4a4>)
 8008b82:	f023 0304 	bic.w	r3, r3, #4
 8008b86:	6713      	str	r3, [r2, #112]	; 0x70
 8008b88:	e021      	b.n	8008bce <HAL_RCC_OscConfig+0x4e6>
 8008b8a:	bf00      	nop
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	58024800 	.word	0x58024800
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b05      	cmp	r3, #5
 8008b9a:	d10c      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x4ce>
 8008b9c:	4b83      	ldr	r3, [pc, #524]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba0:	4a82      	ldr	r2, [pc, #520]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008ba2:	f043 0304 	orr.w	r3, r3, #4
 8008ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba8:	4b80      	ldr	r3, [pc, #512]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	4a7f      	ldr	r2, [pc, #508]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bb4:	e00b      	b.n	8008bce <HAL_RCC_OscConfig+0x4e6>
 8008bb6:	4b7d      	ldr	r3, [pc, #500]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bba:	4a7c      	ldr	r2, [pc, #496]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bbc:	f023 0301 	bic.w	r3, r3, #1
 8008bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8008bc2:	4b7a      	ldr	r3, [pc, #488]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc6:	4a79      	ldr	r2, [pc, #484]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bc8:	f023 0304 	bic.w	r3, r3, #4
 8008bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d015      	beq.n	8008c02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd6:	f7fc f927 	bl	8004e28 <HAL_GetTick>
 8008bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bdc:	e00a      	b.n	8008bf4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bde:	f7fc f923 	bl	8004e28 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e120      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bf4:	4b6d      	ldr	r3, [pc, #436]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0ee      	beq.n	8008bde <HAL_RCC_OscConfig+0x4f6>
 8008c00:	e014      	b.n	8008c2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c02:	f7fc f911 	bl	8004e28 <HAL_GetTick>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c08:	e00a      	b.n	8008c20 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c0a:	f7fc f90d 	bl	8004e28 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d901      	bls.n	8008c20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e10a      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c20:	4b62      	ldr	r3, [pc, #392]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1ee      	bne.n	8008c0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80ff 	beq.w	8008e34 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c36:	4b5d      	ldr	r3, [pc, #372]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c3e:	2b18      	cmp	r3, #24
 8008c40:	f000 80ba 	beq.w	8008db8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	f040 8095 	bne.w	8008d78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c4e:	4b57      	ldr	r3, [pc, #348]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a56      	ldr	r2, [pc, #344]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c5a:	f7fc f8e5 	bl	8004e28 <HAL_GetTick>
 8008c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c60:	e008      	b.n	8008c74 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c62:	f7fc f8e1 	bl	8004e28 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d901      	bls.n	8008c74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e0e0      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c74:	4b4d      	ldr	r3, [pc, #308]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f0      	bne.n	8008c62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c80:	4b4a      	ldr	r3, [pc, #296]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c84:	4b4a      	ldr	r3, [pc, #296]	; (8008db0 <HAL_RCC_OscConfig+0x6c8>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c90:	0112      	lsls	r2, r2, #4
 8008c92:	430a      	orrs	r2, r1
 8008c94:	4945      	ldr	r1, [pc, #276]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	628b      	str	r3, [r1, #40]	; 0x28
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	025b      	lsls	r3, r3, #9
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cca:	4938      	ldr	r1, [pc, #224]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008cd0:	4b36      	ldr	r3, [pc, #216]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	4a35      	ldr	r2, [pc, #212]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cdc:	4b33      	ldr	r3, [pc, #204]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce0:	4b34      	ldr	r3, [pc, #208]	; (8008db4 <HAL_RCC_OscConfig+0x6cc>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ce8:	00d2      	lsls	r2, r2, #3
 8008cea:	4930      	ldr	r1, [pc, #192]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cf0:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	f023 020c 	bic.w	r2, r3, #12
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	492b      	ldr	r1, [pc, #172]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	f023 0202 	bic.w	r2, r3, #2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	4927      	ldr	r1, [pc, #156]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d14:	4b25      	ldr	r3, [pc, #148]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a24      	ldr	r2, [pc, #144]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d20:	4b22      	ldr	r3, [pc, #136]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a21      	ldr	r2, [pc, #132]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d2c:	4b1f      	ldr	r3, [pc, #124]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4a1e      	ldr	r2, [pc, #120]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008d38:	4b1c      	ldr	r3, [pc, #112]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a18      	ldr	r2, [pc, #96]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fc f86a 	bl	8004e28 <HAL_GetTick>
 8008d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d58:	f7fc f866 	bl	8004e28 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e065      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0f0      	beq.n	8008d58 <HAL_RCC_OscConfig+0x670>
 8008d76:	e05d      	b.n	8008e34 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a0b      	ldr	r2, [pc, #44]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d84:	f7fc f850 	bl	8004e28 <HAL_GetTick>
 8008d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d8c:	f7fc f84c 	bl	8004e28 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e04b      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d9e:	4b03      	ldr	r3, [pc, #12]	; (8008dac <HAL_RCC_OscConfig+0x6c4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f0      	bne.n	8008d8c <HAL_RCC_OscConfig+0x6a4>
 8008daa:	e043      	b.n	8008e34 <HAL_RCC_OscConfig+0x74c>
 8008dac:	58024400 	.word	0x58024400
 8008db0:	fffffc0c 	.word	0xfffffc0c
 8008db4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008db8:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <HAL_RCC_OscConfig+0x758>)
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008dbe:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <HAL_RCC_OscConfig+0x758>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d031      	beq.n	8008e30 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f003 0203 	and.w	r2, r3, #3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d12a      	bne.n	8008e30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d122      	bne.n	8008e30 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d11a      	bne.n	8008e30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	0a5b      	lsrs	r3, r3, #9
 8008dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d111      	bne.n	8008e30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d108      	bne.n	8008e30 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	0e1b      	lsrs	r3, r3, #24
 8008e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d001      	beq.n	8008e34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3730      	adds	r7, #48	; 0x30
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400

08008e44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e19c      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e58:	4b8a      	ldr	r3, [pc, #552]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d910      	bls.n	8008e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b87      	ldr	r3, [pc, #540]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 020f 	bic.w	r2, r3, #15
 8008e6e:	4985      	ldr	r1, [pc, #532]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e76:	4b83      	ldr	r3, [pc, #524]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d001      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e184      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d010      	beq.n	8008eb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	4b7b      	ldr	r3, [pc, #492]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d908      	bls.n	8008eb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ea4:	4b78      	ldr	r3, [pc, #480]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	4975      	ldr	r1, [pc, #468]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d010      	beq.n	8008ee4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	4b70      	ldr	r3, [pc, #448]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d908      	bls.n	8008ee4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ed2:	4b6d      	ldr	r3, [pc, #436]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	496a      	ldr	r1, [pc, #424]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d010      	beq.n	8008f12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	4b64      	ldr	r3, [pc, #400]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d908      	bls.n	8008f12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f00:	4b61      	ldr	r3, [pc, #388]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	495e      	ldr	r1, [pc, #376]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d010      	beq.n	8008f40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69da      	ldr	r2, [r3, #28]
 8008f22:	4b59      	ldr	r3, [pc, #356]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d908      	bls.n	8008f40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f2e:	4b56      	ldr	r3, [pc, #344]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	4953      	ldr	r1, [pc, #332]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d010      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	4b4d      	ldr	r3, [pc, #308]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f003 030f 	and.w	r3, r3, #15
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d908      	bls.n	8008f6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f5c:	4b4a      	ldr	r3, [pc, #296]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f023 020f 	bic.w	r2, r3, #15
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4947      	ldr	r1, [pc, #284]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d055      	beq.n	8009026 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f7a:	4b43      	ldr	r3, [pc, #268]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	4940      	ldr	r1, [pc, #256]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f94:	4b3c      	ldr	r3, [pc, #240]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d121      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e0f6      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d107      	bne.n	8008fbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fac:	4b36      	ldr	r3, [pc, #216]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d115      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0ea      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d107      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fc4:	4b30      	ldr	r3, [pc, #192]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0de      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fd4:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0d6      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fe4:	4b28      	ldr	r3, [pc, #160]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f023 0207 	bic.w	r2, r3, #7
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4925      	ldr	r1, [pc, #148]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff6:	f7fb ff17 	bl	8004e28 <HAL_GetTick>
 8008ffa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ffc:	e00a      	b.n	8009014 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ffe:	f7fb ff13 	bl	8004e28 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f241 3288 	movw	r2, #5000	; 0x1388
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e0be      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009014:	4b1c      	ldr	r3, [pc, #112]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	429a      	cmp	r2, r3
 8009024:	d1eb      	bne.n	8008ffe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	429a      	cmp	r2, r3
 8009040:	d208      	bcs.n	8009054 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f023 020f 	bic.w	r2, r3, #15
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	490e      	ldr	r1, [pc, #56]	; (8009088 <HAL_RCC_ClockConfig+0x244>)
 8009050:	4313      	orrs	r3, r2
 8009052:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d214      	bcs.n	800908c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009062:	4b08      	ldr	r3, [pc, #32]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f023 020f 	bic.w	r2, r3, #15
 800906a:	4906      	ldr	r1, [pc, #24]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	4313      	orrs	r3, r2
 8009070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <HAL_RCC_ClockConfig+0x240>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e086      	b.n	8009192 <HAL_RCC_ClockConfig+0x34e>
 8009084:	52002000 	.word	0x52002000
 8009088:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691a      	ldr	r2, [r3, #16]
 800909c:	4b3f      	ldr	r3, [pc, #252]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d208      	bcs.n	80090ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090a8:	4b3c      	ldr	r3, [pc, #240]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	4939      	ldr	r1, [pc, #228]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d010      	beq.n	80090e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695a      	ldr	r2, [r3, #20]
 80090ca:	4b34      	ldr	r3, [pc, #208]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d208      	bcs.n	80090e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090d6:	4b31      	ldr	r3, [pc, #196]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	492e      	ldr	r1, [pc, #184]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	4b28      	ldr	r3, [pc, #160]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009100:	429a      	cmp	r2, r3
 8009102:	d208      	bcs.n	8009116 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009104:	4b25      	ldr	r3, [pc, #148]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	4922      	ldr	r1, [pc, #136]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009112:	4313      	orrs	r3, r2
 8009114:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d010      	beq.n	8009144 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69da      	ldr	r2, [r3, #28]
 8009126:	4b1d      	ldr	r3, [pc, #116]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800912e:	429a      	cmp	r2, r3
 8009130:	d208      	bcs.n	8009144 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009132:	4b1a      	ldr	r3, [pc, #104]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	4917      	ldr	r1, [pc, #92]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009140:	4313      	orrs	r3, r2
 8009142:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009144:	f000 f834 	bl	80091b0 <HAL_RCC_GetSysClockFreq>
 8009148:	4602      	mov	r2, r0
 800914a:	4b14      	ldr	r3, [pc, #80]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	0a1b      	lsrs	r3, r3, #8
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	4912      	ldr	r1, [pc, #72]	; (80091a0 <HAL_RCC_ClockConfig+0x35c>)
 8009156:	5ccb      	ldrb	r3, [r1, r3]
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <HAL_RCC_ClockConfig+0x358>)
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	4a0d      	ldr	r2, [pc, #52]	; (80091a0 <HAL_RCC_ClockConfig+0x35c>)
 800916c:	5cd3      	ldrb	r3, [r2, r3]
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	fa22 f303 	lsr.w	r3, r2, r3
 8009178:	4a0a      	ldr	r2, [pc, #40]	; (80091a4 <HAL_RCC_ClockConfig+0x360>)
 800917a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800917c:	4a0a      	ldr	r2, [pc, #40]	; (80091a8 <HAL_RCC_ClockConfig+0x364>)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009182:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <HAL_RCC_ClockConfig+0x368>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7fb fe04 	bl	8004d94 <HAL_InitTick>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	58024400 	.word	0x58024400
 80091a0:	0800eda0 	.word	0x0800eda0
 80091a4:	240001a4 	.word	0x240001a4
 80091a8:	240001a0 	.word	0x240001a0
 80091ac:	240001a8 	.word	0x240001a8

080091b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b089      	sub	sp, #36	; 0x24
 80091b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091b6:	4bb3      	ldr	r3, [pc, #716]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091be:	2b18      	cmp	r3, #24
 80091c0:	f200 8155 	bhi.w	800946e <HAL_RCC_GetSysClockFreq+0x2be>
 80091c4:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	08009231 	.word	0x08009231
 80091d0:	0800946f 	.word	0x0800946f
 80091d4:	0800946f 	.word	0x0800946f
 80091d8:	0800946f 	.word	0x0800946f
 80091dc:	0800946f 	.word	0x0800946f
 80091e0:	0800946f 	.word	0x0800946f
 80091e4:	0800946f 	.word	0x0800946f
 80091e8:	0800946f 	.word	0x0800946f
 80091ec:	08009257 	.word	0x08009257
 80091f0:	0800946f 	.word	0x0800946f
 80091f4:	0800946f 	.word	0x0800946f
 80091f8:	0800946f 	.word	0x0800946f
 80091fc:	0800946f 	.word	0x0800946f
 8009200:	0800946f 	.word	0x0800946f
 8009204:	0800946f 	.word	0x0800946f
 8009208:	0800946f 	.word	0x0800946f
 800920c:	0800925d 	.word	0x0800925d
 8009210:	0800946f 	.word	0x0800946f
 8009214:	0800946f 	.word	0x0800946f
 8009218:	0800946f 	.word	0x0800946f
 800921c:	0800946f 	.word	0x0800946f
 8009220:	0800946f 	.word	0x0800946f
 8009224:	0800946f 	.word	0x0800946f
 8009228:	0800946f 	.word	0x0800946f
 800922c:	08009263 	.word	0x08009263
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009230:	4b94      	ldr	r3, [pc, #592]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0320 	and.w	r3, r3, #32
 8009238:	2b00      	cmp	r3, #0
 800923a:	d009      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800923c:	4b91      	ldr	r3, [pc, #580]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	08db      	lsrs	r3, r3, #3
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	4a90      	ldr	r2, [pc, #576]	; (8009488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
 800924c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800924e:	e111      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009250:	4b8d      	ldr	r3, [pc, #564]	; (8009488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009252:	61bb      	str	r3, [r7, #24]
    break;
 8009254:	e10e      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009256:	4b8d      	ldr	r3, [pc, #564]	; (800948c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009258:	61bb      	str	r3, [r7, #24]
    break;
 800925a:	e10b      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800925c:	4b8c      	ldr	r3, [pc, #560]	; (8009490 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800925e:	61bb      	str	r3, [r7, #24]
    break;
 8009260:	e108      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009262:	4b88      	ldr	r3, [pc, #544]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800926c:	4b85      	ldr	r3, [pc, #532]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	091b      	lsrs	r3, r3, #4
 8009272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009276:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009278:	4b82      	ldr	r3, [pc, #520]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009282:	4b80      	ldr	r3, [pc, #512]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	08db      	lsrs	r3, r3, #3
 8009288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80e1 	beq.w	8009468 <HAL_RCC_GetSysClockFreq+0x2b8>
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	f000 8083 	beq.w	80093b4 <HAL_RCC_GetSysClockFreq+0x204>
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f200 80a1 	bhi.w	80093f8 <HAL_RCC_GetSysClockFreq+0x248>
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0x114>
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d056      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0x1c0>
 80092c2:	e099      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c4:	4b6f      	ldr	r3, [pc, #444]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d02d      	beq.n	800932c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092d0:	4b6c      	ldr	r3, [pc, #432]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	08db      	lsrs	r3, r3, #3
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	4a6b      	ldr	r2, [pc, #428]	; (8009488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b62      	ldr	r3, [pc, #392]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a02 	vldr	s12, [r7, #8]
 800930e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800932a:	e087      	b.n	800943c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009498 <HAL_RCC_GetSysClockFreq+0x2e8>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b51      	ldr	r3, [pc, #324]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009352:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800936e:	e065      	b.n	800943c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800949c <HAL_RCC_GetSysClockFreq+0x2ec>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b40      	ldr	r3, [pc, #256]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a02 	vldr	s12, [r7, #8]
 8009396:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b2:	e043      	b.n	800943c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80094a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009494 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f6:	e021      	b.n	800943c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a26 	vldr	s13, [pc, #152]	; 800949c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b1e      	ldr	r3, [pc, #120]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a02 	vldr	s12, [r7, #8]
 800941e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800943c:	4b11      	ldr	r3, [pc, #68]	; (8009484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	0a5b      	lsrs	r3, r3, #9
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	3301      	adds	r3, #1
 8009448:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	ee07 3a90 	vmov	s15, r3
 8009450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009454:	edd7 6a07 	vldr	s13, [r7, #28]
 8009458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009460:	ee17 3a90 	vmov	r3, s15
 8009464:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009466:	e005      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
    break;
 800946c:	e002      	b.n	8009474 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800946e:	4b07      	ldr	r3, [pc, #28]	; (800948c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009470:	61bb      	str	r3, [r7, #24]
    break;
 8009472:	bf00      	nop
  }

  return sysclockfreq;
 8009474:	69bb      	ldr	r3, [r7, #24]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	58024400 	.word	0x58024400
 8009488:	03d09000 	.word	0x03d09000
 800948c:	003d0900 	.word	0x003d0900
 8009490:	007a1200 	.word	0x007a1200
 8009494:	46000000 	.word	0x46000000
 8009498:	4c742400 	.word	0x4c742400
 800949c:	4a742400 	.word	0x4a742400
 80094a0:	4af42400 	.word	0x4af42400

080094a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094aa:	f7ff fe81 	bl	80091b0 <HAL_RCC_GetSysClockFreq>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	490f      	ldr	r1, [pc, #60]	; (80094f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80094bc:	5ccb      	ldrb	r3, [r1, r3]
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	fa22 f303 	lsr.w	r3, r2, r3
 80094c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	4a09      	ldr	r2, [pc, #36]	; (80094f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80094d2:	5cd3      	ldrb	r3, [r2, r3]
 80094d4:	f003 031f 	and.w	r3, r3, #31
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	fa22 f303 	lsr.w	r3, r2, r3
 80094de:	4a07      	ldr	r2, [pc, #28]	; (80094fc <HAL_RCC_GetHCLKFreq+0x58>)
 80094e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094e2:	4a07      	ldr	r2, [pc, #28]	; (8009500 <HAL_RCC_GetHCLKFreq+0x5c>)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <HAL_RCC_GetHCLKFreq+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	58024400 	.word	0x58024400
 80094f8:	0800eda0 	.word	0x0800eda0
 80094fc:	240001a4 	.word	0x240001a4
 8009500:	240001a0 	.word	0x240001a0

08009504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009508:	f7ff ffcc 	bl	80094a4 <HAL_RCC_GetHCLKFreq>
 800950c:	4602      	mov	r2, r0
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	091b      	lsrs	r3, r3, #4
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	4904      	ldr	r1, [pc, #16]	; (800952c <HAL_RCC_GetPCLK1Freq+0x28>)
 800951a:	5ccb      	ldrb	r3, [r1, r3]
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009524:	4618      	mov	r0, r3
 8009526:	bd80      	pop	{r7, pc}
 8009528:	58024400 	.word	0x58024400
 800952c:	0800eda0 	.word	0x0800eda0

08009530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009534:	f7ff ffb6 	bl	80094a4 <HAL_RCC_GetHCLKFreq>
 8009538:	4602      	mov	r2, r0
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	f003 0307 	and.w	r3, r3, #7
 8009544:	4904      	ldr	r1, [pc, #16]	; (8009558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009546:	5ccb      	ldrb	r3, [r1, r3]
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009550:	4618      	mov	r0, r3
 8009552:	bd80      	pop	{r7, pc}
 8009554:	58024400 	.word	0x58024400
 8009558:	0800eda0 	.word	0x0800eda0

0800955c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009568:	2300      	movs	r3, #0
 800956a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d03f      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009580:	d02a      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009586:	d824      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800958c:	d018      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800958e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009592:	d81e      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800959c:	d007      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800959e:	e018      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a0:	4ba4      	ldr	r3, [pc, #656]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4aa3      	ldr	r2, [pc, #652]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095ac:	e015      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3304      	adds	r3, #4
 80095b2:	2102      	movs	r1, #2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f989 	bl	800a8cc <RCCEx_PLL2_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095be:	e00c      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3324      	adds	r3, #36	; 0x24
 80095c4:	2102      	movs	r1, #2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 fa32 	bl	800aa30 <RCCEx_PLL3_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095d0:	e003      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
      break;
 80095d6:	e000      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80095d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095e0:	4b94      	ldr	r3, [pc, #592]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ec:	4991      	ldr	r1, [pc, #580]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	650b      	str	r3, [r1, #80]	; 0x50
 80095f2:	e001      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009600:	2b00      	cmp	r3, #0
 8009602:	d03d      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009608:	2b04      	cmp	r3, #4
 800960a:	d826      	bhi.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800960c:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800960e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009612:	bf00      	nop
 8009614:	08009629 	.word	0x08009629
 8009618:	08009637 	.word	0x08009637
 800961c:	08009649 	.word	0x08009649
 8009620:	08009661 	.word	0x08009661
 8009624:	08009661 	.word	0x08009661
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009628:	4b82      	ldr	r3, [pc, #520]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	4a81      	ldr	r2, [pc, #516]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800962e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009634:	e015      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3304      	adds	r3, #4
 800963a:	2100      	movs	r1, #0
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f945 	bl	800a8cc <RCCEx_PLL2_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009646:	e00c      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3324      	adds	r3, #36	; 0x24
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f001 f9ee 	bl	800aa30 <RCCEx_PLL3_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009658:	e003      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	75fb      	strb	r3, [r7, #23]
      break;
 800965e:	e000      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d109      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009668:	4b72      	ldr	r3, [pc, #456]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800966a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800966c:	f023 0207 	bic.w	r2, r3, #7
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009674:	496f      	ldr	r1, [pc, #444]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009676:	4313      	orrs	r3, r2
 8009678:	650b      	str	r3, [r1, #80]	; 0x50
 800967a:	e001      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009688:	2b00      	cmp	r3, #0
 800968a:	d051      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009692:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009696:	d036      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009698:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800969c:	d830      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800969e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a2:	d032      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80096a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a8:	d82a      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80096aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096ae:	d02e      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80096b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096b4:	d824      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80096b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ba:	d018      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 80096bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c0:	d81e      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 80096c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ca:	d007      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80096cc:	e018      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ce:	4b59      	ldr	r3, [pc, #356]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	4a58      	ldr	r2, [pc, #352]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096da:	e019      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3304      	adds	r3, #4
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 f8f2 	bl	800a8cc <RCCEx_PLL2_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80096ec:	e010      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3324      	adds	r3, #36	; 0x24
 80096f2:	2100      	movs	r1, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 f99b 	bl	800aa30 <RCCEx_PLL3_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80096fe:	e007      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	75fb      	strb	r3, [r7, #23]
      break;
 8009704:	e004      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800970e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009716:	4b47      	ldr	r3, [pc, #284]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009724:	4943      	ldr	r1, [pc, #268]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009726:	4313      	orrs	r3, r2
 8009728:	658b      	str	r3, [r1, #88]	; 0x58
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009738:	2b00      	cmp	r3, #0
 800973a:	d051      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009742:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009746:	d036      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009748:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800974c:	d830      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800974e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009752:	d032      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009758:	d82a      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800975a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800975e:	d02e      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009764:	d824      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800976a:	d018      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800976c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009770:	d81e      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800977a:	d007      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800977c:	e018      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977e:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	4a2c      	ldr	r2, [pc, #176]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978a:	e019      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3304      	adds	r3, #4
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f001 f89a 	bl	800a8cc <RCCEx_PLL2_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800979c:	e010      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 f943 	bl	800aa30 <RCCEx_PLL3_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80097ae:	e007      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75fb      	strb	r3, [r7, #23]
      break;
 80097b4:	e004      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80097b6:	bf00      	nop
 80097b8:	e002      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80097be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097c6:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097d4:	4917      	ldr	r1, [pc, #92]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	658b      	str	r3, [r1, #88]	; 0x58
 80097da:	e001      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
 80097de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d035      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097f0:	2b30      	cmp	r3, #48	; 0x30
 80097f2:	d01c      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d817      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d00c      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d813      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d019      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009804:	2b10      	cmp	r3, #16
 8009806:	d10f      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	4a09      	ldr	r2, [pc, #36]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800980e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009814:	e011      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3304      	adds	r3, #4
 800981a:	2102      	movs	r1, #2
 800981c:	4618      	mov	r0, r3
 800981e:	f001 f855 	bl	800a8cc <RCCEx_PLL2_Config>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009826:	e008      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
      break;
 800982c:	e005      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800982e:	bf00      	nop
 8009830:	e003      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
      break;
 8009838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009840:	4ba3      	ldr	r3, [pc, #652]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009844:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984c:	49a0      	ldr	r1, [pc, #640]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800984e:	4313      	orrs	r3, r2
 8009850:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009852:	e001      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d047      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986c:	d030      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800986e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009872:	d82a      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009878:	d02c      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800987a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800987e:	d824      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009884:	d018      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d81e      	bhi.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d007      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009896:	e018      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009898:	4b8d      	ldr	r3, [pc, #564]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	4a8c      	ldr	r2, [pc, #560]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800989e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098a4:	e017      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 f80d 	bl	800a8cc <RCCEx_PLL2_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098b6:	e00e      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 f8b6 	bl	800aa30 <RCCEx_PLL3_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80098c8:	e005      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	75fb      	strb	r3, [r7, #23]
      break;
 80098ce:	e002      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80098d0:	bf00      	nop
 80098d2:	e000      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80098d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098dc:	4b7c      	ldr	r3, [pc, #496]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80098de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e8:	4979      	ldr	r1, [pc, #484]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	650b      	str	r3, [r1, #80]	; 0x50
 80098ee:	e001      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d049      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009908:	d02e      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800990a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800990e:	d828      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009914:	d02a      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800991a:	d822      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800991c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009920:	d026      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009926:	d81c      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800992c:	d010      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800992e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009932:	d816      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01d      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800993c:	d111      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3304      	adds	r3, #4
 8009942:	2101      	movs	r1, #1
 8009944:	4618      	mov	r0, r3
 8009946:	f000 ffc1 	bl	800a8cc <RCCEx_PLL2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800994e:	e012      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f001 f86a 	bl	800aa30 <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009960:	e009      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	75fb      	strb	r3, [r7, #23]
      break;
 8009966:	e006      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009968:	bf00      	nop
 800996a:	e004      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800996c:	bf00      	nop
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800997c:	4b54      	ldr	r3, [pc, #336]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009980:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009988:	4951      	ldr	r1, [pc, #324]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800998a:	4313      	orrs	r3, r2
 800998c:	650b      	str	r3, [r1, #80]	; 0x50
 800998e:	e001      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d04b      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099aa:	d02e      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80099ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099b0:	d828      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b6:	d02a      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099bc:	d822      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80099be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099c2:	d026      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80099c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099c8:	d81c      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80099ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ce:	d010      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80099d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d4:	d816      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01d      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80099da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099de:	d111      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	2101      	movs	r1, #1
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 ff70 	bl	800a8cc <RCCEx_PLL2_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80099f0:	e012      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3324      	adds	r3, #36	; 0x24
 80099f6:	2101      	movs	r1, #1
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 f819 	bl	800aa30 <RCCEx_PLL3_Config>
 80099fe:	4603      	mov	r3, r0
 8009a00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a02:	e009      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
      break;
 8009a08:	e006      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009a0a:	bf00      	nop
 8009a0c:	e004      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009a0e:	bf00      	nop
 8009a10:	e002      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009a12:	bf00      	nop
 8009a14:	e000      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a1e:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a2c:	4928      	ldr	r1, [pc, #160]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	658b      	str	r3, [r1, #88]	; 0x58
 8009a32:	e001      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02f      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a4c:	d00e      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a52:	d814      	bhi.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d015      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a5c:	d10f      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5e:	4b1c      	ldr	r3, [pc, #112]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a62:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009a6a:	e00c      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	2101      	movs	r1, #1
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 ff2a 	bl	800a8cc <RCCEx_PLL2_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
      break;
 8009a82:	e000      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d109      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a98:	490d      	ldr	r1, [pc, #52]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a9e:	e001      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d034      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d81d      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009ab8:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009afb 	.word	0x08009afb
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009ae3 	.word	0x08009ae3
 8009acc:	08009afb 	.word	0x08009afb
 8009ad0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad4:	4bb1      	ldr	r3, [pc, #708]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	4ab0      	ldr	r2, [pc, #704]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ae0:	e00c      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	2102      	movs	r1, #2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 feef 	bl	800a8cc <RCCEx_PLL2_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009af2:	e003      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
      break;
 8009af8:	e000      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d109      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b02:	4ba6      	ldr	r3, [pc, #664]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	f023 0203 	bic.w	r2, r3, #3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	49a3      	ldr	r1, [pc, #652]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b14:	e001      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 8086 	beq.w	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b28:	4b9d      	ldr	r3, [pc, #628]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a9c      	ldr	r2, [pc, #624]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b34:	f7fb f978 	bl	8004e28 <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b3a:	e009      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b3c:	f7fb f974 	bl	8004e28 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b64      	cmp	r3, #100	; 0x64
 8009b48:	d902      	bls.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	75fb      	strb	r3, [r7, #23]
        break;
 8009b4e:	e005      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b50:	4b93      	ldr	r3, [pc, #588]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0ef      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d166      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b62:	4b8e      	ldr	r3, [pc, #568]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b6c:	4053      	eors	r3, r2
 8009b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d013      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b76:	4b89      	ldr	r3, [pc, #548]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b80:	4b86      	ldr	r3, [pc, #536]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b84:	4a85      	ldr	r2, [pc, #532]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b8c:	4b83      	ldr	r3, [pc, #524]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b90:	4a82      	ldr	r2, [pc, #520]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b98:	4a80      	ldr	r2, [pc, #512]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba8:	d115      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009baa:	f7fb f93d 	bl	8004e28 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bb0:	e00b      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7fb f939 	bl	8004e28 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d902      	bls.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	75fb      	strb	r3, [r7, #23]
            break;
 8009bc8:	e005      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bca:	4b74      	ldr	r3, [pc, #464]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0ed      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d126      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bea:	d10d      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009bec:	4b6b      	ldr	r3, [pc, #428]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bfa:	0919      	lsrs	r1, r3, #4
 8009bfc:	4b69      	ldr	r3, [pc, #420]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009bfe:	400b      	ands	r3, r1
 8009c00:	4966      	ldr	r1, [pc, #408]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	610b      	str	r3, [r1, #16]
 8009c06:	e005      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009c08:	4b64      	ldr	r3, [pc, #400]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4a63      	ldr	r2, [pc, #396]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c12:	6113      	str	r3, [r2, #16]
 8009c14:	4b61      	ldr	r3, [pc, #388]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c22:	495e      	ldr	r1, [pc, #376]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	670b      	str	r3, [r1, #112]	; 0x70
 8009c28:	e004      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	75bb      	strb	r3, [r7, #22]
 8009c2e:	e001      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d07e      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c44:	2b28      	cmp	r3, #40	; 0x28
 8009c46:	d867      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009c48:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009d1f 	.word	0x08009d1f
 8009c54:	08009d19 	.word	0x08009d19
 8009c58:	08009d19 	.word	0x08009d19
 8009c5c:	08009d19 	.word	0x08009d19
 8009c60:	08009d19 	.word	0x08009d19
 8009c64:	08009d19 	.word	0x08009d19
 8009c68:	08009d19 	.word	0x08009d19
 8009c6c:	08009d19 	.word	0x08009d19
 8009c70:	08009cf5 	.word	0x08009cf5
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009d19 	.word	0x08009d19
 8009c7c:	08009d19 	.word	0x08009d19
 8009c80:	08009d19 	.word	0x08009d19
 8009c84:	08009d19 	.word	0x08009d19
 8009c88:	08009d19 	.word	0x08009d19
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d07 	.word	0x08009d07
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009d19 	.word	0x08009d19
 8009c9c:	08009d19 	.word	0x08009d19
 8009ca0:	08009d19 	.word	0x08009d19
 8009ca4:	08009d19 	.word	0x08009d19
 8009ca8:	08009d19 	.word	0x08009d19
 8009cac:	08009d19 	.word	0x08009d19
 8009cb0:	08009d1f 	.word	0x08009d1f
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d19 	.word	0x08009d19
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	08009d19 	.word	0x08009d19
 8009cd0:	08009d1f 	.word	0x08009d1f
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d19 	.word	0x08009d19
 8009ce0:	08009d19 	.word	0x08009d19
 8009ce4:	08009d19 	.word	0x08009d19
 8009ce8:	08009d19 	.word	0x08009d19
 8009cec:	08009d19 	.word	0x08009d19
 8009cf0:	08009d1f 	.word	0x08009d1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fde6 	bl	800a8cc <RCCEx_PLL2_Config>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d04:	e00c      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3324      	adds	r3, #36	; 0x24
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fe8f 	bl	800aa30 <RCCEx_PLL3_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d16:	e003      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1c:	e000      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d32:	491a      	ldr	r1, [pc, #104]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	654b      	str	r3, [r1, #84]	; 0x54
 8009d38:	e001      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d03e      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d820      	bhi.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009da9 	.word	0x08009da9
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d83 	.word	0x08009d83
 8009d64:	08009da9 	.word	0x08009da9
 8009d68:	08009da9 	.word	0x08009da9
 8009d6c:	08009da9 	.word	0x08009da9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fda8 	bl	800a8cc <RCCEx_PLL2_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009d80:	e013      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3324      	adds	r3, #36	; 0x24
 8009d86:	2101      	movs	r1, #1
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fe51 	bl	800aa30 <RCCEx_PLL3_Config>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009d92:	e00a      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	75fb      	strb	r3, [r7, #23]
      break;
 8009d98:	e007      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009d9a:	bf00      	nop
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	58024800 	.word	0x58024800
 8009da4:	00ffffcf 	.word	0x00ffffcf
      break;
 8009da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d109      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009db0:	4b9f      	ldr	r3, [pc, #636]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db4:	f023 0207 	bic.w	r2, r3, #7
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbc:	499c      	ldr	r1, [pc, #624]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	654b      	str	r3, [r1, #84]	; 0x54
 8009dc2:	e001      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d039      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d820      	bhi.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009dde:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de4:	08009e27 	.word	0x08009e27
 8009de8:	08009dfd 	.word	0x08009dfd
 8009dec:	08009e0f 	.word	0x08009e0f
 8009df0:	08009e27 	.word	0x08009e27
 8009df4:	08009e27 	.word	0x08009e27
 8009df8:	08009e27 	.word	0x08009e27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	2101      	movs	r1, #1
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fd62 	bl	800a8cc <RCCEx_PLL2_Config>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e0c:	e00c      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3324      	adds	r3, #36	; 0x24
 8009e12:	2101      	movs	r1, #1
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fe0b 	bl	800aa30 <RCCEx_PLL3_Config>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e1e:	e003      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
      break;
 8009e24:	e000      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e2e:	4b80      	ldr	r3, [pc, #512]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e32:	f023 0207 	bic.w	r2, r3, #7
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3c:	497c      	ldr	r1, [pc, #496]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	658b      	str	r3, [r1, #88]	; 0x58
 8009e42:	e001      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d04b      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e5e:	d02e      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e64:	d828      	bhi.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e6a:	d02a      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e70:	d822      	bhi.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009e72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e76:	d026      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009e78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e7c:	d81c      	bhi.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e82:	d010      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e88:	d816      	bhi.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d01d      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e92:	d111      	bne.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fd16 	bl	800a8cc <RCCEx_PLL2_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ea4:	e012      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3324      	adds	r3, #36	; 0x24
 8009eaa:	2102      	movs	r1, #2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fdbf 	bl	800aa30 <RCCEx_PLL3_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009eb6:	e009      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	75fb      	strb	r3, [r7, #23]
      break;
 8009ebc:	e006      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009ebe:	bf00      	nop
 8009ec0:	e004      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009ec2:	bf00      	nop
 8009ec4:	e002      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009ec6:	bf00      	nop
 8009ec8:	e000      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ed2:	4b57      	ldr	r3, [pc, #348]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	4953      	ldr	r1, [pc, #332]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ee6:	e001      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d04b      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009efe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f02:	d02e      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009f04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f08:	d828      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0e:	d02a      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f14:	d822      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f1a:	d026      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f20:	d81c      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f26:	d010      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f2c:	d816      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d01d      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f36:	d111      	bne.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fcc4 	bl	800a8cc <RCCEx_PLL2_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009f48:	e012      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3324      	adds	r3, #36	; 0x24
 8009f4e:	2102      	movs	r1, #2
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fd6d 	bl	800aa30 <RCCEx_PLL3_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009f5a:	e009      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f60:	e006      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009f62:	bf00      	nop
 8009f64:	e004      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009f66:	bf00      	nop
 8009f68:	e002      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009f6a:	bf00      	nop
 8009f6c:	e000      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f84:	492a      	ldr	r1, [pc, #168]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	658b      	str	r3, [r1, #88]	; 0x58
 8009f8a:	e001      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d04d      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fa6:	d02e      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009fa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fac:	d828      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb2:	d02a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb8:	d822      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009fba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fbe:	d026      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009fc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fc4:	d81c      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fca:	d010      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd0:	d816      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01d      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fda:	d111      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 fc72 	bl	800a8cc <RCCEx_PLL2_Config>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009fec:	e012      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3324      	adds	r3, #36	; 0x24
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fd1b 	bl	800aa30 <RCCEx_PLL3_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ffe:	e009      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
      break;
 800a004:	e006      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a006:	bf00      	nop
 800a008:	e004      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a00a:	bf00      	nop
 800a00c:	e002      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a00e:	bf00      	nop
 800a010:	e000      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a012:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10c      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a028:	4901      	ldr	r1, [pc, #4]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	658b      	str	r3, [r1, #88]	; 0x58
 800a02e:	e003      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b00      	cmp	r3, #0
 800a042:	d018      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a04c:	d10a      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3324      	adds	r3, #36	; 0x24
 800a052:	2102      	movs	r1, #2
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fceb 	bl	800aa30 <RCCEx_PLL3_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a064:	4b8a      	ldr	r3, [pc, #552]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a070:	4987      	ldr	r1, [pc, #540]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a072:	4313      	orrs	r3, r2
 800a074:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0310 	and.w	r3, r3, #16
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01a      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a08c:	d10a      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3324      	adds	r3, #36	; 0x24
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fccb 	bl	800aa30 <RCCEx_PLL3_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0a4:	4b7a      	ldr	r3, [pc, #488]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b2:	4977      	ldr	r1, [pc, #476]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d034      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0ce:	d01d      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a0d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d4:	d817      	bhi.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0de:	d009      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a0e0:	e011      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fbef 	bl	800a8cc <RCCEx_PLL2_Config>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a0f2:	e00c      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3324      	adds	r3, #36	; 0x24
 800a0f8:	2102      	movs	r1, #2
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fc98 	bl	800aa30 <RCCEx_PLL3_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a104:	e003      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]
      break;
 800a10a:	e000      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a10c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a114:	4b5e      	ldr	r3, [pc, #376]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a122:	495b      	ldr	r1, [pc, #364]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a124:	4313      	orrs	r3, r2
 800a126:	658b      	str	r3, [r1, #88]	; 0x58
 800a128:	e001      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d033      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a144:	d01c      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a14a:	d816      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	d003      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a156:	d007      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a158:	e00f      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a15a:	4b4d      	ldr	r3, [pc, #308]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	4a4c      	ldr	r2, [pc, #304]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a166:	e00c      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3324      	adds	r3, #36	; 0x24
 800a16c:	2101      	movs	r1, #1
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fc5e 	bl	800aa30 <RCCEx_PLL3_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a178:	e003      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
      break;
 800a17e:	e000      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a180:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a188:	4b41      	ldr	r3, [pc, #260]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a18a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a196:	493e      	ldr	r1, [pc, #248]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	654b      	str	r3, [r1, #84]	; 0x54
 800a19c:	e001      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d029      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ba:	d007      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1bc:	e00f      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1be:	4b34      	ldr	r3, [pc, #208]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c2:	4a33      	ldr	r2, [pc, #204]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a1ca:	e00b      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	2102      	movs	r1, #2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fb7a 	bl	800a8cc <RCCEx_PLL2_Config>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a1dc:	e002      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f6:	4926      	ldr	r1, [pc, #152]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1fc:	e001      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3324      	adds	r3, #36	; 0x24
 800a212:	2102      	movs	r1, #2
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fc0b 	bl	800aa30 <RCCEx_PLL3_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d033      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a238:	d017      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a23a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a23e:	d811      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a244:	d013      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24a:	d80b      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d010      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a254:	d106      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a256:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	4a0d      	ldr	r2, [pc, #52]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a25c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a262:	e007      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	75fb      	strb	r3, [r7, #23]
      break;
 800a268:	e004      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a26a:	bf00      	nop
 800a26c:	e002      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a26e:	bf00      	nop
 800a270:	e000      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a272:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10c      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a27a:	4b05      	ldr	r3, [pc, #20]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a286:	4902      	ldr	r1, [pc, #8]	; (800a290 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	654b      	str	r3, [r1, #84]	; 0x54
 800a28c:	e004      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a28e:	bf00      	nop
 800a290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d008      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a2a4:	4b29      	ldr	r3, [pc, #164]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b0:	4926      	ldr	r1, [pc, #152]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d008      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a2c2:	4b22      	ldr	r3, [pc, #136]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2ce:	491f      	ldr	r1, [pc, #124]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a2e0:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	4a19      	ldr	r2, [pc, #100]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2ea:	6113      	str	r3, [r2, #16]
 800a2ec:	4b17      	ldr	r3, [pc, #92]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2f6:	4915      	ldr	r1, [pc, #84]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	da08      	bge.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a308:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a310:	490e      	ldr	r1, [pc, #56]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a312:	4313      	orrs	r3, r2
 800a314:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a322:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a330:	4906      	ldr	r1, [pc, #24]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a332:	4313      	orrs	r3, r2
 800a334:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a336:	7dbb      	ldrb	r3, [r7, #22]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	e000      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400

0800a350 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a354:	f7ff f8a6 	bl	80094a4 <HAL_RCC_GetHCLKFreq>
 800a358:	4602      	mov	r2, r0
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	091b      	lsrs	r3, r3, #4
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	4904      	ldr	r1, [pc, #16]	; (800a378 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a366:	5ccb      	ldrb	r3, [r1, r3]
 800a368:	f003 031f 	and.w	r3, r3, #31
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a370:	4618      	mov	r0, r3
 800a372:	bd80      	pop	{r7, pc}
 800a374:	58024400 	.word	0x58024400
 800a378:	0800eda0 	.word	0x0800eda0

0800a37c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a384:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a38e:	4b9f      	ldr	r3, [pc, #636]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a392:	0b1b      	lsrs	r3, r3, #12
 800a394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a398:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a39a:	4b9c      	ldr	r3, [pc, #624]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	091b      	lsrs	r3, r3, #4
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a3a6:	4b99      	ldr	r3, [pc, #612]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	08db      	lsrs	r3, r3, #3
 800a3ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	fb02 f303 	mul.w	r3, r2, r3
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8111 	beq.w	800a5ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	f000 8083 	beq.w	800a4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	f200 80a1 	bhi.w	800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d056      	beq.n	800a494 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a3e6:	e099      	b.n	800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3e8:	4b88      	ldr	r3, [pc, #544]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d02d      	beq.n	800a450 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3f4:	4b85      	ldr	r3, [pc, #532]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	08db      	lsrs	r3, r3, #3
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	4a84      	ldr	r2, [pc, #528]	; (800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a400:	fa22 f303 	lsr.w	r3, r2, r3
 800a404:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	ee07 3a90 	vmov	s15, r3
 800a40c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a41e:	4b7b      	ldr	r3, [pc, #492]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a432:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a44e:	e087      	b.n	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	ee07 3a90 	vmov	s15, r3
 800a456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a618 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a462:	4b6a      	ldr	r3, [pc, #424]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46a:	ee07 3a90 	vmov	s15, r3
 800a46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a472:	ed97 6a03 	vldr	s12, [r7, #12]
 800a476:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a492:	e065      	b.n	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a6:	4b59      	ldr	r3, [pc, #356]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4d6:	e043      	b.n	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ea:	4b48      	ldr	r3, [pc, #288]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a51a:	e021      	b.n	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a61c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52e:	4b37      	ldr	r3, [pc, #220]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a542:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a55e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a560:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	0a5b      	lsrs	r3, r3, #9
 800a566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a586:	ee17 2a90 	vmov	r2, s15
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a58e:	4b1f      	ldr	r3, [pc, #124]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b4:	ee17 2a90 	vmov	r2, s15
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a5bc:	4b13      	ldr	r3, [pc, #76]	; (800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c0:	0e1b      	lsrs	r3, r3, #24
 800a5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	ee17 2a90 	vmov	r2, s15
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a5ea:	e008      	b.n	800a5fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	609a      	str	r2, [r3, #8]
}
 800a5fe:	bf00      	nop
 800a600:	3724      	adds	r7, #36	; 0x24
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
 800a610:	03d09000 	.word	0x03d09000
 800a614:	46000000 	.word	0x46000000
 800a618:	4c742400 	.word	0x4c742400
 800a61c:	4a742400 	.word	0x4a742400
 800a620:	4af42400 	.word	0x4af42400

0800a624 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a624:	b480      	push	{r7}
 800a626:	b089      	sub	sp, #36	; 0x24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a62c:	4ba1      	ldr	r3, [pc, #644]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a630:	f003 0303 	and.w	r3, r3, #3
 800a634:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a636:	4b9f      	ldr	r3, [pc, #636]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63a:	0d1b      	lsrs	r3, r3, #20
 800a63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a640:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a642:	4b9c      	ldr	r3, [pc, #624]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a64e:	4b99      	ldr	r3, [pc, #612]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a652:	08db      	lsrs	r3, r3, #3
 800a654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 8111 	beq.w	800a894 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b02      	cmp	r3, #2
 800a676:	f000 8083 	beq.w	800a780 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	f200 80a1 	bhi.w	800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d056      	beq.n	800a73c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a68e:	e099      	b.n	800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a690:	4b88      	ldr	r3, [pc, #544]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d02d      	beq.n	800a6f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a69c:	4b85      	ldr	r3, [pc, #532]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	08db      	lsrs	r3, r3, #3
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	4a84      	ldr	r2, [pc, #528]	; (800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c6:	4b7b      	ldr	r3, [pc, #492]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a6f6:	e087      	b.n	800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a702:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70a:	4b6a      	ldr	r3, [pc, #424]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a71e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a73a:	e065      	b.n	800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a746:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74e:	4b59      	ldr	r3, [pc, #356]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a762:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a77e:	e043      	b.n	800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a792:	4b48      	ldr	r3, [pc, #288]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7c2:	e021      	b.n	800a808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d6:	4b37      	ldr	r3, [pc, #220]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a806:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a808:	4b2a      	ldr	r3, [pc, #168]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80c:	0a5b      	lsrs	r3, r3, #9
 800a80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a81e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a822:	edd7 6a07 	vldr	s13, [r7, #28]
 800a826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a82e:	ee17 2a90 	vmov	r2, s15
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a836:	4b1f      	ldr	r3, [pc, #124]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	0c1b      	lsrs	r3, r3, #16
 800a83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a840:	ee07 3a90 	vmov	s15, r3
 800a844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a84c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a850:	edd7 6a07 	vldr	s13, [r7, #28]
 800a854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a85c:	ee17 2a90 	vmov	r2, s15
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a864:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	0e1b      	lsrs	r3, r3, #24
 800a86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a87a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88a:	ee17 2a90 	vmov	r2, s15
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a892:	e008      	b.n	800a8a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	609a      	str	r2, [r3, #8]
}
 800a8a6:	bf00      	nop
 800a8a8:	3724      	adds	r7, #36	; 0x24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
 800a8b8:	03d09000 	.word	0x03d09000
 800a8bc:	46000000 	.word	0x46000000
 800a8c0:	4c742400 	.word	0x4c742400
 800a8c4:	4a742400 	.word	0x4a742400
 800a8c8:	4af42400 	.word	0x4af42400

0800a8cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8da:	4b53      	ldr	r3, [pc, #332]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	f003 0303 	and.w	r3, r3, #3
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d101      	bne.n	800a8ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e099      	b.n	800aa1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8ea:	4b4f      	ldr	r3, [pc, #316]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a4e      	ldr	r2, [pc, #312]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a8f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8f6:	f7fa fa97 	bl	8004e28 <HAL_GetTick>
 800a8fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8fc:	e008      	b.n	800a910 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a8fe:	f7fa fa93 	bl	8004e28 <HAL_GetTick>
 800a902:	4602      	mov	r2, r0
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d901      	bls.n	800a910 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e086      	b.n	800aa1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a910:	4b45      	ldr	r3, [pc, #276]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f0      	bne.n	800a8fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a91c:	4b42      	ldr	r3, [pc, #264]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	031b      	lsls	r3, r3, #12
 800a92a:	493f      	ldr	r1, [pc, #252]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	628b      	str	r3, [r1, #40]	; 0x28
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	3b01      	subs	r3, #1
 800a936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	3b01      	subs	r3, #1
 800a940:	025b      	lsls	r3, r3, #9
 800a942:	b29b      	uxth	r3, r3
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	041b      	lsls	r3, r3, #16
 800a94e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a952:	431a      	orrs	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	3b01      	subs	r3, #1
 800a95a:	061b      	lsls	r3, r3, #24
 800a95c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a960:	4931      	ldr	r1, [pc, #196]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a962:	4313      	orrs	r3, r2
 800a964:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a966:	4b30      	ldr	r3, [pc, #192]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	492d      	ldr	r1, [pc, #180]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a974:	4313      	orrs	r3, r2
 800a976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a978:	4b2b      	ldr	r3, [pc, #172]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	f023 0220 	bic.w	r2, r3, #32
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	4928      	ldr	r1, [pc, #160]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a986:	4313      	orrs	r3, r2
 800a988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a98a:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98e:	4a26      	ldr	r2, [pc, #152]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a990:	f023 0310 	bic.w	r3, r3, #16
 800a994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a996:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a99a:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <RCCEx_PLL2_Config+0x160>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	69d2      	ldr	r2, [r2, #28]
 800a9a2:	00d2      	lsls	r2, r2, #3
 800a9a4:	4920      	ldr	r1, [pc, #128]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a9aa:	4b1f      	ldr	r3, [pc, #124]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	4a1e      	ldr	r2, [pc, #120]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9b0:	f043 0310 	orr.w	r3, r3, #16
 800a9b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9bc:	4b1a      	ldr	r3, [pc, #104]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a19      	ldr	r2, [pc, #100]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9c8:	e00f      	b.n	800a9ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d106      	bne.n	800a9de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	4a14      	ldr	r2, [pc, #80]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a9dc:	e005      	b.n	800a9ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9de:	4b12      	ldr	r3, [pc, #72]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e2:	4a11      	ldr	r2, [pc, #68]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a0e      	ldr	r2, [pc, #56]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800a9f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f6:	f7fa fa17 	bl	8004e28 <HAL_GetTick>
 800a9fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9fc:	e008      	b.n	800aa10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a9fe:	f7fa fa13 	bl	8004e28 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e006      	b.n	800aa1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <RCCEx_PLL2_Config+0x15c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0f0      	beq.n	800a9fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	ffff0007 	.word	0xffff0007

0800aa30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa3e:	4b53      	ldr	r3, [pc, #332]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d101      	bne.n	800aa4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e099      	b.n	800ab82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa4e:	4b4f      	ldr	r3, [pc, #316]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a4e      	ldr	r2, [pc, #312]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa5a:	f7fa f9e5 	bl	8004e28 <HAL_GetTick>
 800aa5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa60:	e008      	b.n	800aa74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aa62:	f7fa f9e1 	bl	8004e28 <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d901      	bls.n	800aa74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e086      	b.n	800ab82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa74:	4b45      	ldr	r3, [pc, #276]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1f0      	bne.n	800aa62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa80:	4b42      	ldr	r3, [pc, #264]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	493f      	ldr	r1, [pc, #252]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	628b      	str	r3, [r1, #40]	; 0x28
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	025b      	lsls	r3, r3, #9
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	041b      	lsls	r3, r3, #16
 800aab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	061b      	lsls	r3, r3, #24
 800aac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aac4:	4931      	ldr	r1, [pc, #196]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaca:	4b30      	ldr	r3, [pc, #192]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	492d      	ldr	r1, [pc, #180]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aadc:	4b2b      	ldr	r3, [pc, #172]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	4928      	ldr	r1, [pc, #160]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aaee:	4b27      	ldr	r3, [pc, #156]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	4a26      	ldr	r2, [pc, #152]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aaf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aafa:	4b24      	ldr	r3, [pc, #144]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800aafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aafe:	4b24      	ldr	r3, [pc, #144]	; (800ab90 <RCCEx_PLL3_Config+0x160>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	69d2      	ldr	r2, [r2, #28]
 800ab06:	00d2      	lsls	r2, r2, #3
 800ab08:	4920      	ldr	r1, [pc, #128]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab0e:	4b1f      	ldr	r3, [pc, #124]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab12:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab20:	4b1a      	ldr	r3, [pc, #104]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	4a19      	ldr	r2, [pc, #100]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab2c:	e00f      	b.n	800ab4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d106      	bne.n	800ab42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab34:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	4a14      	ldr	r2, [pc, #80]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab40:	e005      	b.n	800ab4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	4a11      	ldr	r2, [pc, #68]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a0e      	ldr	r2, [pc, #56]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab5a:	f7fa f965 	bl	8004e28 <HAL_GetTick>
 800ab5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab60:	e008      	b.n	800ab74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab62:	f7fa f961 	bl	8004e28 <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d901      	bls.n	800ab74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e006      	b.n	800ab82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab74:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <RCCEx_PLL3_Config+0x15c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0f0      	beq.n	800ab62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	ffff0007 	.word	0xffff0007

0800ab94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e049      	b.n	800ac3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f9 fa52 	bl	8004064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3304      	adds	r3, #4
 800abd0:	4619      	mov	r1, r3
 800abd2:	4610      	mov	r0, r2
 800abd4:	f000 feb8 	bl	800b948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d001      	beq.n	800ac5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e05e      	b.n	800ad1a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f042 0201 	orr.w	r2, r2, #1
 800ac72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a2b      	ldr	r2, [pc, #172]	; (800ad28 <HAL_TIM_Base_Start_IT+0xe4>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d02c      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac86:	d027      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a27      	ldr	r2, [pc, #156]	; (800ad2c <HAL_TIM_Base_Start_IT+0xe8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d022      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a26      	ldr	r2, [pc, #152]	; (800ad30 <HAL_TIM_Base_Start_IT+0xec>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d01d      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a24      	ldr	r2, [pc, #144]	; (800ad34 <HAL_TIM_Base_Start_IT+0xf0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d018      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a23      	ldr	r2, [pc, #140]	; (800ad38 <HAL_TIM_Base_Start_IT+0xf4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d013      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a21      	ldr	r2, [pc, #132]	; (800ad3c <HAL_TIM_Base_Start_IT+0xf8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00e      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a20      	ldr	r2, [pc, #128]	; (800ad40 <HAL_TIM_Base_Start_IT+0xfc>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d009      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1e      	ldr	r2, [pc, #120]	; (800ad44 <HAL_TIM_Base_Start_IT+0x100>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d004      	beq.n	800acd8 <HAL_TIM_Base_Start_IT+0x94>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1d      	ldr	r2, [pc, #116]	; (800ad48 <HAL_TIM_Base_Start_IT+0x104>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d115      	bne.n	800ad04 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <HAL_TIM_Base_Start_IT+0x108>)
 800ace0:	4013      	ands	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b06      	cmp	r3, #6
 800ace8:	d015      	beq.n	800ad16 <HAL_TIM_Base_Start_IT+0xd2>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf0:	d011      	beq.n	800ad16 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f042 0201 	orr.w	r2, r2, #1
 800ad00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad02:	e008      	b.n	800ad16 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0201 	orr.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e000      	b.n	800ad18 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40000400 	.word	0x40000400
 800ad30:	40000800 	.word	0x40000800
 800ad34:	40000c00 	.word	0x40000c00
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40001800 	.word	0x40001800
 800ad40:	40014000 	.word	0x40014000
 800ad44:	4000e000 	.word	0x4000e000
 800ad48:	4000e400 	.word	0x4000e400
 800ad4c:	00010007 	.word	0x00010007

0800ad50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e049      	b.n	800adf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7f9 faac 	bl	80042d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4610      	mov	r0, r2
 800ad90:	f000 fdda 	bl	800b948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d109      	bne.n	800ae24 <HAL_TIM_PWM_Start+0x24>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	bf14      	ite	ne
 800ae1c:	2301      	movne	r3, #1
 800ae1e:	2300      	moveq	r3, #0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	e03c      	b.n	800ae9e <HAL_TIM_PWM_Start+0x9e>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d109      	bne.n	800ae3e <HAL_TIM_PWM_Start+0x3e>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	bf14      	ite	ne
 800ae36:	2301      	movne	r3, #1
 800ae38:	2300      	moveq	r3, #0
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	e02f      	b.n	800ae9e <HAL_TIM_PWM_Start+0x9e>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b08      	cmp	r3, #8
 800ae42:	d109      	bne.n	800ae58 <HAL_TIM_PWM_Start+0x58>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	bf14      	ite	ne
 800ae50:	2301      	movne	r3, #1
 800ae52:	2300      	moveq	r3, #0
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	e022      	b.n	800ae9e <HAL_TIM_PWM_Start+0x9e>
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b0c      	cmp	r3, #12
 800ae5c:	d109      	bne.n	800ae72 <HAL_TIM_PWM_Start+0x72>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	bf14      	ite	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	2300      	moveq	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	e015      	b.n	800ae9e <HAL_TIM_PWM_Start+0x9e>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b10      	cmp	r3, #16
 800ae76:	d109      	bne.n	800ae8c <HAL_TIM_PWM_Start+0x8c>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	bf14      	ite	ne
 800ae84:	2301      	movne	r3, #1
 800ae86:	2300      	moveq	r3, #0
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	e008      	b.n	800ae9e <HAL_TIM_PWM_Start+0x9e>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	bf14      	ite	ne
 800ae98:	2301      	movne	r3, #1
 800ae9a:	2300      	moveq	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e0ab      	b.n	800affe <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d104      	bne.n	800aeb6 <HAL_TIM_PWM_Start+0xb6>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeb4:	e023      	b.n	800aefe <HAL_TIM_PWM_Start+0xfe>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d104      	bne.n	800aec6 <HAL_TIM_PWM_Start+0xc6>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec4:	e01b      	b.n	800aefe <HAL_TIM_PWM_Start+0xfe>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d104      	bne.n	800aed6 <HAL_TIM_PWM_Start+0xd6>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed4:	e013      	b.n	800aefe <HAL_TIM_PWM_Start+0xfe>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b0c      	cmp	r3, #12
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_PWM_Start+0xe6>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee4:	e00b      	b.n	800aefe <HAL_TIM_PWM_Start+0xfe>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b10      	cmp	r3, #16
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_PWM_Start+0xf6>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aef4:	e003      	b.n	800aefe <HAL_TIM_PWM_Start+0xfe>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2201      	movs	r2, #1
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f001 f938 	bl	800c17c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a3d      	ldr	r2, [pc, #244]	; (800b008 <HAL_TIM_PWM_Start+0x208>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d013      	beq.n	800af3e <HAL_TIM_PWM_Start+0x13e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a3c      	ldr	r2, [pc, #240]	; (800b00c <HAL_TIM_PWM_Start+0x20c>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d00e      	beq.n	800af3e <HAL_TIM_PWM_Start+0x13e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a3a      	ldr	r2, [pc, #232]	; (800b010 <HAL_TIM_PWM_Start+0x210>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d009      	beq.n	800af3e <HAL_TIM_PWM_Start+0x13e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a39      	ldr	r2, [pc, #228]	; (800b014 <HAL_TIM_PWM_Start+0x214>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d004      	beq.n	800af3e <HAL_TIM_PWM_Start+0x13e>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a37      	ldr	r2, [pc, #220]	; (800b018 <HAL_TIM_PWM_Start+0x218>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d101      	bne.n	800af42 <HAL_TIM_PWM_Start+0x142>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <HAL_TIM_PWM_Start+0x144>
 800af42:	2300      	movs	r3, #0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d007      	beq.n	800af58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a2a      	ldr	r2, [pc, #168]	; (800b008 <HAL_TIM_PWM_Start+0x208>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d02c      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6a:	d027      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a2a      	ldr	r2, [pc, #168]	; (800b01c <HAL_TIM_PWM_Start+0x21c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d022      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a29      	ldr	r2, [pc, #164]	; (800b020 <HAL_TIM_PWM_Start+0x220>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d01d      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a27      	ldr	r2, [pc, #156]	; (800b024 <HAL_TIM_PWM_Start+0x224>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d018      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a1f      	ldr	r2, [pc, #124]	; (800b00c <HAL_TIM_PWM_Start+0x20c>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d013      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <HAL_TIM_PWM_Start+0x228>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00e      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a1b      	ldr	r2, [pc, #108]	; (800b010 <HAL_TIM_PWM_Start+0x210>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d009      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a1f      	ldr	r2, [pc, #124]	; (800b02c <HAL_TIM_PWM_Start+0x22c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d004      	beq.n	800afbc <HAL_TIM_PWM_Start+0x1bc>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a1e      	ldr	r2, [pc, #120]	; (800b030 <HAL_TIM_PWM_Start+0x230>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d115      	bne.n	800afe8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <HAL_TIM_PWM_Start+0x234>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b06      	cmp	r3, #6
 800afcc:	d015      	beq.n	800affa <HAL_TIM_PWM_Start+0x1fa>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd4:	d011      	beq.n	800affa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0201 	orr.w	r2, r2, #1
 800afe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe6:	e008      	b.n	800affa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f042 0201 	orr.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	e000      	b.n	800affc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	40010000 	.word	0x40010000
 800b00c:	40010400 	.word	0x40010400
 800b010:	40014000 	.word	0x40014000
 800b014:	40014400 	.word	0x40014400
 800b018:	40014800 	.word	0x40014800
 800b01c:	40000400 	.word	0x40000400
 800b020:	40000800 	.word	0x40000800
 800b024:	40000c00 	.word	0x40000c00
 800b028:	40001800 	.word	0x40001800
 800b02c:	4000e000 	.word	0x4000e000
 800b030:	4000e400 	.word	0x4000e400
 800b034:	00010007 	.word	0x00010007

0800b038 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e08f      	b.n	800b16c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	d106      	bne.n	800b066 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7f9 f845 	bl	80040f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6899      	ldr	r1, [r3, #8]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	4b3e      	ldr	r3, [pc, #248]	; (800b174 <HAL_TIM_Encoder_Init+0x13c>)
 800b07a:	400b      	ands	r3, r1
 800b07c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3304      	adds	r3, #4
 800b086:	4619      	mov	r1, r3
 800b088:	4610      	mov	r0, r2
 800b08a:	f000 fc5d 	bl	800b948 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4b31      	ldr	r3, [pc, #196]	; (800b178 <HAL_TIM_Encoder_Init+0x140>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	021b      	lsls	r3, r3, #8
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4b2b      	ldr	r3, [pc, #172]	; (800b17c <HAL_TIM_Encoder_Init+0x144>)
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	4b2a      	ldr	r3, [pc, #168]	; (800b180 <HAL_TIM_Encoder_Init+0x148>)
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	011a      	lsls	r2, r3, #4
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	031b      	lsls	r3, r3, #12
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b106:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b10e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	4313      	orrs	r3, r2
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	fffebff8 	.word	0xfffebff8
 800b178:	fffffcfc 	.word	0xfffffcfc
 800b17c:	fffff3f3 	.word	0xfffff3f3
 800b180:	ffff0f0f 	.word	0xffff0f0f

0800b184 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b194:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b19c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d110      	bne.n	800b1d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d102      	bne.n	800b1c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b1ba:	7b7b      	ldrb	r3, [r7, #13]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d001      	beq.n	800b1c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e069      	b.n	800b298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d4:	e031      	b.n	800b23a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d110      	bne.n	800b1fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d102      	bne.n	800b1e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b1e2:	7b3b      	ldrb	r3, [r7, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d001      	beq.n	800b1ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e055      	b.n	800b298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1fc:	e01d      	b.n	800b23a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d108      	bne.n	800b216 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d105      	bne.n	800b216 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b20a:	7b7b      	ldrb	r3, [r7, #13]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d102      	bne.n	800b216 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b210:	7b3b      	ldrb	r3, [r7, #12]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d001      	beq.n	800b21a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e03e      	b.n	800b298 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2202      	movs	r2, #2
 800b21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2202      	movs	r2, #2
 800b226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2202      	movs	r2, #2
 800b22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2202      	movs	r2, #2
 800b236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <HAL_TIM_Encoder_Start+0xc4>
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b04      	cmp	r3, #4
 800b244:	d008      	beq.n	800b258 <HAL_TIM_Encoder_Start+0xd4>
 800b246:	e00f      	b.n	800b268 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2201      	movs	r2, #1
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f000 ff93 	bl	800c17c <TIM_CCxChannelCmd>
      break;
 800b256:	e016      	b.n	800b286 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2201      	movs	r2, #1
 800b25e:	2104      	movs	r1, #4
 800b260:	4618      	mov	r0, r3
 800b262:	f000 ff8b 	bl	800c17c <TIM_CCxChannelCmd>
      break;
 800b266:	e00e      	b.n	800b286 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2201      	movs	r2, #1
 800b26e:	2100      	movs	r1, #0
 800b270:	4618      	mov	r0, r3
 800b272:	f000 ff83 	bl	800c17c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2201      	movs	r2, #1
 800b27c:	2104      	movs	r1, #4
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 ff7c 	bl	800c17c <TIM_CCxChannelCmd>
      break;
 800b284:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 0201 	orr.w	r2, r2, #1
 800b294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	f003 0302 	and.w	r3, r3, #2
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d122      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d11b      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f06f 0202 	mvn.w	r2, #2
 800b2cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fb12 	bl	800b90c <HAL_TIM_IC_CaptureCallback>
 800b2e8:	e005      	b.n	800b2f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb04 	bl	800b8f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fb15 	bl	800b920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b04      	cmp	r3, #4
 800b308:	d122      	bne.n	800b350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b04      	cmp	r3, #4
 800b316:	d11b      	bne.n	800b350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f06f 0204 	mvn.w	r2, #4
 800b320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fae8 	bl	800b90c <HAL_TIM_IC_CaptureCallback>
 800b33c:	e005      	b.n	800b34a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fada 	bl	800b8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 faeb 	bl	800b920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0308 	and.w	r3, r3, #8
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d122      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f003 0308 	and.w	r3, r3, #8
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d11b      	bne.n	800b3a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0208 	mvn.w	r2, #8
 800b374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2204      	movs	r2, #4
 800b37a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fabe 	bl	800b90c <HAL_TIM_IC_CaptureCallback>
 800b390:	e005      	b.n	800b39e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fab0 	bl	800b8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fac1 	bl	800b920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	f003 0310 	and.w	r3, r3, #16
 800b3ae:	2b10      	cmp	r3, #16
 800b3b0:	d122      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f003 0310 	and.w	r3, r3, #16
 800b3bc:	2b10      	cmp	r3, #16
 800b3be:	d11b      	bne.n	800b3f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0210 	mvn.w	r2, #16
 800b3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa94 	bl	800b90c <HAL_TIM_IC_CaptureCallback>
 800b3e4:	e005      	b.n	800b3f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fa86 	bl	800b8f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fa97 	bl	800b920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b01      	cmp	r3, #1
 800b404:	d10e      	bne.n	800b424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b01      	cmp	r3, #1
 800b412:	d107      	bne.n	800b424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f06f 0201 	mvn.w	r2, #1
 800b41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7f9 fa6a 	bl	80048f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42e:	2b80      	cmp	r3, #128	; 0x80
 800b430:	d10e      	bne.n	800b450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b43c:	2b80      	cmp	r3, #128	; 0x80
 800b43e:	d107      	bne.n	800b450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 f802 	bl	800c454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b45e:	d10e      	bne.n	800b47e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46a:	2b80      	cmp	r3, #128	; 0x80
 800b46c:	d107      	bne.n	800b47e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fff5 	bl	800c468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d10e      	bne.n	800b4aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b496:	2b40      	cmp	r3, #64	; 0x40
 800b498:	d107      	bne.n	800b4aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa45 	bl	800b934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	f003 0320 	and.w	r3, r3, #32
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	d10e      	bne.n	800b4d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f003 0320 	and.w	r3, r3, #32
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	d107      	bne.n	800b4d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f06f 0220 	mvn.w	r2, #32
 800b4ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 ffb5 	bl	800c440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e0ff      	b.n	800b6fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b14      	cmp	r3, #20
 800b50a:	f200 80f0 	bhi.w	800b6ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b50e:	a201      	add	r2, pc, #4	; (adr r2, 800b514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b514:	0800b569 	.word	0x0800b569
 800b518:	0800b6ef 	.word	0x0800b6ef
 800b51c:	0800b6ef 	.word	0x0800b6ef
 800b520:	0800b6ef 	.word	0x0800b6ef
 800b524:	0800b5a9 	.word	0x0800b5a9
 800b528:	0800b6ef 	.word	0x0800b6ef
 800b52c:	0800b6ef 	.word	0x0800b6ef
 800b530:	0800b6ef 	.word	0x0800b6ef
 800b534:	0800b5eb 	.word	0x0800b5eb
 800b538:	0800b6ef 	.word	0x0800b6ef
 800b53c:	0800b6ef 	.word	0x0800b6ef
 800b540:	0800b6ef 	.word	0x0800b6ef
 800b544:	0800b62b 	.word	0x0800b62b
 800b548:	0800b6ef 	.word	0x0800b6ef
 800b54c:	0800b6ef 	.word	0x0800b6ef
 800b550:	0800b6ef 	.word	0x0800b6ef
 800b554:	0800b66d 	.word	0x0800b66d
 800b558:	0800b6ef 	.word	0x0800b6ef
 800b55c:	0800b6ef 	.word	0x0800b6ef
 800b560:	0800b6ef 	.word	0x0800b6ef
 800b564:	0800b6ad 	.word	0x0800b6ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fa90 	bl	800ba94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699a      	ldr	r2, [r3, #24]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0208 	orr.w	r2, r2, #8
 800b582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	699a      	ldr	r2, [r3, #24]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0204 	bic.w	r2, r2, #4
 800b592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6999      	ldr	r1, [r3, #24]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	619a      	str	r2, [r3, #24]
      break;
 800b5a6:	e0a5      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fb00 	bl	800bbb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	699a      	ldr	r2, [r3, #24]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6999      	ldr	r1, [r3, #24]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	021a      	lsls	r2, r3, #8
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	619a      	str	r2, [r3, #24]
      break;
 800b5e8:	e084      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 fb69 	bl	800bcc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69da      	ldr	r2, [r3, #28]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f042 0208 	orr.w	r2, r2, #8
 800b604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	69da      	ldr	r2, [r3, #28]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f022 0204 	bic.w	r2, r2, #4
 800b614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	69d9      	ldr	r1, [r3, #28]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	691a      	ldr	r2, [r3, #16]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	61da      	str	r2, [r3, #28]
      break;
 800b628:	e064      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68b9      	ldr	r1, [r7, #8]
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fbd1 	bl	800bdd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	69da      	ldr	r2, [r3, #28]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69da      	ldr	r2, [r3, #28]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69d9      	ldr	r1, [r3, #28]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	021a      	lsls	r2, r3, #8
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	61da      	str	r2, [r3, #28]
      break;
 800b66a:	e043      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68b9      	ldr	r1, [r7, #8]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fc1a 	bl	800beac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0208 	orr.w	r2, r2, #8
 800b686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0204 	bic.w	r2, r2, #4
 800b696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	691a      	ldr	r2, [r3, #16]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6aa:	e023      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68b9      	ldr	r1, [r7, #8]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 fc5e 	bl	800bf74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	021a      	lsls	r2, r3, #8
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6ec:	e002      	b.n	800b6f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop

0800b708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_TIM_ConfigClockSource+0x1c>
 800b720:	2302      	movs	r3, #2
 800b722:	e0dc      	b.n	800b8de <HAL_TIM_ConfigClockSource+0x1d6>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2202      	movs	r2, #2
 800b730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	4b6a      	ldr	r3, [pc, #424]	; (800b8e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b740:	4013      	ands	r3, r2
 800b742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b74a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a64      	ldr	r2, [pc, #400]	; (800b8ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	f000 80a9 	beq.w	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b760:	4a62      	ldr	r2, [pc, #392]	; (800b8ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	f200 80ae 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b768:	4a61      	ldr	r2, [pc, #388]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	f000 80a1 	beq.w	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b770:	4a5f      	ldr	r2, [pc, #380]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b772:	4293      	cmp	r3, r2
 800b774:	f200 80a6 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b778:	4a5e      	ldr	r2, [pc, #376]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	f000 8099 	beq.w	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b780:	4a5c      	ldr	r2, [pc, #368]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b782:	4293      	cmp	r3, r2
 800b784:	f200 809e 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b788:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b78c:	f000 8091 	beq.w	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b790:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b794:	f200 8096 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b79c:	f000 8089 	beq.w	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7a4:	f200 808e 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ac:	d03e      	beq.n	800b82c <HAL_TIM_ConfigClockSource+0x124>
 800b7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b2:	f200 8087 	bhi.w	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ba:	f000 8086 	beq.w	800b8ca <HAL_TIM_ConfigClockSource+0x1c2>
 800b7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7c2:	d87f      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7c4:	2b70      	cmp	r3, #112	; 0x70
 800b7c6:	d01a      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0xf6>
 800b7c8:	2b70      	cmp	r3, #112	; 0x70
 800b7ca:	d87b      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7cc:	2b60      	cmp	r3, #96	; 0x60
 800b7ce:	d050      	beq.n	800b872 <HAL_TIM_ConfigClockSource+0x16a>
 800b7d0:	2b60      	cmp	r3, #96	; 0x60
 800b7d2:	d877      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7d4:	2b50      	cmp	r3, #80	; 0x50
 800b7d6:	d03c      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x14a>
 800b7d8:	2b50      	cmp	r3, #80	; 0x50
 800b7da:	d873      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7dc:	2b40      	cmp	r3, #64	; 0x40
 800b7de:	d058      	beq.n	800b892 <HAL_TIM_ConfigClockSource+0x18a>
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d86f      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7e4:	2b30      	cmp	r3, #48	; 0x30
 800b7e6:	d064      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7e8:	2b30      	cmp	r3, #48	; 0x30
 800b7ea:	d86b      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	d060      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f0:	2b20      	cmp	r3, #32
 800b7f2:	d867      	bhi.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d05c      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f8:	2b10      	cmp	r3, #16
 800b7fa:	d05a      	beq.n	800b8b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7fc:	e062      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6899      	ldr	r1, [r3, #8]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	f000 fc95 	bl	800c13c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	609a      	str	r2, [r3, #8]
      break;
 800b82a:	e04f      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	6899      	ldr	r1, [r3, #8]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f000 fc7e 	bl	800c13c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689a      	ldr	r2, [r3, #8]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b84e:	609a      	str	r2, [r3, #8]
      break;
 800b850:	e03c      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6859      	ldr	r1, [r3, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	461a      	mov	r2, r3
 800b860:	f000 fbee 	bl	800c040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2150      	movs	r1, #80	; 0x50
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fc48 	bl	800c100 <TIM_ITRx_SetConfig>
      break;
 800b870:	e02c      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6859      	ldr	r1, [r3, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	461a      	mov	r2, r3
 800b880:	f000 fc0d 	bl	800c09e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2160      	movs	r1, #96	; 0x60
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fc38 	bl	800c100 <TIM_ITRx_SetConfig>
      break;
 800b890:	e01c      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	6859      	ldr	r1, [r3, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f000 fbce 	bl	800c040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2140      	movs	r1, #64	; 0x40
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fc28 	bl	800c100 <TIM_ITRx_SetConfig>
      break;
 800b8b0:	e00c      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4610      	mov	r0, r2
 800b8be:	f000 fc1f 	bl	800c100 <TIM_ITRx_SetConfig>
      break;
 800b8c2:	e003      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c8:	e000      	b.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b8ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	ffceff88 	.word	0xffceff88
 800b8ec:	00100040 	.word	0x00100040
 800b8f0:	00100030 	.word	0x00100030
 800b8f4:	00100020 	.word	0x00100020

0800b8f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a44      	ldr	r2, [pc, #272]	; (800ba6c <TIM_Base_SetConfig+0x124>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d013      	beq.n	800b988 <TIM_Base_SetConfig+0x40>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b966:	d00f      	beq.n	800b988 <TIM_Base_SetConfig+0x40>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a41      	ldr	r2, [pc, #260]	; (800ba70 <TIM_Base_SetConfig+0x128>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d00b      	beq.n	800b988 <TIM_Base_SetConfig+0x40>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a40      	ldr	r2, [pc, #256]	; (800ba74 <TIM_Base_SetConfig+0x12c>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d007      	beq.n	800b988 <TIM_Base_SetConfig+0x40>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a3f      	ldr	r2, [pc, #252]	; (800ba78 <TIM_Base_SetConfig+0x130>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d003      	beq.n	800b988 <TIM_Base_SetConfig+0x40>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a3e      	ldr	r2, [pc, #248]	; (800ba7c <TIM_Base_SetConfig+0x134>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d108      	bne.n	800b99a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b98e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a33      	ldr	r2, [pc, #204]	; (800ba6c <TIM_Base_SetConfig+0x124>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d027      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a8:	d023      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a30      	ldr	r2, [pc, #192]	; (800ba70 <TIM_Base_SetConfig+0x128>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d01f      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ba74 <TIM_Base_SetConfig+0x12c>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d01b      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a2e      	ldr	r2, [pc, #184]	; (800ba78 <TIM_Base_SetConfig+0x130>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d017      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2d      	ldr	r2, [pc, #180]	; (800ba7c <TIM_Base_SetConfig+0x134>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d013      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a2c      	ldr	r2, [pc, #176]	; (800ba80 <TIM_Base_SetConfig+0x138>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00f      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2b      	ldr	r2, [pc, #172]	; (800ba84 <TIM_Base_SetConfig+0x13c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00b      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <TIM_Base_SetConfig+0x140>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d007      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a29      	ldr	r2, [pc, #164]	; (800ba8c <TIM_Base_SetConfig+0x144>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d003      	beq.n	800b9f2 <TIM_Base_SetConfig+0xaa>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a28      	ldr	r2, [pc, #160]	; (800ba90 <TIM_Base_SetConfig+0x148>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d108      	bne.n	800ba04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	689a      	ldr	r2, [r3, #8]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <TIM_Base_SetConfig+0x124>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d00f      	beq.n	800ba50 <TIM_Base_SetConfig+0x108>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a12      	ldr	r2, [pc, #72]	; (800ba7c <TIM_Base_SetConfig+0x134>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d00b      	beq.n	800ba50 <TIM_Base_SetConfig+0x108>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <TIM_Base_SetConfig+0x138>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d007      	beq.n	800ba50 <TIM_Base_SetConfig+0x108>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <TIM_Base_SetConfig+0x13c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d003      	beq.n	800ba50 <TIM_Base_SetConfig+0x108>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a0f      	ldr	r2, [pc, #60]	; (800ba88 <TIM_Base_SetConfig+0x140>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d103      	bne.n	800ba58 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	691a      	ldr	r2, [r3, #16]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	615a      	str	r2, [r3, #20]
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	40010000 	.word	0x40010000
 800ba70:	40000400 	.word	0x40000400
 800ba74:	40000800 	.word	0x40000800
 800ba78:	40000c00 	.word	0x40000c00
 800ba7c:	40010400 	.word	0x40010400
 800ba80:	40014000 	.word	0x40014000
 800ba84:	40014400 	.word	0x40014400
 800ba88:	40014800 	.word	0x40014800
 800ba8c:	4000e000 	.word	0x4000e000
 800ba90:	4000e400 	.word	0x4000e400

0800ba94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	f023 0201 	bic.w	r2, r3, #1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4b37      	ldr	r3, [pc, #220]	; (800bb9c <TIM_OC1_SetConfig+0x108>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f023 0302 	bic.w	r3, r3, #2
 800badc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a2d      	ldr	r2, [pc, #180]	; (800bba0 <TIM_OC1_SetConfig+0x10c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00f      	beq.n	800bb10 <TIM_OC1_SetConfig+0x7c>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a2c      	ldr	r2, [pc, #176]	; (800bba4 <TIM_OC1_SetConfig+0x110>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00b      	beq.n	800bb10 <TIM_OC1_SetConfig+0x7c>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a2b      	ldr	r2, [pc, #172]	; (800bba8 <TIM_OC1_SetConfig+0x114>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d007      	beq.n	800bb10 <TIM_OC1_SetConfig+0x7c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a2a      	ldr	r2, [pc, #168]	; (800bbac <TIM_OC1_SetConfig+0x118>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d003      	beq.n	800bb10 <TIM_OC1_SetConfig+0x7c>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a29      	ldr	r2, [pc, #164]	; (800bbb0 <TIM_OC1_SetConfig+0x11c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d10c      	bne.n	800bb2a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f023 0308 	bic.w	r3, r3, #8
 800bb16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f023 0304 	bic.w	r3, r3, #4
 800bb28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a1c      	ldr	r2, [pc, #112]	; (800bba0 <TIM_OC1_SetConfig+0x10c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00f      	beq.n	800bb52 <TIM_OC1_SetConfig+0xbe>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a1b      	ldr	r2, [pc, #108]	; (800bba4 <TIM_OC1_SetConfig+0x110>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00b      	beq.n	800bb52 <TIM_OC1_SetConfig+0xbe>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1a      	ldr	r2, [pc, #104]	; (800bba8 <TIM_OC1_SetConfig+0x114>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d007      	beq.n	800bb52 <TIM_OC1_SetConfig+0xbe>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a19      	ldr	r2, [pc, #100]	; (800bbac <TIM_OC1_SetConfig+0x118>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d003      	beq.n	800bb52 <TIM_OC1_SetConfig+0xbe>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a18      	ldr	r2, [pc, #96]	; (800bbb0 <TIM_OC1_SetConfig+0x11c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d111      	bne.n	800bb76 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	621a      	str	r2, [r3, #32]
}
 800bb90:	bf00      	nop
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	fffeff8f 	.word	0xfffeff8f
 800bba0:	40010000 	.word	0x40010000
 800bba4:	40010400 	.word	0x40010400
 800bba8:	40014000 	.word	0x40014000
 800bbac:	40014400 	.word	0x40014400
 800bbb0:	40014800 	.word	0x40014800

0800bbb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	f023 0210 	bic.w	r2, r3, #16
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4b34      	ldr	r3, [pc, #208]	; (800bcb0 <TIM_OC2_SetConfig+0xfc>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	f023 0320 	bic.w	r3, r3, #32
 800bbfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a29      	ldr	r2, [pc, #164]	; (800bcb4 <TIM_OC2_SetConfig+0x100>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d003      	beq.n	800bc1c <TIM_OC2_SetConfig+0x68>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a28      	ldr	r2, [pc, #160]	; (800bcb8 <TIM_OC2_SetConfig+0x104>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d10d      	bne.n	800bc38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	011b      	lsls	r3, r3, #4
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a1e      	ldr	r2, [pc, #120]	; (800bcb4 <TIM_OC2_SetConfig+0x100>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00f      	beq.n	800bc60 <TIM_OC2_SetConfig+0xac>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a1d      	ldr	r2, [pc, #116]	; (800bcb8 <TIM_OC2_SetConfig+0x104>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d00b      	beq.n	800bc60 <TIM_OC2_SetConfig+0xac>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a1c      	ldr	r2, [pc, #112]	; (800bcbc <TIM_OC2_SetConfig+0x108>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d007      	beq.n	800bc60 <TIM_OC2_SetConfig+0xac>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a1b      	ldr	r2, [pc, #108]	; (800bcc0 <TIM_OC2_SetConfig+0x10c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <TIM_OC2_SetConfig+0xac>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <TIM_OC2_SetConfig+0x110>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d113      	bne.n	800bc88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	621a      	str	r2, [r3, #32]
}
 800bca2:	bf00      	nop
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	feff8fff 	.word	0xfeff8fff
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	40010400 	.word	0x40010400
 800bcbc:	40014000 	.word	0x40014000
 800bcc0:	40014400 	.word	0x40014400
 800bcc4:	40014800 	.word	0x40014800

0800bcc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4b33      	ldr	r3, [pc, #204]	; (800bdc0 <TIM_OC3_SetConfig+0xf8>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0303 	bic.w	r3, r3, #3
 800bcfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	021b      	lsls	r3, r3, #8
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a28      	ldr	r2, [pc, #160]	; (800bdc4 <TIM_OC3_SetConfig+0xfc>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d003      	beq.n	800bd2e <TIM_OC3_SetConfig+0x66>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a27      	ldr	r2, [pc, #156]	; (800bdc8 <TIM_OC3_SetConfig+0x100>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d10d      	bne.n	800bd4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a1d      	ldr	r2, [pc, #116]	; (800bdc4 <TIM_OC3_SetConfig+0xfc>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00f      	beq.n	800bd72 <TIM_OC3_SetConfig+0xaa>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a1c      	ldr	r2, [pc, #112]	; (800bdc8 <TIM_OC3_SetConfig+0x100>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00b      	beq.n	800bd72 <TIM_OC3_SetConfig+0xaa>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a1b      	ldr	r2, [pc, #108]	; (800bdcc <TIM_OC3_SetConfig+0x104>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d007      	beq.n	800bd72 <TIM_OC3_SetConfig+0xaa>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a1a      	ldr	r2, [pc, #104]	; (800bdd0 <TIM_OC3_SetConfig+0x108>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d003      	beq.n	800bd72 <TIM_OC3_SetConfig+0xaa>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a19      	ldr	r2, [pc, #100]	; (800bdd4 <TIM_OC3_SetConfig+0x10c>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d113      	bne.n	800bd9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	011b      	lsls	r3, r3, #4
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	621a      	str	r2, [r3, #32]
}
 800bdb4:	bf00      	nop
 800bdb6:	371c      	adds	r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	fffeff8f 	.word	0xfffeff8f
 800bdc4:	40010000 	.word	0x40010000
 800bdc8:	40010400 	.word	0x40010400
 800bdcc:	40014000 	.word	0x40014000
 800bdd0:	40014400 	.word	0x40014400
 800bdd4:	40014800 	.word	0x40014800

0800bdd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4b24      	ldr	r3, [pc, #144]	; (800be94 <TIM_OC4_SetConfig+0xbc>)
 800be04:	4013      	ands	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	021b      	lsls	r3, r3, #8
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	4313      	orrs	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	031b      	lsls	r3, r3, #12
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a19      	ldr	r2, [pc, #100]	; (800be98 <TIM_OC4_SetConfig+0xc0>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d00f      	beq.n	800be58 <TIM_OC4_SetConfig+0x80>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a18      	ldr	r2, [pc, #96]	; (800be9c <TIM_OC4_SetConfig+0xc4>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d00b      	beq.n	800be58 <TIM_OC4_SetConfig+0x80>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a17      	ldr	r2, [pc, #92]	; (800bea0 <TIM_OC4_SetConfig+0xc8>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d007      	beq.n	800be58 <TIM_OC4_SetConfig+0x80>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a16      	ldr	r2, [pc, #88]	; (800bea4 <TIM_OC4_SetConfig+0xcc>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d003      	beq.n	800be58 <TIM_OC4_SetConfig+0x80>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a15      	ldr	r2, [pc, #84]	; (800bea8 <TIM_OC4_SetConfig+0xd0>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d109      	bne.n	800be6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	019b      	lsls	r3, r3, #6
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	4313      	orrs	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685a      	ldr	r2, [r3, #4]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	621a      	str	r2, [r3, #32]
}
 800be86:	bf00      	nop
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	feff8fff 	.word	0xfeff8fff
 800be98:	40010000 	.word	0x40010000
 800be9c:	40010400 	.word	0x40010400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40014400 	.word	0x40014400
 800bea8:	40014800 	.word	0x40014800

0800beac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	4b21      	ldr	r3, [pc, #132]	; (800bf5c <TIM_OC5_SetConfig+0xb0>)
 800bed8:	4013      	ands	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800beec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	041b      	lsls	r3, r3, #16
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a18      	ldr	r2, [pc, #96]	; (800bf60 <TIM_OC5_SetConfig+0xb4>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d00f      	beq.n	800bf22 <TIM_OC5_SetConfig+0x76>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a17      	ldr	r2, [pc, #92]	; (800bf64 <TIM_OC5_SetConfig+0xb8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00b      	beq.n	800bf22 <TIM_OC5_SetConfig+0x76>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a16      	ldr	r2, [pc, #88]	; (800bf68 <TIM_OC5_SetConfig+0xbc>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d007      	beq.n	800bf22 <TIM_OC5_SetConfig+0x76>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a15      	ldr	r2, [pc, #84]	; (800bf6c <TIM_OC5_SetConfig+0xc0>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d003      	beq.n	800bf22 <TIM_OC5_SetConfig+0x76>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a14      	ldr	r2, [pc, #80]	; (800bf70 <TIM_OC5_SetConfig+0xc4>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d109      	bne.n	800bf36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	021b      	lsls	r3, r3, #8
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	621a      	str	r2, [r3, #32]
}
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	fffeff8f 	.word	0xfffeff8f
 800bf60:	40010000 	.word	0x40010000
 800bf64:	40010400 	.word	0x40010400
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800

0800bf74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4b22      	ldr	r3, [pc, #136]	; (800c028 <TIM_OC6_SetConfig+0xb4>)
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	051b      	lsls	r3, r3, #20
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a19      	ldr	r2, [pc, #100]	; (800c02c <TIM_OC6_SetConfig+0xb8>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d00f      	beq.n	800bfec <TIM_OC6_SetConfig+0x78>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a18      	ldr	r2, [pc, #96]	; (800c030 <TIM_OC6_SetConfig+0xbc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d00b      	beq.n	800bfec <TIM_OC6_SetConfig+0x78>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a17      	ldr	r2, [pc, #92]	; (800c034 <TIM_OC6_SetConfig+0xc0>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d007      	beq.n	800bfec <TIM_OC6_SetConfig+0x78>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a16      	ldr	r2, [pc, #88]	; (800c038 <TIM_OC6_SetConfig+0xc4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d003      	beq.n	800bfec <TIM_OC6_SetConfig+0x78>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a15      	ldr	r2, [pc, #84]	; (800c03c <TIM_OC6_SetConfig+0xc8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d109      	bne.n	800c000 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bff2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	029b      	lsls	r3, r3, #10
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	feff8fff 	.word	0xfeff8fff
 800c02c:	40010000 	.word	0x40010000
 800c030:	40010400 	.word	0x40010400
 800c034:	40014000 	.word	0x40014000
 800c038:	40014400 	.word	0x40014400
 800c03c:	40014800 	.word	0x40014800

0800c040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	f023 0201 	bic.w	r2, r3, #1
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	011b      	lsls	r3, r3, #4
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4313      	orrs	r3, r2
 800c074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f023 030a 	bic.w	r3, r3, #10
 800c07c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	4313      	orrs	r3, r2
 800c084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	621a      	str	r2, [r3, #32]
}
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b087      	sub	sp, #28
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	f023 0210 	bic.w	r2, r3, #16
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	031b      	lsls	r3, r3, #12
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c0da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	621a      	str	r2, [r3, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
	...

0800c100 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	4b09      	ldr	r3, [pc, #36]	; (800c138 <TIM_ITRx_SetConfig+0x38>)
 800c114:	4013      	ands	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	f043 0307 	orr.w	r3, r3, #7
 800c122:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	609a      	str	r2, [r3, #8]
}
 800c12a:	bf00      	nop
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	ffcfff8f 	.word	0xffcfff8f

0800c13c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	021a      	lsls	r2, r3, #8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	431a      	orrs	r2, r3
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	4313      	orrs	r3, r2
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	4313      	orrs	r3, r2
 800c168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	609a      	str	r2, [r3, #8]
}
 800c170:	bf00      	nop
 800c172:	371c      	adds	r7, #28
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f003 031f 	and.w	r3, r3, #31
 800c18e:	2201      	movs	r2, #1
 800c190:	fa02 f303 	lsl.w	r3, r2, r3
 800c194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a1a      	ldr	r2, [r3, #32]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	43db      	mvns	r3, r3
 800c19e:	401a      	ands	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6a1a      	ldr	r2, [r3, #32]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f003 031f 	and.w	r3, r3, #31
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	621a      	str	r2, [r3, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d101      	bne.n	800c1e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e077      	b.n	800c2d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a35      	ldr	r2, [pc, #212]	; (800c2dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d004      	beq.n	800c214 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a34      	ldr	r2, [pc, #208]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d108      	bne.n	800c226 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c21a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c22c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	4313      	orrs	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a25      	ldr	r2, [pc, #148]	; (800c2dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d02c      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c252:	d027      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a22      	ldr	r2, [pc, #136]	; (800c2e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d022      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a21      	ldr	r2, [pc, #132]	; (800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d01d      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a1f      	ldr	r2, [pc, #124]	; (800c2ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d018      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a1a      	ldr	r2, [pc, #104]	; (800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d013      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a1b      	ldr	r2, [pc, #108]	; (800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d00e      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a1a      	ldr	r2, [pc, #104]	; (800c2f4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d009      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a18      	ldr	r2, [pc, #96]	; (800c2f8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d004      	beq.n	800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a17      	ldr	r2, [pc, #92]	; (800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d10c      	bne.n	800c2be <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	40010000 	.word	0x40010000
 800c2e0:	40010400 	.word	0x40010400
 800c2e4:	40000400 	.word	0x40000400
 800c2e8:	40000800 	.word	0x40000800
 800c2ec:	40000c00 	.word	0x40000c00
 800c2f0:	40001800 	.word	0x40001800
 800c2f4:	40014000 	.word	0x40014000
 800c2f8:	4000e000 	.word	0x4000e000
 800c2fc:	4000e400 	.word	0x4000e400

0800c300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c318:	2302      	movs	r3, #2
 800c31a:	e087      	b.n	800c42c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4313      	orrs	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	4313      	orrs	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	4313      	orrs	r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c382:	4313      	orrs	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	041b      	lsls	r3, r3, #16
 800c392:	4313      	orrs	r3, r2
 800c394:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a27      	ldr	r2, [pc, #156]	; (800c438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d004      	beq.n	800c3aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a25      	ldr	r2, [pc, #148]	; (800c43c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d106      	bne.n	800c3b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a1d      	ldr	r2, [pc, #116]	; (800c43c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d126      	bne.n	800c41a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d6:	051b      	lsls	r3, r3, #20
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a0e      	ldr	r2, [pc, #56]	; (800c438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d004      	beq.n	800c40c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a0d      	ldr	r2, [pc, #52]	; (800c43c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d106      	bne.n	800c41a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	4313      	orrs	r3, r2
 800c418:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	40010000 	.word	0x40010000
 800c43c:	40010400 	.word	0x40010400

0800c440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e042      	b.n	800c514 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7f7 ffd7 	bl	8004454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2224      	movs	r2, #36	; 0x24
 800c4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f022 0201 	bic.w	r2, r2, #1
 800c4bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fd0e 	bl	800cee0 <UART_SetConfig>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d101      	bne.n	800c4ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e022      	b.n	800c514 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fb6e 	bl	800dbb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	689a      	ldr	r2, [r3, #8]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f001 fbf5 	bl	800dcfc <UART_CheckIdleState>
 800c512:	4603      	mov	r3, r0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e02e      	b.n	800c58c <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2224      	movs	r2, #36	; 0x24
 800c532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f022 0201 	bic.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2200      	movs	r2, #0
 800c554:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2200      	movs	r2, #0
 800c55c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7f8 f860 	bl	8004624 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08a      	sub	sp, #40	; 0x28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5a8:	2b20      	cmp	r3, #32
 800c5aa:	d17a      	bne.n	800c6a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d002      	beq.n	800c5b8 <HAL_UART_Transmit_DMA+0x24>
 800c5b2:	88fb      	ldrh	r3, [r7, #6]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e073      	b.n	800c6a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d101      	bne.n	800c5ca <HAL_UART_Transmit_DMA+0x36>
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	e06c      	b.n	800c6a4 <HAL_UART_Transmit_DMA+0x110>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	88fa      	ldrh	r2, [r7, #6]
 800c5e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2221      	movs	r2, #33	; 0x21
 800c5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02c      	beq.n	800c65a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c604:	4a29      	ldr	r2, [pc, #164]	; (800c6ac <HAL_UART_Transmit_DMA+0x118>)
 800c606:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c60c:	4a28      	ldr	r2, [pc, #160]	; (800c6b0 <HAL_UART_Transmit_DMA+0x11c>)
 800c60e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c614:	4a27      	ldr	r2, [pc, #156]	; (800c6b4 <HAL_UART_Transmit_DMA+0x120>)
 800c616:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c61c:	2200      	movs	r2, #0
 800c61e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c628:	4619      	mov	r1, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3328      	adds	r3, #40	; 0x28
 800c630:	461a      	mov	r2, r3
 800c632:	88fb      	ldrh	r3, [r7, #6]
 800c634:	f7f9 fa56 	bl	8005ae4 <HAL_DMA_Start_IT>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00d      	beq.n	800c65a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2210      	movs	r2, #16
 800c642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2220      	movs	r2, #32
 800c652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	e024      	b.n	800c6a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2240      	movs	r2, #64	; 0x40
 800c660:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3308      	adds	r3, #8
 800c670:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	613b      	str	r3, [r7, #16]
   return(result);
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3308      	adds	r3, #8
 800c688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68a:	623a      	str	r2, [r7, #32]
 800c68c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68e:	69f9      	ldr	r1, [r7, #28]
 800c690:	6a3a      	ldr	r2, [r7, #32]
 800c692:	e841 2300 	strex	r3, r2, [r1]
 800c696:	61bb      	str	r3, [r7, #24]
   return(result);
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1e5      	bne.n	800c66a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e000      	b.n	800c6a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c6a2:	2302      	movs	r3, #2
  }
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3728      	adds	r7, #40	; 0x28
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	0800e1c5 	.word	0x0800e1c5
 800c6b0:	0800e25b 	.word	0x0800e25b
 800c6b4:	0800e3d1 	.word	0x0800e3d1

0800c6b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08a      	sub	sp, #40	; 0x28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6cc:	2b20      	cmp	r3, #32
 800c6ce:	d142      	bne.n	800c756 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <HAL_UART_Receive_DMA+0x24>
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d101      	bne.n	800c6e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e03b      	b.n	800c758 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d101      	bne.n	800c6ee <HAL_UART_Receive_DMA+0x36>
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	e034      	b.n	800c758 <HAL_UART_Receive_DMA+0xa0>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a17      	ldr	r2, [pc, #92]	; (800c760 <HAL_UART_Receive_DMA+0xa8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d01f      	beq.n	800c746 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d018      	beq.n	800c746 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	613b      	str	r3, [r7, #16]
   return(result);
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	623b      	str	r3, [r7, #32]
 800c734:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	69f9      	ldr	r1, [r7, #28]
 800c738:	6a3a      	ldr	r2, [r7, #32]
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e6      	bne.n	800c714 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c746:	88fb      	ldrh	r3, [r7, #6]
 800c748:	461a      	mov	r2, r3
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f001 fbe9 	bl	800df24 <UART_Start_Receive_DMA>
 800c752:	4603      	mov	r3, r0
 800c754:	e000      	b.n	800c758 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c756:	2302      	movs	r3, #2
  }
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3728      	adds	r7, #40	; 0x28
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	58000c00 	.word	0x58000c00

0800c764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b0ba      	sub	sp, #232	; 0xe8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c78a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c78e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c792:	4013      	ands	r3, r2
 800c794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d11b      	bne.n	800c7d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d015      	beq.n	800c7d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d009      	beq.n	800c7d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 835a 	beq.w	800ce82 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	4798      	blx	r3
      }
      return;
 800c7d6:	e354      	b.n	800ce82 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c7d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 811f 	beq.w	800ca20 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c7e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c7e6:	4b8b      	ldr	r3, [pc, #556]	; (800ca14 <HAL_UART_IRQHandler+0x2b0>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c7ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c7f2:	4b89      	ldr	r3, [pc, #548]	; (800ca18 <HAL_UART_IRQHandler+0x2b4>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 8112 	beq.w	800ca20 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c800:	f003 0301 	and.w	r3, r3, #1
 800c804:	2b00      	cmp	r3, #0
 800c806:	d011      	beq.n	800c82c <HAL_UART_IRQHandler+0xc8>
 800c808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2201      	movs	r2, #1
 800c81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c822:	f043 0201 	orr.w	r2, r3, #1
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b00      	cmp	r3, #0
 800c836:	d011      	beq.n	800c85c <HAL_UART_IRQHandler+0xf8>
 800c838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2202      	movs	r2, #2
 800c84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c852:	f043 0204 	orr.w	r2, r3, #4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c860:	f003 0304 	and.w	r3, r3, #4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d011      	beq.n	800c88c <HAL_UART_IRQHandler+0x128>
 800c868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2204      	movs	r2, #4
 800c87a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c882:	f043 0202 	orr.w	r2, r3, #2
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c890:	f003 0308 	and.w	r3, r3, #8
 800c894:	2b00      	cmp	r3, #0
 800c896:	d017      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c89c:	f003 0320 	and.w	r3, r3, #32
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c8a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c8a8:	4b5a      	ldr	r3, [pc, #360]	; (800ca14 <HAL_UART_IRQHandler+0x2b0>)
 800c8aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2208      	movs	r2, #8
 800c8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8be:	f043 0208 	orr.w	r2, r3, #8
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d012      	beq.n	800c8fa <HAL_UART_IRQHandler+0x196>
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00c      	beq.n	800c8fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8f0:	f043 0220 	orr.w	r2, r3, #32
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 82c0 	beq.w	800ce86 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c90a:	f003 0320 	and.w	r3, r3, #32
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d013      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c916:	f003 0320 	and.w	r3, r3, #32
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d105      	bne.n	800c92a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c91e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c94e:	2b40      	cmp	r3, #64	; 0x40
 800c950:	d005      	beq.n	800c95e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c956:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d04f      	beq.n	800c9fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 fbca 	bl	800e0f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d141      	bne.n	800c9f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c98c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3308      	adds	r3, #8
 800c99a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c99e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c9a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c9ae:	e841 2300 	strex	r3, r2, [r1]
 800c9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1d9      	bne.n	800c972 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d013      	beq.n	800c9ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ca:	4a14      	ldr	r2, [pc, #80]	; (800ca1c <HAL_UART_IRQHandler+0x2b8>)
 800c9cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7f9 fe0e 	bl	80065f4 <HAL_DMA_Abort_IT>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d017      	beq.n	800ca0e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ec:	e00f      	b.n	800ca0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f6 fb84 	bl	80030fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9f4:	e00b      	b.n	800ca0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f6 fb80 	bl	80030fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	e007      	b.n	800ca0e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7f6 fb7c 	bl	80030fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ca0c:	e23b      	b.n	800ce86 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca0e:	bf00      	nop
    return;
 800ca10:	e239      	b.n	800ce86 <HAL_UART_IRQHandler+0x722>
 800ca12:	bf00      	nop
 800ca14:	10000001 	.word	0x10000001
 800ca18:	04000120 	.word	0x04000120
 800ca1c:	0800e451 	.word	0x0800e451

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	f040 81ce 	bne.w	800cdc6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2e:	f003 0310 	and.w	r3, r3, #16
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 81c7 	beq.w	800cdc6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca3c:	f003 0310 	and.w	r3, r3, #16
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 81c0 	beq.w	800cdc6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2210      	movs	r2, #16
 800ca4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca58:	2b40      	cmp	r3, #64	; 0x40
 800ca5a:	f040 813b 	bne.w	800ccd4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a8b      	ldr	r2, [pc, #556]	; (800cc94 <HAL_UART_IRQHandler+0x530>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d059      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a89      	ldr	r2, [pc, #548]	; (800cc98 <HAL_UART_IRQHandler+0x534>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d053      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a87      	ldr	r2, [pc, #540]	; (800cc9c <HAL_UART_IRQHandler+0x538>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d04d      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a85      	ldr	r2, [pc, #532]	; (800cca0 <HAL_UART_IRQHandler+0x53c>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d047      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a83      	ldr	r2, [pc, #524]	; (800cca4 <HAL_UART_IRQHandler+0x540>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d041      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a81      	ldr	r2, [pc, #516]	; (800cca8 <HAL_UART_IRQHandler+0x544>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d03b      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a7f      	ldr	r2, [pc, #508]	; (800ccac <HAL_UART_IRQHandler+0x548>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d035      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a7d      	ldr	r2, [pc, #500]	; (800ccb0 <HAL_UART_IRQHandler+0x54c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d02f      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a7b      	ldr	r2, [pc, #492]	; (800ccb4 <HAL_UART_IRQHandler+0x550>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d029      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a79      	ldr	r2, [pc, #484]	; (800ccb8 <HAL_UART_IRQHandler+0x554>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d023      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a77      	ldr	r2, [pc, #476]	; (800ccbc <HAL_UART_IRQHandler+0x558>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d01d      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a75      	ldr	r2, [pc, #468]	; (800ccc0 <HAL_UART_IRQHandler+0x55c>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d017      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a73      	ldr	r2, [pc, #460]	; (800ccc4 <HAL_UART_IRQHandler+0x560>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d011      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a71      	ldr	r2, [pc, #452]	; (800ccc8 <HAL_UART_IRQHandler+0x564>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d00b      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a6f      	ldr	r2, [pc, #444]	; (800cccc <HAL_UART_IRQHandler+0x568>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d005      	beq.n	800cb1e <HAL_UART_IRQHandler+0x3ba>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a6d      	ldr	r2, [pc, #436]	; (800ccd0 <HAL_UART_IRQHandler+0x56c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d105      	bne.n	800cb2a <HAL_UART_IRQHandler+0x3c6>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	e004      	b.n	800cb34 <HAL_UART_IRQHandler+0x3d0>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 81a4 	beq.w	800ce8a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	f080 819c 	bcs.w	800ce8a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb66:	f000 8086 	beq.w	800cc76 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cb7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	461a      	mov	r2, r3
 800cb90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cb98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cba0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cba4:	e841 2300 	strex	r3, r2, [r1]
 800cba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cbac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1da      	bne.n	800cb6a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3308      	adds	r3, #8
 800cbba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbbe:	e853 3f00 	ldrex	r3, [r3]
 800cbc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cbc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbc6:	f023 0301 	bic.w	r3, r3, #1
 800cbca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cbd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cbdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cbe0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cbea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e1      	bne.n	800cbb4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbfa:	e853 3f00 	ldrex	r3, [r3]
 800cbfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3308      	adds	r3, #8
 800cc10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc14:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc1c:	e841 2300 	strex	r3, r2, [r1]
 800cc20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1e3      	bne.n	800cbf0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc3e:	e853 3f00 	ldrex	r3, [r3]
 800cc42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc46:	f023 0310 	bic.w	r3, r3, #16
 800cc4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc58:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e4      	bne.n	800cc36 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f9 f9a1 	bl	8005fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f91c 	bl	800cec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc90:	e0fb      	b.n	800ce8a <HAL_UART_IRQHandler+0x726>
 800cc92:	bf00      	nop
 800cc94:	40020010 	.word	0x40020010
 800cc98:	40020028 	.word	0x40020028
 800cc9c:	40020040 	.word	0x40020040
 800cca0:	40020058 	.word	0x40020058
 800cca4:	40020070 	.word	0x40020070
 800cca8:	40020088 	.word	0x40020088
 800ccac:	400200a0 	.word	0x400200a0
 800ccb0:	400200b8 	.word	0x400200b8
 800ccb4:	40020410 	.word	0x40020410
 800ccb8:	40020428 	.word	0x40020428
 800ccbc:	40020440 	.word	0x40020440
 800ccc0:	40020458 	.word	0x40020458
 800ccc4:	40020470 	.word	0x40020470
 800ccc8:	40020488 	.word	0x40020488
 800cccc:	400204a0 	.word	0x400204a0
 800ccd0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 80cc 	beq.w	800ce8e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ccf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f000 80c7 	beq.w	800ce8e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	e853 3f00 	ldrex	r3, [r3]
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd22:	647b      	str	r3, [r7, #68]	; 0x44
 800cd24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e4      	bne.n	800cd00 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	3308      	adds	r3, #8
 800cd3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	e853 3f00 	ldrex	r3, [r3]
 800cd44:	623b      	str	r3, [r7, #32]
   return(result);
 800cd46:	6a3a      	ldr	r2, [r7, #32]
 800cd48:	4b54      	ldr	r3, [pc, #336]	; (800ce9c <HAL_UART_IRQHandler+0x738>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3308      	adds	r3, #8
 800cd56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cd5a:	633a      	str	r2, [r7, #48]	; 0x30
 800cd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd62:	e841 2300 	strex	r3, r2, [r1]
 800cd66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1e3      	bne.n	800cd36 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2220      	movs	r2, #32
 800cd72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	e853 3f00 	ldrex	r3, [r3]
 800cd8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f023 0310 	bic.w	r3, r3, #16
 800cd96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda8:	69b9      	ldr	r1, [r7, #24]
 800cdaa:	69fa      	ldr	r2, [r7, #28]
 800cdac:	e841 2300 	strex	r3, r2, [r1]
 800cdb0:	617b      	str	r3, [r7, #20]
   return(result);
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e4      	bne.n	800cd82 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 f882 	bl	800cec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdc4:	e063      	b.n	800ce8e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00e      	beq.n	800cdf0 <HAL_UART_IRQHandler+0x68c>
 800cdd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d008      	beq.n	800cdf0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cde6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f001 fb72 	bl	800e4d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cdee:	e051      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d014      	beq.n	800ce26 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cdfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d105      	bne.n	800ce14 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d008      	beq.n	800ce26 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d03a      	beq.n	800ce92 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	4798      	blx	r3
    }
    return;
 800ce24:	e035      	b.n	800ce92 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d009      	beq.n	800ce46 <HAL_UART_IRQHandler+0x6e2>
 800ce32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d003      	beq.n	800ce46 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 fb1c 	bl	800e47c <UART_EndTransmit_IT>
    return;
 800ce44:	e026      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <HAL_UART_IRQHandler+0x702>
 800ce52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f001 fb4b 	bl	800e4fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce64:	e016      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d010      	beq.n	800ce94 <HAL_UART_IRQHandler+0x730>
 800ce72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	da0c      	bge.n	800ce94 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 fb33 	bl	800e4e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce80:	e008      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
      return;
 800ce82:	bf00      	nop
 800ce84:	e006      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
    return;
 800ce86:	bf00      	nop
 800ce88:	e004      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
      return;
 800ce8a:	bf00      	nop
 800ce8c:	e002      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
      return;
 800ce8e:	bf00      	nop
 800ce90:	e000      	b.n	800ce94 <HAL_UART_IRQHandler+0x730>
    return;
 800ce92:	bf00      	nop
  }
}
 800ce94:	37e8      	adds	r7, #232	; 0xe8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	effffffe 	.word	0xeffffffe

0800cea0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cee4:	b092      	sub	sp, #72	; 0x48
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	431a      	orrs	r2, r3
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	431a      	orrs	r2, r3
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	4bbe      	ldr	r3, [pc, #760]	; (800d208 <UART_SetConfig+0x328>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	6812      	ldr	r2, [r2, #0]
 800cf16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	68da      	ldr	r2, [r3, #12]
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	430a      	orrs	r2, r1
 800cf30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4ab3      	ldr	r2, [pc, #716]	; (800d20c <UART_SetConfig+0x32c>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d004      	beq.n	800cf4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	4baf      	ldr	r3, [pc, #700]	; (800d210 <UART_SetConfig+0x330>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf5c:	430b      	orrs	r3, r1
 800cf5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf66:	f023 010f 	bic.w	r1, r3, #15
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	430a      	orrs	r2, r1
 800cf74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4aa6      	ldr	r2, [pc, #664]	; (800d214 <UART_SetConfig+0x334>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d177      	bne.n	800d070 <UART_SetConfig+0x190>
 800cf80:	4ba5      	ldr	r3, [pc, #660]	; (800d218 <UART_SetConfig+0x338>)
 800cf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf88:	2b28      	cmp	r3, #40	; 0x28
 800cf8a:	d86d      	bhi.n	800d068 <UART_SetConfig+0x188>
 800cf8c:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <UART_SetConfig+0xb4>)
 800cf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf92:	bf00      	nop
 800cf94:	0800d039 	.word	0x0800d039
 800cf98:	0800d069 	.word	0x0800d069
 800cf9c:	0800d069 	.word	0x0800d069
 800cfa0:	0800d069 	.word	0x0800d069
 800cfa4:	0800d069 	.word	0x0800d069
 800cfa8:	0800d069 	.word	0x0800d069
 800cfac:	0800d069 	.word	0x0800d069
 800cfb0:	0800d069 	.word	0x0800d069
 800cfb4:	0800d041 	.word	0x0800d041
 800cfb8:	0800d069 	.word	0x0800d069
 800cfbc:	0800d069 	.word	0x0800d069
 800cfc0:	0800d069 	.word	0x0800d069
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d069 	.word	0x0800d069
 800cfcc:	0800d069 	.word	0x0800d069
 800cfd0:	0800d069 	.word	0x0800d069
 800cfd4:	0800d049 	.word	0x0800d049
 800cfd8:	0800d069 	.word	0x0800d069
 800cfdc:	0800d069 	.word	0x0800d069
 800cfe0:	0800d069 	.word	0x0800d069
 800cfe4:	0800d069 	.word	0x0800d069
 800cfe8:	0800d069 	.word	0x0800d069
 800cfec:	0800d069 	.word	0x0800d069
 800cff0:	0800d069 	.word	0x0800d069
 800cff4:	0800d051 	.word	0x0800d051
 800cff8:	0800d069 	.word	0x0800d069
 800cffc:	0800d069 	.word	0x0800d069
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800d069 	.word	0x0800d069
 800d008:	0800d069 	.word	0x0800d069
 800d00c:	0800d069 	.word	0x0800d069
 800d010:	0800d069 	.word	0x0800d069
 800d014:	0800d059 	.word	0x0800d059
 800d018:	0800d069 	.word	0x0800d069
 800d01c:	0800d069 	.word	0x0800d069
 800d020:	0800d069 	.word	0x0800d069
 800d024:	0800d069 	.word	0x0800d069
 800d028:	0800d069 	.word	0x0800d069
 800d02c:	0800d069 	.word	0x0800d069
 800d030:	0800d069 	.word	0x0800d069
 800d034:	0800d061 	.word	0x0800d061
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03e:	e326      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d040:	2304      	movs	r3, #4
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d046:	e322      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d048:	2308      	movs	r3, #8
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04e:	e31e      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d050:	2310      	movs	r3, #16
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d056:	e31a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d058:	2320      	movs	r3, #32
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05e:	e316      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d060:	2340      	movs	r3, #64	; 0x40
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d066:	e312      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d068:	2380      	movs	r3, #128	; 0x80
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06e:	e30e      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a69      	ldr	r2, [pc, #420]	; (800d21c <UART_SetConfig+0x33c>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d130      	bne.n	800d0dc <UART_SetConfig+0x1fc>
 800d07a:	4b67      	ldr	r3, [pc, #412]	; (800d218 <UART_SetConfig+0x338>)
 800d07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	2b05      	cmp	r3, #5
 800d084:	d826      	bhi.n	800d0d4 <UART_SetConfig+0x1f4>
 800d086:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <UART_SetConfig+0x1ac>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0ad 	.word	0x0800d0ad
 800d094:	0800d0b5 	.word	0x0800d0b5
 800d098:	0800d0bd 	.word	0x0800d0bd
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0cd 	.word	0x0800d0cd
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0aa:	e2f0      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0b2:	e2ec      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ba:	e2e8      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0bc:	2310      	movs	r3, #16
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c2:	e2e4      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0c4:	2320      	movs	r3, #32
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ca:	e2e0      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0cc:	2340      	movs	r3, #64	; 0x40
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d2:	e2dc      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0d4:	2380      	movs	r3, #128	; 0x80
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0da:	e2d8      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a4f      	ldr	r2, [pc, #316]	; (800d220 <UART_SetConfig+0x340>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d130      	bne.n	800d148 <UART_SetConfig+0x268>
 800d0e6:	4b4c      	ldr	r3, [pc, #304]	; (800d218 <UART_SetConfig+0x338>)
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b05      	cmp	r3, #5
 800d0f0:	d826      	bhi.n	800d140 <UART_SetConfig+0x260>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <UART_SetConfig+0x218>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d111 	.word	0x0800d111
 800d0fc:	0800d119 	.word	0x0800d119
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d129 	.word	0x0800d129
 800d108:	0800d131 	.word	0x0800d131
 800d10c:	0800d139 	.word	0x0800d139
 800d110:	2300      	movs	r3, #0
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d116:	e2ba      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d118:	2304      	movs	r3, #4
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11e:	e2b6      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d120:	2308      	movs	r3, #8
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d126:	e2b2      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d128:	2310      	movs	r3, #16
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12e:	e2ae      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d130:	2320      	movs	r3, #32
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d136:	e2aa      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d138:	2340      	movs	r3, #64	; 0x40
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13e:	e2a6      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d140:	2380      	movs	r3, #128	; 0x80
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d146:	e2a2      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a35      	ldr	r2, [pc, #212]	; (800d224 <UART_SetConfig+0x344>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d130      	bne.n	800d1b4 <UART_SetConfig+0x2d4>
 800d152:	4b31      	ldr	r3, [pc, #196]	; (800d218 <UART_SetConfig+0x338>)
 800d154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	d826      	bhi.n	800d1ac <UART_SetConfig+0x2cc>
 800d15e:	a201      	add	r2, pc, #4	; (adr r2, 800d164 <UART_SetConfig+0x284>)
 800d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d164:	0800d17d 	.word	0x0800d17d
 800d168:	0800d185 	.word	0x0800d185
 800d16c:	0800d18d 	.word	0x0800d18d
 800d170:	0800d195 	.word	0x0800d195
 800d174:	0800d19d 	.word	0x0800d19d
 800d178:	0800d1a5 	.word	0x0800d1a5
 800d17c:	2300      	movs	r3, #0
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d182:	e284      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d184:	2304      	movs	r3, #4
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18a:	e280      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d18c:	2308      	movs	r3, #8
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d192:	e27c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d194:	2310      	movs	r3, #16
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19a:	e278      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d19c:	2320      	movs	r3, #32
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a2:	e274      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d1a4:	2340      	movs	r3, #64	; 0x40
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1aa:	e270      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d1ac:	2380      	movs	r3, #128	; 0x80
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b2:	e26c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a1b      	ldr	r2, [pc, #108]	; (800d228 <UART_SetConfig+0x348>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d142      	bne.n	800d244 <UART_SetConfig+0x364>
 800d1be:	4b16      	ldr	r3, [pc, #88]	; (800d218 <UART_SetConfig+0x338>)
 800d1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1c2:	f003 0307 	and.w	r3, r3, #7
 800d1c6:	2b05      	cmp	r3, #5
 800d1c8:	d838      	bhi.n	800d23c <UART_SetConfig+0x35c>
 800d1ca:	a201      	add	r2, pc, #4	; (adr r2, 800d1d0 <UART_SetConfig+0x2f0>)
 800d1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d0:	0800d1e9 	.word	0x0800d1e9
 800d1d4:	0800d1f1 	.word	0x0800d1f1
 800d1d8:	0800d1f9 	.word	0x0800d1f9
 800d1dc:	0800d201 	.word	0x0800d201
 800d1e0:	0800d22d 	.word	0x0800d22d
 800d1e4:	0800d235 	.word	0x0800d235
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ee:	e24e      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d1f0:	2304      	movs	r3, #4
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f6:	e24a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d1f8:	2308      	movs	r3, #8
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fe:	e246      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d200:	2310      	movs	r3, #16
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d206:	e242      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d208:	cfff69f3 	.word	0xcfff69f3
 800d20c:	58000c00 	.word	0x58000c00
 800d210:	11fff4ff 	.word	0x11fff4ff
 800d214:	40011000 	.word	0x40011000
 800d218:	58024400 	.word	0x58024400
 800d21c:	40004400 	.word	0x40004400
 800d220:	40004800 	.word	0x40004800
 800d224:	40004c00 	.word	0x40004c00
 800d228:	40005000 	.word	0x40005000
 800d22c:	2320      	movs	r3, #32
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d232:	e22c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d234:	2340      	movs	r3, #64	; 0x40
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e228      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d23c:	2380      	movs	r3, #128	; 0x80
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e224      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4ab1      	ldr	r2, [pc, #708]	; (800d510 <UART_SetConfig+0x630>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d176      	bne.n	800d33c <UART_SetConfig+0x45c>
 800d24e:	4bb1      	ldr	r3, [pc, #708]	; (800d514 <UART_SetConfig+0x634>)
 800d250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d256:	2b28      	cmp	r3, #40	; 0x28
 800d258:	d86c      	bhi.n	800d334 <UART_SetConfig+0x454>
 800d25a:	a201      	add	r2, pc, #4	; (adr r2, 800d260 <UART_SetConfig+0x380>)
 800d25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d260:	0800d305 	.word	0x0800d305
 800d264:	0800d335 	.word	0x0800d335
 800d268:	0800d335 	.word	0x0800d335
 800d26c:	0800d335 	.word	0x0800d335
 800d270:	0800d335 	.word	0x0800d335
 800d274:	0800d335 	.word	0x0800d335
 800d278:	0800d335 	.word	0x0800d335
 800d27c:	0800d335 	.word	0x0800d335
 800d280:	0800d30d 	.word	0x0800d30d
 800d284:	0800d335 	.word	0x0800d335
 800d288:	0800d335 	.word	0x0800d335
 800d28c:	0800d335 	.word	0x0800d335
 800d290:	0800d335 	.word	0x0800d335
 800d294:	0800d335 	.word	0x0800d335
 800d298:	0800d335 	.word	0x0800d335
 800d29c:	0800d335 	.word	0x0800d335
 800d2a0:	0800d315 	.word	0x0800d315
 800d2a4:	0800d335 	.word	0x0800d335
 800d2a8:	0800d335 	.word	0x0800d335
 800d2ac:	0800d335 	.word	0x0800d335
 800d2b0:	0800d335 	.word	0x0800d335
 800d2b4:	0800d335 	.word	0x0800d335
 800d2b8:	0800d335 	.word	0x0800d335
 800d2bc:	0800d335 	.word	0x0800d335
 800d2c0:	0800d31d 	.word	0x0800d31d
 800d2c4:	0800d335 	.word	0x0800d335
 800d2c8:	0800d335 	.word	0x0800d335
 800d2cc:	0800d335 	.word	0x0800d335
 800d2d0:	0800d335 	.word	0x0800d335
 800d2d4:	0800d335 	.word	0x0800d335
 800d2d8:	0800d335 	.word	0x0800d335
 800d2dc:	0800d335 	.word	0x0800d335
 800d2e0:	0800d325 	.word	0x0800d325
 800d2e4:	0800d335 	.word	0x0800d335
 800d2e8:	0800d335 	.word	0x0800d335
 800d2ec:	0800d335 	.word	0x0800d335
 800d2f0:	0800d335 	.word	0x0800d335
 800d2f4:	0800d335 	.word	0x0800d335
 800d2f8:	0800d335 	.word	0x0800d335
 800d2fc:	0800d335 	.word	0x0800d335
 800d300:	0800d32d 	.word	0x0800d32d
 800d304:	2301      	movs	r3, #1
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30a:	e1c0      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d30c:	2304      	movs	r3, #4
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e1bc      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d314:	2308      	movs	r3, #8
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e1b8      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d31c:	2310      	movs	r3, #16
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1b4      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d324:	2320      	movs	r3, #32
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e1b0      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d32c:	2340      	movs	r3, #64	; 0x40
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e1ac      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d334:	2380      	movs	r3, #128	; 0x80
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e1a8      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a75      	ldr	r2, [pc, #468]	; (800d518 <UART_SetConfig+0x638>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d130      	bne.n	800d3a8 <UART_SetConfig+0x4c8>
 800d346:	4b73      	ldr	r3, [pc, #460]	; (800d514 <UART_SetConfig+0x634>)
 800d348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d34a:	f003 0307 	and.w	r3, r3, #7
 800d34e:	2b05      	cmp	r3, #5
 800d350:	d826      	bhi.n	800d3a0 <UART_SetConfig+0x4c0>
 800d352:	a201      	add	r2, pc, #4	; (adr r2, 800d358 <UART_SetConfig+0x478>)
 800d354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d358:	0800d371 	.word	0x0800d371
 800d35c:	0800d379 	.word	0x0800d379
 800d360:	0800d381 	.word	0x0800d381
 800d364:	0800d389 	.word	0x0800d389
 800d368:	0800d391 	.word	0x0800d391
 800d36c:	0800d399 	.word	0x0800d399
 800d370:	2300      	movs	r3, #0
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d376:	e18a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d378:	2304      	movs	r3, #4
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37e:	e186      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d380:	2308      	movs	r3, #8
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d386:	e182      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d388:	2310      	movs	r3, #16
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e17e      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d390:	2320      	movs	r3, #32
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e17a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d398:	2340      	movs	r3, #64	; 0x40
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e176      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3a0:	2380      	movs	r3, #128	; 0x80
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e172      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a5b      	ldr	r2, [pc, #364]	; (800d51c <UART_SetConfig+0x63c>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d130      	bne.n	800d414 <UART_SetConfig+0x534>
 800d3b2:	4b58      	ldr	r3, [pc, #352]	; (800d514 <UART_SetConfig+0x634>)
 800d3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3b6:	f003 0307 	and.w	r3, r3, #7
 800d3ba:	2b05      	cmp	r3, #5
 800d3bc:	d826      	bhi.n	800d40c <UART_SetConfig+0x52c>
 800d3be:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <UART_SetConfig+0x4e4>)
 800d3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c4:	0800d3dd 	.word	0x0800d3dd
 800d3c8:	0800d3e5 	.word	0x0800d3e5
 800d3cc:	0800d3ed 	.word	0x0800d3ed
 800d3d0:	0800d3f5 	.word	0x0800d3f5
 800d3d4:	0800d3fd 	.word	0x0800d3fd
 800d3d8:	0800d405 	.word	0x0800d405
 800d3dc:	2300      	movs	r3, #0
 800d3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e2:	e154      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3e4:	2304      	movs	r3, #4
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e150      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3ec:	2308      	movs	r3, #8
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e14c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3f4:	2310      	movs	r3, #16
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e148      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d3fc:	2320      	movs	r3, #32
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e144      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d404:	2340      	movs	r3, #64	; 0x40
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e140      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d40c:	2380      	movs	r3, #128	; 0x80
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e13c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a41      	ldr	r2, [pc, #260]	; (800d520 <UART_SetConfig+0x640>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	f040 8082 	bne.w	800d524 <UART_SetConfig+0x644>
 800d420:	4b3c      	ldr	r3, [pc, #240]	; (800d514 <UART_SetConfig+0x634>)
 800d422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d428:	2b28      	cmp	r3, #40	; 0x28
 800d42a:	d86d      	bhi.n	800d508 <UART_SetConfig+0x628>
 800d42c:	a201      	add	r2, pc, #4	; (adr r2, 800d434 <UART_SetConfig+0x554>)
 800d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d432:	bf00      	nop
 800d434:	0800d4d9 	.word	0x0800d4d9
 800d438:	0800d509 	.word	0x0800d509
 800d43c:	0800d509 	.word	0x0800d509
 800d440:	0800d509 	.word	0x0800d509
 800d444:	0800d509 	.word	0x0800d509
 800d448:	0800d509 	.word	0x0800d509
 800d44c:	0800d509 	.word	0x0800d509
 800d450:	0800d509 	.word	0x0800d509
 800d454:	0800d4e1 	.word	0x0800d4e1
 800d458:	0800d509 	.word	0x0800d509
 800d45c:	0800d509 	.word	0x0800d509
 800d460:	0800d509 	.word	0x0800d509
 800d464:	0800d509 	.word	0x0800d509
 800d468:	0800d509 	.word	0x0800d509
 800d46c:	0800d509 	.word	0x0800d509
 800d470:	0800d509 	.word	0x0800d509
 800d474:	0800d4e9 	.word	0x0800d4e9
 800d478:	0800d509 	.word	0x0800d509
 800d47c:	0800d509 	.word	0x0800d509
 800d480:	0800d509 	.word	0x0800d509
 800d484:	0800d509 	.word	0x0800d509
 800d488:	0800d509 	.word	0x0800d509
 800d48c:	0800d509 	.word	0x0800d509
 800d490:	0800d509 	.word	0x0800d509
 800d494:	0800d4f1 	.word	0x0800d4f1
 800d498:	0800d509 	.word	0x0800d509
 800d49c:	0800d509 	.word	0x0800d509
 800d4a0:	0800d509 	.word	0x0800d509
 800d4a4:	0800d509 	.word	0x0800d509
 800d4a8:	0800d509 	.word	0x0800d509
 800d4ac:	0800d509 	.word	0x0800d509
 800d4b0:	0800d509 	.word	0x0800d509
 800d4b4:	0800d4f9 	.word	0x0800d4f9
 800d4b8:	0800d509 	.word	0x0800d509
 800d4bc:	0800d509 	.word	0x0800d509
 800d4c0:	0800d509 	.word	0x0800d509
 800d4c4:	0800d509 	.word	0x0800d509
 800d4c8:	0800d509 	.word	0x0800d509
 800d4cc:	0800d509 	.word	0x0800d509
 800d4d0:	0800d509 	.word	0x0800d509
 800d4d4:	0800d501 	.word	0x0800d501
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4de:	e0d6      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d4e0:	2304      	movs	r3, #4
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e6:	e0d2      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d4e8:	2308      	movs	r3, #8
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ee:	e0ce      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d4f0:	2310      	movs	r3, #16
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f6:	e0ca      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d4f8:	2320      	movs	r3, #32
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fe:	e0c6      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d500:	2340      	movs	r3, #64	; 0x40
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d506:	e0c2      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d508:	2380      	movs	r3, #128	; 0x80
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50e:	e0be      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d510:	40011400 	.word	0x40011400
 800d514:	58024400 	.word	0x58024400
 800d518:	40007800 	.word	0x40007800
 800d51c:	40007c00 	.word	0x40007c00
 800d520:	40011800 	.word	0x40011800
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4aad      	ldr	r2, [pc, #692]	; (800d7e0 <UART_SetConfig+0x900>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d176      	bne.n	800d61c <UART_SetConfig+0x73c>
 800d52e:	4bad      	ldr	r3, [pc, #692]	; (800d7e4 <UART_SetConfig+0x904>)
 800d530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d536:	2b28      	cmp	r3, #40	; 0x28
 800d538:	d86c      	bhi.n	800d614 <UART_SetConfig+0x734>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <UART_SetConfig+0x660>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d5e5 	.word	0x0800d5e5
 800d544:	0800d615 	.word	0x0800d615
 800d548:	0800d615 	.word	0x0800d615
 800d54c:	0800d615 	.word	0x0800d615
 800d550:	0800d615 	.word	0x0800d615
 800d554:	0800d615 	.word	0x0800d615
 800d558:	0800d615 	.word	0x0800d615
 800d55c:	0800d615 	.word	0x0800d615
 800d560:	0800d5ed 	.word	0x0800d5ed
 800d564:	0800d615 	.word	0x0800d615
 800d568:	0800d615 	.word	0x0800d615
 800d56c:	0800d615 	.word	0x0800d615
 800d570:	0800d615 	.word	0x0800d615
 800d574:	0800d615 	.word	0x0800d615
 800d578:	0800d615 	.word	0x0800d615
 800d57c:	0800d615 	.word	0x0800d615
 800d580:	0800d5f5 	.word	0x0800d5f5
 800d584:	0800d615 	.word	0x0800d615
 800d588:	0800d615 	.word	0x0800d615
 800d58c:	0800d615 	.word	0x0800d615
 800d590:	0800d615 	.word	0x0800d615
 800d594:	0800d615 	.word	0x0800d615
 800d598:	0800d615 	.word	0x0800d615
 800d59c:	0800d615 	.word	0x0800d615
 800d5a0:	0800d5fd 	.word	0x0800d5fd
 800d5a4:	0800d615 	.word	0x0800d615
 800d5a8:	0800d615 	.word	0x0800d615
 800d5ac:	0800d615 	.word	0x0800d615
 800d5b0:	0800d615 	.word	0x0800d615
 800d5b4:	0800d615 	.word	0x0800d615
 800d5b8:	0800d615 	.word	0x0800d615
 800d5bc:	0800d615 	.word	0x0800d615
 800d5c0:	0800d605 	.word	0x0800d605
 800d5c4:	0800d615 	.word	0x0800d615
 800d5c8:	0800d615 	.word	0x0800d615
 800d5cc:	0800d615 	.word	0x0800d615
 800d5d0:	0800d615 	.word	0x0800d615
 800d5d4:	0800d615 	.word	0x0800d615
 800d5d8:	0800d615 	.word	0x0800d615
 800d5dc:	0800d615 	.word	0x0800d615
 800d5e0:	0800d60d 	.word	0x0800d60d
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ea:	e050      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d5ec:	2304      	movs	r3, #4
 800d5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f2:	e04c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d5f4:	2308      	movs	r3, #8
 800d5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fa:	e048      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d5fc:	2310      	movs	r3, #16
 800d5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d602:	e044      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d604:	2320      	movs	r3, #32
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60a:	e040      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d60c:	2340      	movs	r3, #64	; 0x40
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d612:	e03c      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d614:	2380      	movs	r3, #128	; 0x80
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61a:	e038      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a71      	ldr	r2, [pc, #452]	; (800d7e8 <UART_SetConfig+0x908>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d130      	bne.n	800d688 <UART_SetConfig+0x7a8>
 800d626:	4b6f      	ldr	r3, [pc, #444]	; (800d7e4 <UART_SetConfig+0x904>)
 800d628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d62a:	f003 0307 	and.w	r3, r3, #7
 800d62e:	2b05      	cmp	r3, #5
 800d630:	d826      	bhi.n	800d680 <UART_SetConfig+0x7a0>
 800d632:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <UART_SetConfig+0x758>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d651 	.word	0x0800d651
 800d63c:	0800d659 	.word	0x0800d659
 800d640:	0800d661 	.word	0x0800d661
 800d644:	0800d669 	.word	0x0800d669
 800d648:	0800d671 	.word	0x0800d671
 800d64c:	0800d679 	.word	0x0800d679
 800d650:	2302      	movs	r3, #2
 800d652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d656:	e01a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d658:	2304      	movs	r3, #4
 800d65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65e:	e016      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d660:	2308      	movs	r3, #8
 800d662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d666:	e012      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d668:	2310      	movs	r3, #16
 800d66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66e:	e00e      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d670:	2320      	movs	r3, #32
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d676:	e00a      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d678:	2340      	movs	r3, #64	; 0x40
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67e:	e006      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d680:	2380      	movs	r3, #128	; 0x80
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d686:	e002      	b.n	800d68e <UART_SetConfig+0x7ae>
 800d688:	2380      	movs	r3, #128	; 0x80
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a55      	ldr	r2, [pc, #340]	; (800d7e8 <UART_SetConfig+0x908>)
 800d694:	4293      	cmp	r3, r2
 800d696:	f040 80f8 	bne.w	800d88a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d69a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d69e:	2b20      	cmp	r3, #32
 800d6a0:	dc46      	bgt.n	800d730 <UART_SetConfig+0x850>
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	db75      	blt.n	800d792 <UART_SetConfig+0x8b2>
 800d6a6:	3b02      	subs	r3, #2
 800d6a8:	2b1e      	cmp	r3, #30
 800d6aa:	d872      	bhi.n	800d792 <UART_SetConfig+0x8b2>
 800d6ac:	a201      	add	r2, pc, #4	; (adr r2, 800d6b4 <UART_SetConfig+0x7d4>)
 800d6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b2:	bf00      	nop
 800d6b4:	0800d737 	.word	0x0800d737
 800d6b8:	0800d793 	.word	0x0800d793
 800d6bc:	0800d73f 	.word	0x0800d73f
 800d6c0:	0800d793 	.word	0x0800d793
 800d6c4:	0800d793 	.word	0x0800d793
 800d6c8:	0800d793 	.word	0x0800d793
 800d6cc:	0800d74f 	.word	0x0800d74f
 800d6d0:	0800d793 	.word	0x0800d793
 800d6d4:	0800d793 	.word	0x0800d793
 800d6d8:	0800d793 	.word	0x0800d793
 800d6dc:	0800d793 	.word	0x0800d793
 800d6e0:	0800d793 	.word	0x0800d793
 800d6e4:	0800d793 	.word	0x0800d793
 800d6e8:	0800d793 	.word	0x0800d793
 800d6ec:	0800d75f 	.word	0x0800d75f
 800d6f0:	0800d793 	.word	0x0800d793
 800d6f4:	0800d793 	.word	0x0800d793
 800d6f8:	0800d793 	.word	0x0800d793
 800d6fc:	0800d793 	.word	0x0800d793
 800d700:	0800d793 	.word	0x0800d793
 800d704:	0800d793 	.word	0x0800d793
 800d708:	0800d793 	.word	0x0800d793
 800d70c:	0800d793 	.word	0x0800d793
 800d710:	0800d793 	.word	0x0800d793
 800d714:	0800d793 	.word	0x0800d793
 800d718:	0800d793 	.word	0x0800d793
 800d71c:	0800d793 	.word	0x0800d793
 800d720:	0800d793 	.word	0x0800d793
 800d724:	0800d793 	.word	0x0800d793
 800d728:	0800d793 	.word	0x0800d793
 800d72c:	0800d785 	.word	0x0800d785
 800d730:	2b40      	cmp	r3, #64	; 0x40
 800d732:	d02a      	beq.n	800d78a <UART_SetConfig+0x8aa>
 800d734:	e02d      	b.n	800d792 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d736:	f7fc fe0b 	bl	800a350 <HAL_RCCEx_GetD3PCLK1Freq>
 800d73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d73c:	e02f      	b.n	800d79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d742:	4618      	mov	r0, r3
 800d744:	f7fc fe1a 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d74c:	e027      	b.n	800d79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d74e:	f107 0318 	add.w	r3, r7, #24
 800d752:	4618      	mov	r0, r3
 800d754:	f7fc ff66 	bl	800a624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d75c:	e01f      	b.n	800d79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d75e:	4b21      	ldr	r3, [pc, #132]	; (800d7e4 <UART_SetConfig+0x904>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 0320 	and.w	r3, r3, #32
 800d766:	2b00      	cmp	r3, #0
 800d768:	d009      	beq.n	800d77e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d76a:	4b1e      	ldr	r3, [pc, #120]	; (800d7e4 <UART_SetConfig+0x904>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	08db      	lsrs	r3, r3, #3
 800d770:	f003 0303 	and.w	r3, r3, #3
 800d774:	4a1d      	ldr	r2, [pc, #116]	; (800d7ec <UART_SetConfig+0x90c>)
 800d776:	fa22 f303 	lsr.w	r3, r2, r3
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d77c:	e00f      	b.n	800d79e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d77e:	4b1b      	ldr	r3, [pc, #108]	; (800d7ec <UART_SetConfig+0x90c>)
 800d780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d782:	e00c      	b.n	800d79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d784:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <UART_SetConfig+0x910>)
 800d786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d788:	e009      	b.n	800d79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d790:	e005      	b.n	800d79e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d79c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 81ee 	beq.w	800db82 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7aa:	4a12      	ldr	r2, [pc, #72]	; (800d7f4 <UART_SetConfig+0x914>)
 800d7ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7b8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	4413      	add	r3, r2
 800d7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d305      	bcc.n	800d7d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d910      	bls.n	800d7f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d7dc:	e1d1      	b.n	800db82 <UART_SetConfig+0xca2>
 800d7de:	bf00      	nop
 800d7e0:	40011c00 	.word	0x40011c00
 800d7e4:	58024400 	.word	0x58024400
 800d7e8:	58000c00 	.word	0x58000c00
 800d7ec:	03d09000 	.word	0x03d09000
 800d7f0:	003d0900 	.word	0x003d0900
 800d7f4:	0800edb8 	.word	0x0800edb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	60bb      	str	r3, [r7, #8]
 800d7fe:	60fa      	str	r2, [r7, #12]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d804:	4ac0      	ldr	r2, [pc, #768]	; (800db08 <UART_SetConfig+0xc28>)
 800d806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	2200      	movs	r2, #0
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	607a      	str	r2, [r7, #4]
 800d812:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d81a:	f7f2 fd81 	bl	8000320 <__aeabi_uldivmod>
 800d81e:	4602      	mov	r2, r0
 800d820:	460b      	mov	r3, r1
 800d822:	4610      	mov	r0, r2
 800d824:	4619      	mov	r1, r3
 800d826:	f04f 0200 	mov.w	r2, #0
 800d82a:	f04f 0300 	mov.w	r3, #0
 800d82e:	020b      	lsls	r3, r1, #8
 800d830:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d834:	0202      	lsls	r2, r0, #8
 800d836:	6979      	ldr	r1, [r7, #20]
 800d838:	6849      	ldr	r1, [r1, #4]
 800d83a:	0849      	lsrs	r1, r1, #1
 800d83c:	2000      	movs	r0, #0
 800d83e:	460c      	mov	r4, r1
 800d840:	4605      	mov	r5, r0
 800d842:	eb12 0804 	adds.w	r8, r2, r4
 800d846:	eb43 0905 	adc.w	r9, r3, r5
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	469a      	mov	sl, r3
 800d852:	4693      	mov	fp, r2
 800d854:	4652      	mov	r2, sl
 800d856:	465b      	mov	r3, fp
 800d858:	4640      	mov	r0, r8
 800d85a:	4649      	mov	r1, r9
 800d85c:	f7f2 fd60 	bl	8000320 <__aeabi_uldivmod>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4613      	mov	r3, r2
 800d866:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d86e:	d308      	bcc.n	800d882 <UART_SetConfig+0x9a2>
 800d870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d876:	d204      	bcs.n	800d882 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d87e:	60da      	str	r2, [r3, #12]
 800d880:	e17f      	b.n	800db82 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d888:	e17b      	b.n	800db82 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	69db      	ldr	r3, [r3, #28]
 800d88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d892:	f040 80bd 	bne.w	800da10 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d896:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d89a:	2b20      	cmp	r3, #32
 800d89c:	dc48      	bgt.n	800d930 <UART_SetConfig+0xa50>
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	db7b      	blt.n	800d99a <UART_SetConfig+0xaba>
 800d8a2:	2b20      	cmp	r3, #32
 800d8a4:	d879      	bhi.n	800d99a <UART_SetConfig+0xaba>
 800d8a6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ac <UART_SetConfig+0x9cc>)
 800d8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ac:	0800d937 	.word	0x0800d937
 800d8b0:	0800d93f 	.word	0x0800d93f
 800d8b4:	0800d99b 	.word	0x0800d99b
 800d8b8:	0800d99b 	.word	0x0800d99b
 800d8bc:	0800d947 	.word	0x0800d947
 800d8c0:	0800d99b 	.word	0x0800d99b
 800d8c4:	0800d99b 	.word	0x0800d99b
 800d8c8:	0800d99b 	.word	0x0800d99b
 800d8cc:	0800d957 	.word	0x0800d957
 800d8d0:	0800d99b 	.word	0x0800d99b
 800d8d4:	0800d99b 	.word	0x0800d99b
 800d8d8:	0800d99b 	.word	0x0800d99b
 800d8dc:	0800d99b 	.word	0x0800d99b
 800d8e0:	0800d99b 	.word	0x0800d99b
 800d8e4:	0800d99b 	.word	0x0800d99b
 800d8e8:	0800d99b 	.word	0x0800d99b
 800d8ec:	0800d967 	.word	0x0800d967
 800d8f0:	0800d99b 	.word	0x0800d99b
 800d8f4:	0800d99b 	.word	0x0800d99b
 800d8f8:	0800d99b 	.word	0x0800d99b
 800d8fc:	0800d99b 	.word	0x0800d99b
 800d900:	0800d99b 	.word	0x0800d99b
 800d904:	0800d99b 	.word	0x0800d99b
 800d908:	0800d99b 	.word	0x0800d99b
 800d90c:	0800d99b 	.word	0x0800d99b
 800d910:	0800d99b 	.word	0x0800d99b
 800d914:	0800d99b 	.word	0x0800d99b
 800d918:	0800d99b 	.word	0x0800d99b
 800d91c:	0800d99b 	.word	0x0800d99b
 800d920:	0800d99b 	.word	0x0800d99b
 800d924:	0800d99b 	.word	0x0800d99b
 800d928:	0800d99b 	.word	0x0800d99b
 800d92c:	0800d98d 	.word	0x0800d98d
 800d930:	2b40      	cmp	r3, #64	; 0x40
 800d932:	d02e      	beq.n	800d992 <UART_SetConfig+0xab2>
 800d934:	e031      	b.n	800d99a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d936:	f7fb fde5 	bl	8009504 <HAL_RCC_GetPCLK1Freq>
 800d93a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d93c:	e033      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d93e:	f7fb fdf7 	bl	8009530 <HAL_RCC_GetPCLK2Freq>
 800d942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d944:	e02f      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fc fd16 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d954:	e027      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d956:	f107 0318 	add.w	r3, r7, #24
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fc fe62 	bl	800a624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d964:	e01f      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d966:	4b69      	ldr	r3, [pc, #420]	; (800db0c <UART_SetConfig+0xc2c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 0320 	and.w	r3, r3, #32
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d009      	beq.n	800d986 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d972:	4b66      	ldr	r3, [pc, #408]	; (800db0c <UART_SetConfig+0xc2c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	08db      	lsrs	r3, r3, #3
 800d978:	f003 0303 	and.w	r3, r3, #3
 800d97c:	4a64      	ldr	r2, [pc, #400]	; (800db10 <UART_SetConfig+0xc30>)
 800d97e:	fa22 f303 	lsr.w	r3, r2, r3
 800d982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d984:	e00f      	b.n	800d9a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d986:	4b62      	ldr	r3, [pc, #392]	; (800db10 <UART_SetConfig+0xc30>)
 800d988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d98a:	e00c      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d98c:	4b61      	ldr	r3, [pc, #388]	; (800db14 <UART_SetConfig+0xc34>)
 800d98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d990:	e009      	b.n	800d9a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d998:	e005      	b.n	800d9a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d99a:	2300      	movs	r3, #0
 800d99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 80ea 	beq.w	800db82 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b2:	4a55      	ldr	r2, [pc, #340]	; (800db08 <UART_SetConfig+0xc28>)
 800d9b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c0:	005a      	lsls	r2, r3, #1
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	085b      	lsrs	r3, r3, #1
 800d9c8:	441a      	add	r2, r3
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	2b0f      	cmp	r3, #15
 800d9d8:	d916      	bls.n	800da08 <UART_SetConfig+0xb28>
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9e0:	d212      	bcs.n	800da08 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f023 030f 	bic.w	r3, r3, #15
 800d9ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ee:	085b      	lsrs	r3, r3, #1
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da04:	60da      	str	r2, [r3, #12]
 800da06:	e0bc      	b.n	800db82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da0e:	e0b8      	b.n	800db82 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da14:	2b20      	cmp	r3, #32
 800da16:	dc4b      	bgt.n	800dab0 <UART_SetConfig+0xbd0>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f2c0 8087 	blt.w	800db2c <UART_SetConfig+0xc4c>
 800da1e:	2b20      	cmp	r3, #32
 800da20:	f200 8084 	bhi.w	800db2c <UART_SetConfig+0xc4c>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <UART_SetConfig+0xb4c>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800dab7 	.word	0x0800dab7
 800da30:	0800dabf 	.word	0x0800dabf
 800da34:	0800db2d 	.word	0x0800db2d
 800da38:	0800db2d 	.word	0x0800db2d
 800da3c:	0800dac7 	.word	0x0800dac7
 800da40:	0800db2d 	.word	0x0800db2d
 800da44:	0800db2d 	.word	0x0800db2d
 800da48:	0800db2d 	.word	0x0800db2d
 800da4c:	0800dad7 	.word	0x0800dad7
 800da50:	0800db2d 	.word	0x0800db2d
 800da54:	0800db2d 	.word	0x0800db2d
 800da58:	0800db2d 	.word	0x0800db2d
 800da5c:	0800db2d 	.word	0x0800db2d
 800da60:	0800db2d 	.word	0x0800db2d
 800da64:	0800db2d 	.word	0x0800db2d
 800da68:	0800db2d 	.word	0x0800db2d
 800da6c:	0800dae7 	.word	0x0800dae7
 800da70:	0800db2d 	.word	0x0800db2d
 800da74:	0800db2d 	.word	0x0800db2d
 800da78:	0800db2d 	.word	0x0800db2d
 800da7c:	0800db2d 	.word	0x0800db2d
 800da80:	0800db2d 	.word	0x0800db2d
 800da84:	0800db2d 	.word	0x0800db2d
 800da88:	0800db2d 	.word	0x0800db2d
 800da8c:	0800db2d 	.word	0x0800db2d
 800da90:	0800db2d 	.word	0x0800db2d
 800da94:	0800db2d 	.word	0x0800db2d
 800da98:	0800db2d 	.word	0x0800db2d
 800da9c:	0800db2d 	.word	0x0800db2d
 800daa0:	0800db2d 	.word	0x0800db2d
 800daa4:	0800db2d 	.word	0x0800db2d
 800daa8:	0800db2d 	.word	0x0800db2d
 800daac:	0800db1f 	.word	0x0800db1f
 800dab0:	2b40      	cmp	r3, #64	; 0x40
 800dab2:	d037      	beq.n	800db24 <UART_SetConfig+0xc44>
 800dab4:	e03a      	b.n	800db2c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dab6:	f7fb fd25 	bl	8009504 <HAL_RCC_GetPCLK1Freq>
 800daba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dabc:	e03c      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dabe:	f7fb fd37 	bl	8009530 <HAL_RCC_GetPCLK2Freq>
 800dac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dac4:	e038      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fc fc56 	bl	800a37c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dad4:	e030      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dad6:	f107 0318 	add.w	r3, r7, #24
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fc fda2 	bl	800a624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae4:	e028      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dae6:	4b09      	ldr	r3, [pc, #36]	; (800db0c <UART_SetConfig+0xc2c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0320 	and.w	r3, r3, #32
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d012      	beq.n	800db18 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800daf2:	4b06      	ldr	r3, [pc, #24]	; (800db0c <UART_SetConfig+0xc2c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	08db      	lsrs	r3, r3, #3
 800daf8:	f003 0303 	and.w	r3, r3, #3
 800dafc:	4a04      	ldr	r2, [pc, #16]	; (800db10 <UART_SetConfig+0xc30>)
 800dafe:	fa22 f303 	lsr.w	r3, r2, r3
 800db02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db04:	e018      	b.n	800db38 <UART_SetConfig+0xc58>
 800db06:	bf00      	nop
 800db08:	0800edb8 	.word	0x0800edb8
 800db0c:	58024400 	.word	0x58024400
 800db10:	03d09000 	.word	0x03d09000
 800db14:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800db18:	4b24      	ldr	r3, [pc, #144]	; (800dbac <UART_SetConfig+0xccc>)
 800db1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db1c:	e00c      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db1e:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <UART_SetConfig+0xcd0>)
 800db20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db22:	e009      	b.n	800db38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db2a:	e005      	b.n	800db38 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800db2c:	2300      	movs	r3, #0
 800db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db36:	bf00      	nop
    }

    if (pclk != 0U)
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d021      	beq.n	800db82 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db42:	4a1c      	ldr	r2, [pc, #112]	; (800dbb4 <UART_SetConfig+0xcd4>)
 800db44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db48:	461a      	mov	r2, r3
 800db4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db4c:	fbb3 f2f2 	udiv	r2, r3, r2
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	085b      	lsrs	r3, r3, #1
 800db56:	441a      	add	r2, r3
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db60:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db64:	2b0f      	cmp	r3, #15
 800db66:	d909      	bls.n	800db7c <UART_SetConfig+0xc9c>
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db6e:	d205      	bcs.n	800db7c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db72:	b29a      	uxth	r2, r3
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	60da      	str	r2, [r3, #12]
 800db7a:	e002      	b.n	800db82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2201      	movs	r2, #1
 800db86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2200      	movs	r2, #0
 800db96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2200      	movs	r2, #0
 800db9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800db9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3748      	adds	r7, #72	; 0x48
 800dba6:	46bd      	mov	sp, r7
 800dba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbac:	03d09000 	.word	0x03d09000
 800dbb0:	003d0900 	.word	0x003d0900
 800dbb4:	0800edb8 	.word	0x0800edb8

0800dbb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00a      	beq.n	800dbe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe6:	f003 0302 	and.w	r3, r3, #2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00a      	beq.n	800dc26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2a:	f003 0308 	and.w	r3, r3, #8
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00a      	beq.n	800dc48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00a      	beq.n	800dc6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	430a      	orrs	r2, r1
 800dc68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00a      	beq.n	800dc8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01a      	beq.n	800dcce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcb6:	d10a      	bne.n	800dcce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	430a      	orrs	r2, r1
 800dcee:	605a      	str	r2, [r3, #4]
  }
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd0c:	f7f7 f88c 	bl	8004e28 <HAL_GetTick>
 800dd10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d10e      	bne.n	800dd3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f82f 	bl	800dd92 <UART_WaitOnFlagUntilTimeout>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e025      	b.n	800dd8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d10e      	bne.n	800dd6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f819 	bl	800dd92 <UART_WaitOnFlagUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e00f      	b.n	800dd8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b09c      	sub	sp, #112	; 0x70
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	603b      	str	r3, [r7, #0]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dda2:	e0a9      	b.n	800def8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dda4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddaa:	f000 80a5 	beq.w	800def8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddae:	f7f7 f83b 	bl	8004e28 <HAL_GetTick>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d302      	bcc.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0x32>
 800ddbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d140      	bne.n	800de46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddcc:	e853 3f00 	ldrex	r3, [r3]
 800ddd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ddd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ddd8:	667b      	str	r3, [r7, #100]	; 0x64
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dde2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dde4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dde8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddea:	e841 2300 	strex	r3, r2, [r1]
 800ddee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ddf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1e6      	bne.n	800ddc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de00:	e853 3f00 	ldrex	r3, [r3]
 800de04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	f023 0301 	bic.w	r3, r3, #1
 800de0c:	663b      	str	r3, [r7, #96]	; 0x60
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3308      	adds	r3, #8
 800de14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de16:	64ba      	str	r2, [r7, #72]	; 0x48
 800de18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e5      	bne.n	800ddf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2220      	movs	r2, #32
 800de2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2220      	movs	r2, #32
 800de36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e069      	b.n	800df1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 0304 	and.w	r3, r3, #4
 800de50:	2b00      	cmp	r3, #0
 800de52:	d051      	beq.n	800def8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de62:	d149      	bne.n	800def8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	e853 3f00 	ldrex	r3, [r3]
 800de7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	461a      	mov	r2, r3
 800de8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34
 800de8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de94:	e841 2300 	strex	r3, r2, [r1]
 800de98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1e6      	bne.n	800de6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3308      	adds	r3, #8
 800dea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	e853 3f00 	ldrex	r3, [r3]
 800deae:	613b      	str	r3, [r7, #16]
   return(result);
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	f023 0301 	bic.w	r3, r3, #1
 800deb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3308      	adds	r3, #8
 800debe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dec0:	623a      	str	r2, [r7, #32]
 800dec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	69f9      	ldr	r1, [r7, #28]
 800dec6:	6a3a      	ldr	r2, [r7, #32]
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e5      	bne.n	800dea0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2220      	movs	r2, #32
 800ded8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2220      	movs	r2, #32
 800dee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2220      	movs	r2, #32
 800dee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	e010      	b.n	800df1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	69da      	ldr	r2, [r3, #28]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	4013      	ands	r3, r2
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	429a      	cmp	r2, r3
 800df06:	bf0c      	ite	eq
 800df08:	2301      	moveq	r3, #1
 800df0a:	2300      	movne	r3, #0
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	461a      	mov	r2, r3
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	429a      	cmp	r2, r3
 800df14:	f43f af46 	beq.w	800dda4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3770      	adds	r7, #112	; 0x70
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b096      	sub	sp, #88	; 0x58
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4613      	mov	r3, r2
 800df30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	88fa      	ldrh	r2, [r7, #6]
 800df3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2222      	movs	r2, #34	; 0x22
 800df4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df54:	2b00      	cmp	r3, #0
 800df56:	d02c      	beq.n	800dfb2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df5c:	4a42      	ldr	r2, [pc, #264]	; (800e068 <UART_Start_Receive_DMA+0x144>)
 800df5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df64:	4a41      	ldr	r2, [pc, #260]	; (800e06c <UART_Start_Receive_DMA+0x148>)
 800df66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df6c:	4a40      	ldr	r2, [pc, #256]	; (800e070 <UART_Start_Receive_DMA+0x14c>)
 800df6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df74:	2200      	movs	r2, #0
 800df76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3324      	adds	r3, #36	; 0x24
 800df82:	4619      	mov	r1, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df88:	461a      	mov	r2, r3
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	f7f7 fdaa 	bl	8005ae4 <HAL_DMA_Start_IT>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00d      	beq.n	800dfb2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2210      	movs	r2, #16
 800df9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e055      	b.n	800e05e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d018      	beq.n	800dff4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfca:	e853 3f00 	ldrex	r3, [r3]
 800dfce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfd6:	657b      	str	r3, [r7, #84]	; 0x54
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfe2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfe8:	e841 2300 	strex	r3, r2, [r1]
 800dfec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dfee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1e6      	bne.n	800dfc2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3308      	adds	r3, #8
 800dffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	f043 0301 	orr.w	r3, r3, #1
 800e00a:	653b      	str	r3, [r7, #80]	; 0x50
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3308      	adds	r3, #8
 800e012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e014:	637a      	str	r2, [r7, #52]	; 0x34
 800e016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e5      	bne.n	800dff4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3308      	adds	r3, #8
 800e02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	613b      	str	r3, [r7, #16]
   return(result);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3308      	adds	r3, #8
 800e046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e048:	623a      	str	r2, [r7, #32]
 800e04a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	69f9      	ldr	r1, [r7, #28]
 800e04e:	6a3a      	ldr	r2, [r7, #32]
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	61bb      	str	r3, [r7, #24]
   return(result);
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e5      	bne.n	800e028 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3758      	adds	r7, #88	; 0x58
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	0800e277 	.word	0x0800e277
 800e06c:	0800e399 	.word	0x0800e399
 800e070:	0800e3d1 	.word	0x0800e3d1

0800e074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b08f      	sub	sp, #60	; 0x3c
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	e853 3f00 	ldrex	r3, [r3]
 800e088:	61fb      	str	r3, [r7, #28]
   return(result);
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e090:	637b      	str	r3, [r7, #52]	; 0x34
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e09c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0a2:	e841 2300 	strex	r3, r2, [r1]
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e6      	bne.n	800e07c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3308      	adds	r3, #8
 800e0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	e853 3f00 	ldrex	r3, [r3]
 800e0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e0c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ce:	61ba      	str	r2, [r7, #24]
 800e0d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d2:	6979      	ldr	r1, [r7, #20]
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	e841 2300 	strex	r3, r2, [r1]
 800e0da:	613b      	str	r3, [r7, #16]
   return(result);
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1e5      	bne.n	800e0ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e0ea:	bf00      	nop
 800e0ec:	373c      	adds	r7, #60	; 0x3c
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b095      	sub	sp, #84	; 0x54
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e108:	e853 3f00 	ldrex	r3, [r3]
 800e10c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e114:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	461a      	mov	r2, r3
 800e11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e11e:	643b      	str	r3, [r7, #64]	; 0x40
 800e120:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e126:	e841 2300 	strex	r3, r2, [r1]
 800e12a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1e6      	bne.n	800e100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3308      	adds	r3, #8
 800e138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	e853 3f00 	ldrex	r3, [r3]
 800e140:	61fb      	str	r3, [r7, #28]
   return(result);
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	4b1e      	ldr	r3, [pc, #120]	; (800e1c0 <UART_EndRxTransfer+0xc8>)
 800e146:	4013      	ands	r3, r2
 800e148:	64bb      	str	r3, [r7, #72]	; 0x48
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	3308      	adds	r3, #8
 800e150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e152:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e15a:	e841 2300 	strex	r3, r2, [r1]
 800e15e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1e5      	bne.n	800e132 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d118      	bne.n	800e1a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	e853 3f00 	ldrex	r3, [r3]
 800e17a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f023 0310 	bic.w	r3, r3, #16
 800e182:	647b      	str	r3, [r7, #68]	; 0x44
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	461a      	mov	r2, r3
 800e18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e18c:	61bb      	str	r3, [r7, #24]
 800e18e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e190:	6979      	ldr	r1, [r7, #20]
 800e192:	69ba      	ldr	r2, [r7, #24]
 800e194:	e841 2300 	strex	r3, r2, [r1]
 800e198:	613b      	str	r3, [r7, #16]
   return(result);
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e6      	bne.n	800e16e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e1b4:	bf00      	nop
 800e1b6:	3754      	adds	r7, #84	; 0x54
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	effffffe 	.word	0xeffffffe

0800e1c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b090      	sub	sp, #64	; 0x40
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	69db      	ldr	r3, [r3, #28]
 800e1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1da:	d037      	beq.n	800e24c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	e853 3f00 	ldrex	r3, [r3]
 800e1f2:	623b      	str	r3, [r7, #32]
   return(result);
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	3308      	adds	r3, #8
 800e202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e204:	633a      	str	r2, [r7, #48]	; 0x30
 800e206:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20c:	e841 2300 	strex	r3, r2, [r1]
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1e5      	bne.n	800e1e4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	60fb      	str	r3, [r7, #12]
   return(result);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e22c:	637b      	str	r3, [r7, #52]	; 0x34
 800e22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e236:	61fb      	str	r3, [r7, #28]
 800e238:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	69b9      	ldr	r1, [r7, #24]
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	617b      	str	r3, [r7, #20]
   return(result);
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e24a:	e002      	b.n	800e252 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e24c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e24e:	f7f4 ff8d 	bl	800316c <HAL_UART_TxCpltCallback>
}
 800e252:	bf00      	nop
 800e254:	3740      	adds	r7, #64	; 0x40
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e266:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7fe fe19 	bl	800cea0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e26e:	bf00      	nop
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b09c      	sub	sp, #112	; 0x70
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e282:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	69db      	ldr	r3, [r3, #28]
 800e288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e28c:	d071      	beq.n	800e372 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e290:	2200      	movs	r2, #0
 800e292:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e29e:	e853 3f00 	ldrex	r3, [r3]
 800e2a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2bc:	e841 2300 	strex	r3, r2, [r1]
 800e2c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1e6      	bne.n	800e296 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d2:	e853 3f00 	ldrex	r3, [r3]
 800e2d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2da:	f023 0301 	bic.w	r3, r3, #1
 800e2de:	667b      	str	r3, [r7, #100]	; 0x64
 800e2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e2e8:	647a      	str	r2, [r7, #68]	; 0x44
 800e2ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2f0:	e841 2300 	strex	r3, r2, [r1]
 800e2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1e5      	bne.n	800e2c8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3308      	adds	r3, #8
 800e302:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	e853 3f00 	ldrex	r3, [r3]
 800e30a:	623b      	str	r3, [r7, #32]
   return(result);
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e312:	663b      	str	r3, [r7, #96]	; 0x60
 800e314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3308      	adds	r3, #8
 800e31a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e31c:	633a      	str	r2, [r7, #48]	; 0x30
 800e31e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e324:	e841 2300 	strex	r3, r2, [r1]
 800e328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1e5      	bne.n	800e2fc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e332:	2220      	movs	r2, #32
 800e334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d118      	bne.n	800e372 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	e853 3f00 	ldrex	r3, [r3]
 800e34c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f023 0310 	bic.w	r3, r3, #16
 800e354:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e35e:	61fb      	str	r3, [r7, #28]
 800e360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e362:	69b9      	ldr	r1, [r7, #24]
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	e841 2300 	strex	r3, r2, [r1]
 800e36a:	617b      	str	r3, [r7, #20]
   return(result);
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d1e6      	bne.n	800e340 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e376:	2b01      	cmp	r3, #1
 800e378:	d107      	bne.n	800e38a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e37c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e380:	4619      	mov	r1, r3
 800e382:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e384:	f7fe fda0 	bl	800cec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e388:	e002      	b.n	800e390 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e38a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e38c:	f7f4 ff00 	bl	8003190 <HAL_UART_RxCpltCallback>
}
 800e390:	bf00      	nop
 800e392:	3770      	adds	r7, #112	; 0x70
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d109      	bne.n	800e3c2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3b4:	085b      	lsrs	r3, r3, #1
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7fe fd84 	bl	800cec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3c0:	e002      	b.n	800e3c8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7fe fd76 	bl	800ceb4 <HAL_UART_RxHalfCpltCallback>
}
 800e3c8:	bf00      	nop
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3f8:	2b80      	cmp	r3, #128	; 0x80
 800e3fa:	d109      	bne.n	800e410 <UART_DMAError+0x40>
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	2b21      	cmp	r3, #33	; 0x21
 800e400:	d106      	bne.n	800e410 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	2200      	movs	r2, #0
 800e406:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e40a:	6978      	ldr	r0, [r7, #20]
 800e40c:	f7ff fe32 	bl	800e074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41a:	2b40      	cmp	r3, #64	; 0x40
 800e41c:	d109      	bne.n	800e432 <UART_DMAError+0x62>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2b22      	cmp	r3, #34	; 0x22
 800e422:	d106      	bne.n	800e432 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	2200      	movs	r2, #0
 800e428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e42c:	6978      	ldr	r0, [r7, #20]
 800e42e:	f7ff fe63 	bl	800e0f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e438:	f043 0210 	orr.w	r2, r3, #16
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e442:	6978      	ldr	r0, [r7, #20]
 800e444:	f7f4 fe5a 	bl	80030fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e448:	bf00      	nop
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f7f4 fe44 	bl	80030fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e474:	bf00      	nop
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	e853 3f00 	ldrex	r3, [r3]
 800e490:	60bb      	str	r3, [r7, #8]
   return(result);
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e498:	61fb      	str	r3, [r7, #28]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	61bb      	str	r3, [r7, #24]
 800e4a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	6979      	ldr	r1, [r7, #20]
 800e4a8:	69ba      	ldr	r2, [r7, #24]
 800e4aa:	e841 2300 	strex	r3, r2, [r1]
 800e4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1e6      	bne.n	800e484 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2220      	movs	r2, #32
 800e4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7f4 fe51 	bl	800316c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4ca:	bf00      	nop
 800e4cc:	3720      	adds	r7, #32
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b083      	sub	sp, #12
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e50e:	b480      	push	{r7}
 800e510:	b085      	sub	sp, #20
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d101      	bne.n	800e524 <HAL_UARTEx_DisableFifoMode+0x16>
 800e520:	2302      	movs	r3, #2
 800e522:	e027      	b.n	800e574 <HAL_UARTEx_DisableFifoMode+0x66>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2224      	movs	r2, #36	; 0x24
 800e530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f022 0201 	bic.w	r2, r2, #1
 800e54a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e552:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	68fa      	ldr	r2, [r7, #12]
 800e560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2220      	movs	r2, #32
 800e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e590:	2b01      	cmp	r3, #1
 800e592:	d101      	bne.n	800e598 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e594:	2302      	movs	r3, #2
 800e596:	e02d      	b.n	800e5f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2224      	movs	r2, #36	; 0x24
 800e5a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f022 0201 	bic.w	r2, r2, #1
 800e5be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	430a      	orrs	r2, r1
 800e5d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f84f 	bl	800e678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d101      	bne.n	800e614 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e610:	2302      	movs	r3, #2
 800e612:	e02d      	b.n	800e670 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2224      	movs	r2, #36	; 0x24
 800e620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f022 0201 	bic.w	r2, r2, #1
 800e63a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	430a      	orrs	r2, r1
 800e64e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f811 	bl	800e678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2220      	movs	r2, #32
 800e662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e684:	2b00      	cmp	r3, #0
 800e686:	d108      	bne.n	800e69a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2201      	movs	r2, #1
 800e68c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2201      	movs	r2, #1
 800e694:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e698:	e031      	b.n	800e6fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e69a:	2310      	movs	r3, #16
 800e69c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e69e:	2310      	movs	r3, #16
 800e6a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	0e5b      	lsrs	r3, r3, #25
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	f003 0307 	and.w	r3, r3, #7
 800e6b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	0f5b      	lsrs	r3, r3, #29
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f003 0307 	and.w	r3, r3, #7
 800e6c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
 800e6c4:	7b3a      	ldrb	r2, [r7, #12]
 800e6c6:	4911      	ldr	r1, [pc, #68]	; (800e70c <UARTEx_SetNbDataToProcess+0x94>)
 800e6c8:	5c8a      	ldrb	r2, [r1, r2]
 800e6ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e6ce:	7b3a      	ldrb	r2, [r7, #12]
 800e6d0:	490f      	ldr	r1, [pc, #60]	; (800e710 <UARTEx_SetNbDataToProcess+0x98>)
 800e6d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e6d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6e0:	7bfb      	ldrb	r3, [r7, #15]
 800e6e2:	7b7a      	ldrb	r2, [r7, #13]
 800e6e4:	4909      	ldr	r1, [pc, #36]	; (800e70c <UARTEx_SetNbDataToProcess+0x94>)
 800e6e6:	5c8a      	ldrb	r2, [r1, r2]
 800e6e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e6ec:	7b7a      	ldrb	r2, [r7, #13]
 800e6ee:	4908      	ldr	r1, [pc, #32]	; (800e710 <UARTEx_SetNbDataToProcess+0x98>)
 800e6f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e6f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e6fe:	bf00      	nop
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	0800edd0 	.word	0x0800edd0
 800e710:	0800edd8 	.word	0x0800edd8

0800e714 <__cxa_pure_virtual>:
 800e714:	b508      	push	{r3, lr}
 800e716:	f000 f80d 	bl	800e734 <_ZSt9terminatev>

0800e71a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e71a:	b508      	push	{r3, lr}
 800e71c:	4780      	blx	r0
 800e71e:	f000 f80e 	bl	800e73e <abort>
	...

0800e724 <_ZSt13get_terminatev>:
 800e724:	4b02      	ldr	r3, [pc, #8]	; (800e730 <_ZSt13get_terminatev+0xc>)
 800e726:	6818      	ldr	r0, [r3, #0]
 800e728:	f3bf 8f5b 	dmb	ish
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	240001b0 	.word	0x240001b0

0800e734 <_ZSt9terminatev>:
 800e734:	b508      	push	{r3, lr}
 800e736:	f7ff fff5 	bl	800e724 <_ZSt13get_terminatev>
 800e73a:	f7ff ffee 	bl	800e71a <_ZN10__cxxabiv111__terminateEPFvvE>

0800e73e <abort>:
 800e73e:	b508      	push	{r3, lr}
 800e740:	2006      	movs	r0, #6
 800e742:	f000 f873 	bl	800e82c <raise>
 800e746:	2001      	movs	r0, #1
 800e748:	f7f6 f81c 	bl	8004784 <_exit>

0800e74c <__errno>:
 800e74c:	4b01      	ldr	r3, [pc, #4]	; (800e754 <__errno+0x8>)
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	240001b4 	.word	0x240001b4

0800e758 <__libc_init_array>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	4d0d      	ldr	r5, [pc, #52]	; (800e790 <__libc_init_array+0x38>)
 800e75c:	4c0d      	ldr	r4, [pc, #52]	; (800e794 <__libc_init_array+0x3c>)
 800e75e:	1b64      	subs	r4, r4, r5
 800e760:	10a4      	asrs	r4, r4, #2
 800e762:	2600      	movs	r6, #0
 800e764:	42a6      	cmp	r6, r4
 800e766:	d109      	bne.n	800e77c <__libc_init_array+0x24>
 800e768:	4d0b      	ldr	r5, [pc, #44]	; (800e798 <__libc_init_array+0x40>)
 800e76a:	4c0c      	ldr	r4, [pc, #48]	; (800e79c <__libc_init_array+0x44>)
 800e76c:	f000 f9b0 	bl	800ead0 <_init>
 800e770:	1b64      	subs	r4, r4, r5
 800e772:	10a4      	asrs	r4, r4, #2
 800e774:	2600      	movs	r6, #0
 800e776:	42a6      	cmp	r6, r4
 800e778:	d105      	bne.n	800e786 <__libc_init_array+0x2e>
 800e77a:	bd70      	pop	{r4, r5, r6, pc}
 800e77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e780:	4798      	blx	r3
 800e782:	3601      	adds	r6, #1
 800e784:	e7ee      	b.n	800e764 <__libc_init_array+0xc>
 800e786:	f855 3b04 	ldr.w	r3, [r5], #4
 800e78a:	4798      	blx	r3
 800e78c:	3601      	adds	r6, #1
 800e78e:	e7f2      	b.n	800e776 <__libc_init_array+0x1e>
 800e790:	0800ede8 	.word	0x0800ede8
 800e794:	0800ede8 	.word	0x0800ede8
 800e798:	0800ede8 	.word	0x0800ede8
 800e79c:	0800edf0 	.word	0x0800edf0

0800e7a0 <memcpy>:
 800e7a0:	440a      	add	r2, r1
 800e7a2:	4291      	cmp	r1, r2
 800e7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7a8:	d100      	bne.n	800e7ac <memcpy+0xc>
 800e7aa:	4770      	bx	lr
 800e7ac:	b510      	push	{r4, lr}
 800e7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7b6:	4291      	cmp	r1, r2
 800e7b8:	d1f9      	bne.n	800e7ae <memcpy+0xe>
 800e7ba:	bd10      	pop	{r4, pc}

0800e7bc <memset>:
 800e7bc:	4402      	add	r2, r0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d100      	bne.n	800e7c6 <memset+0xa>
 800e7c4:	4770      	bx	lr
 800e7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7ca:	e7f9      	b.n	800e7c0 <memset+0x4>

0800e7cc <realloc>:
 800e7cc:	4b02      	ldr	r3, [pc, #8]	; (800e7d8 <realloc+0xc>)
 800e7ce:	460a      	mov	r2, r1
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	6818      	ldr	r0, [r3, #0]
 800e7d4:	f000 b8da 	b.w	800e98c <_realloc_r>
 800e7d8:	240001b4 	.word	0x240001b4

0800e7dc <_raise_r>:
 800e7dc:	291f      	cmp	r1, #31
 800e7de:	b538      	push	{r3, r4, r5, lr}
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	d904      	bls.n	800e7f0 <_raise_r+0x14>
 800e7e6:	2316      	movs	r3, #22
 800e7e8:	6003      	str	r3, [r0, #0]
 800e7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7f2:	b112      	cbz	r2, 800e7fa <_raise_r+0x1e>
 800e7f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7f8:	b94b      	cbnz	r3, 800e80e <_raise_r+0x32>
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 f830 	bl	800e860 <_getpid_r>
 800e800:	462a      	mov	r2, r5
 800e802:	4601      	mov	r1, r0
 800e804:	4620      	mov	r0, r4
 800e806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e80a:	f000 b817 	b.w	800e83c <_kill_r>
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d00a      	beq.n	800e828 <_raise_r+0x4c>
 800e812:	1c59      	adds	r1, r3, #1
 800e814:	d103      	bne.n	800e81e <_raise_r+0x42>
 800e816:	2316      	movs	r3, #22
 800e818:	6003      	str	r3, [r0, #0]
 800e81a:	2001      	movs	r0, #1
 800e81c:	e7e7      	b.n	800e7ee <_raise_r+0x12>
 800e81e:	2400      	movs	r4, #0
 800e820:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e824:	4628      	mov	r0, r5
 800e826:	4798      	blx	r3
 800e828:	2000      	movs	r0, #0
 800e82a:	e7e0      	b.n	800e7ee <_raise_r+0x12>

0800e82c <raise>:
 800e82c:	4b02      	ldr	r3, [pc, #8]	; (800e838 <raise+0xc>)
 800e82e:	4601      	mov	r1, r0
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	f7ff bfd3 	b.w	800e7dc <_raise_r>
 800e836:	bf00      	nop
 800e838:	240001b4 	.word	0x240001b4

0800e83c <_kill_r>:
 800e83c:	b538      	push	{r3, r4, r5, lr}
 800e83e:	4d07      	ldr	r5, [pc, #28]	; (800e85c <_kill_r+0x20>)
 800e840:	2300      	movs	r3, #0
 800e842:	4604      	mov	r4, r0
 800e844:	4608      	mov	r0, r1
 800e846:	4611      	mov	r1, r2
 800e848:	602b      	str	r3, [r5, #0]
 800e84a:	f7f5 ff8b 	bl	8004764 <_kill>
 800e84e:	1c43      	adds	r3, r0, #1
 800e850:	d102      	bne.n	800e858 <_kill_r+0x1c>
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	b103      	cbz	r3, 800e858 <_kill_r+0x1c>
 800e856:	6023      	str	r3, [r4, #0]
 800e858:	bd38      	pop	{r3, r4, r5, pc}
 800e85a:	bf00      	nop
 800e85c:	24001c60 	.word	0x24001c60

0800e860 <_getpid_r>:
 800e860:	f7f5 bf78 	b.w	8004754 <_getpid>

0800e864 <sbrk_aligned>:
 800e864:	b570      	push	{r4, r5, r6, lr}
 800e866:	4e0e      	ldr	r6, [pc, #56]	; (800e8a0 <sbrk_aligned+0x3c>)
 800e868:	460c      	mov	r4, r1
 800e86a:	6831      	ldr	r1, [r6, #0]
 800e86c:	4605      	mov	r5, r0
 800e86e:	b911      	cbnz	r1, 800e876 <sbrk_aligned+0x12>
 800e870:	f000 f8bc 	bl	800e9ec <_sbrk_r>
 800e874:	6030      	str	r0, [r6, #0]
 800e876:	4621      	mov	r1, r4
 800e878:	4628      	mov	r0, r5
 800e87a:	f000 f8b7 	bl	800e9ec <_sbrk_r>
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	d00a      	beq.n	800e898 <sbrk_aligned+0x34>
 800e882:	1cc4      	adds	r4, r0, #3
 800e884:	f024 0403 	bic.w	r4, r4, #3
 800e888:	42a0      	cmp	r0, r4
 800e88a:	d007      	beq.n	800e89c <sbrk_aligned+0x38>
 800e88c:	1a21      	subs	r1, r4, r0
 800e88e:	4628      	mov	r0, r5
 800e890:	f000 f8ac 	bl	800e9ec <_sbrk_r>
 800e894:	3001      	adds	r0, #1
 800e896:	d101      	bne.n	800e89c <sbrk_aligned+0x38>
 800e898:	f04f 34ff 	mov.w	r4, #4294967295
 800e89c:	4620      	mov	r0, r4
 800e89e:	bd70      	pop	{r4, r5, r6, pc}
 800e8a0:	24001c5c 	.word	0x24001c5c

0800e8a4 <_malloc_r>:
 800e8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a8:	1ccd      	adds	r5, r1, #3
 800e8aa:	f025 0503 	bic.w	r5, r5, #3
 800e8ae:	3508      	adds	r5, #8
 800e8b0:	2d0c      	cmp	r5, #12
 800e8b2:	bf38      	it	cc
 800e8b4:	250c      	movcc	r5, #12
 800e8b6:	2d00      	cmp	r5, #0
 800e8b8:	4607      	mov	r7, r0
 800e8ba:	db01      	blt.n	800e8c0 <_malloc_r+0x1c>
 800e8bc:	42a9      	cmp	r1, r5
 800e8be:	d905      	bls.n	800e8cc <_malloc_r+0x28>
 800e8c0:	230c      	movs	r3, #12
 800e8c2:	603b      	str	r3, [r7, #0]
 800e8c4:	2600      	movs	r6, #0
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8cc:	4e2e      	ldr	r6, [pc, #184]	; (800e988 <_malloc_r+0xe4>)
 800e8ce:	f000 f89d 	bl	800ea0c <__malloc_lock>
 800e8d2:	6833      	ldr	r3, [r6, #0]
 800e8d4:	461c      	mov	r4, r3
 800e8d6:	bb34      	cbnz	r4, 800e926 <_malloc_r+0x82>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4638      	mov	r0, r7
 800e8dc:	f7ff ffc2 	bl	800e864 <sbrk_aligned>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	d14d      	bne.n	800e982 <_malloc_r+0xde>
 800e8e6:	6834      	ldr	r4, [r6, #0]
 800e8e8:	4626      	mov	r6, r4
 800e8ea:	2e00      	cmp	r6, #0
 800e8ec:	d140      	bne.n	800e970 <_malloc_r+0xcc>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	4631      	mov	r1, r6
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	eb04 0803 	add.w	r8, r4, r3
 800e8f8:	f000 f878 	bl	800e9ec <_sbrk_r>
 800e8fc:	4580      	cmp	r8, r0
 800e8fe:	d13a      	bne.n	800e976 <_malloc_r+0xd2>
 800e900:	6821      	ldr	r1, [r4, #0]
 800e902:	3503      	adds	r5, #3
 800e904:	1a6d      	subs	r5, r5, r1
 800e906:	f025 0503 	bic.w	r5, r5, #3
 800e90a:	3508      	adds	r5, #8
 800e90c:	2d0c      	cmp	r5, #12
 800e90e:	bf38      	it	cc
 800e910:	250c      	movcc	r5, #12
 800e912:	4629      	mov	r1, r5
 800e914:	4638      	mov	r0, r7
 800e916:	f7ff ffa5 	bl	800e864 <sbrk_aligned>
 800e91a:	3001      	adds	r0, #1
 800e91c:	d02b      	beq.n	800e976 <_malloc_r+0xd2>
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	442b      	add	r3, r5
 800e922:	6023      	str	r3, [r4, #0]
 800e924:	e00e      	b.n	800e944 <_malloc_r+0xa0>
 800e926:	6822      	ldr	r2, [r4, #0]
 800e928:	1b52      	subs	r2, r2, r5
 800e92a:	d41e      	bmi.n	800e96a <_malloc_r+0xc6>
 800e92c:	2a0b      	cmp	r2, #11
 800e92e:	d916      	bls.n	800e95e <_malloc_r+0xba>
 800e930:	1961      	adds	r1, r4, r5
 800e932:	42a3      	cmp	r3, r4
 800e934:	6025      	str	r5, [r4, #0]
 800e936:	bf18      	it	ne
 800e938:	6059      	strne	r1, [r3, #4]
 800e93a:	6863      	ldr	r3, [r4, #4]
 800e93c:	bf08      	it	eq
 800e93e:	6031      	streq	r1, [r6, #0]
 800e940:	5162      	str	r2, [r4, r5]
 800e942:	604b      	str	r3, [r1, #4]
 800e944:	4638      	mov	r0, r7
 800e946:	f104 060b 	add.w	r6, r4, #11
 800e94a:	f000 f865 	bl	800ea18 <__malloc_unlock>
 800e94e:	f026 0607 	bic.w	r6, r6, #7
 800e952:	1d23      	adds	r3, r4, #4
 800e954:	1af2      	subs	r2, r6, r3
 800e956:	d0b6      	beq.n	800e8c6 <_malloc_r+0x22>
 800e958:	1b9b      	subs	r3, r3, r6
 800e95a:	50a3      	str	r3, [r4, r2]
 800e95c:	e7b3      	b.n	800e8c6 <_malloc_r+0x22>
 800e95e:	6862      	ldr	r2, [r4, #4]
 800e960:	42a3      	cmp	r3, r4
 800e962:	bf0c      	ite	eq
 800e964:	6032      	streq	r2, [r6, #0]
 800e966:	605a      	strne	r2, [r3, #4]
 800e968:	e7ec      	b.n	800e944 <_malloc_r+0xa0>
 800e96a:	4623      	mov	r3, r4
 800e96c:	6864      	ldr	r4, [r4, #4]
 800e96e:	e7b2      	b.n	800e8d6 <_malloc_r+0x32>
 800e970:	4634      	mov	r4, r6
 800e972:	6876      	ldr	r6, [r6, #4]
 800e974:	e7b9      	b.n	800e8ea <_malloc_r+0x46>
 800e976:	230c      	movs	r3, #12
 800e978:	603b      	str	r3, [r7, #0]
 800e97a:	4638      	mov	r0, r7
 800e97c:	f000 f84c 	bl	800ea18 <__malloc_unlock>
 800e980:	e7a1      	b.n	800e8c6 <_malloc_r+0x22>
 800e982:	6025      	str	r5, [r4, #0]
 800e984:	e7de      	b.n	800e944 <_malloc_r+0xa0>
 800e986:	bf00      	nop
 800e988:	24001c58 	.word	0x24001c58

0800e98c <_realloc_r>:
 800e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e990:	4680      	mov	r8, r0
 800e992:	4614      	mov	r4, r2
 800e994:	460e      	mov	r6, r1
 800e996:	b921      	cbnz	r1, 800e9a2 <_realloc_r+0x16>
 800e998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	4611      	mov	r1, r2
 800e99e:	f7ff bf81 	b.w	800e8a4 <_malloc_r>
 800e9a2:	b92a      	cbnz	r2, 800e9b0 <_realloc_r+0x24>
 800e9a4:	f000 f83e 	bl	800ea24 <_free_r>
 800e9a8:	4625      	mov	r5, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b0:	f000 f884 	bl	800eabc <_malloc_usable_size_r>
 800e9b4:	4284      	cmp	r4, r0
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	d802      	bhi.n	800e9c0 <_realloc_r+0x34>
 800e9ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9be:	d812      	bhi.n	800e9e6 <_realloc_r+0x5a>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4640      	mov	r0, r8
 800e9c4:	f7ff ff6e 	bl	800e8a4 <_malloc_r>
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d0ed      	beq.n	800e9aa <_realloc_r+0x1e>
 800e9ce:	42bc      	cmp	r4, r7
 800e9d0:	4622      	mov	r2, r4
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	bf28      	it	cs
 800e9d6:	463a      	movcs	r2, r7
 800e9d8:	f7ff fee2 	bl	800e7a0 <memcpy>
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4640      	mov	r0, r8
 800e9e0:	f000 f820 	bl	800ea24 <_free_r>
 800e9e4:	e7e1      	b.n	800e9aa <_realloc_r+0x1e>
 800e9e6:	4635      	mov	r5, r6
 800e9e8:	e7df      	b.n	800e9aa <_realloc_r+0x1e>
	...

0800e9ec <_sbrk_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d06      	ldr	r5, [pc, #24]	; (800ea08 <_sbrk_r+0x1c>)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	602b      	str	r3, [r5, #0]
 800e9f8:	f7f5 fece 	bl	8004798 <_sbrk>
 800e9fc:	1c43      	adds	r3, r0, #1
 800e9fe:	d102      	bne.n	800ea06 <_sbrk_r+0x1a>
 800ea00:	682b      	ldr	r3, [r5, #0]
 800ea02:	b103      	cbz	r3, 800ea06 <_sbrk_r+0x1a>
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	bd38      	pop	{r3, r4, r5, pc}
 800ea08:	24001c60 	.word	0x24001c60

0800ea0c <__malloc_lock>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__malloc_lock+0x8>)
 800ea0e:	f000 b85d 	b.w	800eacc <__retarget_lock_acquire_recursive>
 800ea12:	bf00      	nop
 800ea14:	24001c64 	.word	0x24001c64

0800ea18 <__malloc_unlock>:
 800ea18:	4801      	ldr	r0, [pc, #4]	; (800ea20 <__malloc_unlock+0x8>)
 800ea1a:	f000 b858 	b.w	800eace <__retarget_lock_release_recursive>
 800ea1e:	bf00      	nop
 800ea20:	24001c64 	.word	0x24001c64

0800ea24 <_free_r>:
 800ea24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea26:	2900      	cmp	r1, #0
 800ea28:	d044      	beq.n	800eab4 <_free_r+0x90>
 800ea2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2e:	9001      	str	r0, [sp, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f1a1 0404 	sub.w	r4, r1, #4
 800ea36:	bfb8      	it	lt
 800ea38:	18e4      	addlt	r4, r4, r3
 800ea3a:	f7ff ffe7 	bl	800ea0c <__malloc_lock>
 800ea3e:	4a1e      	ldr	r2, [pc, #120]	; (800eab8 <_free_r+0x94>)
 800ea40:	9801      	ldr	r0, [sp, #4]
 800ea42:	6813      	ldr	r3, [r2, #0]
 800ea44:	b933      	cbnz	r3, 800ea54 <_free_r+0x30>
 800ea46:	6063      	str	r3, [r4, #4]
 800ea48:	6014      	str	r4, [r2, #0]
 800ea4a:	b003      	add	sp, #12
 800ea4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea50:	f7ff bfe2 	b.w	800ea18 <__malloc_unlock>
 800ea54:	42a3      	cmp	r3, r4
 800ea56:	d908      	bls.n	800ea6a <_free_r+0x46>
 800ea58:	6825      	ldr	r5, [r4, #0]
 800ea5a:	1961      	adds	r1, r4, r5
 800ea5c:	428b      	cmp	r3, r1
 800ea5e:	bf01      	itttt	eq
 800ea60:	6819      	ldreq	r1, [r3, #0]
 800ea62:	685b      	ldreq	r3, [r3, #4]
 800ea64:	1949      	addeq	r1, r1, r5
 800ea66:	6021      	streq	r1, [r4, #0]
 800ea68:	e7ed      	b.n	800ea46 <_free_r+0x22>
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	b10b      	cbz	r3, 800ea74 <_free_r+0x50>
 800ea70:	42a3      	cmp	r3, r4
 800ea72:	d9fa      	bls.n	800ea6a <_free_r+0x46>
 800ea74:	6811      	ldr	r1, [r2, #0]
 800ea76:	1855      	adds	r5, r2, r1
 800ea78:	42a5      	cmp	r5, r4
 800ea7a:	d10b      	bne.n	800ea94 <_free_r+0x70>
 800ea7c:	6824      	ldr	r4, [r4, #0]
 800ea7e:	4421      	add	r1, r4
 800ea80:	1854      	adds	r4, r2, r1
 800ea82:	42a3      	cmp	r3, r4
 800ea84:	6011      	str	r1, [r2, #0]
 800ea86:	d1e0      	bne.n	800ea4a <_free_r+0x26>
 800ea88:	681c      	ldr	r4, [r3, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	6053      	str	r3, [r2, #4]
 800ea8e:	4421      	add	r1, r4
 800ea90:	6011      	str	r1, [r2, #0]
 800ea92:	e7da      	b.n	800ea4a <_free_r+0x26>
 800ea94:	d902      	bls.n	800ea9c <_free_r+0x78>
 800ea96:	230c      	movs	r3, #12
 800ea98:	6003      	str	r3, [r0, #0]
 800ea9a:	e7d6      	b.n	800ea4a <_free_r+0x26>
 800ea9c:	6825      	ldr	r5, [r4, #0]
 800ea9e:	1961      	adds	r1, r4, r5
 800eaa0:	428b      	cmp	r3, r1
 800eaa2:	bf04      	itt	eq
 800eaa4:	6819      	ldreq	r1, [r3, #0]
 800eaa6:	685b      	ldreq	r3, [r3, #4]
 800eaa8:	6063      	str	r3, [r4, #4]
 800eaaa:	bf04      	itt	eq
 800eaac:	1949      	addeq	r1, r1, r5
 800eaae:	6021      	streq	r1, [r4, #0]
 800eab0:	6054      	str	r4, [r2, #4]
 800eab2:	e7ca      	b.n	800ea4a <_free_r+0x26>
 800eab4:	b003      	add	sp, #12
 800eab6:	bd30      	pop	{r4, r5, pc}
 800eab8:	24001c58 	.word	0x24001c58

0800eabc <_malloc_usable_size_r>:
 800eabc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eac0:	1f18      	subs	r0, r3, #4
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	bfbc      	itt	lt
 800eac6:	580b      	ldrlt	r3, [r1, r0]
 800eac8:	18c0      	addlt	r0, r0, r3
 800eaca:	4770      	bx	lr

0800eacc <__retarget_lock_acquire_recursive>:
 800eacc:	4770      	bx	lr

0800eace <__retarget_lock_release_recursive>:
 800eace:	4770      	bx	lr

0800ead0 <_init>:
 800ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead2:	bf00      	nop
 800ead4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead6:	bc08      	pop	{r3}
 800ead8:	469e      	mov	lr, r3
 800eada:	4770      	bx	lr

0800eadc <_fini>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	bf00      	nop
 800eae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eae2:	bc08      	pop	{r3}
 800eae4:	469e      	mov	lr, r3
 800eae6:	4770      	bx	lr
