
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e274  0800e274  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e56c  0800e56c  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e57c  0800e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e50  24000078  0800e5f8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000ec8  0800e5f8  00020ec8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020e8e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000355a  00000000  00000000  00040f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001488  00000000  00000000  00044490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001388  00000000  00000000  00045918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033eb9  00000000  00000000  00046ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001af6b  00000000  00000000  0007ab59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015361d  00000000  00000000  00095ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e90e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c00  00000000  00000000  001e9134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e25c 	.word	0x0800e25c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	0800e25c 	.word	0x0800e25c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b974 	b.w	800061c <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468e      	mov	lr, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14d      	bne.n	80003f6 <__udivmoddi4+0xaa>
 800035a:	428a      	cmp	r2, r1
 800035c:	4694      	mov	ip, r2
 800035e:	d969      	bls.n	8000434 <__udivmoddi4+0xe8>
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	b152      	cbz	r2, 800037c <__udivmoddi4+0x30>
 8000366:	fa01 f302 	lsl.w	r3, r1, r2
 800036a:	f1c2 0120 	rsb	r1, r2, #32
 800036e:	fa20 f101 	lsr.w	r1, r0, r1
 8000372:	fa0c fc02 	lsl.w	ip, ip, r2
 8000376:	ea41 0e03 	orr.w	lr, r1, r3
 800037a:	4094      	lsls	r4, r2
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	0c21      	lsrs	r1, r4, #16
 8000382:	fbbe f6f8 	udiv	r6, lr, r8
 8000386:	fa1f f78c 	uxth.w	r7, ip
 800038a:	fb08 e316 	mls	r3, r8, r6, lr
 800038e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000392:	fb06 f107 	mul.w	r1, r6, r7
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 811f 	bcs.w	80005e4 <__udivmoddi4+0x298>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 811c 	bls.w	80005e4 <__udivmoddi4+0x298>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 f707 	mul.w	r7, r0, r7
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x92>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	f080 810a 	bcs.w	80005e8 <__udivmoddi4+0x29c>
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	f240 8107 	bls.w	80005e8 <__udivmoddi4+0x29c>
 80003da:	4464      	add	r4, ip
 80003dc:	3802      	subs	r0, #2
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa4>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xc2>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80ef 	beq.w	80005de <__udivmoddi4+0x292>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x160>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd4>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80f9 	bhi.w	8000612 <__udivmoddi4+0x2c6>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	469e      	mov	lr, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa4>
 800042e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa4>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xec>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 8092 	bne.w	8000566 <__udivmoddi4+0x21a>
 8000442:	eba1 010c 	sub.w	r1, r1, ip
 8000446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	2601      	movs	r6, #1
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f3f7 	udiv	r3, r1, r7
 8000456:	fb07 1113 	mls	r1, r7, r3, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb0e f003 	mul.w	r0, lr, r3
 8000462:	4288      	cmp	r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x12c>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f103 38ff 	add.w	r8, r3, #4294967295
 800046e:	d202      	bcs.n	8000476 <__udivmoddi4+0x12a>
 8000470:	4288      	cmp	r0, r1
 8000472:	f200 80cb 	bhi.w	800060c <__udivmoddi4+0x2c0>
 8000476:	4643      	mov	r3, r8
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1110 	mls	r1, r7, r0, r1
 8000484:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000488:	fb0e fe00 	mul.w	lr, lr, r0
 800048c:	45a6      	cmp	lr, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x156>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 31ff 	add.w	r1, r0, #4294967295
 8000498:	d202      	bcs.n	80004a0 <__udivmoddi4+0x154>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f200 80bb 	bhi.w	8000616 <__udivmoddi4+0x2ca>
 80004a0:	4608      	mov	r0, r1
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004aa:	e79c      	b.n	80003e6 <__udivmoddi4+0x9a>
 80004ac:	f1c6 0720 	rsb	r7, r6, #32
 80004b0:	40b3      	lsls	r3, r6
 80004b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ba:	fa20 f407 	lsr.w	r4, r0, r7
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	431c      	orrs	r4, r3
 80004c4:	40f9      	lsrs	r1, r7
 80004c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ca:	fa00 f306 	lsl.w	r3, r0, r6
 80004ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d2:	0c20      	lsrs	r0, r4, #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fb09 1118 	mls	r1, r9, r8, r1
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	fb08 f00e 	mul.w	r0, r8, lr
 80004e4:	4288      	cmp	r0, r1
 80004e6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ea:	d90b      	bls.n	8000504 <__udivmoddi4+0x1b8>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f4:	f080 8088 	bcs.w	8000608 <__udivmoddi4+0x2bc>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f240 8085 	bls.w	8000608 <__udivmoddi4+0x2bc>
 80004fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000502:	4461      	add	r1, ip
 8000504:	1a09      	subs	r1, r1, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb1 f0f9 	udiv	r0, r1, r9
 800050c:	fb09 1110 	mls	r1, r9, r0, r1
 8000510:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000514:	fb00 fe0e 	mul.w	lr, r0, lr
 8000518:	458e      	cmp	lr, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x1e2>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f100 34ff 	add.w	r4, r0, #4294967295
 8000524:	d26c      	bcs.n	8000600 <__udivmoddi4+0x2b4>
 8000526:	458e      	cmp	lr, r1
 8000528:	d96a      	bls.n	8000600 <__udivmoddi4+0x2b4>
 800052a:	3802      	subs	r0, #2
 800052c:	4461      	add	r1, ip
 800052e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000532:	fba0 9402 	umull	r9, r4, r0, r2
 8000536:	eba1 010e 	sub.w	r1, r1, lr
 800053a:	42a1      	cmp	r1, r4
 800053c:	46c8      	mov	r8, r9
 800053e:	46a6      	mov	lr, r4
 8000540:	d356      	bcc.n	80005f0 <__udivmoddi4+0x2a4>
 8000542:	d053      	beq.n	80005ec <__udivmoddi4+0x2a0>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x212>
 8000546:	ebb3 0208 	subs.w	r2, r3, r8
 800054a:	eb61 010e 	sbc.w	r1, r1, lr
 800054e:	fa01 f707 	lsl.w	r7, r1, r7
 8000552:	fa22 f306 	lsr.w	r3, r2, r6
 8000556:	40f1      	lsrs	r1, r6
 8000558:	431f      	orrs	r7, r3
 800055a:	e9c5 7100 	strd	r7, r1, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	f1c2 0320 	rsb	r3, r2, #32
 800056a:	40d8      	lsrs	r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa21 f303 	lsr.w	r3, r1, r3
 8000574:	4091      	lsls	r1, r2
 8000576:	4301      	orrs	r1, r0
 8000578:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057c:	fa1f fe8c 	uxth.w	lr, ip
 8000580:	fbb3 f0f7 	udiv	r0, r3, r7
 8000584:	fb07 3610 	mls	r6, r7, r0, r3
 8000588:	0c0b      	lsrs	r3, r1, #16
 800058a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800058e:	fb00 f60e 	mul.w	r6, r0, lr
 8000592:	429e      	cmp	r6, r3
 8000594:	fa04 f402 	lsl.w	r4, r4, r2
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x260>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a2:	d22f      	bcs.n	8000604 <__udivmoddi4+0x2b8>
 80005a4:	429e      	cmp	r6, r3
 80005a6:	d92d      	bls.n	8000604 <__udivmoddi4+0x2b8>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1b9b      	subs	r3, r3, r6
 80005ae:	b289      	uxth	r1, r1
 80005b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b4:	fb07 3316 	mls	r3, r7, r6, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb06 f30e 	mul.w	r3, r6, lr
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x28a>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005cc:	d216      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d914      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005d2:	3e02      	subs	r6, #2
 80005d4:	4461      	add	r1, ip
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005dc:	e738      	b.n	8000450 <__udivmoddi4+0x104>
 80005de:	462e      	mov	r6, r5
 80005e0:	4628      	mov	r0, r5
 80005e2:	e705      	b.n	80003f0 <__udivmoddi4+0xa4>
 80005e4:	4606      	mov	r6, r0
 80005e6:	e6e3      	b.n	80003b0 <__udivmoddi4+0x64>
 80005e8:	4618      	mov	r0, r3
 80005ea:	e6f8      	b.n	80003de <__udivmoddi4+0x92>
 80005ec:	454b      	cmp	r3, r9
 80005ee:	d2a9      	bcs.n	8000544 <__udivmoddi4+0x1f8>
 80005f0:	ebb9 0802 	subs.w	r8, r9, r2
 80005f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005f8:	3801      	subs	r0, #1
 80005fa:	e7a3      	b.n	8000544 <__udivmoddi4+0x1f8>
 80005fc:	4646      	mov	r6, r8
 80005fe:	e7ea      	b.n	80005d6 <__udivmoddi4+0x28a>
 8000600:	4620      	mov	r0, r4
 8000602:	e794      	b.n	800052e <__udivmoddi4+0x1e2>
 8000604:	4640      	mov	r0, r8
 8000606:	e7d1      	b.n	80005ac <__udivmoddi4+0x260>
 8000608:	46d0      	mov	r8, sl
 800060a:	e77b      	b.n	8000504 <__udivmoddi4+0x1b8>
 800060c:	3b02      	subs	r3, #2
 800060e:	4461      	add	r1, ip
 8000610:	e732      	b.n	8000478 <__udivmoddi4+0x12c>
 8000612:	4630      	mov	r0, r6
 8000614:	e709      	b.n	800042a <__udivmoddi4+0xde>
 8000616:	4464      	add	r4, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e742      	b.n	80004a2 <__udivmoddi4+0x156>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0a5a      	lsrs	r2, r3, #9
 8000630:	490f      	ldr	r1, [pc, #60]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000632:	fba1 1202 	umull	r1, r2, r1, r2
 8000636:	09d2      	lsrs	r2, r2, #7
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063a:	fb01 f202 	mul.w	r2, r1, r2
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	09db      	lsrs	r3, r3, #7
 8000650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	00044b83 	.word	0x00044b83
 8000674:	3b9aca00 	.word	0x3b9aca00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 ff14 	bl	80044a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f862 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 fc68 	bl	8000f58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 fc3e 	bl	8000f08 <MX_DMA_Init>
  MX_USART10_UART_Init();
 800068c:	f000 fbf0 	bl	8000e70 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000690:	f000 f91a 	bl	80008c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000694:	f000 f96e 	bl	8000974 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000698:	f000 f9c2 	bl	8000a20 <MX_TIM5_Init>
  MX_TIM8_Init();
 800069c:	f000 fa0e 	bl	8000abc <MX_TIM8_Init>
  MX_TIM15_Init();
 80006a0:	f000 faa8 	bl	8000bf4 <MX_TIM15_Init>
  MX_TIM23_Init();
 80006a4:	f000 fb38 	bl	8000d18 <MX_TIM23_Init>
  MX_TIM24_Init();
 80006a8:	f000 fb8c 	bl	8000dc4 <MX_TIM24_Init>
  MX_TIM2_Init();
 80006ac:	f000 f8be 	bl	800082c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <main+0xb0>)
 80006b2:	f009 fe8d 	bl	800a3d0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 80006b6:	481d      	ldr	r0, [pc, #116]	; (800072c <main+0xb4>)
 80006b8:	f009 fe8a 	bl	800a3d0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80006bc:	2108      	movs	r1, #8
 80006be:	481c      	ldr	r0, [pc, #112]	; (8000730 <main+0xb8>)
 80006c0:	f009 ff64 	bl	800a58c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80006c4:	210c      	movs	r1, #12
 80006c6:	481a      	ldr	r0, [pc, #104]	; (8000730 <main+0xb8>)
 80006c8:	f009 ff60 	bl	800a58c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4819      	ldr	r0, [pc, #100]	; (8000734 <main+0xbc>)
 80006d0:	f009 ff5c 	bl	800a58c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80006d4:	2104      	movs	r1, #4
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <main+0xbc>)
 80006d8:	f009 ff58 	bl	800a58c <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4816      	ldr	r0, [pc, #88]	; (8000738 <main+0xc0>)
 80006e0:	f00a f916 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80006e4:	2104      	movs	r1, #4
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <main+0xc0>)
 80006e8:	f00a f912 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4813      	ldr	r0, [pc, #76]	; (800073c <main+0xc4>)
 80006f0:	f00a f90e 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006f4:	2104      	movs	r1, #4
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <main+0xc4>)
 80006f8:	f00a f90a 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0xc8>)
 8000700:	f00a f906 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000704:	2104      	movs	r1, #4
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <main+0xc8>)
 8000708:	f00a f902 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <main+0xcc>)
 8000710:	f00a f8fe 	bl	800a910 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 8000714:	2104      	movs	r1, #4
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <main+0xcc>)
 8000718:	f00a f8fa 	bl	800a910 <HAL_TIM_Encoder_Start>


    setup();
 800071c:	f002 fbd2 	bl	8002ec4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 8000720:	f002 fbe6 	bl	8002ef0 <loop>
 8000724:	e7fc      	b.n	8000720 <main+0xa8>
 8000726:	bf00      	nop
 8000728:	24000178 	.word	0x24000178
 800072c:	24000094 	.word	0x24000094
 8000730:	240001c4 	.word	0x240001c4
 8000734:	24000210 	.word	0x24000210
 8000738:	240002a8 	.word	0x240002a8
 800073c:	240000e0 	.word	0x240000e0
 8000740:	2400012c 	.word	0x2400012c
 8000744:	2400025c 	.word	0x2400025c

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00d fbf6 	bl	800df48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00d fbf0 	bl	800df48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000768:	2002      	movs	r0, #2
 800076a:	f007 fb49 	bl	8007e00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <SystemClock_Config+0xe0>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077a:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <SystemClock_Config+0xe0>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xe0>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078e:	bf00      	nop
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <SystemClock_Config+0xe0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800079c:	d1f8      	bne.n	8000790 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2340      	movs	r3, #64	; 0x40
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ae:	2300      	movs	r3, #0
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 80007b6:	2315      	movs	r3, #21
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fb4c 	bl	8007e74 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e2:	f000 fc79 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	233f      	movs	r3, #63	; 0x3f
 80007e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80007ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007f4:	2308      	movs	r3, #8
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f007 fede 	bl	80085d0 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800081a:	f000 fc5d 	bl	80010d8 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3770      	adds	r7, #112	; 0x70
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58024800 	.word	0x58024800

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM2_Init+0x98>)
 800084c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_TIM2_Init+0x98>)
 8000854:	223f      	movs	r2, #63	; 0x3f
 8000856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_TIM2_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM2_Init+0x98>)
 8000860:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_TIM2_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <MX_TIM2_Init+0x98>)
 8000874:	f009 fd54 	bl	800a320 <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087e:	f000 fc2b 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_TIM2_Init+0x98>)
 8000890:	f00a fb00 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800089a:	f000 fc1d 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_TIM2_Init+0x98>)
 80008ac:	f00b f852 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b6:	f000 fc0f 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000094 	.word	0x24000094

080008c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2224      	movs	r2, #36	; 0x24
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00d fb36 	bl	800df48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_TIM3_Init+0xa4>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_TIM3_Init+0xa8>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_TIM3_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM3_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_TIM3_Init+0xa4>)
 80008fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM3_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM3_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800090c:	2303      	movs	r3, #3
 800090e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000914:	2301      	movs	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000924:	2301      	movs	r3, #1
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM3_Init+0xa4>)
 8000938:	f009 ff44 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000942:	f000 fbc9 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM3_Init+0xa4>)
 8000954:	f00a fffe 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800095e:	f000 fbbb 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240000e0 	.word	0x240000e0
 8000970:	40000400 	.word	0x40000400

08000974 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2224      	movs	r2, #36	; 0x24
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00d fae0 	bl	800df48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_TIM4_Init+0xa4>)
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <MX_TIM4_Init+0xa8>)
 8000996:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_TIM4_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_TIM4_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_TIM4_Init+0xa4>)
 80009a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM4_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_TIM4_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_TIM4_Init+0xa4>)
 80009e4:	f009 feee 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009ee:	f000 fb73 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_TIM4_Init+0xa4>)
 8000a00:	f00a ffa8 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a0a:	f000 fb65 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2400012c 	.word	0x2400012c
 8000a1c:	40000800 	.word	0x40000800

08000a20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <MX_TIM5_Init+0x98>)
 8000a42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a46:	223f      	movs	r2, #63	; 0x3f
 8000a48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a66:	f009 fc5b 	bl	800a320 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000a70:	f000 fb32 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a82:	f00a fa07 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 fb24 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_TIM5_Init+0x94>)
 8000a9e:	f00a ff59 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f000 fb16 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000178 	.word	0x24000178
 8000ab8:	40000c00 	.word	0x40000c00

08000abc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b098      	sub	sp, #96	; 0x60
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2234      	movs	r2, #52	; 0x34
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00d fa2d 	bl	800df48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <MX_TIM8_Init+0x130>)
 8000af0:	4a3f      	ldr	r2, [pc, #252]	; (8000bf0 <MX_TIM8_Init+0x134>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000af4:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <MX_TIM8_Init+0x130>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <MX_TIM8_Init+0x130>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b02:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000b06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b38      	ldr	r3, [pc, #224]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b1a:	4834      	ldr	r0, [pc, #208]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b1c:	f009 fcde 	bl	800a4dc <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fad7 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482b      	ldr	r0, [pc, #172]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b3e:	f00a ff09 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b48:	f000 fac6 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b72:	f00a f87b 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b7c:	f000 faac 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b84:	220c      	movs	r2, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_TIM8_Init+0x130>)
 8000b8a:	f00a f86f 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000b94:	f000 faa0 	bl	80010d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM8_Init+0x130>)
 8000bce:	f00a ff5d 	bl	800ba8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000bd8:	f000 fa7e 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM8_Init+0x130>)
 8000bde:	f003 f953 	bl	8003e88 <HAL_TIM_MspPostInit>

}
 8000be2:	bf00      	nop
 8000be4:	3760      	adds	r7, #96	; 0x60
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240001c4 	.word	0x240001c4
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b098      	sub	sp, #96	; 0x60
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2234      	movs	r2, #52	; 0x34
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f00d f991 	bl	800df48 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c28:	4a3a      	ldr	r2, [pc, #232]	; (8000d14 <MX_TIM15_Init+0x120>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c3a:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000c3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c52:	482f      	ldr	r0, [pc, #188]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c54:	f009 fc42 	bl	800a4dc <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fa3b 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4827      	ldr	r0, [pc, #156]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000c72:	f00a fe6f 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 fa2c 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481a      	ldr	r0, [pc, #104]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000ca6:	f009 ffe1 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 fa12 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000cbe:	f009 ffd5 	bl	800ac6c <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000cc8:	f000 fa06 	bl	80010d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000cf4:	f00a feca 	bl	800ba8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000cfe:	f000 f9eb 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM15_Init+0x11c>)
 8000d04:	f003 f8c0 	bl	8003e88 <HAL_TIM_MspPostInit>

}
 8000d08:	bf00      	nop
 8000d0a:	3760      	adds	r7, #96	; 0x60
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000210 	.word	0x24000210
 8000d14:	40014000 	.word	0x40014000

08000d18 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2224      	movs	r2, #36	; 0x24
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00d f90e 	bl	800df48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MX_TIM23_Init+0xa8>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000d88:	f009 fd1c 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8000d92:	f000 f9a1 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_TIM23_Init+0xa4>)
 8000da4:	f00a fdd6 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8000dae:	f000 f993 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2400025c 	.word	0x2400025c
 8000dc0:	4000e000 	.word	0x4000e000

08000dc4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00d f8b8 	bl	800df48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_TIM24_Init+0xa8>)
 8000de6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfa:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e20:	2301      	movs	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000e34:	f009 fcc6 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8000e3e:	f000 f94b 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM24_Init+0xa4>)
 8000e50:	f00a fd80 	bl	800b954 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8000e5a:	f000 f93d 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	; 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	240002a8 	.word	0x240002a8
 8000e6c:	4000e400 	.word	0x4000e400

08000e70 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <MX_USART10_UART_Init+0x94>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000eba:	f00a fea5 	bl	800bc08 <HAL_UART_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8000ec4:	f000 f908 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000ecc:	f00c ff1e 	bl	800dd0c <HAL_UARTEx_SetTxFifoThreshold>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed6:	f000 f8ff 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000ede:	f00c ff53 	bl	800dd88 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 f8f6 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_USART10_UART_Init+0x90>)
 8000eee:	f00c fed4 	bl	800dc9a <HAL_UARTEx_DisableFifoMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f8ee 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	240002f4 	.word	0x240002f4
 8000f04:	40011c00 	.word	0x40011c00

08000f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_DMA_Init+0x4c>)
 8000f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <MX_DMA_Init+0x4c>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_DMA_Init+0x4c>)
 8000f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200b      	movs	r0, #11
 8000f32:	f003 fc4a 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f36:	200b      	movs	r0, #11
 8000f38:	f003 fc61 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	200c      	movs	r0, #12
 8000f42:	f003 fc42 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f46:	200c      	movs	r0, #12
 8000f48:	f003 fc59 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a54      	ldr	r2, [pc, #336]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <MX_GPIO_Init+0x170>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <MX_GPIO_Init+0x170>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <MX_GPIO_Init+0x170>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <MX_GPIO_Init+0x170>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <MX_GPIO_Init+0x170>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <MX_GPIO_Init+0x170>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_GPIO_Init+0x170>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001040:	2200      	movs	r2, #0
 8001042:	f249 51c0 	movw	r1, #38336	; 0x95c0
 8001046:	4821      	ldr	r0, [pc, #132]	; (80010cc <MX_GPIO_Init+0x174>)
 8001048:	f006 fe9c 	bl	8007d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001052:	481f      	ldr	r0, [pc, #124]	; (80010d0 <MX_GPIO_Init+0x178>)
 8001054:	f006 fe96 	bl	8007d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001058:	f249 53c0 	movw	r3, #38336	; 0x95c0
 800105c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4816      	ldr	r0, [pc, #88]	; (80010cc <MX_GPIO_Init+0x174>)
 8001072:	f006 fbdd 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_GPIO_Init+0x17c>)
 800108e:	f006 fbcf 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001092:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <MX_GPIO_Init+0x178>)
 80010ac:	f006 fbc0 	bl	8007830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2028      	movs	r0, #40	; 0x28
 80010b6:	f003 fb88 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f003 fb9f 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58021000 	.word	0x58021000
 80010d0:	58020400 	.word	0x58020400
 80010d4:	58020800 	.word	0x58020800

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>

080010e2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <_ZN3ros3MsgC1Ev+0x1c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	0800e51c 	.word	0x0800e51c

08001124 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      data()
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffe8 	bl	8001104 <_ZN3ros3MsgC1Ev>
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3304      	adds	r3, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffcf 	bl	80010e2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800e504 	.word	0x0800e504

08001154 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6859      	ldr	r1, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b2ca      	uxtb	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0a19      	lsrs	r1, r3, #8
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	0c19      	lsrs	r1, r3, #16
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3302      	adds	r3, #2
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	b2ca      	uxtb	r2, r1
 8001192:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	0e19      	lsrs	r1, r3, #24
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3303      	adds	r3, #3
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3304      	adds	r3, #4
 80011aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6899      	ldr	r1, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	0a19      	lsrs	r1, r3, #8
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	0c19      	lsrs	r1, r3, #16
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3302      	adds	r3, #2
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	0e19      	lsrs	r1, r3, #24
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3303      	adds	r3, #3
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3304      	adds	r3, #4
 80011f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80011f6:	68fb      	ldr	r3, [r7, #12]
    }
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	440b      	add	r3, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3302      	adds	r3, #2
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	440b      	add	r3, r1
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	041b      	lsls	r3, r3, #16
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3303      	adds	r3, #3
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	440b      	add	r3, r1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	440b      	add	r3, r1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3302      	adds	r3, #2
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	440b      	add	r3, r1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3303      	adds	r3, #3
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	440b      	add	r3, r1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	061b      	lsls	r3, r3, #24
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3304      	adds	r3, #4
 80012bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80012be:	68fb      	ldr	r3, [r7, #12]
    }
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	0800e274 	.word	0x0800e274

080012e8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	0800e288 	.word	0x0800e288

08001304 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fef8 	bl	8001104 <_ZN3ros3MsgC1Ev>
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	809a      	strh	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
    {
    }
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800e4ec 	.word	0x0800e4ec
 8001348:	0800e2ac 	.word	0x0800e2ac

0800134c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	8899      	ldrh	r1, [r3, #4]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	b2ca      	uxtb	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b299      	uxth	r1, r3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	b2ca      	uxtb	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3302      	adds	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ffc0 	bl	800030c <strlen>
 800138c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	69b9      	ldr	r1, [r7, #24]
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fdb4 	bl	8002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3304      	adds	r3, #4
 80013a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	18d0      	adds	r0, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4619      	mov	r1, r3
 80013b0:	f00c fdbc 	bl	800df2c <memcpy>
      offset += length_topic_name;
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe ffa3 	bl	800030c <strlen>
 80013c6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fd97 	bl	8002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	18d0      	adds	r0, r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f00c fd9f 	bl	800df2c <memcpy>
      offset += length_message_type;
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe ff86 	bl	800030c <strlen>
 8001400:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fd7a 	bl	8002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3304      	adds	r3, #4
 8001414:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	18d0      	adds	r0, r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4619      	mov	r1, r3
 8001424:	f00c fd82 	bl	800df2c <memcpy>
      offset += length_md5sum;
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0a19      	lsrs	r1, r3, #8
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4413      	add	r3, r2
 800144e:	b2ca      	uxtb	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0c19      	lsrs	r1, r3, #16
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3302      	adds	r3, #2
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	b2ca      	uxtb	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	0e19      	lsrs	r1, r3, #24
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3303      	adds	r3, #3
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	61fb      	str	r3, [r7, #28]
      return offset;
 8001478:	69fb      	ldr	r3, [r7, #28]
    }
 800147a:	4618      	mov	r0, r3
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001482:	b580      	push	{r7, lr}
 8001484:	b08a      	sub	sp, #40	; 0x28
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	889b      	ldrh	r3, [r3, #4]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3301      	adds	r3, #1
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	440b      	add	r3, r1
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	3302      	adds	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	441a      	add	r2, r3
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fd36 	bl	8002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3304      	adds	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4413      	add	r3, r2
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d20c      	bcs.n	8001504 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	441a      	add	r2, r3
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6839      	ldr	r1, [r7, #0]
 80014f6:	440b      	add	r3, r1
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	3301      	adds	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	e7ec      	b.n	80014de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	4413      	add	r3, r2
 800150a:	3b01      	subs	r3, #1
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4413      	add	r3, r2
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3b01      	subs	r3, #1
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	441a      	add	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	4413      	add	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	441a      	add	r2, r3
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fd03 	bl	8002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	3304      	adds	r3, #4
 800153e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	429a      	cmp	r2, r3
 800154e:	d20c      	bcs.n	800156a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	441a      	add	r2, r3
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	3b01      	subs	r3, #1
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	440b      	add	r3, r1
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	3301      	adds	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	e7ec      	b.n	8001544 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4413      	add	r3, r2
 8001570:	3b01      	subs	r3, #1
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	3b01      	subs	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	441a      	add	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	441a      	add	r2, r3
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fcd0 	bl	8002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3304      	adds	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d20c      	bcs.n	80015d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	441a      	add	r2, r3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	440b      	add	r3, r1
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e7ec      	b.n	80015aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	3b01      	subs	r3, #1
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	441a      	add	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	440a      	add	r2, r1
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	3301      	adds	r3, #1
 800160c:	6839      	ldr	r1, [r7, #0]
 800160e:	440b      	add	r3, r1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3302      	adds	r3, #2
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	4313      	orrs	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	3303      	adds	r3, #3
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	4313      	orrs	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	3304      	adds	r3, #4
 8001646:	61bb      	str	r3, [r7, #24]
     return offset;
 8001648:	69bb      	ldr	r3, [r7, #24]
    }
 800164a:	4618      	mov	r0, r3
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	0800e2b0 	.word	0x0800e2b0

08001670 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	0800e2cc 	.word	0x0800e2cc

0800168c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd34 	bl	8001104 <_ZN3ros3MsgC1Ev>
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	711a      	strb	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80016ac:	609a      	str	r2, [r3, #8]
    {
    }
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	0800e4d4 	.word	0x0800e4d4
 80016bc:	0800e2ac 	.word	0x0800e2ac

080016c0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	7912      	ldrb	r2, [r2, #4]
 80016d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe11 	bl	800030c <strlen>
 80016ea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 fc05 	bl	8002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4619      	mov	r1, r3
 800170e:	f00c fc0d 	bl	800df2c <memcpy>
      offset += length_msg;
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
      return offset;
 800171a:	68fb      	ldr	r3, [r7, #12]
    }
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	441a      	add	r2, r3
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fbf5 	bl	8002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	3304      	adds	r3, #4
 800175a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	d20c      	bcs.n	8001786 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	441a      	add	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3b01      	subs	r3, #1
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	440b      	add	r3, r1
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e7ec      	b.n	8001760 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	3b01      	subs	r3, #1
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4413      	add	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3b01      	subs	r3, #1
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	441a      	add	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
     return offset;
 80017aa:	693b      	ldr	r3, [r7, #16]
    }
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	0800e2f0 	.word	0x0800e2f0

080017d0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	0800e304 	.word	0x0800e304

080017ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc84 	bl	8001104 <_ZN3ros3MsgC1Ev>
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800e4bc 	.word	0x0800e4bc

08001834 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6859      	ldr	r1, [r3, #4]
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	4413      	add	r3, r2
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0a19      	lsrs	r1, r3, #8
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	3301      	adds	r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0c19      	lsrs	r1, r3, #16
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	3302      	adds	r3, #2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	b2ca      	uxtb	r2, r1
 8001872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0e19      	lsrs	r1, r3, #24
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3303      	adds	r3, #3
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	b2ca      	uxtb	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3304      	adds	r3, #4
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	429a      	cmp	r2, r3
 8001898:	d22b      	bcs.n	80018f2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	0a19      	lsrs	r1, r3, #8
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	0c19      	lsrs	r1, r3, #16
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3302      	adds	r3, #2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2ca      	uxtb	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	0e19      	lsrs	r1, r3, #24
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	3303      	adds	r3, #3
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3304      	adds	r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	3301      	adds	r3, #1
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	e7ce      	b.n	8001890 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	0a19      	lsrs	r1, r3, #8
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	0c19      	lsrs	r1, r3, #16
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3302      	adds	r3, #2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	b2ca      	uxtb	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	0e19      	lsrs	r1, r3, #24
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3303      	adds	r3, #3
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	b2ca      	uxtb	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3304      	adds	r3, #4
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	429a      	cmp	r2, r3
 8001948:	d22b      	bcs.n	80019a2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	4413      	add	r3, r2
 8001960:	b2ca      	uxtb	r2, r1
 8001962:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	0a19      	lsrs	r1, r3, #8
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0c19      	lsrs	r1, r3, #16
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3302      	adds	r3, #2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b2ca      	uxtb	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0e19      	lsrs	r1, r3, #24
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3303      	adds	r3, #3
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	3304      	adds	r3, #4
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	e7ce      	b.n	8001940 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69d9      	ldr	r1, [r3, #28]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	b2ca      	uxtb	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	0a19      	lsrs	r1, r3, #8
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	0c19      	lsrs	r1, r3, #16
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3302      	adds	r3, #2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	b2ca      	uxtb	r2, r1
 80019d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	0e19      	lsrs	r1, r3, #24
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3303      	adds	r3, #3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	3304      	adds	r3, #4
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d228      	bcs.n	8001a4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc80 	bl	800030c <strlen>
 8001a0c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	6979      	ldr	r1, [r7, #20]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fa74 	bl	8002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3304      	adds	r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	18d0      	adds	r0, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f00c fa78 	bl	800df2c <memcpy>
      offset += length_stringsi;
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4413      	add	r3, r2
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	e7d1      	b.n	80019f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b08e      	sub	sp, #56	; 0x38
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	3301      	adds	r3, #1
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	3302      	adds	r3, #2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	6a3a      	ldr	r2, [r7, #32]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a94:	3303      	adds	r3, #3
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	061b      	lsls	r3, r3, #24
 8001a9e:	6a3a      	ldr	r2, [r7, #32]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	6a3a      	ldr	r2, [r7, #32]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d90a      	bls.n	8001aca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f00c fa4a 	bl	800df58 <realloc>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d236      	bcs.n	8001b4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440a      	add	r2, r1
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	3301      	adds	r3, #1
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	440b      	add	r3, r1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	3302      	adds	r3, #2
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	440b      	add	r3, r1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	3303      	adds	r3, #3
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	3304      	adds	r3, #4
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	3301      	adds	r3, #1
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4a:	e7c3      	b.n	8001ad4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b58:	3301      	adds	r3, #1
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	3304      	adds	r3, #4
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d90a      	bls.n	8001bb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f00c f9d6 	bl	800df58 <realloc>
 8001bac:	4602      	mov	r2, r0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d236      	bcs.n	8001c34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	440a      	add	r2, r1
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	3301      	adds	r3, #1
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	440b      	add	r3, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	3302      	adds	r3, #2
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	440b      	add	r3, r1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	3303      	adds	r3, #3
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	440b      	add	r3, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	3304      	adds	r3, #4
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	3214      	adds	r2, #20
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	3301      	adds	r3, #1
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c32:	e7c3      	b.n	8001bbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	3301      	adds	r3, #1
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	3302      	adds	r3, #2
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	3303      	adds	r3, #3
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	3304      	adds	r3, #4
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d90a      	bls.n	8001c9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f00c f962 	bl	800df58 <realloc>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d23f      	bcs.n	8001d2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f940 	bl	8002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20c      	bcs.n	8001cf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	441a      	add	r2, r3
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e7ec      	b.n	8001cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	3b01      	subs	r3, #1
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	441a      	add	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	3220      	adds	r2, #32
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	3301      	adds	r3, #1
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2c:	e7ba      	b.n	8001ca4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d30:	4618      	mov	r0, r3
 8001d32:	3738      	adds	r7, #56	; 0x38
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	0800e410 	.word	0x0800e410

08001d54 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	0800e328 	.word	0x0800e328

08001d70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68d8      	ldr	r0, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6891      	ldr	r1, [r2, #8]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4798      	blx	r3
 8001dbc:	4603      	mov	r3, r0
  };
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
  }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a42      	ldr	r2, [pc, #264]	; (8001efc <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d068      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d061      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3d      	ldr	r2, [pc, #244]	; (8001f04 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d05a      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d053      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a38      	ldr	r2, [pc, #224]	; (8001f0c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04c      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d045      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d03e      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d037      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d030      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d029      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d022      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01b      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d014      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d006      	beq.n	8001ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d109      	bne.n	8001edc <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	e008      	b.n	8001eee <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40020010 	.word	0x40020010
 8001f00:	40020028 	.word	0x40020028
 8001f04:	40020040 	.word	0x40020040
 8001f08:	40020058 	.word	0x40020058
 8001f0c:	40020070 	.word	0x40020070
 8001f10:	40020088 	.word	0x40020088
 8001f14:	400200a0 	.word	0x400200a0
 8001f18:	400200b8 	.word	0x400200b8
 8001f1c:	40020410 	.word	0x40020410
 8001f20:	40020428 	.word	0x40020428
 8001f24:	40020440 	.word	0x40020440
 8001f28:	40020458 	.word	0x40020458
 8001f2c:	40020470 	.word	0x40020470
 8001f30:	40020488 	.word	0x40020488
 8001f34:	400204a0 	.word	0x400204a0
 8001f38:	400204b8 	.word	0x400204b8

08001f3c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <_ZN13STM32HardwareC1Ev+0x34>)
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	240002f4 	.word	0x240002f4

08001f74 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f804 	bl	8001f8a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f009 ff50 	bl	800be44 <HAL_UART_Receive_DMA>
    }
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN13STM32Hardware4readEv>:

    int read(){
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff0d 	bl	8001de0 <_ZN13STM32Hardware10getRdmaIndEv>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	429c      	cmp	r4, r3
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fdc:	1c59      	adds	r1, r3, #1
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    }
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
	...

08002008 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002018:	2b20      	cmp	r3, #32
 800201a:	d108      	bne.n	800202e <_ZN13STM32Hardware5flushEv+0x26>
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <_ZN13STM32Hardware5flushEv+0xb4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <_ZN13STM32Hardware5flushEv+0x26>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <_ZN13STM32Hardware5flushEv+0x28>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03f      	beq.n	80020b4 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <_ZN13STM32Hardware5flushEv+0xb4>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002046:	429a      	cmp	r2, r3
 8002048:	d031      	beq.n	80020ae <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002056:	429a      	cmp	r2, r3
 8002058:	d20a      	bcs.n	8002070 <_ZN13STM32Hardware5flushEv+0x68>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002068:	b29b      	uxth	r3, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	b29b      	uxth	r3, r3
 800206e:	e006      	b.n	800207e <_ZN13STM32Hardware5flushEv+0x76>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002076:	b29b      	uxth	r3, r3
 8002078:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800207c:	b29b      	uxth	r3, r3
 800207e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800208a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	89fa      	ldrh	r2, [r7, #14]
 8002094:	4619      	mov	r1, r3
 8002096:	f009 fe43 	bl	800bd20 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4413      	add	r3, r2
 80020a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80020ae:	4b03      	ldr	r3, [pc, #12]	; (80020bc <_ZN13STM32Hardware5flushEv+0xb4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
      }
    }
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000474 	.word	0x24000474

080020c0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
      int n = length;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	bfa8      	it	ge
 80020d8:	f44f 7300 	movge.w	r3, #512	; 0x200
 80020dc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020e4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bf28      	it	cs
 80020ee:	4613      	movcs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f00b ff11 	bl	800df2c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4413      	add	r3, r2
 8002114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d00b      	beq.n	800213e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	18d1      	adds	r1, r2, r3
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	461a      	mov	r2, r3
 800213a:	f00b fef7 	bl	800df2c <memcpy>
      }

      flush();
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff62 	bl	8002008 <_ZN13STM32Hardware5flushEv>
    }
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	f002 fa2e 	bl	80045b4 <HAL_GetTick>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ffc8 	bl	8001104 <_ZN3ros3MsgC1Ev>
 8002174:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800e478 	.word	0x0800e478

080021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021b4:	b480      	push	{r7}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80021cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	4401      	add	r1, r0
 80021d6:	b2d3      	uxtb	r3, r2
 80021d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80021da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	0a02      	lsrs	r2, r0, #8
 80021e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021ec:	0a0b      	lsrs	r3, r1, #8
 80021ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f0:	3101      	adds	r1, #1
 80021f2:	6838      	ldr	r0, [r7, #0]
 80021f4:	4401      	add	r1, r0
 80021f6:	b2d3      	uxtb	r3, r2
 80021f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80021fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	0c02      	lsrs	r2, r0, #16
 8002208:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800220c:	0c0b      	lsrs	r3, r1, #16
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	3102      	adds	r1, #2
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	4401      	add	r1, r0
 8002216:	b2d3      	uxtb	r3, r2
 8002218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800221a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	0e02      	lsrs	r2, r0, #24
 8002228:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800222c:	0e0b      	lsrs	r3, r1, #24
 800222e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002230:	3103      	adds	r1, #3
 8002232:	6838      	ldr	r0, [r7, #0]
 8002234:	4401      	add	r1, r0
 8002236:	b2d3      	uxtb	r3, r2
 8002238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800223a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	000a      	movs	r2, r1
 8002248:	2300      	movs	r3, #0
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	3104      	adds	r1, #4
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	4401      	add	r1, r0
 8002252:	b2d3      	uxtb	r3, r2
 8002254:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002256:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	0a0a      	lsrs	r2, r1, #8
 8002264:	2300      	movs	r3, #0
 8002266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002268:	3105      	adds	r1, #5
 800226a:	6838      	ldr	r0, [r7, #0]
 800226c:	4401      	add	r1, r0
 800226e:	b2d3      	uxtb	r3, r2
 8002270:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002272:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	0c0a      	lsrs	r2, r1, #16
 8002280:	2300      	movs	r3, #0
 8002282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002284:	3106      	adds	r1, #6
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	4401      	add	r1, r0
 800228a:	b2d3      	uxtb	r3, r2
 800228c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800228e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	0e0a      	lsrs	r2, r1, #24
 800229c:	2300      	movs	r3, #0
 800229e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a0:	3107      	adds	r1, #7
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	4401      	add	r1, r0
 80022a6:	b2d3      	uxtb	r3, r2
 80022a8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	3308      	adds	r3, #8
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80022ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	6838      	ldr	r0, [r7, #0]
 80022c2:	4401      	add	r1, r0
 80022c4:	b2d3      	uxtb	r3, r2
 80022c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80022c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	0a02      	lsrs	r2, r0, #8
 80022d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022da:	0a0b      	lsrs	r3, r1, #8
 80022dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022de:	3101      	adds	r1, #1
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	4401      	add	r1, r0
 80022e4:	b2d3      	uxtb	r3, r2
 80022e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80022e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	0c02      	lsrs	r2, r0, #16
 80022f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022fa:	0c0b      	lsrs	r3, r1, #16
 80022fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fe:	3102      	adds	r1, #2
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	4401      	add	r1, r0
 8002304:	b2d3      	uxtb	r3, r2
 8002306:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002308:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	0e02      	lsrs	r2, r0, #24
 8002316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800231a:	0e0b      	lsrs	r3, r1, #24
 800231c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231e:	3103      	adds	r1, #3
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	4401      	add	r1, r0
 8002324:	b2d3      	uxtb	r3, r2
 8002326:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002328:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	000a      	movs	r2, r1
 8002336:	2300      	movs	r3, #0
 8002338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233a:	3104      	adds	r1, #4
 800233c:	6838      	ldr	r0, [r7, #0]
 800233e:	4401      	add	r1, r0
 8002340:	b2d3      	uxtb	r3, r2
 8002342:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	0a0a      	lsrs	r2, r1, #8
 8002352:	2300      	movs	r3, #0
 8002354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002356:	3105      	adds	r1, #5
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	4401      	add	r1, r0
 800235c:	b2d3      	uxtb	r3, r2
 800235e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	0c0a      	lsrs	r2, r1, #16
 800236e:	2300      	movs	r3, #0
 8002370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002372:	3106      	adds	r1, #6
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	4401      	add	r1, r0
 8002378:	b2d3      	uxtb	r3, r2
 800237a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800237c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	0e0a      	lsrs	r2, r1, #24
 800238a:	2300      	movs	r3, #0
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	3107      	adds	r1, #7
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	4401      	add	r1, r0
 8002394:	b2d3      	uxtb	r3, r2
 8002396:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3308      	adds	r3, #8
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	4401      	add	r1, r0
 80023b2:	b2d3      	uxtb	r3, r2
 80023b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80023b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	0a02      	lsrs	r2, r0, #8
 80023c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023c8:	0a0b      	lsrs	r3, r1, #8
 80023ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023cc:	3101      	adds	r1, #1
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	4401      	add	r1, r0
 80023d2:	b2d3      	uxtb	r3, r2
 80023d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80023d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	0c02      	lsrs	r2, r0, #16
 80023e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023e8:	0c0b      	lsrs	r3, r1, #16
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	3102      	adds	r1, #2
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	4401      	add	r1, r0
 80023f2:	b2d3      	uxtb	r3, r2
 80023f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80023f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	0e02      	lsrs	r2, r0, #24
 8002404:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002408:	0e0b      	lsrs	r3, r1, #24
 800240a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240c:	3103      	adds	r1, #3
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	4401      	add	r1, r0
 8002412:	b2d3      	uxtb	r3, r2
 8002414:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	000a      	movs	r2, r1
 8002424:	2300      	movs	r3, #0
 8002426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002428:	3104      	adds	r1, #4
 800242a:	6838      	ldr	r0, [r7, #0]
 800242c:	4401      	add	r1, r0
 800242e:	b2d3      	uxtb	r3, r2
 8002430:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	0a0a      	lsrs	r2, r1, #8
 8002440:	2300      	movs	r3, #0
 8002442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002444:	3105      	adds	r1, #5
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	4401      	add	r1, r0
 800244a:	b2d3      	uxtb	r3, r2
 800244c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800244e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	0c0a      	lsrs	r2, r1, #16
 800245c:	2300      	movs	r3, #0
 800245e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002460:	3106      	adds	r1, #6
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	4401      	add	r1, r0
 8002466:	b2d3      	uxtb	r3, r2
 8002468:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800246a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	0e0a      	lsrs	r2, r1, #24
 8002478:	2300      	movs	r3, #0
 800247a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247c:	3107      	adds	r1, #7
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	4401      	add	r1, r0
 8002482:	b2d3      	uxtb	r3, r2
 8002484:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3308      	adds	r3, #8
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800248e:	4618      	mov	r0, r3
 8002490:	372c      	adds	r7, #44	; 0x2c
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800249a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800249e:	b0eb      	sub	sp, #428	; 0x1ac
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80024a6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024c0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80024c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2200      	movs	r2, #0
 80024d0:	461c      	mov	r4, r3
 80024d2:	4615      	mov	r5, r2
 80024d4:	ea40 0804 	orr.w	r8, r0, r4
 80024d8:	ea41 0905 	orr.w	r9, r1, r5
 80024dc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	469a      	mov	sl, r3
 80024f8:	4693      	mov	fp, r2
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002506:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800250a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800250e:	ea40 0402 	orr.w	r4, r0, r2
 8002512:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002516:	430b      	orrs	r3, r1
 8002518:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800251c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002520:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002524:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002528:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800253e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800254e:	464c      	mov	r4, r9
 8002550:	0423      	lsls	r3, r4, #16
 8002552:	4644      	mov	r4, r8
 8002554:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002558:	4644      	mov	r4, r8
 800255a:	0422      	lsls	r2, r4, #16
 800255c:	ea40 0402 	orr.w	r4, r0, r2
 8002560:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002564:	430b      	orrs	r3, r1
 8002566:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800256a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800256e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002572:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002576:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800257a:	1cda      	adds	r2, r3, #3
 800257c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800258c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002590:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002594:	4623      	mov	r3, r4
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800259c:	4623      	mov	r3, r4
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80025a4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80025a8:	4623      	mov	r3, r4
 80025aa:	4303      	orrs	r3, r0
 80025ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025b0:	462b      	mov	r3, r5
 80025b2:	430b      	orrs	r3, r1
 80025b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025b8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80025bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80025c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025c8:	1d1a      	adds	r2, r3, #4
 80025ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80025da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80025ea:	0023      	movs	r3, r4
 80025ec:	2200      	movs	r2, #0
 80025ee:	ea40 0402 	orr.w	r4, r0, r2
 80025f2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80025f6:	430b      	orrs	r3, r1
 80025f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80025fc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002600:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002604:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002608:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800260c:	1d5a      	adds	r2, r3, #5
 800260e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2200      	movs	r2, #0
 800261a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800261e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800262e:	0223      	lsls	r3, r4, #8
 8002630:	2200      	movs	r2, #0
 8002632:	ea40 0402 	orr.w	r4, r0, r2
 8002636:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800263a:	430b      	orrs	r3, r1
 800263c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002640:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002644:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002648:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800264c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002650:	1d9a      	adds	r2, r3, #6
 8002652:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2200      	movs	r2, #0
 800265e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002662:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002672:	0423      	lsls	r3, r4, #16
 8002674:	2200      	movs	r2, #0
 8002676:	ea40 0402 	orr.w	r4, r0, r2
 800267a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800267e:	430b      	orrs	r3, r1
 8002680:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002684:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002688:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800268c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002694:	1dda      	adds	r2, r3, #7
 8002696:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80026a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80026b6:	0623      	lsls	r3, r4, #24
 80026b8:	2200      	movs	r2, #0
 80026ba:	ea40 0402 	orr.w	r4, r0, r2
 80026be:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80026c8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80026cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80026d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80026dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e0:	3308      	adds	r3, #8
 80026e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026f6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80026fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2200      	movs	r2, #0
 8002706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800270a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800270e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002712:	4623      	mov	r3, r4
 8002714:	4303      	orrs	r3, r0
 8002716:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800271a:	462b      	mov	r3, r5
 800271c:	430b      	orrs	r3, r1
 800271e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002722:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002726:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800272a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800272e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002744:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002754:	464c      	mov	r4, r9
 8002756:	0223      	lsls	r3, r4, #8
 8002758:	4644      	mov	r4, r8
 800275a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800275e:	4644      	mov	r4, r8
 8002760:	0222      	lsls	r2, r4, #8
 8002762:	ea40 0402 	orr.w	r4, r0, r2
 8002766:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800276a:	430b      	orrs	r3, r1
 800276c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002770:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002774:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002778:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800277c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002780:	1c9a      	adds	r2, r3, #2
 8002782:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80027a2:	464c      	mov	r4, r9
 80027a4:	0423      	lsls	r3, r4, #16
 80027a6:	4644      	mov	r4, r8
 80027a8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80027ac:	4644      	mov	r4, r8
 80027ae:	0422      	lsls	r2, r4, #16
 80027b0:	ea40 0402 	orr.w	r4, r0, r2
 80027b4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80027b8:	430b      	orrs	r3, r1
 80027ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027be:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80027c2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027c6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027ce:	1cda      	adds	r2, r3, #3
 80027d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d4:	4413      	add	r3, r2
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027e0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027e4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80027e8:	4623      	mov	r3, r4
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027f0:	4623      	mov	r3, r4
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80027fc:	4623      	mov	r3, r4
 80027fe:	4303      	orrs	r3, r0
 8002800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002804:	462b      	mov	r3, r5
 8002806:	430b      	orrs	r3, r1
 8002808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800280c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002810:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002814:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002818:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800281c:	1d1a      	adds	r2, r3, #4
 800281e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800282e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800283e:	0023      	movs	r3, r4
 8002840:	2200      	movs	r2, #0
 8002842:	ea40 0402 	orr.w	r4, r0, r2
 8002846:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800284a:	430b      	orrs	r3, r1
 800284c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002850:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002854:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002858:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800285c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002860:	1d5a      	adds	r2, r3, #5
 8002862:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002866:	4413      	add	r3, r2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2200      	movs	r2, #0
 800286e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002872:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002882:	0223      	lsls	r3, r4, #8
 8002884:	2200      	movs	r2, #0
 8002886:	ea40 0402 	orr.w	r4, r0, r2
 800288a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800288e:	430b      	orrs	r3, r1
 8002890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002894:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002898:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800289c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028a4:	1d9a      	adds	r2, r3, #6
 80028a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80028c6:	0423      	lsls	r3, r4, #16
 80028c8:	2200      	movs	r2, #0
 80028ca:	ea40 0402 	orr.w	r4, r0, r2
 80028ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80028d2:	430b      	orrs	r3, r1
 80028d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028d8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80028dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028e8:	1dda      	adds	r2, r3, #7
 80028ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800290a:	0623      	lsls	r3, r4, #24
 800290c:	2200      	movs	r2, #0
 800290e:	ea40 0402 	orr.w	r4, r0, r2
 8002912:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002916:	430b      	orrs	r3, r1
 8002918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800291c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002920:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002924:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002928:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800292c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002934:	3308      	adds	r3, #8
 8002936:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002946:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800294a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800294e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800295e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002962:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002966:	4623      	mov	r3, r4
 8002968:	4303      	orrs	r3, r0
 800296a:	67bb      	str	r3, [r7, #120]	; 0x78
 800296c:	462b      	mov	r3, r5
 800296e:	430b      	orrs	r3, r1
 8002970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002972:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002976:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800297a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800297e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2200      	movs	r2, #0
 8002990:	673b      	str	r3, [r7, #112]	; 0x70
 8002992:	677a      	str	r2, [r7, #116]	; 0x74
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029a0:	464c      	mov	r4, r9
 80029a2:	0223      	lsls	r3, r4, #8
 80029a4:	4644      	mov	r4, r8
 80029a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029aa:	4644      	mov	r4, r8
 80029ac:	0222      	lsls	r2, r4, #8
 80029ae:	ea40 0402 	orr.w	r4, r0, r2
 80029b2:	66bc      	str	r4, [r7, #104]	; 0x68
 80029b4:	430b      	orrs	r3, r1
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80029bc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029c0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	663b      	str	r3, [r7, #96]	; 0x60
 80029d8:	667a      	str	r2, [r7, #100]	; 0x64
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029e6:	464c      	mov	r4, r9
 80029e8:	0423      	lsls	r3, r4, #16
 80029ea:	4644      	mov	r4, r8
 80029ec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80029f0:	4644      	mov	r4, r8
 80029f2:	0422      	lsls	r2, r4, #16
 80029f4:	ea40 0402 	orr.w	r4, r0, r2
 80029f8:	65bc      	str	r4, [r7, #88]	; 0x58
 80029fa:	430b      	orrs	r3, r1
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002a02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a0e:	1cda      	adds	r2, r3, #3
 8002a10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a1e:	657a      	str	r2, [r7, #84]	; 0x54
 8002a20:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002a24:	4623      	mov	r3, r4
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a30:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002a34:	4623      	mov	r3, r4
 8002a36:	4303      	orrs	r3, r0
 8002a38:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a40:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002a44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a48:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a50:	1d1a      	adds	r2, r3, #4
 8002a52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a56:	4413      	add	r3, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002a6c:	0023      	movs	r3, r4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	ea40 0402 	orr.w	r4, r0, r2
 8002a74:	633c      	str	r4, [r7, #48]	; 0x30
 8002a76:	430b      	orrs	r3, r1
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002a7e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a8a:	1d5a      	adds	r2, r3, #5
 8002a8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2200      	movs	r2, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002aa6:	0223      	lsls	r3, r4, #8
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	ea40 0402 	orr.w	r4, r0, r2
 8002aae:	623c      	str	r4, [r7, #32]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ab8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002abc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ac0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	69bc      	ldr	r4, [r7, #24]
 8002ae0:	0423      	lsls	r3, r4, #16
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	ea40 0402 	orr.w	r4, r0, r2
 8002ae8:	613c      	str	r4, [r7, #16]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002af2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002af6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002afa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002afe:	3307      	adds	r3, #7
 8002b00:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	60fa      	str	r2, [r7, #12]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	68bc      	ldr	r4, [r7, #8]
 8002b1a:	0623      	lsls	r3, r4, #24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	ea40 0402 	orr.w	r4, r0, r2
 8002b22:	603c      	str	r4, [r7, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002b30:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002b34:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002b38:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002b3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b40:	3308      	adds	r3, #8
 8002b42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002b46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002b50:	46bd      	mov	sp, r7
 8002b52:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b56:	4770      	bx	lr

08002b58 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	0800e34c 	.word	0x0800e34c

08002b74 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	0800e364 	.word	0x0800e364

08002b90 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fab2 	bl	8001104 <_ZN3ros3MsgC1Ev>
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3308      	adds	r3, #8
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fada 	bl	8002164 <_ZN13geometry_msgs7Vector3C1Ev>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3328      	adds	r3, #40	; 0x28
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fad5 	bl	8002164 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	0800e460 	.word	0x0800e460

08002bc8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0008 	add.w	r0, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7ff fae6 	bl	80021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7ff fad9 	bl	80021b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0008 	add.w	r0, r3, #8
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7ff fc33 	bl	800249a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7ff fc26 	bl	800249a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c56:	68fb      	ldr	r3, [r7, #12]
    }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	0800e388 	.word	0x0800e388

08002c7c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	0800e39c 	.word	0x0800e39c

08002c98 <_Z8callbackRKN13geometry_msgs5TwistE>:
double Vx, Vy, W, rVx, rVy, rW;
geometry_msgs::Twist insVel;
ros::Publisher pub("/ins_vel", &insVel);

void callback(const geometry_msgs::Twist &msg)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8002ca8:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8002cb4:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002cbe:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	24000dc0 	.word	0x24000dc0
 8002cd4:	24000dc8 	.word	0x24000dc8
 8002cd8:	24000dd0 	.word	0x24000dd0

08002cdc <interPub>:
void interPub(void){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	insVel.linear.x = rVx;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <interPub+0x48>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	4910      	ldr	r1, [pc, #64]	; (8002d28 <interPub+0x4c>)
 8002ce8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	insVel.linear.y = rVy;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <interPub+0x50>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <interPub+0x4c>)
 8002cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	insVel.angular.z = rW;
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <interPub+0x54>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <interPub+0x4c>)
 8002d00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	run_inter0 ++;
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <interPub+0x58>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <interPub+0x58>)
 8002d0c:	6013      	str	r3, [r2, #0]

	pub.publish(&insVel);
 8002d0e:	4906      	ldr	r1, [pc, #24]	; (8002d28 <interPub+0x4c>)
 8002d10:	4809      	ldr	r0, [pc, #36]	; (8002d38 <interPub+0x5c>)
 8002d12:	f7ff f844 	bl	8001d9e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	run_inter1 ++;
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <interPub+0x60>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <interPub+0x60>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	24000dd8 	.word	0x24000dd8
 8002d28:	24000df0 	.word	0x24000df0
 8002d2c:	24000de0 	.word	0x24000de0
 8002d30:	24000de8 	.word	0x24000de8
 8002d34:	24000db4 	.word	0x24000db4
 8002d38:	24000e38 	.word	0x24000e38
 8002d3c:	24000db8 	.word	0x24000db8

08002d40 <_Z13Error_Handlerv>:

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);

/* UART Communication */
void Error_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d44:	b672      	cpsid	i
}
 8002d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <_Z13Error_Handlerv+0x8>
	...

08002d4c <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d52:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8002d54:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d5c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d72:	220c      	movs	r2, #12
 8002d74:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8002d94:	481b      	ldr	r0, [pc, #108]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002d96:	f008 ff37 	bl	800bc08 <HAL_UART_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 8002daa:	f7ff ffc9 	bl	8002d40 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dae:	2100      	movs	r1, #0
 8002db0:	4814      	ldr	r0, [pc, #80]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002db2:	f00a ffab 	bl	800dd0c <HAL_UARTEx_SetTxFifoThreshold>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 8002dc6:	f7ff ffbb 	bl	8002d40 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002dce:	f00a ffdb 	bl	800dd88 <HAL_UARTEx_SetRxFifoThreshold>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 8002de2:	f7ff ffad 	bl	8002d40 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002de6:	4807      	ldr	r0, [pc, #28]	; (8002e04 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8002de8:	f00a ff57 	bl	800dc9a <HAL_UARTEx_DisableFifoMode>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 8002dfc:	f7ff ffa0 	bl	8002d40 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	240002f4 	.word	0x240002f4
 8002e08:	40011c00 	.word	0x40011c00

08002e0c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_UART_ErrorCallback+0x5c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d120      	bne.n	8002e5e <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8002e1c:	4913      	ldr	r1, [pc, #76]	; (8002e6c <HAL_UART_ErrorCallback+0x60>)
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8002e2a:	4911      	ldr	r1, [pc, #68]	; (8002e70 <HAL_UART_ErrorCallback+0x64>)
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_UART_ErrorCallback+0x68>)
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8002e46:	4808      	ldr	r0, [pc, #32]	; (8002e68 <HAL_UART_ErrorCallback+0x5c>)
 8002e48:	f008 ff2e 	bl	800bca8 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8002e4c:	f7ff ff7e 	bl	8002d4c <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <HAL_UART_ErrorCallback+0x6c>)
 8002e52:	f000 f95f 	bl	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f88b 	bl	8001f74 <_ZN13STM32Hardware4initEv>
    }
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	240002f4 	.word	0x240002f4
 8002e6c:	24000dc0 	.word	0x24000dc0
 8002e70:	24000dc8 	.word	0x24000dc8
 8002e74:	24000dd0 	.word	0x24000dd0
 8002e78:	24000478 	.word	0x24000478

08002e7c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <HAL_UART_TxCpltCallback+0x20>)
 8002e86:	f000 f945 	bl	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f8bb 	bl	8002008 <_ZN13STM32Hardware5flushEv>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	24000478 	.word	0x24000478

08002ea0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8002ea8:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <HAL_UART_RxCpltCallback+0x20>)
 8002eaa:	f000 f933 	bl	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f86a 	bl	8001f8a <_ZN13STM32Hardware10reset_rbufEv>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	24000478 	.word	0x24000478

08002ec4 <setup>:
void setup(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
    nh.initNode();
 8002ec8:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <setup+0x20>)
 8002eca:	f000 f92f 	bl	800312c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8002ece:	4906      	ldr	r1, [pc, #24]	; (8002ee8 <setup+0x24>)
 8002ed0:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <setup+0x20>)
 8002ed2:	f000 f948 	bl	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 8002ed6:	4905      	ldr	r1, [pc, #20]	; (8002eec <setup+0x28>)
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <setup+0x20>)
 8002eda:	f000 f96f 	bl	80031bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	24000478 	.word	0x24000478
 8002ee8:	24000e50 	.word	0x24000e50
 8002eec:	24000e38 	.word	0x24000e38

08002ef0 <loop>:
void loop(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <loop+0x10>)
 8002ef6:	f000 f991 	bl	800321c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	24000478 	.word	0x24000478

08002f04 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d80d      	bhi.n	8002f34 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	fa22 f103 	lsr.w	r1, r2, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e7ee      	b.n	8002f12 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d811      	bhi.n	8002f7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	440a      	add	r2, r1
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	4611      	mov	r1, r2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	00d2      	lsls	r2, r2, #3
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e7ea      	b.n	8002f54 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	0800e4a8 	.word	0x0800e4a8

08002fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ffe8 	bl	8002f8c <_ZN3ros15NodeHandleBase_C1Ev>
 8002fbc:	4a3a      	ldr	r2, [pc, #232]	; (80030a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ffb8 	bl	8001f3c <_ZN13STM32HardwareC1Ev>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fc06 	bl	80017ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	d80b      	bhi.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e7f0      	b.n	8002fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b18      	cmp	r3, #24
 800300a:	d80a      	bhi.n	8003022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003014:	2100      	movs	r1, #0
 8003016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3301      	adds	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	e7f1      	b.n	8003006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302c:	d20a      	bcs.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e7f0      	b.n	8003026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304e:	d20a      	bcs.n	8003066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	e7f0      	b.n	8003048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	0800e44c 	.word	0x0800e44c

080030ac <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	0800e490 	.word	0x0800e490

080030cc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ffe5 	bl	80030ac <_ZN3ros11Subscriber_C1Ev>
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3310      	adds	r3, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fd4f 	bl	8002b90 <_ZN13geometry_msgs5TwistC1Ev>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	659a      	str	r2, [r3, #88]	; 0x58
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
  };
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800e434 	.word	0x0800e434

08003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
  }
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff1b 	bl	8001f74 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b18      	cmp	r3, #24
 8003178:	dc19      	bgt.n	80031ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	605a      	str	r2, [r3, #4]
        return true;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e004      	b.n	80031b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	e7e2      	b.n	8003174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80031ae:	2300      	movs	r3, #0
  }
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b18      	cmp	r3, #24
 80031ce:	dc1e      	bgt.n	800320e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d111      	bne.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	60da      	str	r2, [r3, #12]
        return true;
 8003202:	2301      	movs	r3, #1
 8003204:	e004      	b.n	8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e7dd      	b.n	80031ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800320e:	2300      	movs	r3, #0
  }
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff8f 	bl	800214c <_ZN13STM32Hardware4timeEv>
 800322e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800323e:	4293      	cmp	r3, r2
 8003240:	d903      	bls.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d903      	bls.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe ff68 	bl	800214c <_ZN13STM32Hardware4timeEv>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003288:	429a      	cmp	r2, r3
 800328a:	bf8c      	ite	hi
 800328c:	2301      	movhi	r3, #1
 800328e:	2300      	movls	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003296:	f06f 0301 	mvn.w	r3, #1
 800329a:	e194      	b.n	80035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fe83 	bl	8001fac <_ZN13STM32Hardware4readEv>
 80032a6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f2c0 8174 	blt.w	8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032c6:	2b07      	cmp	r3, #7
 80032c8:	d11e      	bne.n	8003308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	b2d1      	uxtb	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	460a      	mov	r2, r1
 80032e2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1b4      	bne.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2208      	movs	r2, #8
 8003302:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003306:	e7af      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800330e:	2b00      	cmp	r3, #0
 8003310:	d128      	bne.n	8003364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2bff      	cmp	r3, #255	; 0xff
 8003316:	d10d      	bne.n	8003334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f103 0214 	add.w	r2, r3, #20
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003332:	e799      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ff07 	bl	800214c <_ZN13STM32Hardware4timeEv>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	bf8c      	ite	hi
 800334c:	2301      	movhi	r3, #1
 800334e:	2300      	movls	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d088      	beq.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800335e:	f06f 0301 	mvn.w	r3, #1
 8003362:	e130      	b.n	80035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800336a:	2b01      	cmp	r3, #1
 800336c:	d118      	bne.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2bfe      	cmp	r3, #254	; 0xfe
 8003372:	d107      	bne.n	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003382:	e771      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f af68 	bne.w	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f918 	bl	80035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800339e:	e763      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d113      	bne.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80033d0:	e74a      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d110      	bne.n	80033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033fc:	e734      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003404:	2b04      	cmp	r3, #4
 8003406:	d116      	bne.n	8003436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800340e:	425a      	negs	r2, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	bf58      	it	pl
 8003416:	4253      	negpl	r3, r2
 8003418:	2bff      	cmp	r3, #255	; 0xff
 800341a:	d107      	bne.n	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800342a:	e71d      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003434:	e718      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800343c:	2b05      	cmp	r3, #5
 800343e:	d10f      	bne.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800345e:	e703      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003466:	2b06      	cmp	r3, #6
 8003468:	d117      	bne.n	800349a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2207      	movs	r2, #7
 8003480:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f47f aeec 	bne.w	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2208      	movs	r2, #8
 8003494:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003498:	e6e6      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	f47f aee1 	bne.w	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80034b4:	425a      	negs	r2, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	bf58      	it	pl
 80034bc:	4253      	negpl	r3, r2
 80034be:	2bff      	cmp	r3, #255	; 0xff
 80034c0:	f47f aed2 	bne.w	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d110      	bne.n	80034f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f87d 	bl	80035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f898 	bl	800360a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e06a      	b.n	80035c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034f6:	2b0a      	cmp	r3, #10
 80034f8:	d107      	bne.n	800350a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f960 	bl	80037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003508:	e6ae      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003510:	2b06      	cmp	r3, #6
 8003512:	d10e      	bne.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f7fe fa97 	bl	8001a56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003530:	e69a      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003538:	2b0b      	cmp	r3, #11
 800353a:	d104      	bne.n	8003546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003544:	e690      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800354c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f43f ae84 	beq.w	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003566:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003570:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800357a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003592:	4611      	mov	r1, r2
 8003594:	4798      	blx	r3
    while (true)
 8003596:	e667      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003598:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00f      	beq.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d906      	bls.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f809 	bl	80035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80035c4:	2300      	movs	r3, #0
  }
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fda2 	bl	8001124 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f107 020c 	add.w	r2, r7, #12
 80035ea:	210a      	movs	r1, #10
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
    rt_time = hardware_.time();
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fda9 	bl	800214c <_ZN13STM32Hardware4timeEv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800360a:	b590      	push	{r4, r7, lr}
 800360c:	b08b      	sub	sp, #44	; 0x2c
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fe74 	bl	8001304 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b18      	cmp	r3, #24
 8003624:	dc63      	bgt.n	80036ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d056      	beq.n	80036e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	b29b      	uxth	r3, r3
 800364a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4608      	mov	r0, r1
 8003686:	4798      	blx	r3
 8003688:	4603      	mov	r3, r0
 800368a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4608      	mov	r0, r1
 80036b4:	4798      	blx	r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80036ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036be:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681c      	ldr	r4, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fb76 	bl	8001dc6 <_ZN3ros9Publisher15getEndpointTypeEv>
 80036da:	4601      	mov	r1, r0
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	461a      	mov	r2, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	3301      	adds	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	e798      	b.n	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b18      	cmp	r3, #24
 80036f6:	dc5f      	bgt.n	80037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d053      	beq.n	80037b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b29b      	uxth	r3, r3
 8003718:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003732:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4608      	mov	r0, r1
 800374a:	4798      	blx	r3
 800374c:	4603      	mov	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4608      	mov	r0, r1
 8003770:	4798      	blx	r3
 8003772:	4603      	mov	r3, r0
 8003774:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681c      	ldr	r4, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	f202 2222 	addw	r2, r2, #546	; 0x222
 800378a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4798      	blx	r3
 80037a4:	4601      	mov	r1, r0
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	461a      	mov	r2, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	3301      	adds	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	e79c      	b.n	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80037c0:	bf00      	nop
 80037c2:	372c      	adds	r7, #44	; 0x2c
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}

080037c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fca4 	bl	8001124 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fcb3 	bl	800214c <_ZN13STM32Hardware4timeEv>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd fd03 	bl	8001204 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4915      	ldr	r1, [pc, #84]	; (8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003804:	fba1 1303 	umull	r1, r3, r1, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	4413      	add	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800380e:	6939      	ldr	r1, [r7, #16]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003814:	fba3 0302 	umull	r0, r3, r3, r2
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	440b      	add	r3, r1
 800382c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8a6 	bl	8003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fc83 	bl	800214c <_ZN13STM32Hardware4timeEv>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	10624dd3 	.word	0x10624dd3
 800385c:	000f4240 	.word	0x000f4240

08003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b63      	cmp	r3, #99	; 0x63
 8003870:	dd09      	ble.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003882:	2300      	movs	r3, #0
 8003884:	e079      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003892:	3207      	adds	r2, #7
 8003894:	4611      	mov	r1, r2
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	22fe      	movs	r2, #254	; 0xfe
 80038a8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80038d2:	4413      	add	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	121b      	asrs	r3, r3, #8
 80038f0:	b21b      	sxth	r3, r3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80038fe:	2305      	movs	r3, #5
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3306      	adds	r3, #6
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	429a      	cmp	r2, r3
 800390a:	dc0d      	bgt.n	8003928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	3301      	adds	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e7ec      	b.n	8003902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3307      	adds	r3, #7
 800392c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	425a      	negs	r2, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	bf58      	it	pl
 8003938:	4253      	negpl	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	6179      	str	r1, [r7, #20]
 8003942:	43d2      	mvns	r2, r2
 8003944:	b2d1      	uxtb	r1, r2
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	460a      	mov	r2, r1
 800394c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003956:	dc0a      	bgt.n	800396e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1d18      	adds	r0, r3, #4
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4619      	mov	r1, r3
 8003966:	f7fe fbab 	bl	80020c0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e005      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800396e:	4905      	ldr	r1, [pc, #20]	; (8003984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f849 	bl	8003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	0800e3c0 	.word	0x0800e3c0

08003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fbd8 	bl	800214c <_ZN13STM32Hardware4timeEv>
 800399c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4915      	ldr	r1, [pc, #84]	; (80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80039a6:	fba1 1303 	umull	r1, r3, r1, r3
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80039be:	fba3 0302 	umull	r0, r3, r3, r2
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	1aca      	subs	r2, r1, r3
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80039d8:	4413      	add	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f7fc fe16 	bl	8000620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	10624dd3 	.word	0x10624dd3
 8003a00:	000f4240 	.word	0x000f4240
 8003a04:	3b9aca00 	.word	0x3b9aca00

08003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	2103      	movs	r1, #3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f804 	bl	8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fe28 	bl	800168c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f107 0214 	add.w	r2, r7, #20
 8003a4e:	2107      	movs	r1, #7
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	4798      	blx	r3
  }
 8003a54:	bf00      	nop
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_Z41__static_initialization_and_destruction_0ii>:
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d116      	bne.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d111      	bne.n	8003a9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003a76:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003a78:	f7ff fa98 	bl	8002fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist insVel;
 8003a7c:	480a      	ldr	r0, [pc, #40]	; (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a7e:	f7ff f887 	bl	8002b90 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher pub("/ins_vel", &insVel);
 8003a82:	2300      	movs	r3, #0
 8003a84:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a86:	4909      	ldr	r1, [pc, #36]	; (8003aac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003a88:	4809      	ldr	r0, [pc, #36]	; (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003a8a:	f7fe f971 	bl	8001d70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003a92:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003a94:	4809      	ldr	r0, [pc, #36]	; (8003abc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003a96:	f7ff fb19 	bl	80030cc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24000478 	.word	0x24000478
 8003aa8:	24000df0 	.word	0x24000df0
 8003aac:	0800e3fc 	.word	0x0800e3fc
 8003ab0:	24000e38 	.word	0x24000e38
 8003ab4:	08002c99 	.word	0x08002c99
 8003ab8:	0800e408 	.word	0x0800e408
 8003abc:	24000e50 	.word	0x24000e50

08003ac0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3310      	adds	r3, #16
 8003ace:	6839      	ldr	r1, [r7, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f89f 	bl	8002c14 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	3210      	adds	r2, #16
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4798      	blx	r3
  }
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff f8a6 	bl	8002c60 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003b14:	4603      	mov	r3, r0
  }
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3310      	adds	r3, #16
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff f8a6 	bl	8002c7c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003b30:	4603      	mov	r3, r0
  }
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_GLOBAL__sub_I_nh>:
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7ff ff7d 	bl	8003a5c <_Z41__static_initialization_and_destruction_0ii>
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_MspInit+0x3c>)
 8003b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b70:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <HAL_MspInit+0x3c>)
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_MspInit+0x3c>)
 8003b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2005      	movs	r0, #5
 8003b8e:	f000 fe1c 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003b92:	2005      	movs	r0, #5
 8003b94:	f000 fe33 	bl	80047fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	58024400 	.word	0x58024400

08003ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d117      	bne.n	8003be6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bc6:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	201c      	movs	r0, #28
 8003bda:	f000 fdf6 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bde:	201c      	movs	r0, #28
 8003be0:	f000 fe0d 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003be4:	e01b      	b.n	8003c1e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_TIM_Base_MspInit+0x88>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d116      	bne.n	8003c1e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_TIM_Base_MspInit+0x84>)
 8003c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2032      	movs	r0, #50	; 0x32
 8003c14:	f000 fdd9 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c18:	2032      	movs	r0, #50	; 0x32
 8003c1a:	f000 fdf0 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	40000c00 	.word	0x40000c00

08003c30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b090      	sub	sp, #64	; 0x40
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a69      	ldr	r2, [pc, #420]	; (8003df4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d12e      	bne.n	8003cb0 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c52:	4b69      	ldr	r3, [pc, #420]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c58:	4a67      	ldr	r2, [pc, #412]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c62:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c70:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c76:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	2302      	movs	r3, #2
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4854      	ldr	r0, [pc, #336]	; (8003dfc <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003caa:	f003 fdc1 	bl	8007830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8003cae:	e09c      	b.n	8003dea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12f      	bne.n	8003d1a <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cba:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc0:	4a4d      	ldr	r2, [pc, #308]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cca:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd8:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cde:	4a46      	ldr	r2, [pc, #280]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003ce0:	f043 0308 	orr.w	r3, r3, #8
 8003ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ce8:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003cf6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d10:	4619      	mov	r1, r3
 8003d12:	483c      	ldr	r0, [pc, #240]	; (8003e04 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003d14:	f003 fd8c 	bl	8007830 <HAL_GPIO_Init>
}
 8003d18:	e067      	b.n	8003dea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d12e      	bne.n	8003d82 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d2a:	4a33      	ldr	r2, [pc, #204]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d60:	2303      	movs	r3, #3
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8003d70:	230d      	movs	r3, #13
 8003d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4824      	ldr	r0, [pc, #144]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003d7c:	f003 fd58 	bl	8007830 <HAL_GPIO_Init>
}
 8003d80:	e033      	b.n	8003dea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d12e      	bne.n	8003dea <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003d9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003dc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8003dda:	230e      	movs	r3, #14
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	4809      	ldr	r0, [pc, #36]	; (8003e0c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003de6:	f003 fd23 	bl	8007830 <HAL_GPIO_Init>
}
 8003dea:	bf00      	nop
 8003dec:	3740      	adds	r7, #64	; 0x40
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40000400 	.word	0x40000400
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	58020000 	.word	0x58020000
 8003e00:	40000800 	.word	0x40000800
 8003e04:	58020c00 	.word	0x58020c00
 8003e08:	4000e000 	.word	0x4000e000
 8003e0c:	58021400 	.word	0x58021400
 8003e10:	4000e400 	.word	0x4000e400

08003e14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <HAL_TIM_PWM_MspInit+0x68>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10f      	bne.n	8003e46 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003e44:	e013      	b.n	8003e6e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a0e      	ldr	r2, [pc, #56]	; (8003e84 <HAL_TIM_PWM_MspInit+0x70>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10e      	bne.n	8003e6e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	58024400 	.word	0x58024400
 8003e84:	40014000 	.word	0x40014000

08003e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a35      	ldr	r2, [pc, #212]	; (8003f7c <HAL_TIM_MspPostInit+0xf4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d120      	bne.n	8003eec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eaa:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb0:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ec8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003eda:	2303      	movs	r3, #3
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ede:	f107 0314 	add.w	r3, r7, #20
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4827      	ldr	r0, [pc, #156]	; (8003f84 <HAL_TIM_MspPostInit+0xfc>)
 8003ee6:	f003 fca3 	bl	8007830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003eea:	e042      	b.n	8003f72 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a25      	ldr	r2, [pc, #148]	; (8003f88 <HAL_TIM_MspPostInit+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d13d      	bne.n	8003f72 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003efe:	f043 0310 	orr.w	r3, r3, #16
 8003f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <HAL_TIM_MspPostInit+0xf8>)
 8003f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f32:	2320      	movs	r3, #32
 8003f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003f42:	2304      	movs	r3, #4
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	480f      	ldr	r0, [pc, #60]	; (8003f8c <HAL_TIM_MspPostInit+0x104>)
 8003f4e:	f003 fc6f 	bl	8007830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f52:	2308      	movs	r3, #8
 8003f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f56:	2302      	movs	r3, #2
 8003f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003f62:	2304      	movs	r3, #4
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f66:	f107 0314 	add.w	r3, r7, #20
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4808      	ldr	r0, [pc, #32]	; (8003f90 <HAL_TIM_MspPostInit+0x108>)
 8003f6e:	f003 fc5f 	bl	8007830 <HAL_GPIO_Init>
}
 8003f72:	bf00      	nop
 8003f74:	3728      	adds	r7, #40	; 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40010400 	.word	0x40010400
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58020800 	.word	0x58020800
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	58021000 	.word	0x58021000
 8003f90:	58020000 	.word	0x58020000

08003f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b0b6      	sub	sp, #216	; 0xd8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fac:	f107 0310 	add.w	r3, r7, #16
 8003fb0:	22b4      	movs	r2, #180	; 0xb4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f009 ffc7 	bl	800df48 <memset>
  if(huart->Instance==USART10)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a62      	ldr	r2, [pc, #392]	; (8004148 <HAL_UART_MspInit+0x1b4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f040 80bc 	bne.w	800413e <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fd0:	f107 0310 	add.w	r3, r7, #16
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f004 fe87 	bl	8008ce8 <HAL_RCCEx_PeriphCLKConfig>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003fe0:	f7fd f87a 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_UART_MspInit+0x1b8>)
 8003fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fea:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_UART_MspInit+0x1b8>)
 8003fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_UART_MspInit+0x1b8>)
 8003ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004002:	4b52      	ldr	r3, [pc, #328]	; (800414c <HAL_UART_MspInit+0x1b8>)
 8004004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004008:	4a50      	ldr	r2, [pc, #320]	; (800414c <HAL_UART_MspInit+0x1b8>)
 800400a:	f043 0310 	orr.w	r3, r3, #16
 800400e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004012:	4b4e      	ldr	r3, [pc, #312]	; (800414c <HAL_UART_MspInit+0x1b8>)
 8004014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004020:	2304      	movs	r3, #4
 8004022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004038:	2304      	movs	r3, #4
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800403e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004042:	4619      	mov	r1, r3
 8004044:	4842      	ldr	r0, [pc, #264]	; (8004150 <HAL_UART_MspInit+0x1bc>)
 8004046:	f003 fbf3 	bl	8007830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800404a:	2308      	movs	r3, #8
 800404c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8004062:	230b      	movs	r3, #11
 8004064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004068:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800406c:	4619      	mov	r1, r3
 800406e:	4838      	ldr	r0, [pc, #224]	; (8004150 <HAL_UART_MspInit+0x1bc>)
 8004070:	f003 fbde 	bl	8007830 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 8004074:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 8004076:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_UART_MspInit+0x1c4>)
 8004078:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 800407c:	2276      	movs	r2, #118	; 0x76
 800407e:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 800408c:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 800408e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004092:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a6:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040ae:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 80040b6:	4827      	ldr	r0, [pc, #156]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040b8:	f000 fbca 	bl	8004850 <HAL_DMA_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80040c2:	f7fd f809 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <HAL_UART_MspInit+0x1c0>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 80040d2:	4b22      	ldr	r3, [pc, #136]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_UART_MspInit+0x1cc>)
 80040d6:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80040d8:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040da:	2277      	movs	r2, #119	; 0x77
 80040dc:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040de:	4b1f      	ldr	r3, [pc, #124]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f0:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_UART_MspInit+0x1c8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_UART_MspInit+0x1c8>)
 8004100:	2200      	movs	r2, #0
 8004102:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_UART_MspInit+0x1c8>)
 8004106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800410a:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_UART_MspInit+0x1c8>)
 800410e:	2200      	movs	r2, #0
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 8004112:	4812      	ldr	r0, [pc, #72]	; (800415c <HAL_UART_MspInit+0x1c8>)
 8004114:	f000 fb9c 	bl	8004850 <HAL_DMA_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 800411e:	f7fc ffdb 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_UART_MspInit+0x1c8>)
 8004126:	679a      	str	r2, [r3, #120]	; 0x78
 8004128:	4a0c      	ldr	r2, [pc, #48]	; (800415c <HAL_UART_MspInit+0x1c8>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	209c      	movs	r0, #156	; 0x9c
 8004134:	f000 fb49 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004138:	209c      	movs	r0, #156	; 0x9c
 800413a:	f000 fb60 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 800413e:	bf00      	nop
 8004140:	37d8      	adds	r7, #216	; 0xd8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40011c00 	.word	0x40011c00
 800414c:	58024400 	.word	0x58024400
 8004150:	58021000 	.word	0x58021000
 8004154:	24000384 	.word	0x24000384
 8004158:	40020010 	.word	0x40020010
 800415c:	240003fc 	.word	0x240003fc
 8004160:	40020028 	.word	0x40020028

08004164 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <HAL_UART_MspDeInit+0x4c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d118      	bne.n	80041a8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_UART_MspDeInit+0x50>)
 8004178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <HAL_UART_MspDeInit+0x50>)
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 8004186:	210c      	movs	r1, #12
 8004188:	480b      	ldr	r0, [pc, #44]	; (80041b8 <HAL_UART_MspDeInit+0x54>)
 800418a:	f003 fcf9 	bl	8007b80 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004192:	4618      	mov	r0, r3
 8004194:	f000 feb6 	bl	8004f04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419c:	4618      	mov	r0, r3
 800419e:	f000 feb1 	bl	8004f04 <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 80041a2:	209c      	movs	r0, #156	; 0x9c
 80041a4:	f000 fb39 	bl	800481a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40011c00 	.word	0x40011c00
 80041b4:	58024400 	.word	0x58024400
 80041b8:	58021000 	.word	0x58021000

080041bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <NMI_Handler+0x4>

080041c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <HardFault_Handler+0x4>

080041c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <MemManage_Handler+0x4>

080041ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <UsageFault_Handler+0x4>

080041da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004208:	f000 f9c0 	bl	800458c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <DMA1_Stream0_IRQHandler+0x10>)
 8004226:	f001 fff1 	bl	800620c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	24000384 	.word	0x24000384

08004234 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <DMA1_Stream1_IRQHandler+0x10>)
 800423a:	f001 ffe7 	bl	800620c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	240003fc 	.word	0x240003fc

08004248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <TIM2_IRQHandler+0x10>)
 800424e:	f006 fbed 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	24000094 	.word	0x24000094

0800425c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004260:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004264:	f003 fda7 	bl	8007db6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}

0800426c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <TIM5_IRQHandler+0x10>)
 8004272:	f006 fbdb 	bl	800aa2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	24000178 	.word	0x24000178

08004280 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <USART10_IRQHandler+0x10>)
 8004286:	f007 fe33 	bl	800bef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	240002f4 	.word	0x240002f4

08004294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
	return 1;
 8004298:	2301      	movs	r3, #1
}
 800429a:	4618      	mov	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_kill>:

int _kill(int pid, int sig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042ae:	f009 fe13 	bl	800ded8 <__errno>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2216      	movs	r2, #22
 80042b6:	601a      	str	r2, [r3, #0]
	return -1;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_exit>:

void _exit (int status)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ffe7 	bl	80042a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042d6:	e7fe      	b.n	80042d6 <_exit+0x12>

080042d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <_sbrk+0x5c>)
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <_sbrk+0x60>)
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <_sbrk+0x64>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <_sbrk+0x64>)
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <_sbrk+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d207      	bcs.n	8004318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004308:	f009 fde6 	bl	800ded8 <__errno>
 800430c:	4603      	mov	r3, r0
 800430e:	220c      	movs	r2, #12
 8004310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e009      	b.n	800432c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <_sbrk+0x64>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_sbrk+0x64>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <_sbrk+0x64>)
 8004328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	24050000 	.word	0x24050000
 8004338:	00000400 	.word	0x00000400
 800433c:	24000eb0 	.word	0x24000eb0
 8004340:	24000ec8 	.word	0x24000ec8

08004344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004348:	4b32      	ldr	r3, [pc, #200]	; (8004414 <SystemInit+0xd0>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	4a31      	ldr	r2, [pc, #196]	; (8004414 <SystemInit+0xd0>)
 8004350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004358:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <SystemInit+0xd4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2b06      	cmp	r3, #6
 8004362:	d807      	bhi.n	8004374 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <SystemInit+0xd4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 030f 	bic.w	r3, r3, #15
 800436c:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <SystemInit+0xd4>)
 800436e:	f043 0307 	orr.w	r3, r3, #7
 8004372:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <SystemInit+0xd8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <SystemInit+0xd8>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004380:	4b26      	ldr	r3, [pc, #152]	; (800441c <SystemInit+0xd8>)
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <SystemInit+0xd8>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4924      	ldr	r1, [pc, #144]	; (800441c <SystemInit+0xd8>)
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <SystemInit+0xdc>)
 800438e:	4013      	ands	r3, r2
 8004390:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <SystemInit+0xd4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <SystemInit+0xd4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 030f 	bic.w	r3, r3, #15
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <SystemInit+0xd4>)
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <SystemInit+0xd8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <SystemInit+0xd8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <SystemInit+0xd8>)
 80043bc:	2200      	movs	r2, #0
 80043be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <SystemInit+0xd8>)
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <SystemInit+0xe0>)
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <SystemInit+0xd8>)
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <SystemInit+0xe4>)
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043cc:	4b13      	ldr	r3, [pc, #76]	; (800441c <SystemInit+0xd8>)
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <SystemInit+0xe8>)
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <SystemInit+0xd8>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <SystemInit+0xd8>)
 80043da:	4a14      	ldr	r2, [pc, #80]	; (800442c <SystemInit+0xe8>)
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <SystemInit+0xd8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <SystemInit+0xd8>)
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <SystemInit+0xe8>)
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <SystemInit+0xd8>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <SystemInit+0xd8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <SystemInit+0xd8>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <SystemInit+0xd8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <SystemInit+0xec>)
 8004404:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004408:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00
 8004418:	52002000 	.word	0x52002000
 800441c:	58024400 	.word	0x58024400
 8004420:	eaf6ed7f 	.word	0xeaf6ed7f
 8004424:	02020200 	.word	0x02020200
 8004428:	01ff0000 	.word	0x01ff0000
 800442c:	01010280 	.word	0x01010280
 8004430:	52004000 	.word	0x52004000

08004434 <HAL_TIM_PeriodElapsedCallback>:
#include "timing.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d101      	bne.n	800444a <HAL_TIM_PeriodElapsedCallback+0x16>
		interPub();
 8004446:	f7fe fc49 	bl	8002cdc <interPub>
//		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
//				+ Kpid[2].insVel - Kpid[3].insVel );
//		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
//				- Kpid[2].insVel + Kpid[3].insVel );
//	}
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800448c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004458:	f7ff ff74 	bl	8004344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800445e:	490d      	ldr	r1, [pc, #52]	; (8004494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004474:	4c0a      	ldr	r4, [pc, #40]	; (80044a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004482:	f009 fd2f 	bl	800dee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004486:	f7fc f8f7 	bl	8000678 <main>
  bx  lr
 800448a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800448c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004490:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004494:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004498:	0800e580 	.word	0x0800e580
  ldr r2, =_sbss
 800449c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80044a0:	24000ec8 	.word	0x24000ec8

080044a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a4:	e7fe      	b.n	80044a4 <ADC3_IRQHandler>
	...

080044a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ae:	2003      	movs	r0, #3
 80044b0:	f000 f980 	bl	80047b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044b4:	f004 fa42 	bl	800893c <HAL_RCC_GetSysClockFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_Init+0x68>)
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	4913      	ldr	r1, [pc, #76]	; (8004514 <HAL_Init+0x6c>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HAL_Init+0x68>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_Init+0x6c>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_Init+0x70>)
 80044ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <HAL_Init+0x74>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044f2:	200f      	movs	r0, #15
 80044f4:	f000 f814 	bl	8004520 <HAL_InitTick>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e002      	b.n	8004508 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004502:	f7ff fb2f 	bl	8003b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	58024400 	.word	0x58024400
 8004514:	0800e52c 	.word	0x0800e52c
 8004518:	24000004 	.word	0x24000004
 800451c:	24000000 	.word	0x24000000

08004520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_InitTick+0x60>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e021      	b.n	8004578 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_InitTick+0x64>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_InitTick+0x60>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	4619      	mov	r1, r3
 800453e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004542:	fbb3 f3f1 	udiv	r3, r3, r1
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f973 	bl	8004836 <HAL_SYSTICK_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e00e      	b.n	8004578 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b0f      	cmp	r3, #15
 800455e:	d80a      	bhi.n	8004576 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004560:	2200      	movs	r2, #0
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	f000 f92f 	bl	80047ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800456c:	4a06      	ldr	r2, [pc, #24]	; (8004588 <HAL_InitTick+0x68>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	2400000c 	.word	0x2400000c
 8004584:	24000000 	.word	0x24000000
 8004588:	24000008 	.word	0x24000008

0800458c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_IncTick+0x20>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_IncTick+0x24>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4413      	add	r3, r2
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <HAL_IncTick+0x24>)
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2400000c 	.word	0x2400000c
 80045b0:	24000eb4 	.word	0x24000eb4

080045b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return uwTick;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_GetTick+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	24000eb4 	.word	0x24000eb4

080045cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <__NVIC_SetPriorityGrouping+0x40>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e8:	4013      	ands	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <__NVIC_SetPriorityGrouping+0x44>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <__NVIC_SetPriorityGrouping+0x40>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00
 8004610:	05fa0000 	.word	0x05fa0000

08004614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <__NVIC_GetPriorityGrouping+0x18>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0307 	and.w	r3, r3, #7
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800463a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	db0b      	blt.n	800465a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <__NVIC_EnableIRQ+0x38>)
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2001      	movs	r0, #1
 8004652:	fa00 f202 	lsl.w	r2, r0, r2
 8004656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000e100 	.word	0xe000e100

0800466c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db12      	blt.n	80046a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	490a      	ldr	r1, [pc, #40]	; (80046b0 <__NVIC_DisableIRQ+0x44>)
 8004686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2001      	movs	r0, #1
 800468e:	fa00 f202 	lsl.w	r2, r0, r2
 8004692:	3320      	adds	r3, #32
 8004694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004698:	f3bf 8f4f 	dsb	sy
}
 800469c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800469e:	f3bf 8f6f 	isb	sy
}
 80046a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004780:	d301      	bcc.n	8004786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004782:	2301      	movs	r3, #1
 8004784:	e00f      	b.n	80047a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <SysTick_Config+0x40>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478e:	210f      	movs	r1, #15
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	f7ff ff8e 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <SysTick_Config+0x40>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <SysTick_Config+0x40>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010

080047b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff05 	bl	80045cc <__NVIC_SetPriorityGrouping>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff1c 	bl	8004614 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff0f 	bl	8004630 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	4603      	mov	r3, r0
 8004822:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff1f 	bl	800466c <__NVIC_DisableIRQ>
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff96 	bl	8004770 <SysTick_Config>
 8004844:	4603      	mov	r3, r0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7ff feac 	bl	80045b4 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e314      	b.n	8004e92 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a66      	ldr	r2, [pc, #408]	; (8004a08 <HAL_DMA_Init+0x1b8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d04a      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a65      	ldr	r2, [pc, #404]	; (8004a0c <HAL_DMA_Init+0x1bc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d045      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a63      	ldr	r2, [pc, #396]	; (8004a10 <HAL_DMA_Init+0x1c0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d040      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a62      	ldr	r2, [pc, #392]	; (8004a14 <HAL_DMA_Init+0x1c4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d03b      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a60      	ldr	r2, [pc, #384]	; (8004a18 <HAL_DMA_Init+0x1c8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d036      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5f      	ldr	r2, [pc, #380]	; (8004a1c <HAL_DMA_Init+0x1cc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d031      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5d      	ldr	r2, [pc, #372]	; (8004a20 <HAL_DMA_Init+0x1d0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02c      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a5c      	ldr	r2, [pc, #368]	; (8004a24 <HAL_DMA_Init+0x1d4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d027      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5a      	ldr	r2, [pc, #360]	; (8004a28 <HAL_DMA_Init+0x1d8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d022      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a59      	ldr	r2, [pc, #356]	; (8004a2c <HAL_DMA_Init+0x1dc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d01d      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a57      	ldr	r2, [pc, #348]	; (8004a30 <HAL_DMA_Init+0x1e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a56      	ldr	r2, [pc, #344]	; (8004a34 <HAL_DMA_Init+0x1e4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a54      	ldr	r2, [pc, #336]	; (8004a38 <HAL_DMA_Init+0x1e8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a53      	ldr	r2, [pc, #332]	; (8004a3c <HAL_DMA_Init+0x1ec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a51      	ldr	r2, [pc, #324]	; (8004a40 <HAL_DMA_Init+0x1f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_DMA_Init+0xb8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a50      	ldr	r2, [pc, #320]	; (8004a44 <HAL_DMA_Init+0x1f4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_DMA_Init+0xbc>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_DMA_Init+0xbe>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 813c 	beq.w	8004b8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <HAL_DMA_Init+0x1b8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d04a      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a36      	ldr	r2, [pc, #216]	; (8004a0c <HAL_DMA_Init+0x1bc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d045      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <HAL_DMA_Init+0x1c0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d040      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a33      	ldr	r2, [pc, #204]	; (8004a14 <HAL_DMA_Init+0x1c4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d03b      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a31      	ldr	r2, [pc, #196]	; (8004a18 <HAL_DMA_Init+0x1c8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d036      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a30      	ldr	r2, [pc, #192]	; (8004a1c <HAL_DMA_Init+0x1cc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d031      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2e      	ldr	r2, [pc, #184]	; (8004a20 <HAL_DMA_Init+0x1d0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02c      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <HAL_DMA_Init+0x1d4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d027      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2b      	ldr	r2, [pc, #172]	; (8004a28 <HAL_DMA_Init+0x1d8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2a      	ldr	r2, [pc, #168]	; (8004a2c <HAL_DMA_Init+0x1dc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01d      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <HAL_DMA_Init+0x1e0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <HAL_DMA_Init+0x1e4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_DMA_Init+0x1e8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <HAL_DMA_Init+0x1ec>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <HAL_DMA_Init+0x1f0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_Init+0x174>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <HAL_DMA_Init+0x1f4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <HAL_DMA_Init+0x186>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e007      	b.n	80049e6 <HAL_DMA_Init+0x196>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049e6:	e02f      	b.n	8004a48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e8:	f7ff fde4 	bl	80045b4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d928      	bls.n	8004a48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e244      	b.n	8004e92 <HAL_DMA_Init+0x642>
 8004a08:	40020010 	.word	0x40020010
 8004a0c:	40020028 	.word	0x40020028
 8004a10:	40020040 	.word	0x40020040
 8004a14:	40020058 	.word	0x40020058
 8004a18:	40020070 	.word	0x40020070
 8004a1c:	40020088 	.word	0x40020088
 8004a20:	400200a0 	.word	0x400200a0
 8004a24:	400200b8 	.word	0x400200b8
 8004a28:	40020410 	.word	0x40020410
 8004a2c:	40020428 	.word	0x40020428
 8004a30:	40020440 	.word	0x40020440
 8004a34:	40020458 	.word	0x40020458
 8004a38:	40020470 	.word	0x40020470
 8004a3c:	40020488 	.word	0x40020488
 8004a40:	400204a0 	.word	0x400204a0
 8004a44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1c8      	bne.n	80049e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <HAL_DMA_Init+0x424>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d107      	bne.n	8004aac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b28      	cmp	r3, #40	; 0x28
 8004ab2:	d903      	bls.n	8004abc <HAL_DMA_Init+0x26c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aba:	d91f      	bls.n	8004afc <HAL_DMA_Init+0x2ac>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ac2:	d903      	bls.n	8004acc <HAL_DMA_Init+0x27c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b42      	cmp	r3, #66	; 0x42
 8004aca:	d917      	bls.n	8004afc <HAL_DMA_Init+0x2ac>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b46      	cmp	r3, #70	; 0x46
 8004ad2:	d903      	bls.n	8004adc <HAL_DMA_Init+0x28c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b48      	cmp	r3, #72	; 0x48
 8004ada:	d90f      	bls.n	8004afc <HAL_DMA_Init+0x2ac>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b4e      	cmp	r3, #78	; 0x4e
 8004ae2:	d903      	bls.n	8004aec <HAL_DMA_Init+0x29c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b52      	cmp	r3, #82	; 0x52
 8004aea:	d907      	bls.n	8004afc <HAL_DMA_Init+0x2ac>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b73      	cmp	r3, #115	; 0x73
 8004af2:	d905      	bls.n	8004b00 <HAL_DMA_Init+0x2b0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b77      	cmp	r3, #119	; 0x77
 8004afa:	d801      	bhi.n	8004b00 <HAL_DMA_Init+0x2b0>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_DMA_Init+0x2b2>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 0307 	bic.w	r3, r3, #7
 8004b24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d117      	bne.n	8004b68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00e      	beq.n	8004b68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f002 fce6 	bl	800751c <DMA_CheckFifoParam>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2240      	movs	r2, #64	; 0x40
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e194      	b.n	8004e92 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f002 fc21 	bl	80073b8 <DMA_CalcBaseAndBitshift>
 8004b76:	4603      	mov	r3, r0
 8004b78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	223f      	movs	r2, #63	; 0x3f
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	e0ca      	b.n	8004d22 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	; (8004c78 <HAL_DMA_Init+0x428>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_DMA_Init+0x42c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	; (8004c80 <HAL_DMA_Init+0x430>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	; (8004c84 <HAL_DMA_Init+0x434>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	; (8004c88 <HAL_DMA_Init+0x438>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	; (8004c8c <HAL_DMA_Init+0x43c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <HAL_DMA_Init+0x440>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_DMA_Init+0x38c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <HAL_DMA_Init+0x444>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_DMA_Init+0x390>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_DMA_Init+0x392>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8094 	beq.w	8004d10 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <HAL_DMA_Init+0x428>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d021      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <HAL_DMA_Init+0x42c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d01c      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <HAL_DMA_Init+0x430>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d017      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <HAL_DMA_Init+0x434>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d012      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <HAL_DMA_Init+0x438>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00d      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <HAL_DMA_Init+0x43c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d008      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <HAL_DMA_Init+0x440>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <HAL_DMA_Init+0x3e6>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_DMA_Init+0x444>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_DMA_Init+0x448>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d01d      	beq.n	8004c9c <HAL_DMA_Init+0x44c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d102      	bne.n	8004c6e <HAL_DMA_Init+0x41e>
 8004c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c6c:	e017      	b.n	8004c9e <HAL_DMA_Init+0x44e>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e015      	b.n	8004c9e <HAL_DMA_Init+0x44e>
 8004c72:	bf00      	nop
 8004c74:	fe10803f 	.word	0xfe10803f
 8004c78:	58025408 	.word	0x58025408
 8004c7c:	5802541c 	.word	0x5802541c
 8004c80:	58025430 	.word	0x58025430
 8004c84:	58025444 	.word	0x58025444
 8004c88:	58025458 	.word	0x58025458
 8004c8c:	5802546c 	.word	0x5802546c
 8004c90:	58025480 	.word	0x58025480
 8004c94:	58025494 	.word	0x58025494
 8004c98:	fffe000f 	.word	0xfffe000f
 8004c9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68d2      	ldr	r2, [r2, #12]
 8004ca2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ccc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_DMA_Init+0x64c>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a6e      	ldr	r2, [pc, #440]	; (8004ea0 <HAL_DMA_Init+0x650>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	009a      	lsls	r2, r3, #2
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f002 fb5f 	bl	80073b8 <DMA_CalcBaseAndBitshift>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	e008      	b.n	8004d22 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0b7      	b.n	8004e92 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5f      	ldr	r2, [pc, #380]	; (8004ea4 <HAL_DMA_Init+0x654>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d072      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5d      	ldr	r2, [pc, #372]	; (8004ea8 <HAL_DMA_Init+0x658>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d06d      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5c      	ldr	r2, [pc, #368]	; (8004eac <HAL_DMA_Init+0x65c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d068      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_DMA_Init+0x660>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d063      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a59      	ldr	r2, [pc, #356]	; (8004eb4 <HAL_DMA_Init+0x664>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d05e      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_DMA_Init+0x668>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d059      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a56      	ldr	r2, [pc, #344]	; (8004ebc <HAL_DMA_Init+0x66c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d054      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_DMA_Init+0x670>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04f      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a53      	ldr	r2, [pc, #332]	; (8004ec4 <HAL_DMA_Init+0x674>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_DMA_Init+0x678>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a50      	ldr	r2, [pc, #320]	; (8004ecc <HAL_DMA_Init+0x67c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <HAL_DMA_Init+0x680>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4d      	ldr	r2, [pc, #308]	; (8004ed4 <HAL_DMA_Init+0x684>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_DMA_Init+0x688>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_DMA_Init+0x68c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a48      	ldr	r2, [pc, #288]	; (8004ee0 <HAL_DMA_Init+0x690>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a47      	ldr	r2, [pc, #284]	; (8004ee4 <HAL_DMA_Init+0x694>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <HAL_DMA_Init+0x698>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a44      	ldr	r2, [pc, #272]	; (8004eec <HAL_DMA_Init+0x69c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a42      	ldr	r2, [pc, #264]	; (8004ef0 <HAL_DMA_Init+0x6a0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a41      	ldr	r2, [pc, #260]	; (8004ef4 <HAL_DMA_Init+0x6a4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <HAL_DMA_Init+0x6a8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3e      	ldr	r2, [pc, #248]	; (8004efc <HAL_DMA_Init+0x6ac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_Init+0x5c2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3c      	ldr	r2, [pc, #240]	; (8004f00 <HAL_DMA_Init+0x6b0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Init+0x5c6>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <HAL_DMA_Init+0x5c8>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d032      	beq.n	8004e82 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f002 fbf9 	bl	8007614 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d102      	bne.n	8004e30 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_DMA_Init+0x620>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d80c      	bhi.n	8004e70 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f002 fc76 	bl	8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e008      	b.n	8004e82 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	a7fdabf8 	.word	0xa7fdabf8
 8004ea0:	cccccccd 	.word	0xcccccccd
 8004ea4:	40020010 	.word	0x40020010
 8004ea8:	40020028 	.word	0x40020028
 8004eac:	40020040 	.word	0x40020040
 8004eb0:	40020058 	.word	0x40020058
 8004eb4:	40020070 	.word	0x40020070
 8004eb8:	40020088 	.word	0x40020088
 8004ebc:	400200a0 	.word	0x400200a0
 8004ec0:	400200b8 	.word	0x400200b8
 8004ec4:	40020410 	.word	0x40020410
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	40020440 	.word	0x40020440
 8004ed0:	40020458 	.word	0x40020458
 8004ed4:	40020470 	.word	0x40020470
 8004ed8:	40020488 	.word	0x40020488
 8004edc:	400204a0 	.word	0x400204a0
 8004ee0:	400204b8 	.word	0x400204b8
 8004ee4:	58025408 	.word	0x58025408
 8004ee8:	5802541c 	.word	0x5802541c
 8004eec:	58025430 	.word	0x58025430
 8004ef0:	58025444 	.word	0x58025444
 8004ef4:	58025458 	.word	0x58025458
 8004ef8:	5802546c 	.word	0x5802546c
 8004efc:	58025480 	.word	0x58025480
 8004f00:	58025494 	.word	0x58025494

08004f04 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1a8      	b.n	8005268 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a82      	ldr	r2, [pc, #520]	; (8005124 <HAL_DMA_DeInit+0x220>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d04a      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a80      	ldr	r2, [pc, #512]	; (8005128 <HAL_DMA_DeInit+0x224>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d045      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7f      	ldr	r2, [pc, #508]	; (800512c <HAL_DMA_DeInit+0x228>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d040      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7d      	ldr	r2, [pc, #500]	; (8005130 <HAL_DMA_DeInit+0x22c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d03b      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7c      	ldr	r2, [pc, #496]	; (8005134 <HAL_DMA_DeInit+0x230>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d036      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a7a      	ldr	r2, [pc, #488]	; (8005138 <HAL_DMA_DeInit+0x234>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a79      	ldr	r2, [pc, #484]	; (800513c <HAL_DMA_DeInit+0x238>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d02c      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a77      	ldr	r2, [pc, #476]	; (8005140 <HAL_DMA_DeInit+0x23c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d027      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a76      	ldr	r2, [pc, #472]	; (8005144 <HAL_DMA_DeInit+0x240>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d022      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a74      	ldr	r2, [pc, #464]	; (8005148 <HAL_DMA_DeInit+0x244>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01d      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a73      	ldr	r2, [pc, #460]	; (800514c <HAL_DMA_DeInit+0x248>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a71      	ldr	r2, [pc, #452]	; (8005150 <HAL_DMA_DeInit+0x24c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a70      	ldr	r2, [pc, #448]	; (8005154 <HAL_DMA_DeInit+0x250>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <HAL_DMA_DeInit+0x254>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a6d      	ldr	r2, [pc, #436]	; (800515c <HAL_DMA_DeInit+0x258>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_DMA_DeInit+0xb2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6b      	ldr	r2, [pc, #428]	; (8005160 <HAL_DMA_DeInit+0x25c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <HAL_DMA_DeInit+0xc4>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e007      	b.n	8004fd8 <HAL_DMA_DeInit+0xd4>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a51      	ldr	r2, [pc, #324]	; (8005124 <HAL_DMA_DeInit+0x220>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d04a      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a50      	ldr	r2, [pc, #320]	; (8005128 <HAL_DMA_DeInit+0x224>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d045      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a4e      	ldr	r2, [pc, #312]	; (800512c <HAL_DMA_DeInit+0x228>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d040      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4d      	ldr	r2, [pc, #308]	; (8005130 <HAL_DMA_DeInit+0x22c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d03b      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4b      	ldr	r2, [pc, #300]	; (8005134 <HAL_DMA_DeInit+0x230>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d036      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4a      	ldr	r2, [pc, #296]	; (8005138 <HAL_DMA_DeInit+0x234>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d031      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a48      	ldr	r2, [pc, #288]	; (800513c <HAL_DMA_DeInit+0x238>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d02c      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a47      	ldr	r2, [pc, #284]	; (8005140 <HAL_DMA_DeInit+0x23c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d027      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a45      	ldr	r2, [pc, #276]	; (8005144 <HAL_DMA_DeInit+0x240>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a44      	ldr	r2, [pc, #272]	; (8005148 <HAL_DMA_DeInit+0x244>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d01d      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a42      	ldr	r2, [pc, #264]	; (800514c <HAL_DMA_DeInit+0x248>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a41      	ldr	r2, [pc, #260]	; (8005150 <HAL_DMA_DeInit+0x24c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3f      	ldr	r2, [pc, #252]	; (8005154 <HAL_DMA_DeInit+0x250>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <HAL_DMA_DeInit+0x254>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3c      	ldr	r2, [pc, #240]	; (800515c <HAL_DMA_DeInit+0x258>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_DMA_DeInit+0x174>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3b      	ldr	r2, [pc, #236]	; (8005160 <HAL_DMA_DeInit+0x25c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_DMA_DeInit+0x178>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_DMA_DeInit+0x17a>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d025      	beq.n	80050ce <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f002 f980 	bl	80073b8 <DMA_CalcBaseAndBitshift>
 80050b8:	4603      	mov	r3, r0
 80050ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	223f      	movs	r2, #63	; 0x3f
 80050c6:	409a      	lsls	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	e081      	b.n	80051d2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a24      	ldr	r2, [pc, #144]	; (8005164 <HAL_DMA_DeInit+0x260>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <HAL_DMA_DeInit+0x264>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a21      	ldr	r2, [pc, #132]	; (800516c <HAL_DMA_DeInit+0x268>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_DMA_DeInit+0x26c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <HAL_DMA_DeInit+0x270>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <HAL_DMA_DeInit+0x274>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_DMA_DeInit+0x278>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMA_DeInit+0x21a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <HAL_DMA_DeInit+0x27c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d132      	bne.n	8005184 <HAL_DMA_DeInit+0x280>
 800511e:	2301      	movs	r3, #1
 8005120:	e031      	b.n	8005186 <HAL_DMA_DeInit+0x282>
 8005122:	bf00      	nop
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d021      	beq.n	80051ce <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f002 f900 	bl	80073b8 <DMA_CalcBaseAndBitshift>
 80051b8:	4603      	mov	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2201      	movs	r2, #1
 80051c6:	409a      	lsls	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	e001      	b.n	80051d2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e04a      	b.n	8005268 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f002 fa1e 	bl	8007614 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051f0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <HAL_DMA_DeInit+0x316>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d80b      	bhi.n	800521a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f002 faa0 	bl	8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005218:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e226      	b.n	80056da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_DMA_Start_IT+0x2a>
 8005296:	2302      	movs	r3, #2
 8005298:	e21f      	b.n	80056da <HAL_DMA_Start_IT+0x46a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	f040 820a 	bne.w	80056c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a68      	ldr	r2, [pc, #416]	; (8005464 <HAL_DMA_Start_IT+0x1f4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d04a      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a66      	ldr	r2, [pc, #408]	; (8005468 <HAL_DMA_Start_IT+0x1f8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d045      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a65      	ldr	r2, [pc, #404]	; (800546c <HAL_DMA_Start_IT+0x1fc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d040      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a63      	ldr	r2, [pc, #396]	; (8005470 <HAL_DMA_Start_IT+0x200>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a62      	ldr	r2, [pc, #392]	; (8005474 <HAL_DMA_Start_IT+0x204>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d036      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a60      	ldr	r2, [pc, #384]	; (8005478 <HAL_DMA_Start_IT+0x208>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a5f      	ldr	r2, [pc, #380]	; (800547c <HAL_DMA_Start_IT+0x20c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d02c      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a5d      	ldr	r2, [pc, #372]	; (8005480 <HAL_DMA_Start_IT+0x210>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d027      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a5c      	ldr	r2, [pc, #368]	; (8005484 <HAL_DMA_Start_IT+0x214>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d022      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5a      	ldr	r2, [pc, #360]	; (8005488 <HAL_DMA_Start_IT+0x218>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01d      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a59      	ldr	r2, [pc, #356]	; (800548c <HAL_DMA_Start_IT+0x21c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d018      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a57      	ldr	r2, [pc, #348]	; (8005490 <HAL_DMA_Start_IT+0x220>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a56      	ldr	r2, [pc, #344]	; (8005494 <HAL_DMA_Start_IT+0x224>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a54      	ldr	r2, [pc, #336]	; (8005498 <HAL_DMA_Start_IT+0x228>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d009      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a53      	ldr	r2, [pc, #332]	; (800549c <HAL_DMA_Start_IT+0x22c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_DMA_Start_IT+0xee>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a51      	ldr	r2, [pc, #324]	; (80054a0 <HAL_DMA_Start_IT+0x230>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <HAL_DMA_Start_IT+0x100>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e007      	b.n	8005380 <HAL_DMA_Start_IT+0x110>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f001 fe6a 	bl	8007060 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a34      	ldr	r2, [pc, #208]	; (8005464 <HAL_DMA_Start_IT+0x1f4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d04a      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a33      	ldr	r2, [pc, #204]	; (8005468 <HAL_DMA_Start_IT+0x1f8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d045      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a31      	ldr	r2, [pc, #196]	; (800546c <HAL_DMA_Start_IT+0x1fc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d040      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a30      	ldr	r2, [pc, #192]	; (8005470 <HAL_DMA_Start_IT+0x200>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d03b      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <HAL_DMA_Start_IT+0x204>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d036      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <HAL_DMA_Start_IT+0x208>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d031      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <HAL_DMA_Start_IT+0x20c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02c      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <HAL_DMA_Start_IT+0x210>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d027      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <HAL_DMA_Start_IT+0x214>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d022      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a27      	ldr	r2, [pc, #156]	; (8005488 <HAL_DMA_Start_IT+0x218>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d01d      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <HAL_DMA_Start_IT+0x21c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d018      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a24      	ldr	r2, [pc, #144]	; (8005490 <HAL_DMA_Start_IT+0x220>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a22      	ldr	r2, [pc, #136]	; (8005494 <HAL_DMA_Start_IT+0x224>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a21      	ldr	r2, [pc, #132]	; (8005498 <HAL_DMA_Start_IT+0x228>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <HAL_DMA_Start_IT+0x22c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_DMA_Start_IT+0x1bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_DMA_Start_IT+0x230>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d101      	bne.n	8005430 <HAL_DMA_Start_IT+0x1c0>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_DMA_Start_IT+0x1c2>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d036      	beq.n	80054a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 021e 	bic.w	r2, r3, #30
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0216 	orr.w	r2, r2, #22
 8005448:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d03e      	beq.n	80054d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0208 	orr.w	r2, r2, #8
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e035      	b.n	80054d0 <HAL_DMA_Start_IT+0x260>
 8005464:	40020010 	.word	0x40020010
 8005468:	40020028 	.word	0x40020028
 800546c:	40020040 	.word	0x40020040
 8005470:	40020058 	.word	0x40020058
 8005474:	40020070 	.word	0x40020070
 8005478:	40020088 	.word	0x40020088
 800547c:	400200a0 	.word	0x400200a0
 8005480:	400200b8 	.word	0x400200b8
 8005484:	40020410 	.word	0x40020410
 8005488:	40020428 	.word	0x40020428
 800548c:	40020440 	.word	0x40020440
 8005490:	40020458 	.word	0x40020458
 8005494:	40020470 	.word	0x40020470
 8005498:	40020488 	.word	0x40020488
 800549c:	400204a0 	.word	0x400204a0
 80054a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 020e 	bic.w	r2, r3, #14
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 020a 	orr.w	r2, r2, #10
 80054b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0204 	orr.w	r2, r2, #4
 80054ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a83      	ldr	r2, [pc, #524]	; (80056e4 <HAL_DMA_Start_IT+0x474>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d072      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a82      	ldr	r2, [pc, #520]	; (80056e8 <HAL_DMA_Start_IT+0x478>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d06d      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a80      	ldr	r2, [pc, #512]	; (80056ec <HAL_DMA_Start_IT+0x47c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d068      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a7f      	ldr	r2, [pc, #508]	; (80056f0 <HAL_DMA_Start_IT+0x480>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d063      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a7d      	ldr	r2, [pc, #500]	; (80056f4 <HAL_DMA_Start_IT+0x484>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d05e      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a7c      	ldr	r2, [pc, #496]	; (80056f8 <HAL_DMA_Start_IT+0x488>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d059      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a7a      	ldr	r2, [pc, #488]	; (80056fc <HAL_DMA_Start_IT+0x48c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d054      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a79      	ldr	r2, [pc, #484]	; (8005700 <HAL_DMA_Start_IT+0x490>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d04f      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a77      	ldr	r2, [pc, #476]	; (8005704 <HAL_DMA_Start_IT+0x494>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d04a      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a76      	ldr	r2, [pc, #472]	; (8005708 <HAL_DMA_Start_IT+0x498>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d045      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a74      	ldr	r2, [pc, #464]	; (800570c <HAL_DMA_Start_IT+0x49c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d040      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a73      	ldr	r2, [pc, #460]	; (8005710 <HAL_DMA_Start_IT+0x4a0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d03b      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a71      	ldr	r2, [pc, #452]	; (8005714 <HAL_DMA_Start_IT+0x4a4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d036      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a70      	ldr	r2, [pc, #448]	; (8005718 <HAL_DMA_Start_IT+0x4a8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d031      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6e      	ldr	r2, [pc, #440]	; (800571c <HAL_DMA_Start_IT+0x4ac>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02c      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6d      	ldr	r2, [pc, #436]	; (8005720 <HAL_DMA_Start_IT+0x4b0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d027      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6b      	ldr	r2, [pc, #428]	; (8005724 <HAL_DMA_Start_IT+0x4b4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d022      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6a      	ldr	r2, [pc, #424]	; (8005728 <HAL_DMA_Start_IT+0x4b8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d01d      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a68      	ldr	r2, [pc, #416]	; (800572c <HAL_DMA_Start_IT+0x4bc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a67      	ldr	r2, [pc, #412]	; (8005730 <HAL_DMA_Start_IT+0x4c0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <HAL_DMA_Start_IT+0x4c4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a64      	ldr	r2, [pc, #400]	; (8005738 <HAL_DMA_Start_IT+0x4c8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a62      	ldr	r2, [pc, #392]	; (800573c <HAL_DMA_Start_IT+0x4cc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_DMA_Start_IT+0x350>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a61      	ldr	r2, [pc, #388]	; (8005740 <HAL_DMA_Start_IT+0x4d0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_DMA_Start_IT+0x354>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_DMA_Start_IT+0x356>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01a      	beq.n	8005600 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <HAL_DMA_Start_IT+0x474>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d04a      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a36      	ldr	r2, [pc, #216]	; (80056e8 <HAL_DMA_Start_IT+0x478>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d045      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_Start_IT+0x47c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d040      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_DMA_Start_IT+0x480>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d03b      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_Start_IT+0x484>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d036      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <HAL_DMA_Start_IT+0x488>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d031      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_Start_IT+0x48c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02c      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_DMA_Start_IT+0x490>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_Start_IT+0x494>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_DMA_Start_IT+0x498>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01d      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_Start_IT+0x49c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <HAL_DMA_Start_IT+0x4a0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_Start_IT+0x4a4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_DMA_Start_IT+0x4a8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_Start_IT+0x4ac>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_DMA_Start_IT+0x430>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_DMA_Start_IT+0x4b0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <HAL_DMA_Start_IT+0x442>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e012      	b.n	80056d8 <HAL_DMA_Start_IT+0x468>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e009      	b.n	80056d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
 8005724:	58025408 	.word	0x58025408
 8005728:	5802541c 	.word	0x5802541c
 800572c:	58025430 	.word	0x58025430
 8005730:	58025444 	.word	0x58025444
 8005734:	58025458 	.word	0x58025458
 8005738:	5802546c 	.word	0x5802546c
 800573c:	58025480 	.word	0x58025480
 8005740:	58025494 	.word	0x58025494

08005744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800574c:	f7fe ff32 	bl	80045b4 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e2dc      	b.n	8005d16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d008      	beq.n	800577a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e2cd      	b.n	8005d16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a76      	ldr	r2, [pc, #472]	; (8005958 <HAL_DMA_Abort+0x214>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d04a      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a74      	ldr	r2, [pc, #464]	; (800595c <HAL_DMA_Abort+0x218>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d045      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a73      	ldr	r2, [pc, #460]	; (8005960 <HAL_DMA_Abort+0x21c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d040      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a71      	ldr	r2, [pc, #452]	; (8005964 <HAL_DMA_Abort+0x220>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d03b      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a70      	ldr	r2, [pc, #448]	; (8005968 <HAL_DMA_Abort+0x224>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d036      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6e      	ldr	r2, [pc, #440]	; (800596c <HAL_DMA_Abort+0x228>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d031      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a6d      	ldr	r2, [pc, #436]	; (8005970 <HAL_DMA_Abort+0x22c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d02c      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a6b      	ldr	r2, [pc, #428]	; (8005974 <HAL_DMA_Abort+0x230>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d027      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a6a      	ldr	r2, [pc, #424]	; (8005978 <HAL_DMA_Abort+0x234>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d022      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a68      	ldr	r2, [pc, #416]	; (800597c <HAL_DMA_Abort+0x238>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01d      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a67      	ldr	r2, [pc, #412]	; (8005980 <HAL_DMA_Abort+0x23c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d018      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a65      	ldr	r2, [pc, #404]	; (8005984 <HAL_DMA_Abort+0x240>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a64      	ldr	r2, [pc, #400]	; (8005988 <HAL_DMA_Abort+0x244>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a62      	ldr	r2, [pc, #392]	; (800598c <HAL_DMA_Abort+0x248>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a61      	ldr	r2, [pc, #388]	; (8005990 <HAL_DMA_Abort+0x24c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_DMA_Abort+0xd6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a5f      	ldr	r2, [pc, #380]	; (8005994 <HAL_DMA_Abort+0x250>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_DMA_Abort+0xda>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_DMA_Abort+0xdc>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 021e 	bic.w	r2, r2, #30
 8005832:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005842:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e00a      	b.n	8005862 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 020e 	bic.w	r2, r2, #14
 800585a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <HAL_DMA_Abort+0x214>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d072      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3a      	ldr	r2, [pc, #232]	; (800595c <HAL_DMA_Abort+0x218>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d06d      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a39      	ldr	r2, [pc, #228]	; (8005960 <HAL_DMA_Abort+0x21c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d068      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a37      	ldr	r2, [pc, #220]	; (8005964 <HAL_DMA_Abort+0x220>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d063      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a36      	ldr	r2, [pc, #216]	; (8005968 <HAL_DMA_Abort+0x224>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d05e      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a34      	ldr	r2, [pc, #208]	; (800596c <HAL_DMA_Abort+0x228>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d059      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a33      	ldr	r2, [pc, #204]	; (8005970 <HAL_DMA_Abort+0x22c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d054      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a31      	ldr	r2, [pc, #196]	; (8005974 <HAL_DMA_Abort+0x230>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04f      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a30      	ldr	r2, [pc, #192]	; (8005978 <HAL_DMA_Abort+0x234>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d04a      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2e      	ldr	r2, [pc, #184]	; (800597c <HAL_DMA_Abort+0x238>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d045      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <HAL_DMA_Abort+0x23c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d040      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <HAL_DMA_Abort+0x240>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d03b      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <HAL_DMA_Abort+0x244>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d036      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <HAL_DMA_Abort+0x248>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d031      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a27      	ldr	r2, [pc, #156]	; (8005990 <HAL_DMA_Abort+0x24c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d02c      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a25      	ldr	r2, [pc, #148]	; (8005994 <HAL_DMA_Abort+0x250>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d027      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a24      	ldr	r2, [pc, #144]	; (8005998 <HAL_DMA_Abort+0x254>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <HAL_DMA_Abort+0x258>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01d      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <HAL_DMA_Abort+0x25c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <HAL_DMA_Abort+0x260>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <HAL_DMA_Abort+0x264>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <HAL_DMA_Abort+0x268>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <HAL_DMA_Abort+0x26c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_DMA_Abort+0x20e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <HAL_DMA_Abort+0x270>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d132      	bne.n	80059b8 <HAL_DMA_Abort+0x274>
 8005952:	2301      	movs	r3, #1
 8005954:	e031      	b.n	80059ba <HAL_DMA_Abort+0x276>
 8005956:	bf00      	nop
 8005958:	40020010 	.word	0x40020010
 800595c:	40020028 	.word	0x40020028
 8005960:	40020040 	.word	0x40020040
 8005964:	40020058 	.word	0x40020058
 8005968:	40020070 	.word	0x40020070
 800596c:	40020088 	.word	0x40020088
 8005970:	400200a0 	.word	0x400200a0
 8005974:	400200b8 	.word	0x400200b8
 8005978:	40020410 	.word	0x40020410
 800597c:	40020428 	.word	0x40020428
 8005980:	40020440 	.word	0x40020440
 8005984:	40020458 	.word	0x40020458
 8005988:	40020470 	.word	0x40020470
 800598c:	40020488 	.word	0x40020488
 8005990:	400204a0 	.word	0x400204a0
 8005994:	400204b8 	.word	0x400204b8
 8005998:	58025408 	.word	0x58025408
 800599c:	5802541c 	.word	0x5802541c
 80059a0:	58025430 	.word	0x58025430
 80059a4:	58025444 	.word	0x58025444
 80059a8:	58025458 	.word	0x58025458
 80059ac:	5802546c 	.word	0x5802546c
 80059b0:	58025480 	.word	0x58025480
 80059b4:	58025494 	.word	0x58025494
 80059b8:	2300      	movs	r3, #0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6d      	ldr	r2, [pc, #436]	; (8005b88 <HAL_DMA_Abort+0x444>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04a      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6b      	ldr	r2, [pc, #428]	; (8005b8c <HAL_DMA_Abort+0x448>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d045      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6a      	ldr	r2, [pc, #424]	; (8005b90 <HAL_DMA_Abort+0x44c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d040      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a68      	ldr	r2, [pc, #416]	; (8005b94 <HAL_DMA_Abort+0x450>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d03b      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a67      	ldr	r2, [pc, #412]	; (8005b98 <HAL_DMA_Abort+0x454>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d036      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_DMA_Abort+0x458>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d031      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a64      	ldr	r2, [pc, #400]	; (8005ba0 <HAL_DMA_Abort+0x45c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d02c      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a62      	ldr	r2, [pc, #392]	; (8005ba4 <HAL_DMA_Abort+0x460>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d027      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a61      	ldr	r2, [pc, #388]	; (8005ba8 <HAL_DMA_Abort+0x464>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5f      	ldr	r2, [pc, #380]	; (8005bac <HAL_DMA_Abort+0x468>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01d      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5e      	ldr	r2, [pc, #376]	; (8005bb0 <HAL_DMA_Abort+0x46c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5c      	ldr	r2, [pc, #368]	; (8005bb4 <HAL_DMA_Abort+0x470>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a5b      	ldr	r2, [pc, #364]	; (8005bb8 <HAL_DMA_Abort+0x474>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a59      	ldr	r2, [pc, #356]	; (8005bbc <HAL_DMA_Abort+0x478>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a58      	ldr	r2, [pc, #352]	; (8005bc0 <HAL_DMA_Abort+0x47c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_DMA_Abort+0x32a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a56      	ldr	r2, [pc, #344]	; (8005bc4 <HAL_DMA_Abort+0x480>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <HAL_DMA_Abort+0x33c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e007      	b.n	8005a90 <HAL_DMA_Abort+0x34c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a90:	e013      	b.n	8005aba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a92:	f7fe fd8f 	bl	80045b4 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d90c      	bls.n	8005aba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e12d      	b.n	8005d16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2f      	ldr	r2, [pc, #188]	; (8005b88 <HAL_DMA_Abort+0x444>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2d      	ldr	r2, [pc, #180]	; (8005b8c <HAL_DMA_Abort+0x448>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <HAL_DMA_Abort+0x44c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <HAL_DMA_Abort+0x450>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <HAL_DMA_Abort+0x454>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <HAL_DMA_Abort+0x458>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <HAL_DMA_Abort+0x45c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <HAL_DMA_Abort+0x460>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <HAL_DMA_Abort+0x464>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <HAL_DMA_Abort+0x468>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <HAL_DMA_Abort+0x46c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_DMA_Abort+0x470>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <HAL_DMA_Abort+0x474>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <HAL_DMA_Abort+0x478>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <HAL_DMA_Abort+0x47c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_Abort+0x422>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_DMA_Abort+0x480>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <HAL_DMA_Abort+0x426>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_DMA_Abort+0x428>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02b      	beq.n	8005bc8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	223f      	movs	r2, #63	; 0x3f
 8005b80:	409a      	lsls	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	e02a      	b.n	8005bde <HAL_DMA_Abort+0x49a>
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a4f      	ldr	r2, [pc, #316]	; (8005d20 <HAL_DMA_Abort+0x5dc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d072      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a4d      	ldr	r2, [pc, #308]	; (8005d24 <HAL_DMA_Abort+0x5e0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d06d      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a4c      	ldr	r2, [pc, #304]	; (8005d28 <HAL_DMA_Abort+0x5e4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d068      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a4a      	ldr	r2, [pc, #296]	; (8005d2c <HAL_DMA_Abort+0x5e8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d063      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a49      	ldr	r2, [pc, #292]	; (8005d30 <HAL_DMA_Abort+0x5ec>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d05e      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a47      	ldr	r2, [pc, #284]	; (8005d34 <HAL_DMA_Abort+0x5f0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d059      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a46      	ldr	r2, [pc, #280]	; (8005d38 <HAL_DMA_Abort+0x5f4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d054      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a44      	ldr	r2, [pc, #272]	; (8005d3c <HAL_DMA_Abort+0x5f8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04f      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a43      	ldr	r2, [pc, #268]	; (8005d40 <HAL_DMA_Abort+0x5fc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04a      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a41      	ldr	r2, [pc, #260]	; (8005d44 <HAL_DMA_Abort+0x600>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d045      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a40      	ldr	r2, [pc, #256]	; (8005d48 <HAL_DMA_Abort+0x604>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d040      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3e      	ldr	r2, [pc, #248]	; (8005d4c <HAL_DMA_Abort+0x608>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d03b      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3d      	ldr	r2, [pc, #244]	; (8005d50 <HAL_DMA_Abort+0x60c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d036      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3b      	ldr	r2, [pc, #236]	; (8005d54 <HAL_DMA_Abort+0x610>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d031      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3a      	ldr	r2, [pc, #232]	; (8005d58 <HAL_DMA_Abort+0x614>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d02c      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a38      	ldr	r2, [pc, #224]	; (8005d5c <HAL_DMA_Abort+0x618>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a37      	ldr	r2, [pc, #220]	; (8005d60 <HAL_DMA_Abort+0x61c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a35      	ldr	r2, [pc, #212]	; (8005d64 <HAL_DMA_Abort+0x620>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_DMA_Abort+0x624>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a32      	ldr	r2, [pc, #200]	; (8005d6c <HAL_DMA_Abort+0x628>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <HAL_DMA_Abort+0x62c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <HAL_DMA_Abort+0x630>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2e      	ldr	r2, [pc, #184]	; (8005d78 <HAL_DMA_Abort+0x634>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_DMA_Abort+0x58a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	; (8005d7c <HAL_DMA_Abort+0x638>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d101      	bne.n	8005cd2 <HAL_DMA_Abort+0x58e>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <HAL_DMA_Abort+0x590>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d015      	beq.n	8005d04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ce0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40020010 	.word	0x40020010
 8005d24:	40020028 	.word	0x40020028
 8005d28:	40020040 	.word	0x40020040
 8005d2c:	40020058 	.word	0x40020058
 8005d30:	40020070 	.word	0x40020070
 8005d34:	40020088 	.word	0x40020088
 8005d38:	400200a0 	.word	0x400200a0
 8005d3c:	400200b8 	.word	0x400200b8
 8005d40:	40020410 	.word	0x40020410
 8005d44:	40020428 	.word	0x40020428
 8005d48:	40020440 	.word	0x40020440
 8005d4c:	40020458 	.word	0x40020458
 8005d50:	40020470 	.word	0x40020470
 8005d54:	40020488 	.word	0x40020488
 8005d58:	400204a0 	.word	0x400204a0
 8005d5c:	400204b8 	.word	0x400204b8
 8005d60:	58025408 	.word	0x58025408
 8005d64:	5802541c 	.word	0x5802541c
 8005d68:	58025430 	.word	0x58025430
 8005d6c:	58025444 	.word	0x58025444
 8005d70:	58025458 	.word	0x58025458
 8005d74:	5802546c 	.word	0x5802546c
 8005d78:	58025480 	.word	0x58025480
 8005d7c:	58025494 	.word	0x58025494

08005d80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e237      	b.n	8006202 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d004      	beq.n	8005da8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e22c      	b.n	8006202 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a5c      	ldr	r2, [pc, #368]	; (8005f20 <HAL_DMA_Abort_IT+0x1a0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d04a      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a5b      	ldr	r2, [pc, #364]	; (8005f24 <HAL_DMA_Abort_IT+0x1a4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d045      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a59      	ldr	r2, [pc, #356]	; (8005f28 <HAL_DMA_Abort_IT+0x1a8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d040      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a58      	ldr	r2, [pc, #352]	; (8005f2c <HAL_DMA_Abort_IT+0x1ac>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d03b      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a56      	ldr	r2, [pc, #344]	; (8005f30 <HAL_DMA_Abort_IT+0x1b0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d036      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a55      	ldr	r2, [pc, #340]	; (8005f34 <HAL_DMA_Abort_IT+0x1b4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d031      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a53      	ldr	r2, [pc, #332]	; (8005f38 <HAL_DMA_Abort_IT+0x1b8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d02c      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a52      	ldr	r2, [pc, #328]	; (8005f3c <HAL_DMA_Abort_IT+0x1bc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d027      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a50      	ldr	r2, [pc, #320]	; (8005f40 <HAL_DMA_Abort_IT+0x1c0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d022      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4f      	ldr	r2, [pc, #316]	; (8005f44 <HAL_DMA_Abort_IT+0x1c4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d01d      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a4d      	ldr	r2, [pc, #308]	; (8005f48 <HAL_DMA_Abort_IT+0x1c8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d018      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a4c      	ldr	r2, [pc, #304]	; (8005f4c <HAL_DMA_Abort_IT+0x1cc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d013      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a4a      	ldr	r2, [pc, #296]	; (8005f50 <HAL_DMA_Abort_IT+0x1d0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a49      	ldr	r2, [pc, #292]	; (8005f54 <HAL_DMA_Abort_IT+0x1d4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d009      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a47      	ldr	r2, [pc, #284]	; (8005f58 <HAL_DMA_Abort_IT+0x1d8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_DMA_Abort_IT+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a46      	ldr	r2, [pc, #280]	; (8005f5c <HAL_DMA_Abort_IT+0x1dc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <HAL_DMA_Abort_IT+0xcc>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <HAL_DMA_Abort_IT+0xce>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8086 	beq.w	8005f60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2204      	movs	r2, #4
 8005e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2f      	ldr	r2, [pc, #188]	; (8005f20 <HAL_DMA_Abort_IT+0x1a0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d04a      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2e      	ldr	r2, [pc, #184]	; (8005f24 <HAL_DMA_Abort_IT+0x1a4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d045      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2c      	ldr	r2, [pc, #176]	; (8005f28 <HAL_DMA_Abort_IT+0x1a8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d040      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2b      	ldr	r2, [pc, #172]	; (8005f2c <HAL_DMA_Abort_IT+0x1ac>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d03b      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <HAL_DMA_Abort_IT+0x1b0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d036      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <HAL_DMA_Abort_IT+0x1b4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d031      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <HAL_DMA_Abort_IT+0x1b8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02c      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <HAL_DMA_Abort_IT+0x1bc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d027      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a23      	ldr	r2, [pc, #140]	; (8005f40 <HAL_DMA_Abort_IT+0x1c0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d022      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a22      	ldr	r2, [pc, #136]	; (8005f44 <HAL_DMA_Abort_IT+0x1c4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d01d      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <HAL_DMA_Abort_IT+0x1c8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d018      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <HAL_DMA_Abort_IT+0x1cc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_DMA_Abort_IT+0x1d0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00e      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <HAL_DMA_Abort_IT+0x1d4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_DMA_Abort_IT+0x1d8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_DMA_Abort_IT+0x17c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_DMA_Abort_IT+0x1dc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <HAL_DMA_Abort_IT+0x18e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e178      	b.n	8006200 <HAL_DMA_Abort_IT+0x480>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e16f      	b.n	8006200 <HAL_DMA_Abort_IT+0x480>
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 020e 	bic.w	r2, r2, #14
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a6c      	ldr	r2, [pc, #432]	; (8006128 <HAL_DMA_Abort_IT+0x3a8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04a      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a6b      	ldr	r2, [pc, #428]	; (800612c <HAL_DMA_Abort_IT+0x3ac>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d045      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a69      	ldr	r2, [pc, #420]	; (8006130 <HAL_DMA_Abort_IT+0x3b0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d040      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a68      	ldr	r2, [pc, #416]	; (8006134 <HAL_DMA_Abort_IT+0x3b4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d03b      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a66      	ldr	r2, [pc, #408]	; (8006138 <HAL_DMA_Abort_IT+0x3b8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d036      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a65      	ldr	r2, [pc, #404]	; (800613c <HAL_DMA_Abort_IT+0x3bc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d031      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a63      	ldr	r2, [pc, #396]	; (8006140 <HAL_DMA_Abort_IT+0x3c0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d02c      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a62      	ldr	r2, [pc, #392]	; (8006144 <HAL_DMA_Abort_IT+0x3c4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d027      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a60      	ldr	r2, [pc, #384]	; (8006148 <HAL_DMA_Abort_IT+0x3c8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a5f      	ldr	r2, [pc, #380]	; (800614c <HAL_DMA_Abort_IT+0x3cc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d01d      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a5d      	ldr	r2, [pc, #372]	; (8006150 <HAL_DMA_Abort_IT+0x3d0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a5c      	ldr	r2, [pc, #368]	; (8006154 <HAL_DMA_Abort_IT+0x3d4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5a      	ldr	r2, [pc, #360]	; (8006158 <HAL_DMA_Abort_IT+0x3d8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a59      	ldr	r2, [pc, #356]	; (800615c <HAL_DMA_Abort_IT+0x3dc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a57      	ldr	r2, [pc, #348]	; (8006160 <HAL_DMA_Abort_IT+0x3e0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_DMA_Abort_IT+0x290>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a56      	ldr	r2, [pc, #344]	; (8006164 <HAL_DMA_Abort_IT+0x3e4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <HAL_DMA_Abort_IT+0x2a2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e007      	b.n	8006032 <HAL_DMA_Abort_IT+0x2b2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3c      	ldr	r2, [pc, #240]	; (8006128 <HAL_DMA_Abort_IT+0x3a8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d072      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a3a      	ldr	r2, [pc, #232]	; (800612c <HAL_DMA_Abort_IT+0x3ac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d06d      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a39      	ldr	r2, [pc, #228]	; (8006130 <HAL_DMA_Abort_IT+0x3b0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d068      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a37      	ldr	r2, [pc, #220]	; (8006134 <HAL_DMA_Abort_IT+0x3b4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d063      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a36      	ldr	r2, [pc, #216]	; (8006138 <HAL_DMA_Abort_IT+0x3b8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d05e      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a34      	ldr	r2, [pc, #208]	; (800613c <HAL_DMA_Abort_IT+0x3bc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d059      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a33      	ldr	r2, [pc, #204]	; (8006140 <HAL_DMA_Abort_IT+0x3c0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d054      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a31      	ldr	r2, [pc, #196]	; (8006144 <HAL_DMA_Abort_IT+0x3c4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d04f      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a30      	ldr	r2, [pc, #192]	; (8006148 <HAL_DMA_Abort_IT+0x3c8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d04a      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2e      	ldr	r2, [pc, #184]	; (800614c <HAL_DMA_Abort_IT+0x3cc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d045      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2d      	ldr	r2, [pc, #180]	; (8006150 <HAL_DMA_Abort_IT+0x3d0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d040      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <HAL_DMA_Abort_IT+0x3d4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d03b      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <HAL_DMA_Abort_IT+0x3d8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d036      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a28      	ldr	r2, [pc, #160]	; (800615c <HAL_DMA_Abort_IT+0x3dc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d031      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a27      	ldr	r2, [pc, #156]	; (8006160 <HAL_DMA_Abort_IT+0x3e0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d02c      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a25      	ldr	r2, [pc, #148]	; (8006164 <HAL_DMA_Abort_IT+0x3e4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d027      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a24      	ldr	r2, [pc, #144]	; (8006168 <HAL_DMA_Abort_IT+0x3e8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_DMA_Abort_IT+0x3ec>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_DMA_Abort_IT+0x3f0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_DMA_Abort_IT+0x3f4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_DMA_Abort_IT+0x3f8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_DMA_Abort_IT+0x3fc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_DMA_Abort_IT+0x400>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_DMA_Abort_IT+0x3a2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_DMA_Abort_IT+0x404>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d132      	bne.n	8006188 <HAL_DMA_Abort_IT+0x408>
 8006122:	2301      	movs	r3, #1
 8006124:	e031      	b.n	800618a <HAL_DMA_Abort_IT+0x40a>
 8006126:	bf00      	nop
 8006128:	40020010 	.word	0x40020010
 800612c:	40020028 	.word	0x40020028
 8006130:	40020040 	.word	0x40020040
 8006134:	40020058 	.word	0x40020058
 8006138:	40020070 	.word	0x40020070
 800613c:	40020088 	.word	0x40020088
 8006140:	400200a0 	.word	0x400200a0
 8006144:	400200b8 	.word	0x400200b8
 8006148:	40020410 	.word	0x40020410
 800614c:	40020428 	.word	0x40020428
 8006150:	40020440 	.word	0x40020440
 8006154:	40020458 	.word	0x40020458
 8006158:	40020470 	.word	0x40020470
 800615c:	40020488 	.word	0x40020488
 8006160:	400204a0 	.word	0x400204a0
 8006164:	400204b8 	.word	0x400204b8
 8006168:	58025408 	.word	0x58025408
 800616c:	5802541c 	.word	0x5802541c
 8006170:	58025430 	.word	0x58025430
 8006174:	58025444 	.word	0x58025444
 8006178:	58025458 	.word	0x58025458
 800617c:	5802546c 	.word	0x5802546c
 8006180:	58025480 	.word	0x58025480
 8006184:	58025494 	.word	0x58025494
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop

0800620c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006218:	4b67      	ldr	r3, [pc, #412]	; (80063b8 <HAL_DMA_IRQHandler+0x1ac>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a67      	ldr	r2, [pc, #412]	; (80063bc <HAL_DMA_IRQHandler+0x1b0>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	0a9b      	lsrs	r3, r3, #10
 8006224:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a5f      	ldr	r2, [pc, #380]	; (80063c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a5d      	ldr	r2, [pc, #372]	; (80063c4 <HAL_DMA_IRQHandler+0x1b8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a5c      	ldr	r2, [pc, #368]	; (80063c8 <HAL_DMA_IRQHandler+0x1bc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5a      	ldr	r2, [pc, #360]	; (80063cc <HAL_DMA_IRQHandler+0x1c0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a59      	ldr	r2, [pc, #356]	; (80063d0 <HAL_DMA_IRQHandler+0x1c4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a57      	ldr	r2, [pc, #348]	; (80063d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a56      	ldr	r2, [pc, #344]	; (80063d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a54      	ldr	r2, [pc, #336]	; (80063dc <HAL_DMA_IRQHandler+0x1d0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a53      	ldr	r2, [pc, #332]	; (80063e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a51      	ldr	r2, [pc, #324]	; (80063e4 <HAL_DMA_IRQHandler+0x1d8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a50      	ldr	r2, [pc, #320]	; (80063e8 <HAL_DMA_IRQHandler+0x1dc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a4e      	ldr	r2, [pc, #312]	; (80063ec <HAL_DMA_IRQHandler+0x1e0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4d      	ldr	r2, [pc, #308]	; (80063f0 <HAL_DMA_IRQHandler+0x1e4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a4b      	ldr	r2, [pc, #300]	; (80063f4 <HAL_DMA_IRQHandler+0x1e8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a4a      	ldr	r2, [pc, #296]	; (80063f8 <HAL_DMA_IRQHandler+0x1ec>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_IRQHandler+0xd2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a48      	ldr	r2, [pc, #288]	; (80063fc <HAL_DMA_IRQHandler+0x1f0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <HAL_DMA_IRQHandler+0xd6>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_DMA_IRQHandler+0xd8>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 842b 	beq.w	8006b40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2208      	movs	r2, #8
 80062f4:	409a      	lsls	r2, r3
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a2 	beq.w	8006444 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d04a      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2d      	ldr	r2, [pc, #180]	; (80063c4 <HAL_DMA_IRQHandler+0x1b8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d045      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2b      	ldr	r2, [pc, #172]	; (80063c8 <HAL_DMA_IRQHandler+0x1bc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d040      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2a      	ldr	r2, [pc, #168]	; (80063cc <HAL_DMA_IRQHandler+0x1c0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d03b      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a28      	ldr	r2, [pc, #160]	; (80063d0 <HAL_DMA_IRQHandler+0x1c4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d036      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a27      	ldr	r2, [pc, #156]	; (80063d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d031      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a25      	ldr	r2, [pc, #148]	; (80063d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d02c      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a24      	ldr	r2, [pc, #144]	; (80063dc <HAL_DMA_IRQHandler+0x1d0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d027      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d01d      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <HAL_DMA_IRQHandler+0x1dc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1e      	ldr	r2, [pc, #120]	; (80063ec <HAL_DMA_IRQHandler+0x1e0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <HAL_DMA_IRQHandler+0x1e4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00e      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <HAL_DMA_IRQHandler+0x1ec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x194>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_DMA_IRQHandler+0x1f0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d12f      	bne.n	8006400 <HAL_DMA_IRQHandler+0x1f4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e02e      	b.n	8006414 <HAL_DMA_IRQHandler+0x208>
 80063b6:	bf00      	nop
 80063b8:	24000000 	.word	0x24000000
 80063bc:	1b4e81b5 	.word	0x1b4e81b5
 80063c0:	40020010 	.word	0x40020010
 80063c4:	40020028 	.word	0x40020028
 80063c8:	40020040 	.word	0x40020040
 80063cc:	40020058 	.word	0x40020058
 80063d0:	40020070 	.word	0x40020070
 80063d4:	40020088 	.word	0x40020088
 80063d8:	400200a0 	.word	0x400200a0
 80063dc:	400200b8 	.word	0x400200b8
 80063e0:	40020410 	.word	0x40020410
 80063e4:	40020428 	.word	0x40020428
 80063e8:	40020440 	.word	0x40020440
 80063ec:	40020458 	.word	0x40020458
 80063f0:	40020470 	.word	0x40020470
 80063f4:	40020488 	.word	0x40020488
 80063f8:	400204a0 	.word	0x400204a0
 80063fc:	400204b8 	.word	0x400204b8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d015      	beq.n	8006444 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2208      	movs	r2, #8
 8006432:	409a      	lsls	r2, r3
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	fa22 f303 	lsr.w	r3, r2, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d06e      	beq.n	8006538 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a69      	ldr	r2, [pc, #420]	; (8006604 <HAL_DMA_IRQHandler+0x3f8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d04a      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a67      	ldr	r2, [pc, #412]	; (8006608 <HAL_DMA_IRQHandler+0x3fc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d045      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a66      	ldr	r2, [pc, #408]	; (800660c <HAL_DMA_IRQHandler+0x400>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d040      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a64      	ldr	r2, [pc, #400]	; (8006610 <HAL_DMA_IRQHandler+0x404>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d03b      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a63      	ldr	r2, [pc, #396]	; (8006614 <HAL_DMA_IRQHandler+0x408>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d036      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a61      	ldr	r2, [pc, #388]	; (8006618 <HAL_DMA_IRQHandler+0x40c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d031      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a60      	ldr	r2, [pc, #384]	; (800661c <HAL_DMA_IRQHandler+0x410>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d02c      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5e      	ldr	r2, [pc, #376]	; (8006620 <HAL_DMA_IRQHandler+0x414>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d027      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_DMA_IRQHandler+0x418>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5b      	ldr	r2, [pc, #364]	; (8006628 <HAL_DMA_IRQHandler+0x41c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01d      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5a      	ldr	r2, [pc, #360]	; (800662c <HAL_DMA_IRQHandler+0x420>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a58      	ldr	r2, [pc, #352]	; (8006630 <HAL_DMA_IRQHandler+0x424>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a57      	ldr	r2, [pc, #348]	; (8006634 <HAL_DMA_IRQHandler+0x428>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a55      	ldr	r2, [pc, #340]	; (8006638 <HAL_DMA_IRQHandler+0x42c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a54      	ldr	r2, [pc, #336]	; (800663c <HAL_DMA_IRQHandler+0x430>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ee>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a52      	ldr	r2, [pc, #328]	; (8006640 <HAL_DMA_IRQHandler+0x434>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10a      	bne.n	8006510 <HAL_DMA_IRQHandler+0x304>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e003      	b.n	8006518 <HAL_DMA_IRQHandler+0x30c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2201      	movs	r2, #1
 8006526:	409a      	lsls	r2, r3
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f043 0202 	orr.w	r2, r3, #2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2204      	movs	r2, #4
 8006542:	409a      	lsls	r2, r3
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 808f 	beq.w	800666c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <HAL_DMA_IRQHandler+0x3f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04a      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <HAL_DMA_IRQHandler+0x3fc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d045      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a29      	ldr	r2, [pc, #164]	; (800660c <HAL_DMA_IRQHandler+0x400>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d040      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a27      	ldr	r2, [pc, #156]	; (8006610 <HAL_DMA_IRQHandler+0x404>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d03b      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a26      	ldr	r2, [pc, #152]	; (8006614 <HAL_DMA_IRQHandler+0x408>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d036      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a24      	ldr	r2, [pc, #144]	; (8006618 <HAL_DMA_IRQHandler+0x40c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d031      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a23      	ldr	r2, [pc, #140]	; (800661c <HAL_DMA_IRQHandler+0x410>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d02c      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_DMA_IRQHandler+0x414>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d027      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a20      	ldr	r2, [pc, #128]	; (8006624 <HAL_DMA_IRQHandler+0x418>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_DMA_IRQHandler+0x41c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_DMA_IRQHandler+0x420>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_DMA_IRQHandler+0x424>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <HAL_DMA_IRQHandler+0x428>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_DMA_IRQHandler+0x42c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_DMA_IRQHandler+0x430>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3e2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_DMA_IRQHandler+0x434>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d12a      	bne.n	8006644 <HAL_DMA_IRQHandler+0x438>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e023      	b.n	800664c <HAL_DMA_IRQHandler+0x440>
 8006604:	40020010 	.word	0x40020010
 8006608:	40020028 	.word	0x40020028
 800660c:	40020040 	.word	0x40020040
 8006610:	40020058 	.word	0x40020058
 8006614:	40020070 	.word	0x40020070
 8006618:	40020088 	.word	0x40020088
 800661c:	400200a0 	.word	0x400200a0
 8006620:	400200b8 	.word	0x400200b8
 8006624:	40020410 	.word	0x40020410
 8006628:	40020428 	.word	0x40020428
 800662c:	40020440 	.word	0x40020440
 8006630:	40020458 	.word	0x40020458
 8006634:	40020470 	.word	0x40020470
 8006638:	40020488 	.word	0x40020488
 800663c:	400204a0 	.word	0x400204a0
 8006640:	400204b8 	.word	0x400204b8
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2204      	movs	r2, #4
 800665a:	409a      	lsls	r2, r3
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f043 0204 	orr.w	r2, r3, #4
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2210      	movs	r2, #16
 8006676:	409a      	lsls	r2, r3
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 80a6 	beq.w	80067ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a85      	ldr	r2, [pc, #532]	; (800689c <HAL_DMA_IRQHandler+0x690>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d04a      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <HAL_DMA_IRQHandler+0x694>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d045      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a82      	ldr	r2, [pc, #520]	; (80068a4 <HAL_DMA_IRQHandler+0x698>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d040      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a80      	ldr	r2, [pc, #512]	; (80068a8 <HAL_DMA_IRQHandler+0x69c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d03b      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a7f      	ldr	r2, [pc, #508]	; (80068ac <HAL_DMA_IRQHandler+0x6a0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d036      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a7d      	ldr	r2, [pc, #500]	; (80068b0 <HAL_DMA_IRQHandler+0x6a4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d031      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7c      	ldr	r2, [pc, #496]	; (80068b4 <HAL_DMA_IRQHandler+0x6a8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d02c      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a7a      	ldr	r2, [pc, #488]	; (80068b8 <HAL_DMA_IRQHandler+0x6ac>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a79      	ldr	r2, [pc, #484]	; (80068bc <HAL_DMA_IRQHandler+0x6b0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d022      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a77      	ldr	r2, [pc, #476]	; (80068c0 <HAL_DMA_IRQHandler+0x6b4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a76      	ldr	r2, [pc, #472]	; (80068c4 <HAL_DMA_IRQHandler+0x6b8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a74      	ldr	r2, [pc, #464]	; (80068c8 <HAL_DMA_IRQHandler+0x6bc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a73      	ldr	r2, [pc, #460]	; (80068cc <HAL_DMA_IRQHandler+0x6c0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a71      	ldr	r2, [pc, #452]	; (80068d0 <HAL_DMA_IRQHandler+0x6c4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a70      	ldr	r2, [pc, #448]	; (80068d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_DMA_IRQHandler+0x516>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a6e      	ldr	r2, [pc, #440]	; (80068d8 <HAL_DMA_IRQHandler+0x6cc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10a      	bne.n	8006738 <HAL_DMA_IRQHandler+0x52c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf14      	ite	ne
 8006730:	2301      	movne	r3, #1
 8006732:	2300      	moveq	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	e009      	b.n	800674c <HAL_DMA_IRQHandler+0x540>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d03e      	beq.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	2210      	movs	r2, #16
 800675a:	409a      	lsls	r2, r3
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d018      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d024      	beq.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
 800678c:	e01f      	b.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01b      	beq.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
 800679e:	e016      	b.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d107      	bne.n	80067be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0208 	bic.w	r2, r2, #8
 80067bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2220      	movs	r2, #32
 80067d8:	409a      	lsls	r2, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8110 	beq.w	8006a04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2c      	ldr	r2, [pc, #176]	; (800689c <HAL_DMA_IRQHandler+0x690>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d04a      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <HAL_DMA_IRQHandler+0x694>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d045      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <HAL_DMA_IRQHandler+0x698>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d040      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <HAL_DMA_IRQHandler+0x69c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d03b      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a26      	ldr	r2, [pc, #152]	; (80068ac <HAL_DMA_IRQHandler+0x6a0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d036      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <HAL_DMA_IRQHandler+0x6a4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d031      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_DMA_IRQHandler+0x6a8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d02c      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <HAL_DMA_IRQHandler+0x6ac>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d027      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a20      	ldr	r2, [pc, #128]	; (80068bc <HAL_DMA_IRQHandler+0x6b0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <HAL_DMA_IRQHandler+0x6b4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d01d      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <HAL_DMA_IRQHandler+0x6b8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <HAL_DMA_IRQHandler+0x6bc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1a      	ldr	r2, [pc, #104]	; (80068cc <HAL_DMA_IRQHandler+0x6c0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <HAL_DMA_IRQHandler+0x6c4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_DMA_IRQHandler+0x678>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	; (80068d8 <HAL_DMA_IRQHandler+0x6cc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d12b      	bne.n	80068dc <HAL_DMA_IRQHandler+0x6d0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e02a      	b.n	80068f0 <HAL_DMA_IRQHandler+0x6e4>
 800689a:	bf00      	nop
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8087 	beq.w	8006a04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2220      	movs	r2, #32
 8006900:	409a      	lsls	r2, r3
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b04      	cmp	r3, #4
 8006910:	d139      	bne.n	8006986 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0216 	bic.w	r2, r2, #22
 8006920:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006930:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_DMA_IRQHandler+0x736>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0208 	bic.w	r2, r2, #8
 8006950:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	223f      	movs	r2, #63	; 0x3f
 800695c:	409a      	lsls	r2, r3
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 834a 	beq.w	8007010 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
          }
          return;
 8006984:	e344      	b.n	8007010 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d018      	beq.n	80069c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d108      	bne.n	80069b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d02c      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
 80069b2:	e027      	b.n	8006a04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d023      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
 80069c4:	e01e      	b.n	8006a04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10f      	bne.n	80069f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0210 	bic.w	r2, r2, #16
 80069e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8306 	beq.w	800701a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8088 	beq.w	8006b2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2204      	movs	r2, #4
 8006a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_DMA_IRQHandler+0xa08>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d04a      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a79      	ldr	r2, [pc, #484]	; (8006c18 <HAL_DMA_IRQHandler+0xa0c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d045      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	; (8006c1c <HAL_DMA_IRQHandler+0xa10>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d040      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a76      	ldr	r2, [pc, #472]	; (8006c20 <HAL_DMA_IRQHandler+0xa14>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d03b      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a74      	ldr	r2, [pc, #464]	; (8006c24 <HAL_DMA_IRQHandler+0xa18>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d036      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a73      	ldr	r2, [pc, #460]	; (8006c28 <HAL_DMA_IRQHandler+0xa1c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d031      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a71      	ldr	r2, [pc, #452]	; (8006c2c <HAL_DMA_IRQHandler+0xa20>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a70      	ldr	r2, [pc, #448]	; (8006c30 <HAL_DMA_IRQHandler+0xa24>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d027      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_DMA_IRQHandler+0xa28>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d022      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a6d      	ldr	r2, [pc, #436]	; (8006c38 <HAL_DMA_IRQHandler+0xa2c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01d      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6b      	ldr	r2, [pc, #428]	; (8006c3c <HAL_DMA_IRQHandler+0xa30>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d018      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6a      	ldr	r2, [pc, #424]	; (8006c40 <HAL_DMA_IRQHandler+0xa34>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a68      	ldr	r2, [pc, #416]	; (8006c44 <HAL_DMA_IRQHandler+0xa38>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a67      	ldr	r2, [pc, #412]	; (8006c48 <HAL_DMA_IRQHandler+0xa3c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d009      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a65      	ldr	r2, [pc, #404]	; (8006c4c <HAL_DMA_IRQHandler+0xa40>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x8b8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a64      	ldr	r2, [pc, #400]	; (8006c50 <HAL_DMA_IRQHandler+0xa44>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d108      	bne.n	8006ad6 <HAL_DMA_IRQHandler+0x8ca>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e007      	b.n	8006ae6 <HAL_DMA_IRQHandler+0x8da>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d307      	bcc.n	8006b02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1f2      	bne.n	8006ae6 <HAL_DMA_IRQHandler+0x8da>
 8006b00:	e000      	b.n	8006b04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2203      	movs	r2, #3
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b1a:	e003      	b.n	8006b24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8272 	beq.w	800701a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
 8006b3e:	e26c      	b.n	800701a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a43      	ldr	r2, [pc, #268]	; (8006c54 <HAL_DMA_IRQHandler+0xa48>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a42      	ldr	r2, [pc, #264]	; (8006c58 <HAL_DMA_IRQHandler+0xa4c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d01d      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a40      	ldr	r2, [pc, #256]	; (8006c5c <HAL_DMA_IRQHandler+0xa50>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a3f      	ldr	r2, [pc, #252]	; (8006c60 <HAL_DMA_IRQHandler+0xa54>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a3d      	ldr	r2, [pc, #244]	; (8006c64 <HAL_DMA_IRQHandler+0xa58>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3c      	ldr	r2, [pc, #240]	; (8006c68 <HAL_DMA_IRQHandler+0xa5c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a3a      	ldr	r2, [pc, #232]	; (8006c6c <HAL_DMA_IRQHandler+0xa60>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x984>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a39      	ldr	r2, [pc, #228]	; (8006c70 <HAL_DMA_IRQHandler+0xa64>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x988>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <HAL_DMA_IRQHandler+0x98a>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 823f 	beq.w	800701a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2204      	movs	r2, #4
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80cd 	beq.w	8006d54 <HAL_DMA_IRQHandler+0xb48>
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80c7 	beq.w	8006d54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2204      	movs	r2, #4
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d049      	beq.n	8006c74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8210 	beq.w	8007014 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfc:	e20a      	b.n	8007014 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8206 	beq.w	8007014 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c10:	e200      	b.n	8007014 <HAL_DMA_IRQHandler+0xe08>
 8006c12:	bf00      	nop
 8006c14:	40020010 	.word	0x40020010
 8006c18:	40020028 	.word	0x40020028
 8006c1c:	40020040 	.word	0x40020040
 8006c20:	40020058 	.word	0x40020058
 8006c24:	40020070 	.word	0x40020070
 8006c28:	40020088 	.word	0x40020088
 8006c2c:	400200a0 	.word	0x400200a0
 8006c30:	400200b8 	.word	0x400200b8
 8006c34:	40020410 	.word	0x40020410
 8006c38:	40020428 	.word	0x40020428
 8006c3c:	40020440 	.word	0x40020440
 8006c40:	40020458 	.word	0x40020458
 8006c44:	40020470 	.word	0x40020470
 8006c48:	40020488 	.word	0x40020488
 8006c4c:	400204a0 	.word	0x400204a0
 8006c50:	400204b8 	.word	0x400204b8
 8006c54:	58025408 	.word	0x58025408
 8006c58:	5802541c 	.word	0x5802541c
 8006c5c:	58025430 	.word	0x58025430
 8006c60:	58025444 	.word	0x58025444
 8006c64:	58025458 	.word	0x58025458
 8006c68:	5802546c 	.word	0x5802546c
 8006c6c:	58025480 	.word	0x58025480
 8006c70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d160      	bne.n	8006d40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7f      	ldr	r2, [pc, #508]	; (8006e80 <HAL_DMA_IRQHandler+0xc74>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d04a      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a7d      	ldr	r2, [pc, #500]	; (8006e84 <HAL_DMA_IRQHandler+0xc78>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d045      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7c      	ldr	r2, [pc, #496]	; (8006e88 <HAL_DMA_IRQHandler+0xc7c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d040      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7a      	ldr	r2, [pc, #488]	; (8006e8c <HAL_DMA_IRQHandler+0xc80>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d03b      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a79      	ldr	r2, [pc, #484]	; (8006e90 <HAL_DMA_IRQHandler+0xc84>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d036      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a77      	ldr	r2, [pc, #476]	; (8006e94 <HAL_DMA_IRQHandler+0xc88>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d031      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a76      	ldr	r2, [pc, #472]	; (8006e98 <HAL_DMA_IRQHandler+0xc8c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d02c      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a74      	ldr	r2, [pc, #464]	; (8006e9c <HAL_DMA_IRQHandler+0xc90>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d027      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a73      	ldr	r2, [pc, #460]	; (8006ea0 <HAL_DMA_IRQHandler+0xc94>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d022      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a71      	ldr	r2, [pc, #452]	; (8006ea4 <HAL_DMA_IRQHandler+0xc98>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01d      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a70      	ldr	r2, [pc, #448]	; (8006ea8 <HAL_DMA_IRQHandler+0xc9c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d018      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a6e      	ldr	r2, [pc, #440]	; (8006eac <HAL_DMA_IRQHandler+0xca0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6d      	ldr	r2, [pc, #436]	; (8006eb0 <HAL_DMA_IRQHandler+0xca4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00e      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a6b      	ldr	r2, [pc, #428]	; (8006eb4 <HAL_DMA_IRQHandler+0xca8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a6a      	ldr	r2, [pc, #424]	; (8006eb8 <HAL_DMA_IRQHandler+0xcac>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_DMA_IRQHandler+0xb12>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a68      	ldr	r2, [pc, #416]	; (8006ebc <HAL_DMA_IRQHandler+0xcb0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d108      	bne.n	8006d30 <HAL_DMA_IRQHandler+0xb24>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0208 	bic.w	r2, r2, #8
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e007      	b.n	8006d40 <HAL_DMA_IRQHandler+0xb34>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0204 	bic.w	r2, r2, #4
 8006d3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8165 	beq.w	8007014 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d52:	e15f      	b.n	8007014 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80c5 	beq.w	8006ef4 <HAL_DMA_IRQHandler+0xce8>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80bf 	beq.w	8006ef4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2202      	movs	r2, #2
 8006d80:	409a      	lsls	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 813a 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dac:	e134      	b.n	8007018 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 8130 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc0:	e12a      	b.n	8007018 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 8089 	bne.w	8006ee0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a2b      	ldr	r2, [pc, #172]	; (8006e80 <HAL_DMA_IRQHandler+0xc74>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d04a      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a29      	ldr	r2, [pc, #164]	; (8006e84 <HAL_DMA_IRQHandler+0xc78>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d045      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <HAL_DMA_IRQHandler+0xc7c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d040      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <HAL_DMA_IRQHandler+0xc80>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d03b      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a25      	ldr	r2, [pc, #148]	; (8006e90 <HAL_DMA_IRQHandler+0xc84>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d036      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a23      	ldr	r2, [pc, #140]	; (8006e94 <HAL_DMA_IRQHandler+0xc88>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a22      	ldr	r2, [pc, #136]	; (8006e98 <HAL_DMA_IRQHandler+0xc8c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d02c      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <HAL_DMA_IRQHandler+0xc90>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d027      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <HAL_DMA_IRQHandler+0xc94>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d022      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <HAL_DMA_IRQHandler+0xc98>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01d      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <HAL_DMA_IRQHandler+0xc9c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1a      	ldr	r2, [pc, #104]	; (8006eac <HAL_DMA_IRQHandler+0xca0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <HAL_DMA_IRQHandler+0xca4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <HAL_DMA_IRQHandler+0xca8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <HAL_DMA_IRQHandler+0xcac>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_DMA_IRQHandler+0xc62>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <HAL_DMA_IRQHandler+0xcb0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d128      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0xcb4>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0214 	bic.w	r2, r2, #20
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e027      	b.n	8006ed0 <HAL_DMA_IRQHandler+0xcc4>
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 020a 	bic.w	r2, r2, #10
 8006ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8097 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef2:	e091      	b.n	8007018 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2208      	movs	r2, #8
 8006efe:	409a      	lsls	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8088 	beq.w	800701a <HAL_DMA_IRQHandler+0xe0e>
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8082 	beq.w	800701a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a41      	ldr	r2, [pc, #260]	; (8007020 <HAL_DMA_IRQHandler+0xe14>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d04a      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3f      	ldr	r2, [pc, #252]	; (8007024 <HAL_DMA_IRQHandler+0xe18>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d045      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a3e      	ldr	r2, [pc, #248]	; (8007028 <HAL_DMA_IRQHandler+0xe1c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d040      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3c      	ldr	r2, [pc, #240]	; (800702c <HAL_DMA_IRQHandler+0xe20>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d03b      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <HAL_DMA_IRQHandler+0xe24>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d036      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a39      	ldr	r2, [pc, #228]	; (8007034 <HAL_DMA_IRQHandler+0xe28>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d031      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a38      	ldr	r2, [pc, #224]	; (8007038 <HAL_DMA_IRQHandler+0xe2c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d02c      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a36      	ldr	r2, [pc, #216]	; (800703c <HAL_DMA_IRQHandler+0xe30>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d027      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a35      	ldr	r2, [pc, #212]	; (8007040 <HAL_DMA_IRQHandler+0xe34>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d022      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a33      	ldr	r2, [pc, #204]	; (8007044 <HAL_DMA_IRQHandler+0xe38>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01d      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a32      	ldr	r2, [pc, #200]	; (8007048 <HAL_DMA_IRQHandler+0xe3c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d018      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a30      	ldr	r2, [pc, #192]	; (800704c <HAL_DMA_IRQHandler+0xe40>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d013      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <HAL_DMA_IRQHandler+0xe44>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00e      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2d      	ldr	r2, [pc, #180]	; (8007054 <HAL_DMA_IRQHandler+0xe48>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <HAL_DMA_IRQHandler+0xe4c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0xdaa>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <HAL_DMA_IRQHandler+0xe50>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d108      	bne.n	8006fc8 <HAL_DMA_IRQHandler+0xdbc>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 021c 	bic.w	r2, r2, #28
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e007      	b.n	8006fd8 <HAL_DMA_IRQHandler+0xdcc>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 020e 	bic.w	r2, r2, #14
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	409a      	lsls	r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
 800700e:	e004      	b.n	800701a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007010:	bf00      	nop
 8007012:	e002      	b.n	800701a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007018:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40020010 	.word	0x40020010
 8007024:	40020028 	.word	0x40020028
 8007028:	40020040 	.word	0x40020040
 800702c:	40020058 	.word	0x40020058
 8007030:	40020070 	.word	0x40020070
 8007034:	40020088 	.word	0x40020088
 8007038:	400200a0 	.word	0x400200a0
 800703c:	400200b8 	.word	0x400200b8
 8007040:	40020410 	.word	0x40020410
 8007044:	40020428 	.word	0x40020428
 8007048:	40020440 	.word	0x40020440
 800704c:	40020458 	.word	0x40020458
 8007050:	40020470 	.word	0x40020470
 8007054:	40020488 	.word	0x40020488
 8007058:	400204a0 	.word	0x400204a0
 800705c:	400204b8 	.word	0x400204b8

08007060 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a7f      	ldr	r2, [pc, #508]	; (800727c <DMA_SetConfig+0x21c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d072      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a7d      	ldr	r2, [pc, #500]	; (8007280 <DMA_SetConfig+0x220>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d06d      	beq.n	800716a <DMA_SetConfig+0x10a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a7c      	ldr	r2, [pc, #496]	; (8007284 <DMA_SetConfig+0x224>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d068      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a7a      	ldr	r2, [pc, #488]	; (8007288 <DMA_SetConfig+0x228>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d063      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a79      	ldr	r2, [pc, #484]	; (800728c <DMA_SetConfig+0x22c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d05e      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a77      	ldr	r2, [pc, #476]	; (8007290 <DMA_SetConfig+0x230>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d059      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a76      	ldr	r2, [pc, #472]	; (8007294 <DMA_SetConfig+0x234>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d054      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a74      	ldr	r2, [pc, #464]	; (8007298 <DMA_SetConfig+0x238>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04f      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a73      	ldr	r2, [pc, #460]	; (800729c <DMA_SetConfig+0x23c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d04a      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a71      	ldr	r2, [pc, #452]	; (80072a0 <DMA_SetConfig+0x240>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d045      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a70      	ldr	r2, [pc, #448]	; (80072a4 <DMA_SetConfig+0x244>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d040      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a6e      	ldr	r2, [pc, #440]	; (80072a8 <DMA_SetConfig+0x248>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d03b      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <DMA_SetConfig+0x24c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d036      	beq.n	800716a <DMA_SetConfig+0x10a>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a6b      	ldr	r2, [pc, #428]	; (80072b0 <DMA_SetConfig+0x250>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d031      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a6a      	ldr	r2, [pc, #424]	; (80072b4 <DMA_SetConfig+0x254>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d02c      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a68      	ldr	r2, [pc, #416]	; (80072b8 <DMA_SetConfig+0x258>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d027      	beq.n	800716a <DMA_SetConfig+0x10a>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a67      	ldr	r2, [pc, #412]	; (80072bc <DMA_SetConfig+0x25c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d022      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <DMA_SetConfig+0x260>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01d      	beq.n	800716a <DMA_SetConfig+0x10a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a64      	ldr	r2, [pc, #400]	; (80072c4 <DMA_SetConfig+0x264>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d018      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a62      	ldr	r2, [pc, #392]	; (80072c8 <DMA_SetConfig+0x268>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a61      	ldr	r2, [pc, #388]	; (80072cc <DMA_SetConfig+0x26c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <DMA_SetConfig+0x10a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5f      	ldr	r2, [pc, #380]	; (80072d0 <DMA_SetConfig+0x270>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5e      	ldr	r2, [pc, #376]	; (80072d4 <DMA_SetConfig+0x274>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <DMA_SetConfig+0x10a>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <DMA_SetConfig+0x278>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <DMA_SetConfig+0x10e>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <DMA_SetConfig+0x110>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800717c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800718e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a39      	ldr	r2, [pc, #228]	; (800727c <DMA_SetConfig+0x21c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d04a      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a38      	ldr	r2, [pc, #224]	; (8007280 <DMA_SetConfig+0x220>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d045      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a36      	ldr	r2, [pc, #216]	; (8007284 <DMA_SetConfig+0x224>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d040      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a35      	ldr	r2, [pc, #212]	; (8007288 <DMA_SetConfig+0x228>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d03b      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <DMA_SetConfig+0x22c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d036      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a32      	ldr	r2, [pc, #200]	; (8007290 <DMA_SetConfig+0x230>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d031      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a30      	ldr	r2, [pc, #192]	; (8007294 <DMA_SetConfig+0x234>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d02c      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <DMA_SetConfig+0x238>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d027      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2d      	ldr	r2, [pc, #180]	; (800729c <DMA_SetConfig+0x23c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2c      	ldr	r2, [pc, #176]	; (80072a0 <DMA_SetConfig+0x240>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d01d      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <DMA_SetConfig+0x244>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a29      	ldr	r2, [pc, #164]	; (80072a8 <DMA_SetConfig+0x248>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a27      	ldr	r2, [pc, #156]	; (80072ac <DMA_SetConfig+0x24c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a26      	ldr	r2, [pc, #152]	; (80072b0 <DMA_SetConfig+0x250>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <DMA_SetConfig+0x254>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <DMA_SetConfig+0x1d0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a23      	ldr	r2, [pc, #140]	; (80072b8 <DMA_SetConfig+0x258>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d101      	bne.n	8007234 <DMA_SetConfig+0x1d4>
 8007230:	2301      	movs	r3, #1
 8007232:	e000      	b.n	8007236 <DMA_SetConfig+0x1d6>
 8007234:	2300      	movs	r3, #0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d059      	beq.n	80072ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	223f      	movs	r2, #63	; 0x3f
 8007244:	409a      	lsls	r2, r3
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007258:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d138      	bne.n	80072dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800727a:	e086      	b.n	800738a <DMA_SetConfig+0x32a>
 800727c:	40020010 	.word	0x40020010
 8007280:	40020028 	.word	0x40020028
 8007284:	40020040 	.word	0x40020040
 8007288:	40020058 	.word	0x40020058
 800728c:	40020070 	.word	0x40020070
 8007290:	40020088 	.word	0x40020088
 8007294:	400200a0 	.word	0x400200a0
 8007298:	400200b8 	.word	0x400200b8
 800729c:	40020410 	.word	0x40020410
 80072a0:	40020428 	.word	0x40020428
 80072a4:	40020440 	.word	0x40020440
 80072a8:	40020458 	.word	0x40020458
 80072ac:	40020470 	.word	0x40020470
 80072b0:	40020488 	.word	0x40020488
 80072b4:	400204a0 	.word	0x400204a0
 80072b8:	400204b8 	.word	0x400204b8
 80072bc:	58025408 	.word	0x58025408
 80072c0:	5802541c 	.word	0x5802541c
 80072c4:	58025430 	.word	0x58025430
 80072c8:	58025444 	.word	0x58025444
 80072cc:	58025458 	.word	0x58025458
 80072d0:	5802546c 	.word	0x5802546c
 80072d4:	58025480 	.word	0x58025480
 80072d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
}
 80072ec:	e04d      	b.n	800738a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a29      	ldr	r2, [pc, #164]	; (8007398 <DMA_SetConfig+0x338>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <DMA_SetConfig+0x2de>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a27      	ldr	r2, [pc, #156]	; (800739c <DMA_SetConfig+0x33c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01d      	beq.n	800733e <DMA_SetConfig+0x2de>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <DMA_SetConfig+0x340>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <DMA_SetConfig+0x2de>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a24      	ldr	r2, [pc, #144]	; (80073a4 <DMA_SetConfig+0x344>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <DMA_SetConfig+0x2de>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a23      	ldr	r2, [pc, #140]	; (80073a8 <DMA_SetConfig+0x348>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <DMA_SetConfig+0x2de>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a21      	ldr	r2, [pc, #132]	; (80073ac <DMA_SetConfig+0x34c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <DMA_SetConfig+0x2de>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a20      	ldr	r2, [pc, #128]	; (80073b0 <DMA_SetConfig+0x350>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <DMA_SetConfig+0x2de>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <DMA_SetConfig+0x354>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d101      	bne.n	8007342 <DMA_SetConfig+0x2e2>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <DMA_SetConfig+0x2e4>
 8007342:	2300      	movs	r3, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d020      	beq.n	800738a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2201      	movs	r2, #1
 8007352:	409a      	lsls	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d108      	bne.n	800737a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	60da      	str	r2, [r3, #12]
}
 8007378:	e007      	b.n	800738a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	60da      	str	r2, [r3, #12]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	58025408 	.word	0x58025408
 800739c:	5802541c 	.word	0x5802541c
 80073a0:	58025430 	.word	0x58025430
 80073a4:	58025444 	.word	0x58025444
 80073a8:	58025458 	.word	0x58025458
 80073ac:	5802546c 	.word	0x5802546c
 80073b0:	58025480 	.word	0x58025480
 80073b4:	58025494 	.word	0x58025494

080073b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a42      	ldr	r2, [pc, #264]	; (80074d0 <DMA_CalcBaseAndBitshift+0x118>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d04a      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a41      	ldr	r2, [pc, #260]	; (80074d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d045      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <DMA_CalcBaseAndBitshift+0x120>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d040      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a3e      	ldr	r2, [pc, #248]	; (80074dc <DMA_CalcBaseAndBitshift+0x124>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d03b      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a3c      	ldr	r2, [pc, #240]	; (80074e0 <DMA_CalcBaseAndBitshift+0x128>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d036      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3b      	ldr	r2, [pc, #236]	; (80074e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d031      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a39      	ldr	r2, [pc, #228]	; (80074e8 <DMA_CalcBaseAndBitshift+0x130>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d02c      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a38      	ldr	r2, [pc, #224]	; (80074ec <DMA_CalcBaseAndBitshift+0x134>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d027      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a36      	ldr	r2, [pc, #216]	; (80074f0 <DMA_CalcBaseAndBitshift+0x138>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d022      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a35      	ldr	r2, [pc, #212]	; (80074f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d01d      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a33      	ldr	r2, [pc, #204]	; (80074f8 <DMA_CalcBaseAndBitshift+0x140>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d018      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a32      	ldr	r2, [pc, #200]	; (80074fc <DMA_CalcBaseAndBitshift+0x144>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d013      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a30      	ldr	r2, [pc, #192]	; (8007500 <DMA_CalcBaseAndBitshift+0x148>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00e      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2f      	ldr	r2, [pc, #188]	; (8007504 <DMA_CalcBaseAndBitshift+0x14c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d009      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <DMA_CalcBaseAndBitshift+0x150>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <DMA_CalcBaseAndBitshift+0xa8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2c      	ldr	r2, [pc, #176]	; (800750c <DMA_CalcBaseAndBitshift+0x154>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d101      	bne.n	8007464 <DMA_CalcBaseAndBitshift+0xac>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <DMA_CalcBaseAndBitshift+0xae>
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d024      	beq.n	80074b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	3b10      	subs	r3, #16
 8007472:	4a27      	ldr	r2, [pc, #156]	; (8007510 <DMA_CalcBaseAndBitshift+0x158>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	091b      	lsrs	r3, r3, #4
 800747a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	4a24      	ldr	r2, [pc, #144]	; (8007514 <DMA_CalcBaseAndBitshift+0x15c>)
 8007484:	5cd3      	ldrb	r3, [r2, r3]
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d908      	bls.n	80074a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <DMA_CalcBaseAndBitshift+0x160>)
 800749a:	4013      	ands	r3, r2
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	659a      	str	r2, [r3, #88]	; 0x58
 80074a2:	e00d      	b.n	80074c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <DMA_CalcBaseAndBitshift+0x160>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6593      	str	r3, [r2, #88]	; 0x58
 80074b2:	e005      	b.n	80074c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40020010 	.word	0x40020010
 80074d4:	40020028 	.word	0x40020028
 80074d8:	40020040 	.word	0x40020040
 80074dc:	40020058 	.word	0x40020058
 80074e0:	40020070 	.word	0x40020070
 80074e4:	40020088 	.word	0x40020088
 80074e8:	400200a0 	.word	0x400200a0
 80074ec:	400200b8 	.word	0x400200b8
 80074f0:	40020410 	.word	0x40020410
 80074f4:	40020428 	.word	0x40020428
 80074f8:	40020440 	.word	0x40020440
 80074fc:	40020458 	.word	0x40020458
 8007500:	40020470 	.word	0x40020470
 8007504:	40020488 	.word	0x40020488
 8007508:	400204a0 	.word	0x400204a0
 800750c:	400204b8 	.word	0x400204b8
 8007510:	aaaaaaab 	.word	0xaaaaaaab
 8007514:	0800e53c 	.word	0x0800e53c
 8007518:	fffffc00 	.word	0xfffffc00

0800751c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d120      	bne.n	8007572 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	2b03      	cmp	r3, #3
 8007536:	d858      	bhi.n	80075ea <DMA_CheckFifoParam+0xce>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <DMA_CheckFifoParam+0x24>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007551 	.word	0x08007551
 8007544:	08007563 	.word	0x08007563
 8007548:	08007551 	.word	0x08007551
 800754c:	080075eb 	.word	0x080075eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d048      	beq.n	80075ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007560:	e045      	b.n	80075ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800756a:	d142      	bne.n	80075f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007570:	e03f      	b.n	80075f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757a:	d123      	bne.n	80075c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	2b03      	cmp	r3, #3
 8007582:	d838      	bhi.n	80075f6 <DMA_CheckFifoParam+0xda>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <DMA_CheckFifoParam+0x70>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075a3 	.word	0x080075a3
 8007594:	0800759d 	.word	0x0800759d
 8007598:	080075b5 	.word	0x080075b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
        break;
 80075a0:	e030      	b.n	8007604 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d025      	beq.n	80075fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075b2:	e022      	b.n	80075fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075bc:	d11f      	bne.n	80075fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075c2:	e01c      	b.n	80075fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d902      	bls.n	80075d2 <DMA_CheckFifoParam+0xb6>
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d003      	beq.n	80075d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075d0:	e018      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
        break;
 80075d6:	e015      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
    break;
 80075e8:	e00b      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
        break;
 80075ea:	bf00      	nop
 80075ec:	e00a      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e008      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        break;
 80075f2:	bf00      	nop
 80075f4:	e006      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        break;
 80075f6:	bf00      	nop
 80075f8:	e004      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
        break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
    break;
 8007602:	bf00      	nop
    }
  }

  return status;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a38      	ldr	r2, [pc, #224]	; (8007708 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d022      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a36      	ldr	r2, [pc, #216]	; (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d01d      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a35      	ldr	r2, [pc, #212]	; (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d018      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a33      	ldr	r2, [pc, #204]	; (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a32      	ldr	r2, [pc, #200]	; (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00e      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a30      	ldr	r2, [pc, #192]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d009      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2f      	ldr	r2, [pc, #188]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d004      	beq.n	8007672 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2d      	ldr	r2, [pc, #180]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d101      	bne.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007672:	2301      	movs	r3, #1
 8007674:	e000      	b.n	8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007676:	2300      	movs	r3, #0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01a      	beq.n	80076b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	3b08      	subs	r3, #8
 8007684:	4a28      	ldr	r2, [pc, #160]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4b26      	ldr	r3, [pc, #152]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a24      	ldr	r2, [pc, #144]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	2201      	movs	r2, #1
 80076aa:	409a      	lsls	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076b0:	e024      	b.n	80076fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3b10      	subs	r3, #16
 80076ba:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076bc:	fba2 2303 	umull	r2, r3, r2, r3
 80076c0:	091b      	lsrs	r3, r3, #4
 80076c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d806      	bhi.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4a1b      	ldr	r2, [pc, #108]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d902      	bls.n	80076da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3308      	adds	r3, #8
 80076d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4b18      	ldr	r3, [pc, #96]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a16      	ldr	r2, [pc, #88]	; (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	58025408 	.word	0x58025408
 800770c:	5802541c 	.word	0x5802541c
 8007710:	58025430 	.word	0x58025430
 8007714:	58025444 	.word	0x58025444
 8007718:	58025458 	.word	0x58025458
 800771c:	5802546c 	.word	0x5802546c
 8007720:	58025480 	.word	0x58025480
 8007724:	58025494 	.word	0x58025494
 8007728:	cccccccd 	.word	0xcccccccd
 800772c:	16009600 	.word	0x16009600
 8007730:	58025880 	.word	0x58025880
 8007734:	aaaaaaab 	.word	0xaaaaaaab
 8007738:	400204b8 	.word	0x400204b8
 800773c:	4002040f 	.word	0x4002040f
 8007740:	10008200 	.word	0x10008200
 8007744:	40020880 	.word	0x40020880

08007748 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d04a      	beq.n	80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d847      	bhi.n	80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a25      	ldr	r2, [pc, #148]	; (8007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d022      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a24      	ldr	r2, [pc, #144]	; (8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d01d      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a22      	ldr	r2, [pc, #136]	; (8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d018      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a21      	ldr	r2, [pc, #132]	; (800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d013      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00e      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1c      	ldr	r2, [pc, #112]	; (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1b      	ldr	r2, [pc, #108]	; (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d101      	bne.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4b17      	ldr	r3, [pc, #92]	; (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077d0:	671a      	str	r2, [r3, #112]	; 0x70
 80077d2:	e009      	b.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	461a      	mov	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a11      	ldr	r2, [pc, #68]	; (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2201      	movs	r2, #1
 80077ee:	409a      	lsls	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	58025408 	.word	0x58025408
 8007804:	5802541c 	.word	0x5802541c
 8007808:	58025430 	.word	0x58025430
 800780c:	58025444 	.word	0x58025444
 8007810:	58025458 	.word	0x58025458
 8007814:	5802546c 	.word	0x5802546c
 8007818:	58025480 	.word	0x58025480
 800781c:	58025494 	.word	0x58025494
 8007820:	1600963f 	.word	0x1600963f
 8007824:	58025940 	.word	0x58025940
 8007828:	1000823f 	.word	0x1000823f
 800782c:	40020940 	.word	0x40020940

08007830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800783e:	4b86      	ldr	r3, [pc, #536]	; (8007a58 <HAL_GPIO_Init+0x228>)
 8007840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007842:	e18c      	b.n	8007b5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	2101      	movs	r1, #1
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	4013      	ands	r3, r2
 8007852:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 817e 	beq.w	8007b58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	2b01      	cmp	r3, #1
 8007866:	d005      	beq.n	8007874 <HAL_GPIO_Init+0x44>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d130      	bne.n	80078d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	2203      	movs	r2, #3
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	4013      	ands	r3, r2
 800788a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4313      	orrs	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078aa:	2201      	movs	r2, #1
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	091b      	lsrs	r3, r3, #4
 80078c0:	f003 0201 	and.w	r2, r3, #1
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d017      	beq.n	8007912 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	2203      	movs	r2, #3
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43db      	mvns	r3, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4013      	ands	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4313      	orrs	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d123      	bne.n	8007966 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	08da      	lsrs	r2, r3, #3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3208      	adds	r2, #8
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	220f      	movs	r2, #15
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4313      	orrs	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	08da      	lsrs	r2, r3, #3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3208      	adds	r2, #8
 8007960:	69b9      	ldr	r1, [r7, #24]
 8007962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	2203      	movs	r2, #3
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43db      	mvns	r3, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f003 0203 	and.w	r2, r3, #3
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4313      	orrs	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80d8 	beq.w	8007b58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079a8:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <HAL_GPIO_Init+0x22c>)
 80079aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ae:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <HAL_GPIO_Init+0x22c>)
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079b8:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <HAL_GPIO_Init+0x22c>)
 80079ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079c6:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <HAL_GPIO_Init+0x230>)
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	089b      	lsrs	r3, r3, #2
 80079cc:	3302      	adds	r3, #2
 80079ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	220f      	movs	r2, #15
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	43db      	mvns	r3, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4013      	ands	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <HAL_GPIO_Init+0x234>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d04a      	beq.n	8007a88 <HAL_GPIO_Init+0x258>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_GPIO_Init+0x238>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d02b      	beq.n	8007a52 <HAL_GPIO_Init+0x222>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_GPIO_Init+0x23c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d025      	beq.n	8007a4e <HAL_GPIO_Init+0x21e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1a      	ldr	r2, [pc, #104]	; (8007a70 <HAL_GPIO_Init+0x240>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01f      	beq.n	8007a4a <HAL_GPIO_Init+0x21a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	; (8007a74 <HAL_GPIO_Init+0x244>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d019      	beq.n	8007a46 <HAL_GPIO_Init+0x216>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <HAL_GPIO_Init+0x248>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <HAL_GPIO_Init+0x212>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a17      	ldr	r2, [pc, #92]	; (8007a7c <HAL_GPIO_Init+0x24c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00d      	beq.n	8007a3e <HAL_GPIO_Init+0x20e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <HAL_GPIO_Init+0x250>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <HAL_GPIO_Init+0x20a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <HAL_GPIO_Init+0x254>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d101      	bne.n	8007a36 <HAL_GPIO_Init+0x206>
 8007a32:	2309      	movs	r3, #9
 8007a34:	e029      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a36:	230a      	movs	r3, #10
 8007a38:	e027      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a3a:	2307      	movs	r3, #7
 8007a3c:	e025      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a3e:	2306      	movs	r3, #6
 8007a40:	e023      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a42:	2305      	movs	r3, #5
 8007a44:	e021      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a46:	2304      	movs	r3, #4
 8007a48:	e01f      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e01d      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e01b      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e019      	b.n	8007a8a <HAL_GPIO_Init+0x25a>
 8007a56:	bf00      	nop
 8007a58:	58000080 	.word	0x58000080
 8007a5c:	58024400 	.word	0x58024400
 8007a60:	58000400 	.word	0x58000400
 8007a64:	58020000 	.word	0x58020000
 8007a68:	58020400 	.word	0x58020400
 8007a6c:	58020800 	.word	0x58020800
 8007a70:	58020c00 	.word	0x58020c00
 8007a74:	58021000 	.word	0x58021000
 8007a78:	58021400 	.word	0x58021400
 8007a7c:	58021800 	.word	0x58021800
 8007a80:	58021c00 	.word	0x58021c00
 8007a84:	58022400 	.word	0x58022400
 8007a88:	2300      	movs	r3, #0
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	f002 0203 	and.w	r2, r2, #3
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	4093      	lsls	r3, r2
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a9a:	4938      	ldr	r1, [pc, #224]	; (8007b7c <HAL_GPIO_Init+0x34c>)
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4013      	ands	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	43db      	mvns	r3, r3
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f ae6b 	bne.w	8007844 <HAL_GPIO_Init+0x14>
  }
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	3724      	adds	r7, #36	; 0x24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	58000400 	.word	0x58000400

08007b80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b8e:	4b72      	ldr	r3, [pc, #456]	; (8007d58 <HAL_GPIO_DeInit+0x1d8>)
 8007b90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007b92:	e0d3      	b.n	8007d3c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007b94:	2201      	movs	r2, #1
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80c6 	beq.w	8007d36 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007baa:	4a6c      	ldr	r2, [pc, #432]	; (8007d5c <HAL_GPIO_DeInit+0x1dc>)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	089b      	lsrs	r3, r3, #2
 8007bb0:	3302      	adds	r3, #2
 8007bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	220f      	movs	r2, #15
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a64      	ldr	r2, [pc, #400]	; (8007d60 <HAL_GPIO_DeInit+0x1e0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d031      	beq.n	8007c38 <HAL_GPIO_DeInit+0xb8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a63      	ldr	r2, [pc, #396]	; (8007d64 <HAL_GPIO_DeInit+0x1e4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d02b      	beq.n	8007c34 <HAL_GPIO_DeInit+0xb4>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a62      	ldr	r2, [pc, #392]	; (8007d68 <HAL_GPIO_DeInit+0x1e8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d025      	beq.n	8007c30 <HAL_GPIO_DeInit+0xb0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a61      	ldr	r2, [pc, #388]	; (8007d6c <HAL_GPIO_DeInit+0x1ec>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d01f      	beq.n	8007c2c <HAL_GPIO_DeInit+0xac>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a60      	ldr	r2, [pc, #384]	; (8007d70 <HAL_GPIO_DeInit+0x1f0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d019      	beq.n	8007c28 <HAL_GPIO_DeInit+0xa8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a5f      	ldr	r2, [pc, #380]	; (8007d74 <HAL_GPIO_DeInit+0x1f4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <HAL_GPIO_DeInit+0xa4>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a5e      	ldr	r2, [pc, #376]	; (8007d78 <HAL_GPIO_DeInit+0x1f8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00d      	beq.n	8007c20 <HAL_GPIO_DeInit+0xa0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a5d      	ldr	r2, [pc, #372]	; (8007d7c <HAL_GPIO_DeInit+0x1fc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d007      	beq.n	8007c1c <HAL_GPIO_DeInit+0x9c>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a5c      	ldr	r2, [pc, #368]	; (8007d80 <HAL_GPIO_DeInit+0x200>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d101      	bne.n	8007c18 <HAL_GPIO_DeInit+0x98>
 8007c14:	2309      	movs	r3, #9
 8007c16:	e010      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c18:	230a      	movs	r3, #10
 8007c1a:	e00e      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c1c:	2307      	movs	r3, #7
 8007c1e:	e00c      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c20:	2306      	movs	r3, #6
 8007c22:	e00a      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c24:	2305      	movs	r3, #5
 8007c26:	e008      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	e006      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e004      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e002      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <HAL_GPIO_DeInit+0xba>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	f002 0203 	and.w	r2, r2, #3
 8007c40:	0092      	lsls	r2, r2, #2
 8007c42:	4093      	lsls	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d136      	bne.n	8007cb8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	43db      	mvns	r3, r3
 8007c60:	401a      	ands	r2, r3
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c74:	4013      	ands	r3, r2
 8007c76:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	43db      	mvns	r3, r3
 8007c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c86:	4013      	ands	r3, r2
 8007c88:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	220f      	movs	r2, #15
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007c9a:	4a30      	ldr	r2, [pc, #192]	; (8007d5c <HAL_GPIO_DeInit+0x1dc>)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	43da      	mvns	r2, r3
 8007caa:	482c      	ldr	r0, [pc, #176]	; (8007d5c <HAL_GPIO_DeInit+0x1dc>)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	089b      	lsrs	r3, r3, #2
 8007cb0:	400a      	ands	r2, r1
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	2103      	movs	r1, #3
 8007cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	08da      	lsrs	r2, r3, #3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3208      	adds	r2, #8
 8007cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	220f      	movs	r2, #15
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	08d2      	lsrs	r2, r2, #3
 8007cec:	4019      	ands	r1, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3208      	adds	r2, #8
 8007cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	2103      	movs	r1, #3
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	401a      	ands	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	2101      	movs	r1, #1
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	fa01 f303 	lsl.w	r3, r1, r3
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2103      	movs	r1, #3
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	401a      	ands	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f47f af25 	bne.w	8007b94 <HAL_GPIO_DeInit+0x14>
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	58000080 	.word	0x58000080
 8007d5c:	58000400 	.word	0x58000400
 8007d60:	58020000 	.word	0x58020000
 8007d64:	58020400 	.word	0x58020400
 8007d68:	58020800 	.word	0x58020800
 8007d6c:	58020c00 	.word	0x58020c00
 8007d70:	58021000 	.word	0x58021000
 8007d74:	58021400 	.word	0x58021400
 8007d78:	58021800 	.word	0x58021800
 8007d7c:	58021c00 	.word	0x58021c00
 8007d80:	58022400 	.word	0x58022400

08007d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
 8007d90:	4613      	mov	r3, r2
 8007d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d94:	787b      	ldrb	r3, [r7, #1]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d9a:	887a      	ldrh	r2, [r7, #2]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007da0:	e003      	b.n	8007daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007da2:	887b      	ldrh	r3, [r7, #2]
 8007da4:	041a      	lsls	r2, r3, #16
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	619a      	str	r2, [r3, #24]
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f804 	bl	8007dea <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	4603      	mov	r3, r0
 8007df2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e08:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <HAL_PWREx_ConfigSupply+0x70>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d00a      	beq.n	8007e2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e14:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <HAL_PWREx_ConfigSupply+0x70>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d001      	beq.n	8007e26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e01f      	b.n	8007e66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e01d      	b.n	8007e66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <HAL_PWREx_ConfigSupply+0x70>)
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f023 0207 	bic.w	r2, r3, #7
 8007e32:	490f      	ldr	r1, [pc, #60]	; (8007e70 <HAL_PWREx_ConfigSupply+0x70>)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e3a:	f7fc fbbb 	bl	80045b4 <HAL_GetTick>
 8007e3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e40:	e009      	b.n	8007e56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e42:	f7fc fbb7 	bl	80045b4 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e50:	d901      	bls.n	8007e56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e007      	b.n	8007e66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e56:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <HAL_PWREx_ConfigSupply+0x70>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e62:	d1ee      	bne.n	8007e42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	58024800 	.word	0x58024800

08007e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08c      	sub	sp, #48	; 0x30
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e39d      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8087 	beq.w	8007fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e94:	4b88      	ldr	r3, [pc, #544]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e9e:	4b86      	ldr	r3, [pc, #536]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d007      	beq.n	8007eba <HAL_RCC_OscConfig+0x46>
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	2b18      	cmp	r3, #24
 8007eae:	d110      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x5e>
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d10b      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eba:	4b7f      	ldr	r3, [pc, #508]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d06c      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x12c>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d168      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e377      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eda:	d106      	bne.n	8007eea <HAL_RCC_OscConfig+0x76>
 8007edc:	4b76      	ldr	r3, [pc, #472]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a75      	ldr	r2, [pc, #468]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	e02e      	b.n	8007f48 <HAL_RCC_OscConfig+0xd4>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCC_OscConfig+0x98>
 8007ef2:	4b71      	ldr	r3, [pc, #452]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a70      	ldr	r2, [pc, #448]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	4b6e      	ldr	r3, [pc, #440]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6d      	ldr	r2, [pc, #436]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e01d      	b.n	8007f48 <HAL_RCC_OscConfig+0xd4>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f14:	d10c      	bne.n	8007f30 <HAL_RCC_OscConfig+0xbc>
 8007f16:	4b68      	ldr	r3, [pc, #416]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a67      	ldr	r2, [pc, #412]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	4b65      	ldr	r3, [pc, #404]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a64      	ldr	r2, [pc, #400]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	e00b      	b.n	8007f48 <HAL_RCC_OscConfig+0xd4>
 8007f30:	4b61      	ldr	r3, [pc, #388]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a60      	ldr	r2, [pc, #384]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	4b5e      	ldr	r3, [pc, #376]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a5d      	ldr	r2, [pc, #372]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d013      	beq.n	8007f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f50:	f7fc fb30 	bl	80045b4 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f58:	f7fc fb2c 	bl	80045b4 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b64      	cmp	r3, #100	; 0x64
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e32b      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f6a:	4b53      	ldr	r3, [pc, #332]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCC_OscConfig+0xe4>
 8007f76:	e014      	b.n	8007fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fc fb1c 	bl	80045b4 <HAL_GetTick>
 8007f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f80:	f7fc fb18 	bl	80045b4 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	; 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e317      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f92:	4b49      	ldr	r3, [pc, #292]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f0      	bne.n	8007f80 <HAL_RCC_OscConfig+0x10c>
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 808c 	beq.w	80080c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb0:	4b41      	ldr	r3, [pc, #260]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x162>
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	2b18      	cmp	r3, #24
 8007fca:	d137      	bne.n	800803c <HAL_RCC_OscConfig+0x1c8>
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d132      	bne.n	800803c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd6:	4b38      	ldr	r3, [pc, #224]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <HAL_RCC_OscConfig+0x17a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e2e9      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fee:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 0219 	bic.w	r2, r3, #25
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	492f      	ldr	r1, [pc, #188]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008000:	f7fc fad8 	bl	80045b4 <HAL_GetTick>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008008:	f7fc fad4 	bl	80045b4 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e2d3      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800801a:	4b27      	ldr	r3, [pc, #156]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008026:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	061b      	lsls	r3, r3, #24
 8008034:	4920      	ldr	r1, [pc, #128]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008036:	4313      	orrs	r3, r2
 8008038:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800803a:	e045      	b.n	80080c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d026      	beq.n	8008092 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008044:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f023 0219 	bic.w	r2, r3, #25
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	4919      	ldr	r1, [pc, #100]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008052:	4313      	orrs	r3, r2
 8008054:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008056:	f7fc faad 	bl	80045b4 <HAL_GetTick>
 800805a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800805e:	f7fc faa9 	bl	80045b4 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e2a8      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008070:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0f0      	beq.n	800805e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	490b      	ldr	r1, [pc, #44]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 800808c:	4313      	orrs	r3, r2
 800808e:	604b      	str	r3, [r1, #4]
 8008090:	e01a      	b.n	80080c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <HAL_RCC_OscConfig+0x244>)
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809e:	f7fc fa89 	bl	80045b4 <HAL_GetTick>
 80080a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080a4:	e00a      	b.n	80080bc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080a6:	f7fc fa85 	bl	80045b4 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d903      	bls.n	80080bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e284      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
 80080b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080bc:	4b96      	ldr	r3, [pc, #600]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1ee      	bne.n	80080a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d06a      	beq.n	80081aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d4:	4b90      	ldr	r3, [pc, #576]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080de:	4b8e      	ldr	r3, [pc, #568]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d007      	beq.n	80080fa <HAL_RCC_OscConfig+0x286>
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	2b18      	cmp	r3, #24
 80080ee:	d11b      	bne.n	8008128 <HAL_RCC_OscConfig+0x2b4>
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d116      	bne.n	8008128 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080fa:	4b87      	ldr	r3, [pc, #540]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <HAL_RCC_OscConfig+0x29e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d001      	beq.n	8008112 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e257      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008112:	4b81      	ldr	r3, [pc, #516]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	497d      	ldr	r1, [pc, #500]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008122:	4313      	orrs	r3, r2
 8008124:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008126:	e040      	b.n	80081aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d023      	beq.n	8008178 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008130:	4b79      	ldr	r3, [pc, #484]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a78      	ldr	r2, [pc, #480]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fc fa3a 	bl	80045b4 <HAL_GetTick>
 8008140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008144:	f7fc fa36 	bl	80045b4 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e235      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008156:	4b70      	ldr	r3, [pc, #448]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008162:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	061b      	lsls	r3, r3, #24
 8008170:	4969      	ldr	r1, [pc, #420]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008172:	4313      	orrs	r3, r2
 8008174:	60cb      	str	r3, [r1, #12]
 8008176:	e018      	b.n	80081aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008178:	4b67      	ldr	r3, [pc, #412]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a66      	ldr	r2, [pc, #408]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800817e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fc fa16 	bl	80045b4 <HAL_GetTick>
 8008188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800818c:	f7fc fa12 	bl	80045b4 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e211      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800819e:	4b5e      	ldr	r3, [pc, #376]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d036      	beq.n	8008224 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d019      	beq.n	80081f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081be:	4b56      	ldr	r3, [pc, #344]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c2:	4a55      	ldr	r2, [pc, #340]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ca:	f7fc f9f3 	bl	80045b4 <HAL_GetTick>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081d0:	e008      	b.n	80081e4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081d2:	f7fc f9ef 	bl	80045b4 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e1ee      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081e4:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0f0      	beq.n	80081d2 <HAL_RCC_OscConfig+0x35e>
 80081f0:	e018      	b.n	8008224 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081f2:	4b49      	ldr	r3, [pc, #292]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f6:	4a48      	ldr	r2, [pc, #288]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081fe:	f7fc f9d9 	bl	80045b4 <HAL_GetTick>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008206:	f7fc f9d5 	bl	80045b4 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e1d4      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008218:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800821a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d036      	beq.n	800829e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d019      	beq.n	800826c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008238:	4b37      	ldr	r3, [pc, #220]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a36      	ldr	r2, [pc, #216]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800823e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008242:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008244:	f7fc f9b6 	bl	80045b4 <HAL_GetTick>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800824c:	f7fc f9b2 	bl	80045b4 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e1b1      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800825e:	4b2e      	ldr	r3, [pc, #184]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x3d8>
 800826a:	e018      	b.n	800829e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800826c:	4b2a      	ldr	r3, [pc, #168]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a29      	ldr	r2, [pc, #164]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008276:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008278:	f7fc f99c 	bl	80045b4 <HAL_GetTick>
 800827c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008280:	f7fc f998 	bl	80045b4 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e197      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008292:	4b21      	ldr	r3, [pc, #132]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f0      	bne.n	8008280 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8086 	beq.w	80083b8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082ac:	4b1b      	ldr	r3, [pc, #108]	; (800831c <HAL_RCC_OscConfig+0x4a8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1a      	ldr	r2, [pc, #104]	; (800831c <HAL_RCC_OscConfig+0x4a8>)
 80082b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082b8:	f7fc f97c 	bl	80045b4 <HAL_GetTick>
 80082bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082c0:	f7fc f978 	bl	80045b4 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b64      	cmp	r3, #100	; 0x64
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e177      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d2:	4b12      	ldr	r3, [pc, #72]	; (800831c <HAL_RCC_OscConfig+0x4a8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f0      	beq.n	80082c0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d106      	bne.n	80082f4 <HAL_RCC_OscConfig+0x480>
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80082e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ea:	4a0b      	ldr	r2, [pc, #44]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	6713      	str	r3, [r2, #112]	; 0x70
 80082f2:	e032      	b.n	800835a <HAL_RCC_OscConfig+0x4e6>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d111      	bne.n	8008320 <HAL_RCC_OscConfig+0x4ac>
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	4a05      	ldr	r2, [pc, #20]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	6713      	str	r3, [r2, #112]	; 0x70
 8008308:	4b03      	ldr	r3, [pc, #12]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	4a02      	ldr	r2, [pc, #8]	; (8008318 <HAL_RCC_OscConfig+0x4a4>)
 800830e:	f023 0304 	bic.w	r3, r3, #4
 8008312:	6713      	str	r3, [r2, #112]	; 0x70
 8008314:	e021      	b.n	800835a <HAL_RCC_OscConfig+0x4e6>
 8008316:	bf00      	nop
 8008318:	58024400 	.word	0x58024400
 800831c:	58024800 	.word	0x58024800
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b05      	cmp	r3, #5
 8008326:	d10c      	bne.n	8008342 <HAL_RCC_OscConfig+0x4ce>
 8008328:	4b83      	ldr	r3, [pc, #524]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	4a82      	ldr	r2, [pc, #520]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800832e:	f043 0304 	orr.w	r3, r3, #4
 8008332:	6713      	str	r3, [r2, #112]	; 0x70
 8008334:	4b80      	ldr	r3, [pc, #512]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008338:	4a7f      	ldr	r2, [pc, #508]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	6713      	str	r3, [r2, #112]	; 0x70
 8008340:	e00b      	b.n	800835a <HAL_RCC_OscConfig+0x4e6>
 8008342:	4b7d      	ldr	r3, [pc, #500]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	4a7c      	ldr	r2, [pc, #496]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	6713      	str	r3, [r2, #112]	; 0x70
 800834e:	4b7a      	ldr	r3, [pc, #488]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	4a79      	ldr	r2, [pc, #484]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008354:	f023 0304 	bic.w	r3, r3, #4
 8008358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d015      	beq.n	800838e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008362:	f7fc f927 	bl	80045b4 <HAL_GetTick>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008368:	e00a      	b.n	8008380 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836a:	f7fc f923 	bl	80045b4 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	f241 3288 	movw	r2, #5000	; 0x1388
 8008378:	4293      	cmp	r3, r2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e120      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008380:	4b6d      	ldr	r3, [pc, #436]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0ee      	beq.n	800836a <HAL_RCC_OscConfig+0x4f6>
 800838c:	e014      	b.n	80083b8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800838e:	f7fc f911 	bl	80045b4 <HAL_GetTick>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008394:	e00a      	b.n	80083ac <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008396:	f7fc f90d 	bl	80045b4 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e10a      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083ac:	4b62      	ldr	r3, [pc, #392]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ee      	bne.n	8008396 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 80ff 	beq.w	80085c0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083c2:	4b5d      	ldr	r3, [pc, #372]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ca:	2b18      	cmp	r3, #24
 80083cc:	f000 80ba 	beq.w	8008544 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	f040 8095 	bne.w	8008504 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083da:	4b57      	ldr	r3, [pc, #348]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a56      	ldr	r2, [pc, #344]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80083e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fc f8e5 	bl	80045b4 <HAL_GetTick>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083ec:	e008      	b.n	8008400 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ee:	f7fc f8e1 	bl	80045b4 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e0e0      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008400:	4b4d      	ldr	r3, [pc, #308]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f0      	bne.n	80083ee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800840c:	4b4a      	ldr	r3, [pc, #296]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008410:	4b4a      	ldr	r3, [pc, #296]	; (800853c <HAL_RCC_OscConfig+0x6c8>)
 8008412:	4013      	ands	r3, r2
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800841c:	0112      	lsls	r2, r2, #4
 800841e:	430a      	orrs	r2, r1
 8008420:	4945      	ldr	r1, [pc, #276]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008422:	4313      	orrs	r3, r2
 8008424:	628b      	str	r3, [r1, #40]	; 0x28
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	3b01      	subs	r3, #1
 800842c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	3b01      	subs	r3, #1
 8008436:	025b      	lsls	r3, r3, #9
 8008438:	b29b      	uxth	r3, r3
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	3b01      	subs	r3, #1
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	3b01      	subs	r3, #1
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008456:	4938      	ldr	r1, [pc, #224]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008458:	4313      	orrs	r3, r2
 800845a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800845c:	4b36      	ldr	r3, [pc, #216]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a35      	ldr	r2, [pc, #212]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008468:	4b33      	ldr	r3, [pc, #204]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800846a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800846c:	4b34      	ldr	r3, [pc, #208]	; (8008540 <HAL_RCC_OscConfig+0x6cc>)
 800846e:	4013      	ands	r3, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008474:	00d2      	lsls	r2, r2, #3
 8008476:	4930      	ldr	r1, [pc, #192]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008478:	4313      	orrs	r3, r2
 800847a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800847c:	4b2e      	ldr	r3, [pc, #184]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f023 020c 	bic.w	r2, r3, #12
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	492b      	ldr	r1, [pc, #172]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800848a:	4313      	orrs	r3, r2
 800848c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800848e:	4b2a      	ldr	r3, [pc, #168]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	f023 0202 	bic.w	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	4927      	ldr	r1, [pc, #156]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800849c:	4313      	orrs	r3, r2
 800849e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a24      	ldr	r2, [pc, #144]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ac:	4b22      	ldr	r3, [pc, #136]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	4a21      	ldr	r2, [pc, #132]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80084c4:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084d0:	4b19      	ldr	r3, [pc, #100]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a18      	ldr	r2, [pc, #96]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fc f86a 	bl	80045b4 <HAL_GetTick>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fc f866 	bl	80045b4 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e065      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084f6:	4b10      	ldr	r3, [pc, #64]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <HAL_RCC_OscConfig+0x670>
 8008502:	e05d      	b.n	80085c0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800850a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800850e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7fc f850 	bl	80045b4 <HAL_GetTick>
 8008514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008518:	f7fc f84c 	bl	80045b4 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e04b      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <HAL_RCC_OscConfig+0x6c4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f0      	bne.n	8008518 <HAL_RCC_OscConfig+0x6a4>
 8008536:	e043      	b.n	80085c0 <HAL_RCC_OscConfig+0x74c>
 8008538:	58024400 	.word	0x58024400
 800853c:	fffffc0c 	.word	0xfffffc0c
 8008540:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008544:	4b21      	ldr	r3, [pc, #132]	; (80085cc <HAL_RCC_OscConfig+0x758>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800854a:	4b20      	ldr	r3, [pc, #128]	; (80085cc <HAL_RCC_OscConfig+0x758>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	2b01      	cmp	r3, #1
 8008556:	d031      	beq.n	80085bc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f003 0203 	and.w	r2, r3, #3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d12a      	bne.n	80085bc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008572:	429a      	cmp	r2, r3
 8008574:	d122      	bne.n	80085bc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008582:	429a      	cmp	r2, r3
 8008584:	d11a      	bne.n	80085bc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	0a5b      	lsrs	r3, r3, #9
 800858a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008594:	429a      	cmp	r2, r3
 8008596:	d111      	bne.n	80085bc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d108      	bne.n	80085bc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	0e1b      	lsrs	r3, r3, #24
 80085ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d001      	beq.n	80085c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3730      	adds	r7, #48	; 0x30
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400

080085d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e19c      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085e4:	4b8a      	ldr	r3, [pc, #552]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d910      	bls.n	8008614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f2:	4b87      	ldr	r3, [pc, #540]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 020f 	bic.w	r2, r3, #15
 80085fa:	4985      	ldr	r1, [pc, #532]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	4313      	orrs	r3, r2
 8008600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b83      	ldr	r3, [pc, #524]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e184      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	4b7b      	ldr	r3, [pc, #492]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800862c:	429a      	cmp	r2, r3
 800862e:	d908      	bls.n	8008642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008630:	4b78      	ldr	r3, [pc, #480]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	4975      	ldr	r1, [pc, #468]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800863e:	4313      	orrs	r3, r2
 8008640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	4b70      	ldr	r3, [pc, #448]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800865a:	429a      	cmp	r2, r3
 800865c:	d908      	bls.n	8008670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800865e:	4b6d      	ldr	r3, [pc, #436]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	496a      	ldr	r1, [pc, #424]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800866c:	4313      	orrs	r3, r2
 800866e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b00      	cmp	r3, #0
 800867a:	d010      	beq.n	800869e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699a      	ldr	r2, [r3, #24]
 8008680:	4b64      	ldr	r3, [pc, #400]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008688:	429a      	cmp	r2, r3
 800868a:	d908      	bls.n	800869e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800868c:	4b61      	ldr	r3, [pc, #388]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	495e      	ldr	r1, [pc, #376]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800869a:	4313      	orrs	r3, r2
 800869c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d010      	beq.n	80086cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69da      	ldr	r2, [r3, #28]
 80086ae:	4b59      	ldr	r3, [pc, #356]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d908      	bls.n	80086cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80086ba:	4b56      	ldr	r3, [pc, #344]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	4953      	ldr	r1, [pc, #332]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d010      	beq.n	80086fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	4b4d      	ldr	r3, [pc, #308]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d908      	bls.n	80086fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086e8:	4b4a      	ldr	r3, [pc, #296]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f023 020f 	bic.w	r2, r3, #15
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	4947      	ldr	r1, [pc, #284]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d055      	beq.n	80087b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008706:	4b43      	ldr	r3, [pc, #268]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4940      	ldr	r1, [pc, #256]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008714:	4313      	orrs	r3, r2
 8008716:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d107      	bne.n	8008730 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008720:	4b3c      	ldr	r3, [pc, #240]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d121      	bne.n	8008770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e0f6      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d107      	bne.n	8008748 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008738:	4b36      	ldr	r3, [pc, #216]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d115      	bne.n	8008770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e0ea      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d107      	bne.n	8008760 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008750:	4b30      	ldr	r3, [pc, #192]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e0de      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008760:	4b2c      	ldr	r3, [pc, #176]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e0d6      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008770:	4b28      	ldr	r3, [pc, #160]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f023 0207 	bic.w	r2, r3, #7
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4925      	ldr	r1, [pc, #148]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 800877e:	4313      	orrs	r3, r2
 8008780:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008782:	f7fb ff17 	bl	80045b4 <HAL_GetTick>
 8008786:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008788:	e00a      	b.n	80087a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800878a:	f7fb ff13 	bl	80045b4 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	f241 3288 	movw	r2, #5000	; 0x1388
 8008798:	4293      	cmp	r3, r2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e0be      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a0:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d1eb      	bne.n	800878a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	4b14      	ldr	r3, [pc, #80]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d208      	bcs.n	80087e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f023 020f 	bic.w	r2, r3, #15
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	490e      	ldr	r1, [pc, #56]	; (8008814 <HAL_RCC_ClockConfig+0x244>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d214      	bcs.n	8008818 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f023 020f 	bic.w	r2, r3, #15
 80087f6:	4906      	ldr	r1, [pc, #24]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <HAL_RCC_ClockConfig+0x240>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d005      	beq.n	8008818 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e086      	b.n	800891e <HAL_RCC_ClockConfig+0x34e>
 8008810:	52002000 	.word	0x52002000
 8008814:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d010      	beq.n	8008846 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	4b3f      	ldr	r3, [pc, #252]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008830:	429a      	cmp	r2, r3
 8008832:	d208      	bcs.n	8008846 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008834:	4b3c      	ldr	r3, [pc, #240]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	4939      	ldr	r1, [pc, #228]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008842:	4313      	orrs	r3, r2
 8008844:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d010      	beq.n	8008874 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	4b34      	ldr	r3, [pc, #208]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800885e:	429a      	cmp	r2, r3
 8008860:	d208      	bcs.n	8008874 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008862:	4b31      	ldr	r3, [pc, #196]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	492e      	ldr	r1, [pc, #184]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008870:	4313      	orrs	r3, r2
 8008872:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b00      	cmp	r3, #0
 800887e:	d010      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	4b28      	ldr	r3, [pc, #160]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800888c:	429a      	cmp	r2, r3
 800888e:	d208      	bcs.n	80088a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008890:	4b25      	ldr	r3, [pc, #148]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	4922      	ldr	r1, [pc, #136]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d010      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69da      	ldr	r2, [r3, #28]
 80088b2:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d208      	bcs.n	80088d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088be:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	4917      	ldr	r1, [pc, #92]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d0:	f000 f834 	bl	800893c <HAL_RCC_GetSysClockFreq>
 80088d4:	4602      	mov	r2, r0
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	4912      	ldr	r1, [pc, #72]	; (800892c <HAL_RCC_ClockConfig+0x35c>)
 80088e2:	5ccb      	ldrb	r3, [r1, r3]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	fa22 f303 	lsr.w	r3, r2, r3
 80088ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <HAL_RCC_ClockConfig+0x358>)
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	4a0d      	ldr	r2, [pc, #52]	; (800892c <HAL_RCC_ClockConfig+0x35c>)
 80088f8:	5cd3      	ldrb	r3, [r2, r3]
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	4a0a      	ldr	r2, [pc, #40]	; (8008930 <HAL_RCC_ClockConfig+0x360>)
 8008906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008908:	4a0a      	ldr	r2, [pc, #40]	; (8008934 <HAL_RCC_ClockConfig+0x364>)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800890e:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <HAL_RCC_ClockConfig+0x368>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7fb fe04 	bl	8004520 <HAL_InitTick>
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	58024400 	.word	0x58024400
 800892c:	0800e52c 	.word	0x0800e52c
 8008930:	24000004 	.word	0x24000004
 8008934:	24000000 	.word	0x24000000
 8008938:	24000008 	.word	0x24000008

0800893c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800893c:	b480      	push	{r7}
 800893e:	b089      	sub	sp, #36	; 0x24
 8008940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008942:	4bb3      	ldr	r3, [pc, #716]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800894a:	2b18      	cmp	r3, #24
 800894c:	f200 8155 	bhi.w	8008bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8008950:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	080089bd 	.word	0x080089bd
 800895c:	08008bfb 	.word	0x08008bfb
 8008960:	08008bfb 	.word	0x08008bfb
 8008964:	08008bfb 	.word	0x08008bfb
 8008968:	08008bfb 	.word	0x08008bfb
 800896c:	08008bfb 	.word	0x08008bfb
 8008970:	08008bfb 	.word	0x08008bfb
 8008974:	08008bfb 	.word	0x08008bfb
 8008978:	080089e3 	.word	0x080089e3
 800897c:	08008bfb 	.word	0x08008bfb
 8008980:	08008bfb 	.word	0x08008bfb
 8008984:	08008bfb 	.word	0x08008bfb
 8008988:	08008bfb 	.word	0x08008bfb
 800898c:	08008bfb 	.word	0x08008bfb
 8008990:	08008bfb 	.word	0x08008bfb
 8008994:	08008bfb 	.word	0x08008bfb
 8008998:	080089e9 	.word	0x080089e9
 800899c:	08008bfb 	.word	0x08008bfb
 80089a0:	08008bfb 	.word	0x08008bfb
 80089a4:	08008bfb 	.word	0x08008bfb
 80089a8:	08008bfb 	.word	0x08008bfb
 80089ac:	08008bfb 	.word	0x08008bfb
 80089b0:	08008bfb 	.word	0x08008bfb
 80089b4:	08008bfb 	.word	0x08008bfb
 80089b8:	080089ef 	.word	0x080089ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089bc:	4b94      	ldr	r3, [pc, #592]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089c8:	4b91      	ldr	r3, [pc, #580]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	4a90      	ldr	r2, [pc, #576]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
 80089d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089da:	e111      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089dc:	4b8d      	ldr	r3, [pc, #564]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089de:	61bb      	str	r3, [r7, #24]
    break;
 80089e0:	e10e      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089e2:	4b8d      	ldr	r3, [pc, #564]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089e4:	61bb      	str	r3, [r7, #24]
    break;
 80089e6:	e10b      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089e8:	4b8c      	ldr	r3, [pc, #560]	; (8008c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089ea:	61bb      	str	r3, [r7, #24]
    break;
 80089ec:	e108      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ee:	4b88      	ldr	r3, [pc, #544]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80089f8:	4b85      	ldr	r3, [pc, #532]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	091b      	lsrs	r3, r3, #4
 80089fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a04:	4b82      	ldr	r3, [pc, #520]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a0e:	4b80      	ldr	r3, [pc, #512]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80e1 	beq.w	8008bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f000 8083 	beq.w	8008b40 <HAL_RCC_GetSysClockFreq+0x204>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f200 80a1 	bhi.w	8008b84 <HAL_RCC_GetSysClockFreq+0x248>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0x114>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d056      	beq.n	8008afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a4e:	e099      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a50:	4b6f      	ldr	r3, [pc, #444]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d02d      	beq.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a5c:	4b6c      	ldr	r3, [pc, #432]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	08db      	lsrs	r3, r3, #3
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	4a6b      	ldr	r2, [pc, #428]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b62      	ldr	r3, [pc, #392]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ab6:	e087      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b51      	ldr	r3, [pc, #324]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	e065      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b40      	ldr	r3, [pc, #256]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b3e:	e043      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b2f      	ldr	r3, [pc, #188]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e021      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008bc8:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	0a5b      	lsrs	r3, r3, #9
 8008bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bec:	ee17 3a90 	vmov	r3, s15
 8008bf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008bf2:	e005      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
    break;
 8008bf8:	e002      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bfc:	61bb      	str	r3, [r7, #24]
    break;
 8008bfe:	bf00      	nop
  }

  return sysclockfreq;
 8008c00:	69bb      	ldr	r3, [r7, #24]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3724      	adds	r7, #36	; 0x24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	58024400 	.word	0x58024400
 8008c14:	03d09000 	.word	0x03d09000
 8008c18:	003d0900 	.word	0x003d0900
 8008c1c:	007a1200 	.word	0x007a1200
 8008c20:	46000000 	.word	0x46000000
 8008c24:	4c742400 	.word	0x4c742400
 8008c28:	4a742400 	.word	0x4a742400
 8008c2c:	4af42400 	.word	0x4af42400

08008c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c36:	f7ff fe81 	bl	800893c <HAL_RCC_GetSysClockFreq>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	0a1b      	lsrs	r3, r3, #8
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	490f      	ldr	r1, [pc, #60]	; (8008c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c48:	5ccb      	ldrb	r3, [r1, r3]
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c54:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c5e:	5cd3      	ldrb	r3, [r2, r3]
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c6e:	4a07      	ldr	r2, [pc, #28]	; (8008c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c74:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	58024400 	.word	0x58024400
 8008c84:	0800e52c 	.word	0x0800e52c
 8008c88:	24000004 	.word	0x24000004
 8008c8c:	24000000 	.word	0x24000000

08008c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c94:	f7ff ffcc 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	091b      	lsrs	r3, r3, #4
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	4904      	ldr	r1, [pc, #16]	; (8008cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ca6:	5ccb      	ldrb	r3, [r1, r3]
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	0800e52c 	.word	0x0800e52c

08008cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cc0:	f7ff ffb6 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cd2:	5ccb      	ldrb	r3, [r1, r3]
 8008cd4:	f003 031f 	and.w	r3, r3, #31
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	0800e52c 	.word	0x0800e52c

08008ce8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d03f      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d0c:	d02a      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d12:	d824      	bhi.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d18:	d018      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d1e:	d81e      	bhi.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d28:	d007      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d2a:	e018      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d2c:	4ba4      	ldr	r3, [pc, #656]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4aa3      	ldr	r2, [pc, #652]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d38:	e015      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	2102      	movs	r1, #2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f989 	bl	800a058 <RCCEx_PLL2_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d4a:	e00c      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3324      	adds	r3, #36	; 0x24
 8008d50:	2102      	movs	r1, #2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f001 fa32 	bl	800a1bc <RCCEx_PLL3_Config>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d5c:	e003      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	75fb      	strb	r3, [r7, #23]
      break;
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d6c:	4b94      	ldr	r3, [pc, #592]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d78:	4991      	ldr	r1, [pc, #580]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008d7e:	e001      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d03d      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d826      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d98:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008db5 	.word	0x08008db5
 8008da4:	08008dc3 	.word	0x08008dc3
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008ded 	.word	0x08008ded
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db4:	4b82      	ldr	r3, [pc, #520]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	4a81      	ldr	r2, [pc, #516]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dc0:	e015      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 f945 	bl	800a058 <RCCEx_PLL2_Config>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dd2:	e00c      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f9ee 	bl	800a1bc <RCCEx_PLL3_Config>
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008de4:	e003      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dea:	e000      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d109      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df4:	4b72      	ldr	r3, [pc, #456]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	f023 0207 	bic.w	r2, r3, #7
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e00:	496f      	ldr	r1, [pc, #444]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	650b      	str	r3, [r1, #80]	; 0x50
 8008e06:	e001      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d051      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e22:	d036      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008e24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008e28:	d830      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e2e:	d032      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e34:	d82a      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e3a:	d02e      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008e3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e40:	d824      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e46:	d018      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4c:	d81e      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e56:	d007      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008e58:	e018      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5a:	4b59      	ldr	r3, [pc, #356]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a58      	ldr	r2, [pc, #352]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e66:	e019      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 f8f2 	bl	800a058 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e78:	e010      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3324      	adds	r3, #36	; 0x24
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f99b 	bl	800a1bc <RCCEx_PLL3_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e007      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	e004      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e92:	bf00      	nop
 8008e94:	e002      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e96:	bf00      	nop
 8008e98:	e000      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ea2:	4b47      	ldr	r3, [pc, #284]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eb0:	4943      	ldr	r1, [pc, #268]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8008eb6:	e001      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d051      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ece:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ed2:	d036      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008ed4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ed8:	d830      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ede:	d032      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008ee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ee4:	d82a      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008eea:	d02e      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ef0:	d824      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef6:	d018      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008efc:	d81e      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008f02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f06:	d007      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008f08:	e018      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	4a2c      	ldr	r2, [pc, #176]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f16:	e019      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 f89a 	bl	800a058 <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f28:	e010      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3324      	adds	r3, #36	; 0x24
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f943 	bl	800a1bc <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f3a:	e007      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f40:	e004      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f42:	bf00      	nop
 8008f44:	e002      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f46:	bf00      	nop
 8008f48:	e000      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10a      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f60:	4917      	ldr	r1, [pc, #92]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	658b      	str	r3, [r1, #88]	; 0x58
 8008f66:	e001      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d035      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7c:	2b30      	cmp	r3, #48	; 0x30
 8008f7e:	d01c      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f80:	2b30      	cmp	r3, #48	; 0x30
 8008f82:	d817      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d00c      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d813      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d019      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008f90:	2b10      	cmp	r3, #16
 8008f92:	d10f      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008fa0:	e011      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f855 	bl	800a058 <RCCEx_PLL2_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb8:	e005      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008fba:	bf00      	nop
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008fbe:	bf00      	nop
 8008fc0:	58024400 	.word	0x58024400
      break;
 8008fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008fcc:	4ba3      	ldr	r3, [pc, #652]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd8:	49a0      	ldr	r1, [pc, #640]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fde:	e001      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d047      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff8:	d030      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ffe:	d82a      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009004:	d02c      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800900a:	d824      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800900c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009010:	d018      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009016:	d81e      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009020:	d007      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009022:	e018      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009024:	4b8d      	ldr	r3, [pc, #564]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	4a8c      	ldr	r2, [pc, #560]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800902a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009030:	e017      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f001 f80d 	bl	800a058 <RCCEx_PLL2_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009042:	e00e      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3324      	adds	r3, #36	; 0x24
 8009048:	2100      	movs	r1, #0
 800904a:	4618      	mov	r0, r3
 800904c:	f001 f8b6 	bl	800a1bc <RCCEx_PLL3_Config>
 8009050:	4603      	mov	r3, r0
 8009052:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009054:	e005      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
      break;
 800905a:	e002      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800905c:	bf00      	nop
 800905e:	e000      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d109      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009068:	4b7c      	ldr	r3, [pc, #496]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800906a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009074:	4979      	ldr	r1, [pc, #484]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009076:	4313      	orrs	r3, r2
 8009078:	650b      	str	r3, [r1, #80]	; 0x50
 800907a:	e001      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d049      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009094:	d02e      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800909a:	d828      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 800909c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090a0:	d02a      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80090a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090a6:	d822      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80090a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090ac:	d026      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x414>
 80090ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090b2:	d81c      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80090b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090b8:	d010      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80090ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090be:	d816      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01d      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80090c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c8:	d111      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2101      	movs	r1, #1
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 ffc1 	bl	800a058 <RCCEx_PLL2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090da:	e012      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	2101      	movs	r1, #1
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 f86a 	bl	800a1bc <RCCEx_PLL3_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090ec:	e009      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
      break;
 80090f2:	e006      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090f4:	bf00      	nop
 80090f6:	e004      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090f8:	bf00      	nop
 80090fa:	e002      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090fc:	bf00      	nop
 80090fe:	e000      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009108:	4b54      	ldr	r3, [pc, #336]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800910a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009114:	4951      	ldr	r1, [pc, #324]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009116:	4313      	orrs	r3, r2
 8009118:	650b      	str	r3, [r1, #80]	; 0x50
 800911a:	e001      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d04b      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009136:	d02e      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800913c:	d828      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009142:	d02a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009148:	d822      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800914a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800914e:	d026      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009154:	d81c      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915a:	d010      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800915c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009160:	d816      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800916a:	d111      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3304      	adds	r3, #4
 8009170:	2101      	movs	r1, #1
 8009172:	4618      	mov	r0, r3
 8009174:	f000 ff70 	bl	800a058 <RCCEx_PLL2_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800917c:	e012      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	2101      	movs	r1, #1
 8009184:	4618      	mov	r0, r3
 8009186:	f001 f819 	bl	800a1bc <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800918e:	e009      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
      break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80091a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091aa:	4b2c      	ldr	r3, [pc, #176]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091b8:	4928      	ldr	r1, [pc, #160]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	658b      	str	r3, [r1, #88]	; 0x58
 80091be:	e001      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02f      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d8:	d00e      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80091da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091de:	d814      	bhi.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d015      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80091e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e8:	d10f      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ea:	4b1c      	ldr	r3, [pc, #112]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	4a1b      	ldr	r2, [pc, #108]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091f6:	e00c      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3304      	adds	r3, #4
 80091fc:	2101      	movs	r1, #1
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 ff2a 	bl	800a058 <RCCEx_PLL2_Config>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009208:	e003      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
      break;
 800920e:	e000      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d109      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009218:	4b10      	ldr	r3, [pc, #64]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800921a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009224:	490d      	ldr	r1, [pc, #52]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009226:	4313      	orrs	r3, r2
 8009228:	650b      	str	r3, [r1, #80]	; 0x50
 800922a:	e001      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d034      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009240:	2b03      	cmp	r3, #3
 8009242:	d81d      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009244:	a201      	add	r2, pc, #4	; (adr r2, 800924c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924a:	bf00      	nop
 800924c:	08009287 	.word	0x08009287
 8009250:	08009261 	.word	0x08009261
 8009254:	0800926f 	.word	0x0800926f
 8009258:	08009287 	.word	0x08009287
 800925c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009260:	4bb1      	ldr	r3, [pc, #708]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4ab0      	ldr	r2, [pc, #704]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800926c:	e00c      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3304      	adds	r3, #4
 8009272:	2102      	movs	r1, #2
 8009274:	4618      	mov	r0, r3
 8009276:	f000 feef 	bl	800a058 <RCCEx_PLL2_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800927e:	e003      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]
      break;
 8009284:	e000      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800928e:	4ba6      	ldr	r3, [pc, #664]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009292:	f023 0203 	bic.w	r2, r3, #3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	49a3      	ldr	r1, [pc, #652]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800929c:	4313      	orrs	r3, r2
 800929e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80092a0:	e001      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 8086 	beq.w	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092b4:	4b9d      	ldr	r3, [pc, #628]	; (800952c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a9c      	ldr	r2, [pc, #624]	; (800952c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80092ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092c0:	f7fb f978 	bl	80045b4 <HAL_GetTick>
 80092c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c6:	e009      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c8:	f7fb f974 	bl	80045b4 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b64      	cmp	r3, #100	; 0x64
 80092d4:	d902      	bls.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	75fb      	strb	r3, [r7, #23]
        break;
 80092da:	e005      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092dc:	4b93      	ldr	r3, [pc, #588]	; (800952c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0ef      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d166      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092ee:	4b8e      	ldr	r3, [pc, #568]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092f8:	4053      	eors	r3, r2
 80092fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d013      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009302:	4b89      	ldr	r3, [pc, #548]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800930c:	4b86      	ldr	r3, [pc, #536]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800930e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009310:	4a85      	ldr	r2, [pc, #532]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009316:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009318:	4b83      	ldr	r3, [pc, #524]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	4a82      	ldr	r2, [pc, #520]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800931e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009322:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009324:	4a80      	ldr	r2, [pc, #512]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009334:	d115      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009336:	f7fb f93d 	bl	80045b4 <HAL_GetTick>
 800933a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800933c:	e00b      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933e:	f7fb f939 	bl	80045b4 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	f241 3288 	movw	r2, #5000	; 0x1388
 800934c:	4293      	cmp	r3, r2
 800934e:	d902      	bls.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	75fb      	strb	r3, [r7, #23]
            break;
 8009354:	e005      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009356:	4b74      	ldr	r3, [pc, #464]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0ed      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d126      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800936e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009376:	d10d      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009378:	4b6b      	ldr	r3, [pc, #428]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009386:	0919      	lsrs	r1, r3, #4
 8009388:	4b69      	ldr	r3, [pc, #420]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800938a:	400b      	ands	r3, r1
 800938c:	4966      	ldr	r1, [pc, #408]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800938e:	4313      	orrs	r3, r2
 8009390:	610b      	str	r3, [r1, #16]
 8009392:	e005      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009394:	4b64      	ldr	r3, [pc, #400]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	4a63      	ldr	r2, [pc, #396]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800939a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800939e:	6113      	str	r3, [r2, #16]
 80093a0:	4b61      	ldr	r3, [pc, #388]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ae:	495e      	ldr	r1, [pc, #376]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	670b      	str	r3, [r1, #112]	; 0x70
 80093b4:	e004      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	75bb      	strb	r3, [r7, #22]
 80093ba:	e001      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d07e      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d0:	2b28      	cmp	r3, #40	; 0x28
 80093d2:	d867      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080094ab 	.word	0x080094ab
 80093e0:	080094a5 	.word	0x080094a5
 80093e4:	080094a5 	.word	0x080094a5
 80093e8:	080094a5 	.word	0x080094a5
 80093ec:	080094a5 	.word	0x080094a5
 80093f0:	080094a5 	.word	0x080094a5
 80093f4:	080094a5 	.word	0x080094a5
 80093f8:	080094a5 	.word	0x080094a5
 80093fc:	08009481 	.word	0x08009481
 8009400:	080094a5 	.word	0x080094a5
 8009404:	080094a5 	.word	0x080094a5
 8009408:	080094a5 	.word	0x080094a5
 800940c:	080094a5 	.word	0x080094a5
 8009410:	080094a5 	.word	0x080094a5
 8009414:	080094a5 	.word	0x080094a5
 8009418:	080094a5 	.word	0x080094a5
 800941c:	08009493 	.word	0x08009493
 8009420:	080094a5 	.word	0x080094a5
 8009424:	080094a5 	.word	0x080094a5
 8009428:	080094a5 	.word	0x080094a5
 800942c:	080094a5 	.word	0x080094a5
 8009430:	080094a5 	.word	0x080094a5
 8009434:	080094a5 	.word	0x080094a5
 8009438:	080094a5 	.word	0x080094a5
 800943c:	080094ab 	.word	0x080094ab
 8009440:	080094a5 	.word	0x080094a5
 8009444:	080094a5 	.word	0x080094a5
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094a5 	.word	0x080094a5
 8009450:	080094a5 	.word	0x080094a5
 8009454:	080094a5 	.word	0x080094a5
 8009458:	080094a5 	.word	0x080094a5
 800945c:	080094ab 	.word	0x080094ab
 8009460:	080094a5 	.word	0x080094a5
 8009464:	080094a5 	.word	0x080094a5
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094a5 	.word	0x080094a5
 8009470:	080094a5 	.word	0x080094a5
 8009474:	080094a5 	.word	0x080094a5
 8009478:	080094a5 	.word	0x080094a5
 800947c:	080094ab 	.word	0x080094ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3304      	adds	r3, #4
 8009484:	2101      	movs	r1, #1
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fde6 	bl	800a058 <RCCEx_PLL2_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009490:	e00c      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	2101      	movs	r1, #1
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fe8f 	bl	800a1bc <RCCEx_PLL3_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80094a2:	e003      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]
      break;
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d109      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094b2:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094be:	491a      	ldr	r1, [pc, #104]	; (8009528 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	654b      	str	r3, [r1, #84]	; 0x54
 80094c4:	e001      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d03e      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094da:	2b05      	cmp	r3, #5
 80094dc:	d820      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009535 	.word	0x08009535
 80094e8:	080094fd 	.word	0x080094fd
 80094ec:	0800950f 	.word	0x0800950f
 80094f0:	08009535 	.word	0x08009535
 80094f4:	08009535 	.word	0x08009535
 80094f8:	08009535 	.word	0x08009535
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3304      	adds	r3, #4
 8009500:	2101      	movs	r1, #1
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fda8 	bl	800a058 <RCCEx_PLL2_Config>
 8009508:	4603      	mov	r3, r0
 800950a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800950c:	e013      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3324      	adds	r3, #36	; 0x24
 8009512:	2101      	movs	r1, #1
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fe51 	bl	800a1bc <RCCEx_PLL3_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800951e:	e00a      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	75fb      	strb	r3, [r7, #23]
      break;
 8009524:	e007      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009526:	bf00      	nop
 8009528:	58024400 	.word	0x58024400
 800952c:	58024800 	.word	0x58024800
 8009530:	00ffffcf 	.word	0x00ffffcf
      break;
 8009534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800953c:	4b9f      	ldr	r3, [pc, #636]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800953e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009540:	f023 0207 	bic.w	r2, r3, #7
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009548:	499c      	ldr	r1, [pc, #624]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800954a:	4313      	orrs	r3, r2
 800954c:	654b      	str	r3, [r1, #84]	; 0x54
 800954e:	e001      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d039      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009566:	2b05      	cmp	r3, #5
 8009568:	d820      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	080095b3 	.word	0x080095b3
 8009574:	08009589 	.word	0x08009589
 8009578:	0800959b 	.word	0x0800959b
 800957c:	080095b3 	.word	0x080095b3
 8009580:	080095b3 	.word	0x080095b3
 8009584:	080095b3 	.word	0x080095b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	2101      	movs	r1, #1
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fd62 	bl	800a058 <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009598:	e00c      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3324      	adds	r3, #36	; 0x24
 800959e:	2101      	movs	r1, #1
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 fe0b 	bl	800a1bc <RCCEx_PLL3_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80095aa:	e003      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	75fb      	strb	r3, [r7, #23]
      break;
 80095b0:	e000      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80095b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095ba:	4b80      	ldr	r3, [pc, #512]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f023 0207 	bic.w	r2, r3, #7
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c8:	497c      	ldr	r1, [pc, #496]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	658b      	str	r3, [r1, #88]	; 0x58
 80095ce:	e001      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d04b      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ea:	d02e      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f0:	d828      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d02a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80095f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fc:	d822      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009602:	d026      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009608:	d81c      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800960a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960e:	d010      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009614:	d816      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01d      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800961a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800961e:	d111      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3304      	adds	r3, #4
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fd16 	bl	800a058 <RCCEx_PLL2_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009630:	e012      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2102      	movs	r1, #2
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fdbf 	bl	800a1bc <RCCEx_PLL3_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009642:	e009      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
      break;
 8009648:	e006      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800964a:	bf00      	nop
 800964c:	e004      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800964e:	bf00      	nop
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800965e:	4b57      	ldr	r3, [pc, #348]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966c:	4953      	ldr	r1, [pc, #332]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800966e:	4313      	orrs	r3, r2
 8009670:	654b      	str	r3, [r1, #84]	; 0x54
 8009672:	e001      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
 8009676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d04b      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800968a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800968e:	d02e      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009690:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009694:	d828      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d02a      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800969c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a0:	d822      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80096a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a6:	d026      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80096a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096ac:	d81c      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80096ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b2:	d010      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80096b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b8:	d816      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01d      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80096be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c2:	d111      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fcc4 	bl	800a058 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096d4:	e012      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	; 0x24
 80096da:	2102      	movs	r1, #2
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fd6d 	bl	800a1bc <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096e6:	e009      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	e006      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096ee:	bf00      	nop
 80096f0:	e004      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096f2:	bf00      	nop
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009702:	4b2e      	ldr	r3, [pc, #184]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009706:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009710:	492a      	ldr	r1, [pc, #168]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009712:	4313      	orrs	r3, r2
 8009714:	658b      	str	r3, [r1, #88]	; 0x58
 8009716:	e001      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b00      	cmp	r3, #0
 8009726:	d04d      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800972e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009732:	d02e      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009734:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009738:	d828      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800973a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800973e:	d02a      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009744:	d822      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009746:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800974a:	d026      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800974c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009750:	d81c      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009756:	d010      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975c:	d816      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d01d      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009766:	d111      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3304      	adds	r3, #4
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fc72 	bl	800a058 <RCCEx_PLL2_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009778:	e012      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3324      	adds	r3, #36	; 0x24
 800977e:	2102      	movs	r1, #2
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fd1b 	bl	800a1bc <RCCEx_PLL3_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800978a:	e009      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	75fb      	strb	r3, [r7, #23]
      break;
 8009790:	e006      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009792:	bf00      	nop
 8009794:	e004      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009796:	bf00      	nop
 8009798:	e002      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800979e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10c      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097b4:	4901      	ldr	r1, [pc, #4]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	658b      	str	r3, [r1, #88]	; 0x58
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80097bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d018      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d8:	d10a      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3324      	adds	r3, #36	; 0x24
 80097de:	2102      	movs	r1, #2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fceb 	bl	800a1bc <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80097f0:	4b8a      	ldr	r3, [pc, #552]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097fc:	4987      	ldr	r1, [pc, #540]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0310 	and.w	r3, r3, #16
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01a      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009818:	d10a      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3324      	adds	r3, #36	; 0x24
 800981e:	2102      	movs	r1, #2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fccb 	bl	800a1bc <RCCEx_PLL3_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009830:	4b7a      	ldr	r3, [pc, #488]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983e:	4977      	ldr	r1, [pc, #476]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009840:	4313      	orrs	r3, r2
 8009842:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d034      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800985a:	d01d      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800985c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009860:	d817      	bhi.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800986a:	d009      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800986c:	e011      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3304      	adds	r3, #4
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fbef 	bl	800a058 <RCCEx_PLL2_Config>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800987e:	e00c      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	2102      	movs	r1, #2
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fc98 	bl	800a1bc <RCCEx_PLL3_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009890:	e003      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	75fb      	strb	r3, [r7, #23]
      break;
 8009896:	e000      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098a0:	4b5e      	ldr	r3, [pc, #376]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098ae:	495b      	ldr	r1, [pc, #364]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	658b      	str	r3, [r1, #88]	; 0x58
 80098b4:	e001      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d033      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098d0:	d01c      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80098d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098d6:	d816      	bhi.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098dc:	d003      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80098de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098e2:	d007      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80098e4:	e00f      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e6:	4b4d      	ldr	r3, [pc, #308]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	4a4c      	ldr	r2, [pc, #304]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80098f2:	e00c      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3324      	adds	r3, #36	; 0x24
 80098f8:	2101      	movs	r1, #1
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fc5e 	bl	800a1bc <RCCEx_PLL3_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009904:	e003      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	75fb      	strb	r3, [r7, #23]
      break;
 800990a:	e000      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800990c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009914:	4b41      	ldr	r3, [pc, #260]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009922:	493e      	ldr	r1, [pc, #248]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009924:	4313      	orrs	r3, r2
 8009926:	654b      	str	r3, [r1, #84]	; 0x54
 8009928:	e001      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d029      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009946:	d007      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009948:	e00f      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800994a:	4b34      	ldr	r3, [pc, #208]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800994c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994e:	4a33      	ldr	r2, [pc, #204]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009956:	e00b      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	2102      	movs	r1, #2
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fb7a 	bl	800a058 <RCCEx_PLL2_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009968:	e002      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
      break;
 800996e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009976:	4b29      	ldr	r3, [pc, #164]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	4926      	ldr	r1, [pc, #152]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009984:	4313      	orrs	r3, r2
 8009986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009988:	e001      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3324      	adds	r3, #36	; 0x24
 800999e:	2102      	movs	r1, #2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fc0b 	bl	800a1bc <RCCEx_PLL3_Config>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d033      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099c4:	d017      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80099c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ca:	d811      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80099cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d0:	d013      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80099d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099d6:	d80b      	bhi.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d010      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80099dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e0:	d106      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e2:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	4a0d      	ldr	r2, [pc, #52]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80099ee:	e007      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
      break;
 80099f4:	e004      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099f6:	bf00      	nop
 80099f8:	e002      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099fa:	bf00      	nop
 80099fc:	e000      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10c      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a12:	4902      	ldr	r1, [pc, #8]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	654b      	str	r3, [r1, #84]	; 0x54
 8009a18:	e004      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009a1a:	bf00      	nop
 8009a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d008      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a30:	4b29      	ldr	r3, [pc, #164]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3c:	4926      	ldr	r1, [pc, #152]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d008      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a4e:	4b22      	ldr	r3, [pc, #136]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a5a:	491f      	ldr	r1, [pc, #124]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00d      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a6c:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a19      	ldr	r2, [pc, #100]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a76:	6113      	str	r3, [r2, #16]
 8009a78:	4b17      	ldr	r3, [pc, #92]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a82:	4915      	ldr	r1, [pc, #84]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da08      	bge.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a90:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9c:	490e      	ldr	r1, [pc, #56]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abc:	4906      	ldr	r1, [pc, #24]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009ac2:	7dbb      	ldrb	r3, [r7, #22]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e000      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	58024400 	.word	0x58024400

08009adc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ae0:	f7ff f8a6 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	091b      	lsrs	r3, r3, #4
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	4904      	ldr	r1, [pc, #16]	; (8009b04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009af2:	5ccb      	ldrb	r3, [r1, r3]
 8009af4:	f003 031f 	and.w	r3, r3, #31
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	58024400 	.word	0x58024400
 8009b04:	0800e52c 	.word	0x0800e52c

08009b08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b089      	sub	sp, #36	; 0x24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b10:	4ba1      	ldr	r3, [pc, #644]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b1a:	4b9f      	ldr	r3, [pc, #636]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	0b1b      	lsrs	r3, r3, #12
 8009b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b26:	4b9c      	ldr	r3, [pc, #624]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	091b      	lsrs	r3, r3, #4
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b32:	4b99      	ldr	r3, [pc, #612]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b36:	08db      	lsrs	r3, r3, #3
 8009b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8111 	beq.w	8009d78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	f000 8083 	beq.w	8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	f200 80a1 	bhi.w	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d056      	beq.n	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b72:	e099      	b.n	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b74:	4b88      	ldr	r3, [pc, #544]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02d      	beq.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b80:	4b85      	ldr	r3, [pc, #532]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	08db      	lsrs	r3, r3, #3
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	4a84      	ldr	r2, [pc, #528]	; (8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b90:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009baa:	4b7b      	ldr	r3, [pc, #492]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bda:	e087      	b.n	8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b6a      	ldr	r3, [pc, #424]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1e:	e065      	b.n	8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c32:	4b59      	ldr	r3, [pc, #356]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c62:	e043      	b.n	8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c76:	4b48      	ldr	r3, [pc, #288]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca6:	e021      	b.n	8009cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b37      	ldr	r3, [pc, #220]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009cec:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf0:	0a5b      	lsrs	r3, r3, #9
 8009cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d12:	ee17 2a90 	vmov	r2, s15
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d1a:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d24:	ee07 3a90 	vmov	s15, r3
 8009d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d40:	ee17 2a90 	vmov	r2, s15
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d48:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6e:	ee17 2a90 	vmov	r2, s15
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d76:	e008      	b.n	8009d8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	609a      	str	r2, [r3, #8]
}
 8009d8a:	bf00      	nop
 8009d8c:	3724      	adds	r7, #36	; 0x24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	03d09000 	.word	0x03d09000
 8009da0:	46000000 	.word	0x46000000
 8009da4:	4c742400 	.word	0x4c742400
 8009da8:	4a742400 	.word	0x4a742400
 8009dac:	4af42400 	.word	0x4af42400

08009db0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	; 0x24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db8:	4ba1      	ldr	r3, [pc, #644]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009dc2:	4b9f      	ldr	r3, [pc, #636]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	0d1b      	lsrs	r3, r3, #20
 8009dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009dce:	4b9c      	ldr	r3, [pc, #624]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dda:	4b99      	ldr	r3, [pc, #612]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 8111 	beq.w	800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f000 8083 	beq.w	8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f200 80a1 	bhi.w	8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d056      	beq.n	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e1a:	e099      	b.n	8009f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1c:	4b88      	ldr	r3, [pc, #544]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02d      	beq.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e28:	4b85      	ldr	r3, [pc, #532]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a84      	ldr	r2, [pc, #528]	; (800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b7b      	ldr	r3, [pc, #492]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e82:	e087      	b.n	8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e96:	4b6a      	ldr	r3, [pc, #424]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec6:	e065      	b.n	8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eda:	4b59      	ldr	r3, [pc, #356]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f0a:	e043      	b.n	8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1e:	4b48      	ldr	r3, [pc, #288]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f4e:	e021      	b.n	8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f62:	4b37      	ldr	r3, [pc, #220]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f94:	4b2a      	ldr	r3, [pc, #168]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fba:	ee17 2a90 	vmov	r2, s15
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009fc2:	4b1f      	ldr	r3, [pc, #124]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe8:	ee17 2a90 	vmov	r2, s15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	ee17 2a90 	vmov	r2, s15
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a01e:	e008      	b.n	800a032 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	609a      	str	r2, [r3, #8]
}
 800a032:	bf00      	nop
 800a034:	3724      	adds	r7, #36	; 0x24
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
 800a044:	03d09000 	.word	0x03d09000
 800a048:	46000000 	.word	0x46000000
 800a04c:	4c742400 	.word	0x4c742400
 800a050:	4a742400 	.word	0x4a742400
 800a054:	4af42400 	.word	0x4af42400

0800a058 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a066:	4b53      	ldr	r3, [pc, #332]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d101      	bne.n	800a076 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e099      	b.n	800a1aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a076:	4b4f      	ldr	r3, [pc, #316]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a4e      	ldr	r2, [pc, #312]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a07c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a082:	f7fa fa97 	bl	80045b4 <HAL_GetTick>
 800a086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a088:	e008      	b.n	800a09c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a08a:	f7fa fa93 	bl	80045b4 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e086      	b.n	800a1aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a09c:	4b45      	ldr	r3, [pc, #276]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1f0      	bne.n	800a08a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0a8:	4b42      	ldr	r3, [pc, #264]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	031b      	lsls	r3, r3, #12
 800a0b6:	493f      	ldr	r1, [pc, #252]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	628b      	str	r3, [r1, #40]	; 0x28
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	025b      	lsls	r3, r3, #9
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	041b      	lsls	r3, r3, #16
 800a0da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	061b      	lsls	r3, r3, #24
 800a0e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0ec:	4931      	ldr	r1, [pc, #196]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0f2:	4b30      	ldr	r3, [pc, #192]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	492d      	ldr	r1, [pc, #180]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a100:	4313      	orrs	r3, r2
 800a102:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a104:	4b2b      	ldr	r3, [pc, #172]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	f023 0220 	bic.w	r2, r3, #32
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	4928      	ldr	r1, [pc, #160]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a112:	4313      	orrs	r3, r2
 800a114:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a116:	4b27      	ldr	r3, [pc, #156]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	4a26      	ldr	r2, [pc, #152]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a11c:	f023 0310 	bic.w	r3, r3, #16
 800a120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a122:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a126:	4b24      	ldr	r3, [pc, #144]	; (800a1b8 <RCCEx_PLL2_Config+0x160>)
 800a128:	4013      	ands	r3, r2
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	69d2      	ldr	r2, [r2, #28]
 800a12e:	00d2      	lsls	r2, r2, #3
 800a130:	4920      	ldr	r1, [pc, #128]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a132:	4313      	orrs	r3, r2
 800a134:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a136:	4b1f      	ldr	r3, [pc, #124]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	4a1e      	ldr	r2, [pc, #120]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a13c:	f043 0310 	orr.w	r3, r3, #16
 800a140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14c:	4a19      	ldr	r2, [pc, #100]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a14e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a152:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a154:	e00f      	b.n	800a176 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d106      	bne.n	800a16a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a15c:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	4a14      	ldr	r2, [pc, #80]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a166:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a168:	e005      	b.n	800a176 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a16a:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a0e      	ldr	r2, [pc, #56]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a17c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a182:	f7fa fa17 	bl	80045b4 <HAL_GetTick>
 800a186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a188:	e008      	b.n	800a19c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a18a:	f7fa fa13 	bl	80045b4 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d901      	bls.n	800a19c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e006      	b.n	800a1aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a19c:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <RCCEx_PLL2_Config+0x15c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0f0      	beq.n	800a18a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	58024400 	.word	0x58024400
 800a1b8:	ffff0007 	.word	0xffff0007

0800a1bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ca:	4b53      	ldr	r3, [pc, #332]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d101      	bne.n	800a1da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e099      	b.n	800a30e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1da:	4b4f      	ldr	r3, [pc, #316]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a4e      	ldr	r2, [pc, #312]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a1e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e6:	f7fa f9e5 	bl	80045b4 <HAL_GetTick>
 800a1ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1ec:	e008      	b.n	800a200 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1ee:	f7fa f9e1 	bl	80045b4 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e086      	b.n	800a30e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a200:	4b45      	ldr	r3, [pc, #276]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f0      	bne.n	800a1ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a20c:	4b42      	ldr	r3, [pc, #264]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	051b      	lsls	r3, r3, #20
 800a21a:	493f      	ldr	r1, [pc, #252]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	628b      	str	r3, [r1, #40]	; 0x28
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	3b01      	subs	r3, #1
 800a226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	3b01      	subs	r3, #1
 800a230:	025b      	lsls	r3, r3, #9
 800a232:	b29b      	uxth	r3, r3
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	3b01      	subs	r3, #1
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a250:	4931      	ldr	r1, [pc, #196]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a252:	4313      	orrs	r3, r2
 800a254:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a256:	4b30      	ldr	r3, [pc, #192]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	492d      	ldr	r1, [pc, #180]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a264:	4313      	orrs	r3, r2
 800a266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a268:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	4928      	ldr	r1, [pc, #160]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a276:	4313      	orrs	r3, r2
 800a278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a27a:	4b27      	ldr	r3, [pc, #156]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a286:	4b24      	ldr	r3, [pc, #144]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a28a:	4b24      	ldr	r3, [pc, #144]	; (800a31c <RCCEx_PLL3_Config+0x160>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	69d2      	ldr	r2, [r2, #28]
 800a292:	00d2      	lsls	r2, r2, #3
 800a294:	4920      	ldr	r1, [pc, #128]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a296:	4313      	orrs	r3, r2
 800a298:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a29a:	4b1f      	ldr	r3, [pc, #124]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29e:	4a1e      	ldr	r2, [pc, #120]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	4a19      	ldr	r2, [pc, #100]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2b8:	e00f      	b.n	800a2da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d106      	bne.n	800a2ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2c0:	4b15      	ldr	r3, [pc, #84]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	4a14      	ldr	r2, [pc, #80]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2cc:	e005      	b.n	800a2da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	4a11      	ldr	r2, [pc, #68]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a0e      	ldr	r2, [pc, #56]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e6:	f7fa f965 	bl	80045b4 <HAL_GetTick>
 800a2ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2ec:	e008      	b.n	800a300 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2ee:	f7fa f961 	bl	80045b4 <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d901      	bls.n	800a300 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e006      	b.n	800a30e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a300:	4b05      	ldr	r3, [pc, #20]	; (800a318 <RCCEx_PLL3_Config+0x15c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0f0      	beq.n	800a2ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	58024400 	.word	0x58024400
 800a31c:	ffff0007 	.word	0xffff0007

0800a320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e049      	b.n	800a3c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7f9 fc2c 	bl	8003ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 feb8 	bl	800b0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d001      	beq.n	800a3e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e05e      	b.n	800a4a6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a2b      	ldr	r2, [pc, #172]	; (800a4b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d02c      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a412:	d027      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d022      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a26      	ldr	r2, [pc, #152]	; (800a4bc <HAL_TIM_Base_Start_IT+0xec>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d01d      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a24      	ldr	r2, [pc, #144]	; (800a4c0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d018      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a23      	ldr	r2, [pc, #140]	; (800a4c4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d013      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a21      	ldr	r2, [pc, #132]	; (800a4c8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00e      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a20      	ldr	r2, [pc, #128]	; (800a4cc <HAL_TIM_Base_Start_IT+0xfc>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d009      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a1e      	ldr	r2, [pc, #120]	; (800a4d0 <HAL_TIM_Base_Start_IT+0x100>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d004      	beq.n	800a464 <HAL_TIM_Base_Start_IT+0x94>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a1d      	ldr	r2, [pc, #116]	; (800a4d4 <HAL_TIM_Base_Start_IT+0x104>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d115      	bne.n	800a490 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	4b1b      	ldr	r3, [pc, #108]	; (800a4d8 <HAL_TIM_Base_Start_IT+0x108>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b06      	cmp	r3, #6
 800a474:	d015      	beq.n	800a4a2 <HAL_TIM_Base_Start_IT+0xd2>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47c:	d011      	beq.n	800a4a2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f042 0201 	orr.w	r2, r2, #1
 800a48c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a48e:	e008      	b.n	800a4a2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e000      	b.n	800a4a4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	40010000 	.word	0x40010000
 800a4b8:	40000400 	.word	0x40000400
 800a4bc:	40000800 	.word	0x40000800
 800a4c0:	40000c00 	.word	0x40000c00
 800a4c4:	40010400 	.word	0x40010400
 800a4c8:	40001800 	.word	0x40001800
 800a4cc:	40014000 	.word	0x40014000
 800a4d0:	4000e000 	.word	0x4000e000
 800a4d4:	4000e400 	.word	0x4000e400
 800a4d8:	00010007 	.word	0x00010007

0800a4dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e049      	b.n	800a582 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7f9 fc86 	bl	8003e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f000 fdda 	bl	800b0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <HAL_TIM_PWM_Start+0x24>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	bf14      	ite	ne
 800a5a8:	2301      	movne	r3, #1
 800a5aa:	2300      	moveq	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	e03c      	b.n	800a62a <HAL_TIM_PWM_Start+0x9e>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d109      	bne.n	800a5ca <HAL_TIM_PWM_Start+0x3e>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	bf14      	ite	ne
 800a5c2:	2301      	movne	r3, #1
 800a5c4:	2300      	moveq	r3, #0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	e02f      	b.n	800a62a <HAL_TIM_PWM_Start+0x9e>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d109      	bne.n	800a5e4 <HAL_TIM_PWM_Start+0x58>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	bf14      	ite	ne
 800a5dc:	2301      	movne	r3, #1
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	e022      	b.n	800a62a <HAL_TIM_PWM_Start+0x9e>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b0c      	cmp	r3, #12
 800a5e8:	d109      	bne.n	800a5fe <HAL_TIM_PWM_Start+0x72>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	bf14      	ite	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	2300      	moveq	r3, #0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	e015      	b.n	800a62a <HAL_TIM_PWM_Start+0x9e>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b10      	cmp	r3, #16
 800a602:	d109      	bne.n	800a618 <HAL_TIM_PWM_Start+0x8c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	bf14      	ite	ne
 800a610:	2301      	movne	r3, #1
 800a612:	2300      	moveq	r3, #0
 800a614:	b2db      	uxtb	r3, r3
 800a616:	e008      	b.n	800a62a <HAL_TIM_PWM_Start+0x9e>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e0ab      	b.n	800a78a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d104      	bne.n	800a642 <HAL_TIM_PWM_Start+0xb6>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a640:	e023      	b.n	800a68a <HAL_TIM_PWM_Start+0xfe>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d104      	bne.n	800a652 <HAL_TIM_PWM_Start+0xc6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a650:	e01b      	b.n	800a68a <HAL_TIM_PWM_Start+0xfe>
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d104      	bne.n	800a662 <HAL_TIM_PWM_Start+0xd6>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a660:	e013      	b.n	800a68a <HAL_TIM_PWM_Start+0xfe>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b0c      	cmp	r3, #12
 800a666:	d104      	bne.n	800a672 <HAL_TIM_PWM_Start+0xe6>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a670:	e00b      	b.n	800a68a <HAL_TIM_PWM_Start+0xfe>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b10      	cmp	r3, #16
 800a676:	d104      	bne.n	800a682 <HAL_TIM_PWM_Start+0xf6>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a680:	e003      	b.n	800a68a <HAL_TIM_PWM_Start+0xfe>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2202      	movs	r2, #2
 800a686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2201      	movs	r2, #1
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f001 f938 	bl	800b908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a3d      	ldr	r2, [pc, #244]	; (800a794 <HAL_TIM_PWM_Start+0x208>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d013      	beq.n	800a6ca <HAL_TIM_PWM_Start+0x13e>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a3c      	ldr	r2, [pc, #240]	; (800a798 <HAL_TIM_PWM_Start+0x20c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00e      	beq.n	800a6ca <HAL_TIM_PWM_Start+0x13e>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a3a      	ldr	r2, [pc, #232]	; (800a79c <HAL_TIM_PWM_Start+0x210>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d009      	beq.n	800a6ca <HAL_TIM_PWM_Start+0x13e>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a39      	ldr	r2, [pc, #228]	; (800a7a0 <HAL_TIM_PWM_Start+0x214>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d004      	beq.n	800a6ca <HAL_TIM_PWM_Start+0x13e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a37      	ldr	r2, [pc, #220]	; (800a7a4 <HAL_TIM_PWM_Start+0x218>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d101      	bne.n	800a6ce <HAL_TIM_PWM_Start+0x142>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <HAL_TIM_PWM_Start+0x144>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a2a      	ldr	r2, [pc, #168]	; (800a794 <HAL_TIM_PWM_Start+0x208>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d02c      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f6:	d027      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a2a      	ldr	r2, [pc, #168]	; (800a7a8 <HAL_TIM_PWM_Start+0x21c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d022      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a29      	ldr	r2, [pc, #164]	; (800a7ac <HAL_TIM_PWM_Start+0x220>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d01d      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a27      	ldr	r2, [pc, #156]	; (800a7b0 <HAL_TIM_PWM_Start+0x224>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d018      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <HAL_TIM_PWM_Start+0x20c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a23      	ldr	r2, [pc, #140]	; (800a7b4 <HAL_TIM_PWM_Start+0x228>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d00e      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a1b      	ldr	r2, [pc, #108]	; (800a79c <HAL_TIM_PWM_Start+0x210>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d009      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <HAL_TIM_PWM_Start+0x22c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d004      	beq.n	800a748 <HAL_TIM_PWM_Start+0x1bc>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <HAL_TIM_PWM_Start+0x230>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d115      	bne.n	800a774 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689a      	ldr	r2, [r3, #8]
 800a74e:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <HAL_TIM_PWM_Start+0x234>)
 800a750:	4013      	ands	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b06      	cmp	r3, #6
 800a758:	d015      	beq.n	800a786 <HAL_TIM_PWM_Start+0x1fa>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a760:	d011      	beq.n	800a786 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0201 	orr.w	r2, r2, #1
 800a770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a772:	e008      	b.n	800a786 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0201 	orr.w	r2, r2, #1
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e000      	b.n	800a788 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800
 800a7a8:	40000400 	.word	0x40000400
 800a7ac:	40000800 	.word	0x40000800
 800a7b0:	40000c00 	.word	0x40000c00
 800a7b4:	40001800 	.word	0x40001800
 800a7b8:	4000e000 	.word	0x4000e000
 800a7bc:	4000e400 	.word	0x4000e400
 800a7c0:	00010007 	.word	0x00010007

0800a7c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e08f      	b.n	800a8f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d106      	bne.n	800a7f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7f9 fa1f 	bl	8003c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b3e      	ldr	r3, [pc, #248]	; (800a900 <HAL_TIM_Encoder_Init+0x13c>)
 800a806:	400b      	ands	r3, r1
 800a808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3304      	adds	r3, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f000 fc5d 	bl	800b0d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <HAL_TIM_Encoder_Init+0x140>)
 800a840:	4013      	ands	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	4313      	orrs	r3, r2
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4b2b      	ldr	r3, [pc, #172]	; (800a908 <HAL_TIM_Encoder_Init+0x144>)
 800a85a:	4013      	ands	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <HAL_TIM_Encoder_Init+0x148>)
 800a862:	4013      	ands	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	4313      	orrs	r3, r2
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	011a      	lsls	r2, r3, #4
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	031b      	lsls	r3, r3, #12
 800a884:	4313      	orrs	r3, r2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	fffebff8 	.word	0xfffebff8
 800a904:	fffffcfc 	.word	0xfffffcfc
 800a908:	fffff3f3 	.word	0xfffff3f3
 800a90c:	ffff0f0f 	.word	0xffff0f0f

0800a910 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d110      	bne.n	800a962 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d102      	bne.n	800a94c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a946:	7b7b      	ldrb	r3, [r7, #13]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d001      	beq.n	800a950 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e069      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a960:	e031      	b.n	800a9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d110      	bne.n	800a98a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d102      	bne.n	800a974 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a96e:	7b3b      	ldrb	r3, [r7, #12]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d001      	beq.n	800a978 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e055      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a988:	e01d      	b.n	800a9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d108      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d105      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a996:	7b7b      	ldrb	r3, [r7, #13]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d102      	bne.n	800a9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a99c:	7b3b      	ldrb	r3, [r7, #12]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e03e      	b.n	800aa24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_Encoder_Start+0xc4>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d008      	beq.n	800a9e4 <HAL_TIM_Encoder_Start+0xd4>
 800a9d2:	e00f      	b.n	800a9f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 ff93 	bl	800b908 <TIM_CCxChannelCmd>
      break;
 800a9e2:	e016      	b.n	800aa12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	2104      	movs	r1, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 ff8b 	bl	800b908 <TIM_CCxChannelCmd>
      break;
 800a9f2:	e00e      	b.n	800aa12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 ff83 	bl	800b908 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2201      	movs	r2, #1
 800aa08:	2104      	movs	r1, #4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 ff7c 	bl	800b908 <TIM_CCxChannelCmd>
      break;
 800aa10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f042 0201 	orr.w	r2, r2, #1
 800aa20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d122      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d11b      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0202 	mvn.w	r2, #2
 800aa58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb12 	bl	800b098 <HAL_TIM_IC_CaptureCallback>
 800aa74:	e005      	b.n	800aa82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fb04 	bl	800b084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fb15 	bl	800b0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d122      	bne.n	800aadc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d11b      	bne.n	800aadc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f06f 0204 	mvn.w	r2, #4
 800aaac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fae8 	bl	800b098 <HAL_TIM_IC_CaptureCallback>
 800aac8:	e005      	b.n	800aad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fada 	bl	800b084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 faeb 	bl	800b0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f003 0308 	and.w	r3, r3, #8
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d122      	bne.n	800ab30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f003 0308 	and.w	r3, r3, #8
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d11b      	bne.n	800ab30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f06f 0208 	mvn.w	r2, #8
 800ab00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2204      	movs	r2, #4
 800ab06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f003 0303 	and.w	r3, r3, #3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fabe 	bl	800b098 <HAL_TIM_IC_CaptureCallback>
 800ab1c:	e005      	b.n	800ab2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fab0 	bl	800b084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fac1 	bl	800b0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	2b10      	cmp	r3, #16
 800ab3c:	d122      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f003 0310 	and.w	r3, r3, #16
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d11b      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f06f 0210 	mvn.w	r2, #16
 800ab54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2208      	movs	r2, #8
 800ab5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa94 	bl	800b098 <HAL_TIM_IC_CaptureCallback>
 800ab70:	e005      	b.n	800ab7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fa86 	bl	800b084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fa97 	bl	800b0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d10e      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d107      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0201 	mvn.w	r2, #1
 800aba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7f9 fc42 	bl	8004434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abba:	2b80      	cmp	r3, #128	; 0x80
 800abbc:	d10e      	bne.n	800abdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc8:	2b80      	cmp	r3, #128	; 0x80
 800abca:	d107      	bne.n	800abdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 f802 	bl	800bbe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abea:	d10e      	bne.n	800ac0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf6:	2b80      	cmp	r3, #128	; 0x80
 800abf8:	d107      	bne.n	800ac0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fff5 	bl	800bbf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac14:	2b40      	cmp	r3, #64	; 0x40
 800ac16:	d10e      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d107      	bne.n	800ac36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa45 	bl	800b0c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d10e      	bne.n	800ac62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d107      	bne.n	800ac62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f06f 0220 	mvn.w	r2, #32
 800ac5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 ffb5 	bl	800bbcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e0ff      	b.n	800ae8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b14      	cmp	r3, #20
 800ac96:	f200 80f0 	bhi.w	800ae7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac9a:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800ae7b 	.word	0x0800ae7b
 800aca8:	0800ae7b 	.word	0x0800ae7b
 800acac:	0800ae7b 	.word	0x0800ae7b
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ae7b 	.word	0x0800ae7b
 800acb8:	0800ae7b 	.word	0x0800ae7b
 800acbc:	0800ae7b 	.word	0x0800ae7b
 800acc0:	0800ad77 	.word	0x0800ad77
 800acc4:	0800ae7b 	.word	0x0800ae7b
 800acc8:	0800ae7b 	.word	0x0800ae7b
 800accc:	0800ae7b 	.word	0x0800ae7b
 800acd0:	0800adb7 	.word	0x0800adb7
 800acd4:	0800ae7b 	.word	0x0800ae7b
 800acd8:	0800ae7b 	.word	0x0800ae7b
 800acdc:	0800ae7b 	.word	0x0800ae7b
 800ace0:	0800adf9 	.word	0x0800adf9
 800ace4:	0800ae7b 	.word	0x0800ae7b
 800ace8:	0800ae7b 	.word	0x0800ae7b
 800acec:	0800ae7b 	.word	0x0800ae7b
 800acf0:	0800ae39 	.word	0x0800ae39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fa90 	bl	800b220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f042 0208 	orr.w	r2, r2, #8
 800ad0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0204 	bic.w	r2, r2, #4
 800ad1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6999      	ldr	r1, [r3, #24]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	619a      	str	r2, [r3, #24]
      break;
 800ad32:	e0a5      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fb00 	bl	800b340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6999      	ldr	r1, [r3, #24]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	021a      	lsls	r2, r3, #8
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	619a      	str	r2, [r3, #24]
      break;
 800ad74:	e084      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fb69 	bl	800b454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	69da      	ldr	r2, [r3, #28]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f042 0208 	orr.w	r2, r2, #8
 800ad90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 0204 	bic.w	r2, r2, #4
 800ada0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	69d9      	ldr	r1, [r3, #28]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	61da      	str	r2, [r3, #28]
      break;
 800adb4:	e064      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fbd1 	bl	800b564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69d9      	ldr	r1, [r3, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	021a      	lsls	r2, r3, #8
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	61da      	str	r2, [r3, #28]
      break;
 800adf6:	e043      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fc1a 	bl	800b638 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0208 	orr.w	r2, r2, #8
 800ae12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0204 	bic.w	r2, r2, #4
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	691a      	ldr	r2, [r3, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae36:	e023      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fc5e 	bl	800b700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	021a      	lsls	r2, r3, #8
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae78:	e002      	b.n	800ae80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop

0800ae94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_TIM_ConfigClockSource+0x1c>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e0dc      	b.n	800b06a <HAL_TIM_ConfigClockSource+0x1d6>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4b6a      	ldr	r3, [pc, #424]	; (800b074 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aecc:	4013      	ands	r3, r2
 800aece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a64      	ldr	r2, [pc, #400]	; (800b078 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	f000 80a9 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800aeec:	4a62      	ldr	r2, [pc, #392]	; (800b078 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	f200 80ae 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800aef4:	4a61      	ldr	r2, [pc, #388]	; (800b07c <HAL_TIM_ConfigClockSource+0x1e8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	f000 80a1 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800aefc:	4a5f      	ldr	r2, [pc, #380]	; (800b07c <HAL_TIM_ConfigClockSource+0x1e8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	f200 80a6 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af04:	4a5e      	ldr	r2, [pc, #376]	; (800b080 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af06:	4293      	cmp	r3, r2
 800af08:	f000 8099 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af0c:	4a5c      	ldr	r2, [pc, #368]	; (800b080 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	f200 809e 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af18:	f000 8091 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af20:	f200 8096 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af28:	f000 8089 	beq.w	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af30:	f200 808e 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af38:	d03e      	beq.n	800afb8 <HAL_TIM_ConfigClockSource+0x124>
 800af3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af3e:	f200 8087 	bhi.w	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af46:	f000 8086 	beq.w	800b056 <HAL_TIM_ConfigClockSource+0x1c2>
 800af4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af4e:	d87f      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af50:	2b70      	cmp	r3, #112	; 0x70
 800af52:	d01a      	beq.n	800af8a <HAL_TIM_ConfigClockSource+0xf6>
 800af54:	2b70      	cmp	r3, #112	; 0x70
 800af56:	d87b      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af58:	2b60      	cmp	r3, #96	; 0x60
 800af5a:	d050      	beq.n	800affe <HAL_TIM_ConfigClockSource+0x16a>
 800af5c:	2b60      	cmp	r3, #96	; 0x60
 800af5e:	d877      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af60:	2b50      	cmp	r3, #80	; 0x50
 800af62:	d03c      	beq.n	800afde <HAL_TIM_ConfigClockSource+0x14a>
 800af64:	2b50      	cmp	r3, #80	; 0x50
 800af66:	d873      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af68:	2b40      	cmp	r3, #64	; 0x40
 800af6a:	d058      	beq.n	800b01e <HAL_TIM_ConfigClockSource+0x18a>
 800af6c:	2b40      	cmp	r3, #64	; 0x40
 800af6e:	d86f      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af70:	2b30      	cmp	r3, #48	; 0x30
 800af72:	d064      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af74:	2b30      	cmp	r3, #48	; 0x30
 800af76:	d86b      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d060      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	d867      	bhi.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d05c      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af84:	2b10      	cmp	r3, #16
 800af86:	d05a      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x1aa>
 800af88:	e062      	b.n	800b050 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6899      	ldr	r1, [r3, #8]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685a      	ldr	r2, [r3, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f000 fc95 	bl	800b8c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	609a      	str	r2, [r3, #8]
      break;
 800afb6:	e04f      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6818      	ldr	r0, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	6899      	ldr	r1, [r3, #8]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f000 fc7e 	bl	800b8c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689a      	ldr	r2, [r3, #8]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afda:	609a      	str	r2, [r3, #8]
      break;
 800afdc:	e03c      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	6859      	ldr	r1, [r3, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	461a      	mov	r2, r3
 800afec:	f000 fbee 	bl	800b7cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2150      	movs	r1, #80	; 0x50
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fc48 	bl	800b88c <TIM_ITRx_SetConfig>
      break;
 800affc:	e02c      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6859      	ldr	r1, [r3, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f000 fc0d 	bl	800b82a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2160      	movs	r1, #96	; 0x60
 800b016:	4618      	mov	r0, r3
 800b018:	f000 fc38 	bl	800b88c <TIM_ITRx_SetConfig>
      break;
 800b01c:	e01c      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6859      	ldr	r1, [r3, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f000 fbce 	bl	800b7cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2140      	movs	r1, #64	; 0x40
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fc28 	bl	800b88c <TIM_ITRx_SetConfig>
      break;
 800b03c:	e00c      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4619      	mov	r1, r3
 800b048:	4610      	mov	r0, r2
 800b04a:	f000 fc1f 	bl	800b88c <TIM_ITRx_SetConfig>
      break;
 800b04e:	e003      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	73fb      	strb	r3, [r7, #15]
      break;
 800b054:	e000      	b.n	800b058 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	ffceff88 	.word	0xffceff88
 800b078:	00100040 	.word	0x00100040
 800b07c:	00100030 	.word	0x00100030
 800b080:	00100020 	.word	0x00100020

0800b084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a44      	ldr	r2, [pc, #272]	; (800b1f8 <TIM_Base_SetConfig+0x124>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d013      	beq.n	800b114 <TIM_Base_SetConfig+0x40>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f2:	d00f      	beq.n	800b114 <TIM_Base_SetConfig+0x40>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a41      	ldr	r2, [pc, #260]	; (800b1fc <TIM_Base_SetConfig+0x128>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00b      	beq.n	800b114 <TIM_Base_SetConfig+0x40>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a40      	ldr	r2, [pc, #256]	; (800b200 <TIM_Base_SetConfig+0x12c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d007      	beq.n	800b114 <TIM_Base_SetConfig+0x40>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a3f      	ldr	r2, [pc, #252]	; (800b204 <TIM_Base_SetConfig+0x130>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d003      	beq.n	800b114 <TIM_Base_SetConfig+0x40>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a3e      	ldr	r2, [pc, #248]	; (800b208 <TIM_Base_SetConfig+0x134>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d108      	bne.n	800b126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a33      	ldr	r2, [pc, #204]	; (800b1f8 <TIM_Base_SetConfig+0x124>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d027      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b134:	d023      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a30      	ldr	r2, [pc, #192]	; (800b1fc <TIM_Base_SetConfig+0x128>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d01f      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a2f      	ldr	r2, [pc, #188]	; (800b200 <TIM_Base_SetConfig+0x12c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d01b      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a2e      	ldr	r2, [pc, #184]	; (800b204 <TIM_Base_SetConfig+0x130>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d017      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a2d      	ldr	r2, [pc, #180]	; (800b208 <TIM_Base_SetConfig+0x134>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d013      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a2c      	ldr	r2, [pc, #176]	; (800b20c <TIM_Base_SetConfig+0x138>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00f      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a2b      	ldr	r2, [pc, #172]	; (800b210 <TIM_Base_SetConfig+0x13c>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d00b      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a2a      	ldr	r2, [pc, #168]	; (800b214 <TIM_Base_SetConfig+0x140>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d007      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a29      	ldr	r2, [pc, #164]	; (800b218 <TIM_Base_SetConfig+0x144>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d003      	beq.n	800b17e <TIM_Base_SetConfig+0xaa>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a28      	ldr	r2, [pc, #160]	; (800b21c <TIM_Base_SetConfig+0x148>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d108      	bne.n	800b190 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	689a      	ldr	r2, [r3, #8]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a10      	ldr	r2, [pc, #64]	; (800b1f8 <TIM_Base_SetConfig+0x124>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_Base_SetConfig+0x108>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a12      	ldr	r2, [pc, #72]	; (800b208 <TIM_Base_SetConfig+0x134>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_Base_SetConfig+0x108>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a11      	ldr	r2, [pc, #68]	; (800b20c <TIM_Base_SetConfig+0x138>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_Base_SetConfig+0x108>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a10      	ldr	r2, [pc, #64]	; (800b210 <TIM_Base_SetConfig+0x13c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_Base_SetConfig+0x108>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a0f      	ldr	r2, [pc, #60]	; (800b214 <TIM_Base_SetConfig+0x140>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d103      	bne.n	800b1e4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691a      	ldr	r2, [r3, #16]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	615a      	str	r2, [r3, #20]
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40010000 	.word	0x40010000
 800b1fc:	40000400 	.word	0x40000400
 800b200:	40000800 	.word	0x40000800
 800b204:	40000c00 	.word	0x40000c00
 800b208:	40010400 	.word	0x40010400
 800b20c:	40014000 	.word	0x40014000
 800b210:	40014400 	.word	0x40014400
 800b214:	40014800 	.word	0x40014800
 800b218:	4000e000 	.word	0x4000e000
 800b21c:	4000e400 	.word	0x4000e400

0800b220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	f023 0201 	bic.w	r2, r3, #1
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4b37      	ldr	r3, [pc, #220]	; (800b328 <TIM_OC1_SetConfig+0x108>)
 800b24c:	4013      	ands	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f023 0302 	bic.w	r3, r3, #2
 800b268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a2d      	ldr	r2, [pc, #180]	; (800b32c <TIM_OC1_SetConfig+0x10c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00f      	beq.n	800b29c <TIM_OC1_SetConfig+0x7c>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a2c      	ldr	r2, [pc, #176]	; (800b330 <TIM_OC1_SetConfig+0x110>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00b      	beq.n	800b29c <TIM_OC1_SetConfig+0x7c>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a2b      	ldr	r2, [pc, #172]	; (800b334 <TIM_OC1_SetConfig+0x114>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d007      	beq.n	800b29c <TIM_OC1_SetConfig+0x7c>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a2a      	ldr	r2, [pc, #168]	; (800b338 <TIM_OC1_SetConfig+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d003      	beq.n	800b29c <TIM_OC1_SetConfig+0x7c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a29      	ldr	r2, [pc, #164]	; (800b33c <TIM_OC1_SetConfig+0x11c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d10c      	bne.n	800b2b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	f023 0308 	bic.w	r3, r3, #8
 800b2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f023 0304 	bic.w	r3, r3, #4
 800b2b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a1c      	ldr	r2, [pc, #112]	; (800b32c <TIM_OC1_SetConfig+0x10c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00f      	beq.n	800b2de <TIM_OC1_SetConfig+0xbe>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <TIM_OC1_SetConfig+0x110>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00b      	beq.n	800b2de <TIM_OC1_SetConfig+0xbe>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <TIM_OC1_SetConfig+0x114>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d007      	beq.n	800b2de <TIM_OC1_SetConfig+0xbe>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a19      	ldr	r2, [pc, #100]	; (800b338 <TIM_OC1_SetConfig+0x118>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d003      	beq.n	800b2de <TIM_OC1_SetConfig+0xbe>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a18      	ldr	r2, [pc, #96]	; (800b33c <TIM_OC1_SetConfig+0x11c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d111      	bne.n	800b302 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	621a      	str	r2, [r3, #32]
}
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	fffeff8f 	.word	0xfffeff8f
 800b32c:	40010000 	.word	0x40010000
 800b330:	40010400 	.word	0x40010400
 800b334:	40014000 	.word	0x40014000
 800b338:	40014400 	.word	0x40014400
 800b33c:	40014800 	.word	0x40014800

0800b340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f023 0210 	bic.w	r2, r3, #16
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4b34      	ldr	r3, [pc, #208]	; (800b43c <TIM_OC2_SetConfig+0xfc>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4313      	orrs	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f023 0320 	bic.w	r3, r3, #32
 800b38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a29      	ldr	r2, [pc, #164]	; (800b440 <TIM_OC2_SetConfig+0x100>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d003      	beq.n	800b3a8 <TIM_OC2_SetConfig+0x68>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a28      	ldr	r2, [pc, #160]	; (800b444 <TIM_OC2_SetConfig+0x104>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d10d      	bne.n	800b3c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a1e      	ldr	r2, [pc, #120]	; (800b440 <TIM_OC2_SetConfig+0x100>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00f      	beq.n	800b3ec <TIM_OC2_SetConfig+0xac>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a1d      	ldr	r2, [pc, #116]	; (800b444 <TIM_OC2_SetConfig+0x104>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00b      	beq.n	800b3ec <TIM_OC2_SetConfig+0xac>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a1c      	ldr	r2, [pc, #112]	; (800b448 <TIM_OC2_SetConfig+0x108>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d007      	beq.n	800b3ec <TIM_OC2_SetConfig+0xac>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a1b      	ldr	r2, [pc, #108]	; (800b44c <TIM_OC2_SetConfig+0x10c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d003      	beq.n	800b3ec <TIM_OC2_SetConfig+0xac>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a1a      	ldr	r2, [pc, #104]	; (800b450 <TIM_OC2_SetConfig+0x110>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d113      	bne.n	800b414 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	4313      	orrs	r3, r2
 800b406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	621a      	str	r2, [r3, #32]
}
 800b42e:	bf00      	nop
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	feff8fff 	.word	0xfeff8fff
 800b440:	40010000 	.word	0x40010000
 800b444:	40010400 	.word	0x40010400
 800b448:	40014000 	.word	0x40014000
 800b44c:	40014400 	.word	0x40014400
 800b450:	40014800 	.word	0x40014800

0800b454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4b33      	ldr	r3, [pc, #204]	; (800b54c <TIM_OC3_SetConfig+0xf8>)
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f023 0303 	bic.w	r3, r3, #3
 800b48a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4313      	orrs	r3, r2
 800b494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b49c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a28      	ldr	r2, [pc, #160]	; (800b550 <TIM_OC3_SetConfig+0xfc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d003      	beq.n	800b4ba <TIM_OC3_SetConfig+0x66>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a27      	ldr	r2, [pc, #156]	; (800b554 <TIM_OC3_SetConfig+0x100>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d10d      	bne.n	800b4d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1d      	ldr	r2, [pc, #116]	; (800b550 <TIM_OC3_SetConfig+0xfc>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d00f      	beq.n	800b4fe <TIM_OC3_SetConfig+0xaa>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <TIM_OC3_SetConfig+0x100>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d00b      	beq.n	800b4fe <TIM_OC3_SetConfig+0xaa>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <TIM_OC3_SetConfig+0x104>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d007      	beq.n	800b4fe <TIM_OC3_SetConfig+0xaa>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a1a      	ldr	r2, [pc, #104]	; (800b55c <TIM_OC3_SetConfig+0x108>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d003      	beq.n	800b4fe <TIM_OC3_SetConfig+0xaa>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a19      	ldr	r2, [pc, #100]	; (800b560 <TIM_OC3_SetConfig+0x10c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d113      	bne.n	800b526 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b50c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4313      	orrs	r3, r2
 800b518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	621a      	str	r2, [r3, #32]
}
 800b540:	bf00      	nop
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	fffeff8f 	.word	0xfffeff8f
 800b550:	40010000 	.word	0x40010000
 800b554:	40010400 	.word	0x40010400
 800b558:	40014000 	.word	0x40014000
 800b55c:	40014400 	.word	0x40014400
 800b560:	40014800 	.word	0x40014800

0800b564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4b24      	ldr	r3, [pc, #144]	; (800b620 <TIM_OC4_SetConfig+0xbc>)
 800b590:	4013      	ands	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	021b      	lsls	r3, r3, #8
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	031b      	lsls	r3, r3, #12
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a19      	ldr	r2, [pc, #100]	; (800b624 <TIM_OC4_SetConfig+0xc0>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d00f      	beq.n	800b5e4 <TIM_OC4_SetConfig+0x80>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a18      	ldr	r2, [pc, #96]	; (800b628 <TIM_OC4_SetConfig+0xc4>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d00b      	beq.n	800b5e4 <TIM_OC4_SetConfig+0x80>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a17      	ldr	r2, [pc, #92]	; (800b62c <TIM_OC4_SetConfig+0xc8>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d007      	beq.n	800b5e4 <TIM_OC4_SetConfig+0x80>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a16      	ldr	r2, [pc, #88]	; (800b630 <TIM_OC4_SetConfig+0xcc>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d003      	beq.n	800b5e4 <TIM_OC4_SetConfig+0x80>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a15      	ldr	r2, [pc, #84]	; (800b634 <TIM_OC4_SetConfig+0xd0>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d109      	bne.n	800b5f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	019b      	lsls	r3, r3, #6
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	621a      	str	r2, [r3, #32]
}
 800b612:	bf00      	nop
 800b614:	371c      	adds	r7, #28
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	feff8fff 	.word	0xfeff8fff
 800b624:	40010000 	.word	0x40010000
 800b628:	40010400 	.word	0x40010400
 800b62c:	40014000 	.word	0x40014000
 800b630:	40014400 	.word	0x40014400
 800b634:	40014800 	.word	0x40014800

0800b638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <TIM_OC5_SetConfig+0xb0>)
 800b664:	4013      	ands	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	041b      	lsls	r3, r3, #16
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4313      	orrs	r3, r2
 800b684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a18      	ldr	r2, [pc, #96]	; (800b6ec <TIM_OC5_SetConfig+0xb4>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d00f      	beq.n	800b6ae <TIM_OC5_SetConfig+0x76>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a17      	ldr	r2, [pc, #92]	; (800b6f0 <TIM_OC5_SetConfig+0xb8>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00b      	beq.n	800b6ae <TIM_OC5_SetConfig+0x76>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a16      	ldr	r2, [pc, #88]	; (800b6f4 <TIM_OC5_SetConfig+0xbc>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d007      	beq.n	800b6ae <TIM_OC5_SetConfig+0x76>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a15      	ldr	r2, [pc, #84]	; (800b6f8 <TIM_OC5_SetConfig+0xc0>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d003      	beq.n	800b6ae <TIM_OC5_SetConfig+0x76>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a14      	ldr	r2, [pc, #80]	; (800b6fc <TIM_OC5_SetConfig+0xc4>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d109      	bne.n	800b6c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	621a      	str	r2, [r3, #32]
}
 800b6dc:	bf00      	nop
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	fffeff8f 	.word	0xfffeff8f
 800b6ec:	40010000 	.word	0x40010000
 800b6f0:	40010400 	.word	0x40010400
 800b6f4:	40014000 	.word	0x40014000
 800b6f8:	40014400 	.word	0x40014400
 800b6fc:	40014800 	.word	0x40014800

0800b700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4b22      	ldr	r3, [pc, #136]	; (800b7b4 <TIM_OC6_SetConfig+0xb4>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	021b      	lsls	r3, r3, #8
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	4313      	orrs	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	051b      	lsls	r3, r3, #20
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a19      	ldr	r2, [pc, #100]	; (800b7b8 <TIM_OC6_SetConfig+0xb8>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d00f      	beq.n	800b778 <TIM_OC6_SetConfig+0x78>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a18      	ldr	r2, [pc, #96]	; (800b7bc <TIM_OC6_SetConfig+0xbc>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d00b      	beq.n	800b778 <TIM_OC6_SetConfig+0x78>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <TIM_OC6_SetConfig+0xc0>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d007      	beq.n	800b778 <TIM_OC6_SetConfig+0x78>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a16      	ldr	r2, [pc, #88]	; (800b7c4 <TIM_OC6_SetConfig+0xc4>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d003      	beq.n	800b778 <TIM_OC6_SetConfig+0x78>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a15      	ldr	r2, [pc, #84]	; (800b7c8 <TIM_OC6_SetConfig+0xc8>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d109      	bne.n	800b78c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b77e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	029b      	lsls	r3, r3, #10
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	621a      	str	r2, [r3, #32]
}
 800b7a6:	bf00      	nop
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	feff8fff 	.word	0xfeff8fff
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40010400 	.word	0x40010400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f023 030a 	bic.w	r3, r3, #10
 800b808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	621a      	str	r2, [r3, #32]
}
 800b81e:	bf00      	nop
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b087      	sub	sp, #28
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f023 0210 	bic.w	r2, r3, #16
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a1b      	ldr	r3, [r3, #32]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	031b      	lsls	r3, r3, #12
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	011b      	lsls	r3, r3, #4
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	4313      	orrs	r3, r2
 800b870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	621a      	str	r2, [r3, #32]
}
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
	...

0800b88c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <TIM_ITRx_SetConfig+0x38>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	f043 0307 	orr.w	r3, r3, #7
 800b8ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	609a      	str	r2, [r3, #8]
}
 800b8b6:	bf00      	nop
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	ffcfff8f 	.word	0xffcfff8f

0800b8c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
 800b8d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	021a      	lsls	r2, r3, #8
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	609a      	str	r2, [r3, #8]
}
 800b8fc:	bf00      	nop
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	f003 031f 	and.w	r3, r3, #31
 800b91a:	2201      	movs	r2, #1
 800b91c:	fa02 f303 	lsl.w	r3, r2, r3
 800b920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6a1a      	ldr	r2, [r3, #32]
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	43db      	mvns	r3, r3
 800b92a:	401a      	ands	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6a1a      	ldr	r2, [r3, #32]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f003 031f 	and.w	r3, r3, #31
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	fa01 f303 	lsl.w	r3, r1, r3
 800b940:	431a      	orrs	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	621a      	str	r2, [r3, #32]
}
 800b946:	bf00      	nop
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
	...

0800b954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b964:	2b01      	cmp	r3, #1
 800b966:	d101      	bne.n	800b96c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b968:	2302      	movs	r3, #2
 800b96a:	e077      	b.n	800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2202      	movs	r2, #2
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a35      	ldr	r2, [pc, #212]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d004      	beq.n	800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a34      	ldr	r2, [pc, #208]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d108      	bne.n	800b9b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a25      	ldr	r2, [pc, #148]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d02c      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9de:	d027      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a22      	ldr	r2, [pc, #136]	; (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d022      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a21      	ldr	r2, [pc, #132]	; (800ba74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d01d      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a1f      	ldr	r2, [pc, #124]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d018      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a1a      	ldr	r2, [pc, #104]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d013      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d00e      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a1a      	ldr	r2, [pc, #104]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a18      	ldr	r2, [pc, #96]	; (800ba84 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a17      	ldr	r2, [pc, #92]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10c      	bne.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	40010000 	.word	0x40010000
 800ba6c:	40010400 	.word	0x40010400
 800ba70:	40000400 	.word	0x40000400
 800ba74:	40000800 	.word	0x40000800
 800ba78:	40000c00 	.word	0x40000c00
 800ba7c:	40001800 	.word	0x40001800
 800ba80:	40014000 	.word	0x40014000
 800ba84:	4000e000 	.word	0x4000e000
 800ba88:	4000e400 	.word	0x4000e400

0800ba8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e087      	b.n	800bbb8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	041b      	lsls	r3, r3, #16
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a27      	ldr	r2, [pc, #156]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d004      	beq.n	800bb36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a25      	ldr	r2, [pc, #148]	; (800bbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d106      	bne.n	800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a1e      	ldr	r2, [pc, #120]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d004      	beq.n	800bb58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a1d      	ldr	r2, [pc, #116]	; (800bbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d126      	bne.n	800bba6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	051b      	lsls	r3, r3, #20
 800bb64:	4313      	orrs	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a0e      	ldr	r2, [pc, #56]	; (800bbc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d004      	beq.n	800bb98 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a0d      	ldr	r2, [pc, #52]	; (800bbc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d106      	bne.n	800bba6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	4313      	orrs	r3, r2
 800bba4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr
 800bbc4:	40010000 	.word	0x40010000
 800bbc8:	40010400 	.word	0x40010400

0800bbcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e042      	b.n	800bca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7f8 f9b1 	bl	8003f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2224      	movs	r2, #36	; 0x24
 800bc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 0201 	bic.w	r2, r2, #1
 800bc48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fd0e 	bl	800c66c <UART_SetConfig>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d101      	bne.n	800bc5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e022      	b.n	800bca0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d002      	beq.n	800bc68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f001 fb6e 	bl	800d344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f042 0201 	orr.w	r2, r2, #1
 800bc96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 fbf5 	bl	800d488 <UART_CheckIdleState>
 800bc9e:	4603      	mov	r3, r0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e02e      	b.n	800bd18 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2224      	movs	r2, #36	; 0x24
 800bcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 0201 	bic.w	r2, r2, #1
 800bcd0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2200      	movs	r2, #0
 800bce0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2200      	movs	r2, #0
 800bce8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f8 fa3a 	bl	8004164 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd34:	2b20      	cmp	r3, #32
 800bd36:	d17a      	bne.n	800be2e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <HAL_UART_Transmit_DMA+0x24>
 800bd3e:	88fb      	ldrh	r3, [r7, #6]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e073      	b.n	800be30 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d101      	bne.n	800bd56 <HAL_UART_Transmit_DMA+0x36>
 800bd52:	2302      	movs	r3, #2
 800bd54:	e06c      	b.n	800be30 <HAL_UART_Transmit_DMA+0x110>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	88fa      	ldrh	r2, [r7, #6]
 800bd68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	88fa      	ldrh	r2, [r7, #6]
 800bd70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2221      	movs	r2, #33	; 0x21
 800bd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d02c      	beq.n	800bde6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd90:	4a29      	ldr	r2, [pc, #164]	; (800be38 <HAL_UART_Transmit_DMA+0x118>)
 800bd92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd98:	4a28      	ldr	r2, [pc, #160]	; (800be3c <HAL_UART_Transmit_DMA+0x11c>)
 800bd9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda0:	4a27      	ldr	r2, [pc, #156]	; (800be40 <HAL_UART_Transmit_DMA+0x120>)
 800bda2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda8:	2200      	movs	r2, #0
 800bdaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3328      	adds	r3, #40	; 0x28
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	f7f9 fa56 	bl	8005270 <HAL_DMA_Start_IT>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2210      	movs	r2, #16
 800bdce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2220      	movs	r2, #32
 800bdde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e024      	b.n	800be30 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2240      	movs	r2, #64	; 0x40
 800bdec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	613b      	str	r3, [r7, #16]
   return(result);
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be16:	623a      	str	r2, [r7, #32]
 800be18:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	69f9      	ldr	r1, [r7, #28]
 800be1c:	6a3a      	ldr	r2, [r7, #32]
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	61bb      	str	r3, [r7, #24]
   return(result);
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e000      	b.n	800be30 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800be2e:	2302      	movs	r3, #2
  }
}
 800be30:	4618      	mov	r0, r3
 800be32:	3728      	adds	r7, #40	; 0x28
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	0800d951 	.word	0x0800d951
 800be3c:	0800d9e7 	.word	0x0800d9e7
 800be40:	0800db5d 	.word	0x0800db5d

0800be44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08a      	sub	sp, #40	; 0x28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d142      	bne.n	800bee2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <HAL_UART_Receive_DMA+0x24>
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e03b      	b.n	800bee4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be72:	2b01      	cmp	r3, #1
 800be74:	d101      	bne.n	800be7a <HAL_UART_Receive_DMA+0x36>
 800be76:	2302      	movs	r3, #2
 800be78:	e034      	b.n	800bee4 <HAL_UART_Receive_DMA+0xa0>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a17      	ldr	r2, [pc, #92]	; (800beec <HAL_UART_Receive_DMA+0xa8>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d01f      	beq.n	800bed2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d018      	beq.n	800bed2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	613b      	str	r3, [r7, #16]
   return(result);
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	623b      	str	r3, [r7, #32]
 800bec0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	69f9      	ldr	r1, [r7, #28]
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	61bb      	str	r3, [r7, #24]
   return(result);
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e6      	bne.n	800bea0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bed2:	88fb      	ldrh	r3, [r7, #6]
 800bed4:	461a      	mov	r2, r3
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f001 fbe9 	bl	800d6b0 <UART_Start_Receive_DMA>
 800bede:	4603      	mov	r3, r0
 800bee0:	e000      	b.n	800bee4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bee2:	2302      	movs	r3, #2
  }
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3728      	adds	r7, #40	; 0x28
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	58000c00 	.word	0x58000c00

0800bef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b0ba      	sub	sp, #232	; 0xe8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf1a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf1e:	4013      	ands	r3, r2
 800bf20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d11b      	bne.n	800bf64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf30:	f003 0320 	and.w	r3, r3, #32
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d015      	beq.n	800bf64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3c:	f003 0320 	and.w	r3, r3, #32
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d105      	bne.n	800bf50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d009      	beq.n	800bf64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 835a 	beq.w	800c60e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	4798      	blx	r3
      }
      return;
 800bf62:	e354      	b.n	800c60e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 811f 	beq.w	800c1ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf72:	4b8b      	ldr	r3, [pc, #556]	; (800c1a0 <HAL_UART_IRQHandler+0x2b0>)
 800bf74:	4013      	ands	r3, r2
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d106      	bne.n	800bf88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf7e:	4b89      	ldr	r3, [pc, #548]	; (800c1a4 <HAL_UART_IRQHandler+0x2b4>)
 800bf80:	4013      	ands	r3, r2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f000 8112 	beq.w	800c1ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d011      	beq.n	800bfb8 <HAL_UART_IRQHandler+0xc8>
 800bf94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00b      	beq.n	800bfb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfae:	f043 0201 	orr.w	r2, r3, #1
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d011      	beq.n	800bfe8 <HAL_UART_IRQHandler+0xf8>
 800bfc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfde:	f043 0204 	orr.w	r2, r3, #4
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d011      	beq.n	800c018 <HAL_UART_IRQHandler+0x128>
 800bff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2204      	movs	r2, #4
 800c006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00e:	f043 0202 	orr.w	r2, r3, #2
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01c:	f003 0308 	and.w	r3, r3, #8
 800c020:	2b00      	cmp	r3, #0
 800c022:	d017      	beq.n	800c054 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c028:	f003 0320 	and.w	r3, r3, #32
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d105      	bne.n	800c03c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c030:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c034:	4b5a      	ldr	r3, [pc, #360]	; (800c1a0 <HAL_UART_IRQHandler+0x2b0>)
 800c036:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2208      	movs	r2, #8
 800c042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c04a:	f043 0208 	orr.w	r2, r3, #8
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d012      	beq.n	800c086 <HAL_UART_IRQHandler+0x196>
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00c      	beq.n	800c086 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07c:	f043 0220 	orr.w	r2, r3, #32
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 82c0 	beq.w	800c612 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d013      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d105      	bne.n	800c0b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d007      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d005      	beq.n	800c0ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d04f      	beq.n	800c18a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f001 fbca 	bl	800d884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fa:	2b40      	cmp	r3, #64	; 0x40
 800c0fc:	d141      	bne.n	800c182 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3308      	adds	r3, #8
 800c104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c11c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3308      	adds	r3, #8
 800c126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c12a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c12e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1d9      	bne.n	800c0fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d013      	beq.n	800c17a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c156:	4a14      	ldr	r2, [pc, #80]	; (800c1a8 <HAL_UART_IRQHandler+0x2b8>)
 800c158:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15e:	4618      	mov	r0, r3
 800c160:	f7f9 fe0e 	bl	8005d80 <HAL_DMA_Abort_IT>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d017      	beq.n	800c19a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c174:	4610      	mov	r0, r2
 800c176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c178:	e00f      	b.n	800c19a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7f6 fe46 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c180:	e00b      	b.n	800c19a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7f6 fe42 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c188:	e007      	b.n	800c19a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7f6 fe3e 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c198:	e23b      	b.n	800c612 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c19a:	bf00      	nop
    return;
 800c19c:	e239      	b.n	800c612 <HAL_UART_IRQHandler+0x722>
 800c19e:	bf00      	nop
 800c1a0:	10000001 	.word	0x10000001
 800c1a4:	04000120 	.word	0x04000120
 800c1a8:	0800dbdd 	.word	0x0800dbdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	f040 81ce 	bne.w	800c552 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 81c7 	beq.w	800c552 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 81c0 	beq.w	800c552 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2210      	movs	r2, #16
 800c1d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e4:	2b40      	cmp	r3, #64	; 0x40
 800c1e6:	f040 813b 	bne.w	800c460 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a8b      	ldr	r2, [pc, #556]	; (800c420 <HAL_UART_IRQHandler+0x530>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d059      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a89      	ldr	r2, [pc, #548]	; (800c424 <HAL_UART_IRQHandler+0x534>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d053      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a87      	ldr	r2, [pc, #540]	; (800c428 <HAL_UART_IRQHandler+0x538>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d04d      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a85      	ldr	r2, [pc, #532]	; (800c42c <HAL_UART_IRQHandler+0x53c>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d047      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a83      	ldr	r2, [pc, #524]	; (800c430 <HAL_UART_IRQHandler+0x540>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d041      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a81      	ldr	r2, [pc, #516]	; (800c434 <HAL_UART_IRQHandler+0x544>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d03b      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a7f      	ldr	r2, [pc, #508]	; (800c438 <HAL_UART_IRQHandler+0x548>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d035      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a7d      	ldr	r2, [pc, #500]	; (800c43c <HAL_UART_IRQHandler+0x54c>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d02f      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a7b      	ldr	r2, [pc, #492]	; (800c440 <HAL_UART_IRQHandler+0x550>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d029      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a79      	ldr	r2, [pc, #484]	; (800c444 <HAL_UART_IRQHandler+0x554>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d023      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a77      	ldr	r2, [pc, #476]	; (800c448 <HAL_UART_IRQHandler+0x558>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d01d      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a75      	ldr	r2, [pc, #468]	; (800c44c <HAL_UART_IRQHandler+0x55c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d017      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a73      	ldr	r2, [pc, #460]	; (800c450 <HAL_UART_IRQHandler+0x560>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d011      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a71      	ldr	r2, [pc, #452]	; (800c454 <HAL_UART_IRQHandler+0x564>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00b      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a6f      	ldr	r2, [pc, #444]	; (800c458 <HAL_UART_IRQHandler+0x568>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d005      	beq.n	800c2aa <HAL_UART_IRQHandler+0x3ba>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a6d      	ldr	r2, [pc, #436]	; (800c45c <HAL_UART_IRQHandler+0x56c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d105      	bne.n	800c2b6 <HAL_UART_IRQHandler+0x3c6>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	e004      	b.n	800c2c0 <HAL_UART_IRQHandler+0x3d0>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 81a4 	beq.w	800c616 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	f080 819c 	bcs.w	800c616 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2f2:	f000 8086 	beq.w	800c402 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c30a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c30e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c312:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c324:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c32c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c330:	e841 2300 	strex	r3, r2, [r1]
 800c334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1da      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3308      	adds	r3, #8
 800c346:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c352:	f023 0301 	bic.w	r3, r3, #1
 800c356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c364:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c368:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c36c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e1      	bne.n	800c340 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3308      	adds	r3, #8
 800c382:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c386:	e853 3f00 	ldrex	r3, [r3]
 800c38a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c38c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c38e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c3a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c3a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3a8:	e841 2300 	strex	r3, r2, [r1]
 800c3ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c3ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e3      	bne.n	800c37c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ca:	e853 3f00 	ldrex	r3, [r3]
 800c3ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d2:	f023 0310 	bic.w	r3, r3, #16
 800c3d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3ec:	e841 2300 	strex	r3, r2, [r1]
 800c3f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e4      	bne.n	800c3c2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7f9 f9a1 	bl	8005744 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c40e:	b29b      	uxth	r3, r3
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	b29b      	uxth	r3, r3
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f91c 	bl	800c654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c41c:	e0fb      	b.n	800c616 <HAL_UART_IRQHandler+0x726>
 800c41e:	bf00      	nop
 800c420:	40020010 	.word	0x40020010
 800c424:	40020028 	.word	0x40020028
 800c428:	40020040 	.word	0x40020040
 800c42c:	40020058 	.word	0x40020058
 800c430:	40020070 	.word	0x40020070
 800c434:	40020088 	.word	0x40020088
 800c438:	400200a0 	.word	0x400200a0
 800c43c:	400200b8 	.word	0x400200b8
 800c440:	40020410 	.word	0x40020410
 800c444:	40020428 	.word	0x40020428
 800c448:	40020440 	.word	0x40020440
 800c44c:	40020458 	.word	0x40020458
 800c450:	40020470 	.word	0x40020470
 800c454:	40020488 	.word	0x40020488
 800c458:	400204a0 	.word	0x400204a0
 800c45c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 80cc 	beq.w	800c61a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80c7 	beq.w	800c61a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c4b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1e4      	bne.n	800c48c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	e853 3f00 	ldrex	r3, [r3]
 800c4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4d2:	6a3a      	ldr	r2, [r7, #32]
 800c4d4:	4b54      	ldr	r3, [pc, #336]	; (800c628 <HAL_UART_IRQHandler+0x738>)
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4e6:	633a      	str	r2, [r7, #48]	; 0x30
 800c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e3      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	e853 3f00 	ldrex	r3, [r3]
 800c51a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0310 	bic.w	r3, r3, #16
 800c522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	69b9      	ldr	r1, [r7, #24]
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	617b      	str	r3, [r7, #20]
   return(result);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e4      	bne.n	800c50e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f882 	bl	800c654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c550:	e063      	b.n	800c61a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <HAL_UART_IRQHandler+0x68c>
 800c55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c566:	2b00      	cmp	r3, #0
 800c568:	d008      	beq.n	800c57c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 fb72 	bl	800dc5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c57a:	e051      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c584:	2b00      	cmp	r3, #0
 800c586:	d014      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d03a      	beq.n	800c61e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
    }
    return;
 800c5b0:	e035      	b.n	800c61e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <HAL_UART_IRQHandler+0x6e2>
 800c5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fb1c 	bl	800dc08 <UART_EndTransmit_IT>
    return;
 800c5d0:	e026      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d009      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x702>
 800c5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f001 fb4b 	bl	800dc86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5f0:	e016      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d010      	beq.n	800c620 <HAL_UART_IRQHandler+0x730>
 800c5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c602:	2b00      	cmp	r3, #0
 800c604:	da0c      	bge.n	800c620 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f001 fb33 	bl	800dc72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c60c:	e008      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
      return;
 800c60e:	bf00      	nop
 800c610:	e006      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
    return;
 800c612:	bf00      	nop
 800c614:	e004      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
      return;
 800c616:	bf00      	nop
 800c618:	e002      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
      return;
 800c61a:	bf00      	nop
 800c61c:	e000      	b.n	800c620 <HAL_UART_IRQHandler+0x730>
    return;
 800c61e:	bf00      	nop
  }
}
 800c620:	37e8      	adds	r7, #232	; 0xe8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	effffffe 	.word	0xeffffffe

0800c62c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c66c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c670:	b092      	sub	sp, #72	; 0x48
 800c672:	af00      	add	r7, sp, #0
 800c674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	431a      	orrs	r2, r3
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	4313      	orrs	r3, r2
 800c692:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	4bbe      	ldr	r3, [pc, #760]	; (800c994 <UART_SetConfig+0x328>)
 800c69c:	4013      	ands	r3, r2
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	6812      	ldr	r2, [r2, #0]
 800c6a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	68da      	ldr	r2, [r3, #12]
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4ab3      	ldr	r2, [pc, #716]	; (800c998 <UART_SetConfig+0x32c>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d004      	beq.n	800c6d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689a      	ldr	r2, [r3, #8]
 800c6de:	4baf      	ldr	r3, [pc, #700]	; (800c99c <UART_SetConfig+0x330>)
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	6812      	ldr	r2, [r2, #0]
 800c6e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f2:	f023 010f 	bic.w	r1, r3, #15
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4aa6      	ldr	r2, [pc, #664]	; (800c9a0 <UART_SetConfig+0x334>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d177      	bne.n	800c7fc <UART_SetConfig+0x190>
 800c70c:	4ba5      	ldr	r3, [pc, #660]	; (800c9a4 <UART_SetConfig+0x338>)
 800c70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c714:	2b28      	cmp	r3, #40	; 0x28
 800c716:	d86d      	bhi.n	800c7f4 <UART_SetConfig+0x188>
 800c718:	a201      	add	r2, pc, #4	; (adr r2, 800c720 <UART_SetConfig+0xb4>)
 800c71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71e:	bf00      	nop
 800c720:	0800c7c5 	.word	0x0800c7c5
 800c724:	0800c7f5 	.word	0x0800c7f5
 800c728:	0800c7f5 	.word	0x0800c7f5
 800c72c:	0800c7f5 	.word	0x0800c7f5
 800c730:	0800c7f5 	.word	0x0800c7f5
 800c734:	0800c7f5 	.word	0x0800c7f5
 800c738:	0800c7f5 	.word	0x0800c7f5
 800c73c:	0800c7f5 	.word	0x0800c7f5
 800c740:	0800c7cd 	.word	0x0800c7cd
 800c744:	0800c7f5 	.word	0x0800c7f5
 800c748:	0800c7f5 	.word	0x0800c7f5
 800c74c:	0800c7f5 	.word	0x0800c7f5
 800c750:	0800c7f5 	.word	0x0800c7f5
 800c754:	0800c7f5 	.word	0x0800c7f5
 800c758:	0800c7f5 	.word	0x0800c7f5
 800c75c:	0800c7f5 	.word	0x0800c7f5
 800c760:	0800c7d5 	.word	0x0800c7d5
 800c764:	0800c7f5 	.word	0x0800c7f5
 800c768:	0800c7f5 	.word	0x0800c7f5
 800c76c:	0800c7f5 	.word	0x0800c7f5
 800c770:	0800c7f5 	.word	0x0800c7f5
 800c774:	0800c7f5 	.word	0x0800c7f5
 800c778:	0800c7f5 	.word	0x0800c7f5
 800c77c:	0800c7f5 	.word	0x0800c7f5
 800c780:	0800c7dd 	.word	0x0800c7dd
 800c784:	0800c7f5 	.word	0x0800c7f5
 800c788:	0800c7f5 	.word	0x0800c7f5
 800c78c:	0800c7f5 	.word	0x0800c7f5
 800c790:	0800c7f5 	.word	0x0800c7f5
 800c794:	0800c7f5 	.word	0x0800c7f5
 800c798:	0800c7f5 	.word	0x0800c7f5
 800c79c:	0800c7f5 	.word	0x0800c7f5
 800c7a0:	0800c7e5 	.word	0x0800c7e5
 800c7a4:	0800c7f5 	.word	0x0800c7f5
 800c7a8:	0800c7f5 	.word	0x0800c7f5
 800c7ac:	0800c7f5 	.word	0x0800c7f5
 800c7b0:	0800c7f5 	.word	0x0800c7f5
 800c7b4:	0800c7f5 	.word	0x0800c7f5
 800c7b8:	0800c7f5 	.word	0x0800c7f5
 800c7bc:	0800c7f5 	.word	0x0800c7f5
 800c7c0:	0800c7ed 	.word	0x0800c7ed
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ca:	e326      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d2:	e322      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7d4:	2308      	movs	r3, #8
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7da:	e31e      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e2:	e31a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ea:	e316      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7ec:	2340      	movs	r3, #64	; 0x40
 800c7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f2:	e312      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7f4:	2380      	movs	r3, #128	; 0x80
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fa:	e30e      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a69      	ldr	r2, [pc, #420]	; (800c9a8 <UART_SetConfig+0x33c>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d130      	bne.n	800c868 <UART_SetConfig+0x1fc>
 800c806:	4b67      	ldr	r3, [pc, #412]	; (800c9a4 <UART_SetConfig+0x338>)
 800c808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80a:	f003 0307 	and.w	r3, r3, #7
 800c80e:	2b05      	cmp	r3, #5
 800c810:	d826      	bhi.n	800c860 <UART_SetConfig+0x1f4>
 800c812:	a201      	add	r2, pc, #4	; (adr r2, 800c818 <UART_SetConfig+0x1ac>)
 800c814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c818:	0800c831 	.word	0x0800c831
 800c81c:	0800c839 	.word	0x0800c839
 800c820:	0800c841 	.word	0x0800c841
 800c824:	0800c849 	.word	0x0800c849
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c859 	.word	0x0800c859
 800c830:	2300      	movs	r3, #0
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c836:	e2f0      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c838:	2304      	movs	r3, #4
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83e:	e2ec      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c840:	2308      	movs	r3, #8
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c846:	e2e8      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c848:	2310      	movs	r3, #16
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84e:	e2e4      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c850:	2320      	movs	r3, #32
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c856:	e2e0      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c858:	2340      	movs	r3, #64	; 0x40
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85e:	e2dc      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c860:	2380      	movs	r3, #128	; 0x80
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c866:	e2d8      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a4f      	ldr	r2, [pc, #316]	; (800c9ac <UART_SetConfig+0x340>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d130      	bne.n	800c8d4 <UART_SetConfig+0x268>
 800c872:	4b4c      	ldr	r3, [pc, #304]	; (800c9a4 <UART_SetConfig+0x338>)
 800c874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	d826      	bhi.n	800c8cc <UART_SetConfig+0x260>
 800c87e:	a201      	add	r2, pc, #4	; (adr r2, 800c884 <UART_SetConfig+0x218>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c89d 	.word	0x0800c89d
 800c888:	0800c8a5 	.word	0x0800c8a5
 800c88c:	0800c8ad 	.word	0x0800c8ad
 800c890:	0800c8b5 	.word	0x0800c8b5
 800c894:	0800c8bd 	.word	0x0800c8bd
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	2300      	movs	r3, #0
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e2ba      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e2b6      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b2:	e2b2      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e2ae      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e2aa      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8c4:	2340      	movs	r3, #64	; 0x40
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e2a6      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8cc:	2380      	movs	r3, #128	; 0x80
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e2a2      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a35      	ldr	r2, [pc, #212]	; (800c9b0 <UART_SetConfig+0x344>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d130      	bne.n	800c940 <UART_SetConfig+0x2d4>
 800c8de:	4b31      	ldr	r3, [pc, #196]	; (800c9a4 <UART_SetConfig+0x338>)
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d826      	bhi.n	800c938 <UART_SetConfig+0x2cc>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <UART_SetConfig+0x284>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c909 	.word	0x0800c909
 800c8f4:	0800c911 	.word	0x0800c911
 800c8f8:	0800c919 	.word	0x0800c919
 800c8fc:	0800c921 	.word	0x0800c921
 800c900:	0800c929 	.word	0x0800c929
 800c904:	0800c931 	.word	0x0800c931
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90e:	e284      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c910:	2304      	movs	r3, #4
 800c912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c916:	e280      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c918:	2308      	movs	r3, #8
 800c91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91e:	e27c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c920:	2310      	movs	r3, #16
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c926:	e278      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c928:	2320      	movs	r3, #32
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92e:	e274      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c930:	2340      	movs	r3, #64	; 0x40
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e270      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c938:	2380      	movs	r3, #128	; 0x80
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e26c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a1b      	ldr	r2, [pc, #108]	; (800c9b4 <UART_SetConfig+0x348>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d142      	bne.n	800c9d0 <UART_SetConfig+0x364>
 800c94a:	4b16      	ldr	r3, [pc, #88]	; (800c9a4 <UART_SetConfig+0x338>)
 800c94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94e:	f003 0307 	and.w	r3, r3, #7
 800c952:	2b05      	cmp	r3, #5
 800c954:	d838      	bhi.n	800c9c8 <UART_SetConfig+0x35c>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <UART_SetConfig+0x2f0>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c975 	.word	0x0800c975
 800c960:	0800c97d 	.word	0x0800c97d
 800c964:	0800c985 	.word	0x0800c985
 800c968:	0800c98d 	.word	0x0800c98d
 800c96c:	0800c9b9 	.word	0x0800c9b9
 800c970:	0800c9c1 	.word	0x0800c9c1
 800c974:	2300      	movs	r3, #0
 800c976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97a:	e24e      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c97c:	2304      	movs	r3, #4
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c982:	e24a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c984:	2308      	movs	r3, #8
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e246      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c98c:	2310      	movs	r3, #16
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e242      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c994:	cfff69f3 	.word	0xcfff69f3
 800c998:	58000c00 	.word	0x58000c00
 800c99c:	11fff4ff 	.word	0x11fff4ff
 800c9a0:	40011000 	.word	0x40011000
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	40004400 	.word	0x40004400
 800c9ac:	40004800 	.word	0x40004800
 800c9b0:	40004c00 	.word	0x40004c00
 800c9b4:	40005000 	.word	0x40005000
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e22c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c9c0:	2340      	movs	r3, #64	; 0x40
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e228      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c9c8:	2380      	movs	r3, #128	; 0x80
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e224      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4ab1      	ldr	r2, [pc, #708]	; (800cc9c <UART_SetConfig+0x630>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d176      	bne.n	800cac8 <UART_SetConfig+0x45c>
 800c9da:	4bb1      	ldr	r3, [pc, #708]	; (800cca0 <UART_SetConfig+0x634>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9e2:	2b28      	cmp	r3, #40	; 0x28
 800c9e4:	d86c      	bhi.n	800cac0 <UART_SetConfig+0x454>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <UART_SetConfig+0x380>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca91 	.word	0x0800ca91
 800c9f0:	0800cac1 	.word	0x0800cac1
 800c9f4:	0800cac1 	.word	0x0800cac1
 800c9f8:	0800cac1 	.word	0x0800cac1
 800c9fc:	0800cac1 	.word	0x0800cac1
 800ca00:	0800cac1 	.word	0x0800cac1
 800ca04:	0800cac1 	.word	0x0800cac1
 800ca08:	0800cac1 	.word	0x0800cac1
 800ca0c:	0800ca99 	.word	0x0800ca99
 800ca10:	0800cac1 	.word	0x0800cac1
 800ca14:	0800cac1 	.word	0x0800cac1
 800ca18:	0800cac1 	.word	0x0800cac1
 800ca1c:	0800cac1 	.word	0x0800cac1
 800ca20:	0800cac1 	.word	0x0800cac1
 800ca24:	0800cac1 	.word	0x0800cac1
 800ca28:	0800cac1 	.word	0x0800cac1
 800ca2c:	0800caa1 	.word	0x0800caa1
 800ca30:	0800cac1 	.word	0x0800cac1
 800ca34:	0800cac1 	.word	0x0800cac1
 800ca38:	0800cac1 	.word	0x0800cac1
 800ca3c:	0800cac1 	.word	0x0800cac1
 800ca40:	0800cac1 	.word	0x0800cac1
 800ca44:	0800cac1 	.word	0x0800cac1
 800ca48:	0800cac1 	.word	0x0800cac1
 800ca4c:	0800caa9 	.word	0x0800caa9
 800ca50:	0800cac1 	.word	0x0800cac1
 800ca54:	0800cac1 	.word	0x0800cac1
 800ca58:	0800cac1 	.word	0x0800cac1
 800ca5c:	0800cac1 	.word	0x0800cac1
 800ca60:	0800cac1 	.word	0x0800cac1
 800ca64:	0800cac1 	.word	0x0800cac1
 800ca68:	0800cac1 	.word	0x0800cac1
 800ca6c:	0800cab1 	.word	0x0800cab1
 800ca70:	0800cac1 	.word	0x0800cac1
 800ca74:	0800cac1 	.word	0x0800cac1
 800ca78:	0800cac1 	.word	0x0800cac1
 800ca7c:	0800cac1 	.word	0x0800cac1
 800ca80:	0800cac1 	.word	0x0800cac1
 800ca84:	0800cac1 	.word	0x0800cac1
 800ca88:	0800cac1 	.word	0x0800cac1
 800ca8c:	0800cab9 	.word	0x0800cab9
 800ca90:	2301      	movs	r3, #1
 800ca92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca96:	e1c0      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800ca98:	2304      	movs	r3, #4
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e1bc      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800caa0:	2308      	movs	r3, #8
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e1b8      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800caa8:	2310      	movs	r3, #16
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e1b4      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cab0:	2320      	movs	r3, #32
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e1b0      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cab8:	2340      	movs	r3, #64	; 0x40
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cabe:	e1ac      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cac0:	2380      	movs	r3, #128	; 0x80
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e1a8      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a75      	ldr	r2, [pc, #468]	; (800cca4 <UART_SetConfig+0x638>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d130      	bne.n	800cb34 <UART_SetConfig+0x4c8>
 800cad2:	4b73      	ldr	r3, [pc, #460]	; (800cca0 <UART_SetConfig+0x634>)
 800cad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d826      	bhi.n	800cb2c <UART_SetConfig+0x4c0>
 800cade:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <UART_SetConfig+0x478>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cafd 	.word	0x0800cafd
 800cae8:	0800cb05 	.word	0x0800cb05
 800caec:	0800cb0d 	.word	0x0800cb0d
 800caf0:	0800cb15 	.word	0x0800cb15
 800caf4:	0800cb1d 	.word	0x0800cb1d
 800caf8:	0800cb25 	.word	0x0800cb25
 800cafc:	2300      	movs	r3, #0
 800cafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb02:	e18a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb04:	2304      	movs	r3, #4
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0a:	e186      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb12:	e182      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb14:	2310      	movs	r3, #16
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e17e      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e17a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e176      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e172      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a5b      	ldr	r2, [pc, #364]	; (800cca8 <UART_SetConfig+0x63c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d130      	bne.n	800cba0 <UART_SetConfig+0x534>
 800cb3e:	4b58      	ldr	r3, [pc, #352]	; (800cca0 <UART_SetConfig+0x634>)
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d826      	bhi.n	800cb98 <UART_SetConfig+0x52c>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <UART_SetConfig+0x4e4>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cb69 	.word	0x0800cb69
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb79 	.word	0x0800cb79
 800cb5c:	0800cb81 	.word	0x0800cb81
 800cb60:	0800cb89 	.word	0x0800cb89
 800cb64:	0800cb91 	.word	0x0800cb91
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6e:	e154      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb70:	2304      	movs	r3, #4
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb76:	e150      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb78:	2308      	movs	r3, #8
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e14c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb80:	2310      	movs	r3, #16
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e148      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb88:	2320      	movs	r3, #32
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e144      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb96:	e140      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cb98:	2380      	movs	r3, #128	; 0x80
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e13c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a41      	ldr	r2, [pc, #260]	; (800ccac <UART_SetConfig+0x640>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	f040 8082 	bne.w	800ccb0 <UART_SetConfig+0x644>
 800cbac:	4b3c      	ldr	r3, [pc, #240]	; (800cca0 <UART_SetConfig+0x634>)
 800cbae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbb4:	2b28      	cmp	r3, #40	; 0x28
 800cbb6:	d86d      	bhi.n	800cc94 <UART_SetConfig+0x628>
 800cbb8:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <UART_SetConfig+0x554>)
 800cbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbe:	bf00      	nop
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc95 	.word	0x0800cc95
 800cbc8:	0800cc95 	.word	0x0800cc95
 800cbcc:	0800cc95 	.word	0x0800cc95
 800cbd0:	0800cc95 	.word	0x0800cc95
 800cbd4:	0800cc95 	.word	0x0800cc95
 800cbd8:	0800cc95 	.word	0x0800cc95
 800cbdc:	0800cc95 	.word	0x0800cc95
 800cbe0:	0800cc6d 	.word	0x0800cc6d
 800cbe4:	0800cc95 	.word	0x0800cc95
 800cbe8:	0800cc95 	.word	0x0800cc95
 800cbec:	0800cc95 	.word	0x0800cc95
 800cbf0:	0800cc95 	.word	0x0800cc95
 800cbf4:	0800cc95 	.word	0x0800cc95
 800cbf8:	0800cc95 	.word	0x0800cc95
 800cbfc:	0800cc95 	.word	0x0800cc95
 800cc00:	0800cc75 	.word	0x0800cc75
 800cc04:	0800cc95 	.word	0x0800cc95
 800cc08:	0800cc95 	.word	0x0800cc95
 800cc0c:	0800cc95 	.word	0x0800cc95
 800cc10:	0800cc95 	.word	0x0800cc95
 800cc14:	0800cc95 	.word	0x0800cc95
 800cc18:	0800cc95 	.word	0x0800cc95
 800cc1c:	0800cc95 	.word	0x0800cc95
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc95 	.word	0x0800cc95
 800cc28:	0800cc95 	.word	0x0800cc95
 800cc2c:	0800cc95 	.word	0x0800cc95
 800cc30:	0800cc95 	.word	0x0800cc95
 800cc34:	0800cc95 	.word	0x0800cc95
 800cc38:	0800cc95 	.word	0x0800cc95
 800cc3c:	0800cc95 	.word	0x0800cc95
 800cc40:	0800cc85 	.word	0x0800cc85
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	0800cc95 	.word	0x0800cc95
 800cc4c:	0800cc95 	.word	0x0800cc95
 800cc50:	0800cc95 	.word	0x0800cc95
 800cc54:	0800cc95 	.word	0x0800cc95
 800cc58:	0800cc95 	.word	0x0800cc95
 800cc5c:	0800cc95 	.word	0x0800cc95
 800cc60:	0800cc8d 	.word	0x0800cc8d
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6a:	e0d6      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc72:	e0d2      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7a:	e0ce      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc82:	e0ca      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc84:	2320      	movs	r3, #32
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e0c6      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e0c2      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc94:	2380      	movs	r3, #128	; 0x80
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e0be      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cc9c:	40011400 	.word	0x40011400
 800cca0:	58024400 	.word	0x58024400
 800cca4:	40007800 	.word	0x40007800
 800cca8:	40007c00 	.word	0x40007c00
 800ccac:	40011800 	.word	0x40011800
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4aad      	ldr	r2, [pc, #692]	; (800cf6c <UART_SetConfig+0x900>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d176      	bne.n	800cda8 <UART_SetConfig+0x73c>
 800ccba:	4bad      	ldr	r3, [pc, #692]	; (800cf70 <UART_SetConfig+0x904>)
 800ccbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccc2:	2b28      	cmp	r3, #40	; 0x28
 800ccc4:	d86c      	bhi.n	800cda0 <UART_SetConfig+0x734>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <UART_SetConfig+0x660>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800cd71 	.word	0x0800cd71
 800ccd0:	0800cda1 	.word	0x0800cda1
 800ccd4:	0800cda1 	.word	0x0800cda1
 800ccd8:	0800cda1 	.word	0x0800cda1
 800ccdc:	0800cda1 	.word	0x0800cda1
 800cce0:	0800cda1 	.word	0x0800cda1
 800cce4:	0800cda1 	.word	0x0800cda1
 800cce8:	0800cda1 	.word	0x0800cda1
 800ccec:	0800cd79 	.word	0x0800cd79
 800ccf0:	0800cda1 	.word	0x0800cda1
 800ccf4:	0800cda1 	.word	0x0800cda1
 800ccf8:	0800cda1 	.word	0x0800cda1
 800ccfc:	0800cda1 	.word	0x0800cda1
 800cd00:	0800cda1 	.word	0x0800cda1
 800cd04:	0800cda1 	.word	0x0800cda1
 800cd08:	0800cda1 	.word	0x0800cda1
 800cd0c:	0800cd81 	.word	0x0800cd81
 800cd10:	0800cda1 	.word	0x0800cda1
 800cd14:	0800cda1 	.word	0x0800cda1
 800cd18:	0800cda1 	.word	0x0800cda1
 800cd1c:	0800cda1 	.word	0x0800cda1
 800cd20:	0800cda1 	.word	0x0800cda1
 800cd24:	0800cda1 	.word	0x0800cda1
 800cd28:	0800cda1 	.word	0x0800cda1
 800cd2c:	0800cd89 	.word	0x0800cd89
 800cd30:	0800cda1 	.word	0x0800cda1
 800cd34:	0800cda1 	.word	0x0800cda1
 800cd38:	0800cda1 	.word	0x0800cda1
 800cd3c:	0800cda1 	.word	0x0800cda1
 800cd40:	0800cda1 	.word	0x0800cda1
 800cd44:	0800cda1 	.word	0x0800cda1
 800cd48:	0800cda1 	.word	0x0800cda1
 800cd4c:	0800cd91 	.word	0x0800cd91
 800cd50:	0800cda1 	.word	0x0800cda1
 800cd54:	0800cda1 	.word	0x0800cda1
 800cd58:	0800cda1 	.word	0x0800cda1
 800cd5c:	0800cda1 	.word	0x0800cda1
 800cd60:	0800cda1 	.word	0x0800cda1
 800cd64:	0800cda1 	.word	0x0800cda1
 800cd68:	0800cda1 	.word	0x0800cda1
 800cd6c:	0800cd99 	.word	0x0800cd99
 800cd70:	2301      	movs	r3, #1
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd76:	e050      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cd78:	2304      	movs	r3, #4
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e04c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cd80:	2308      	movs	r3, #8
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd86:	e048      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cd88:	2310      	movs	r3, #16
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8e:	e044      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cd90:	2320      	movs	r3, #32
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e040      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cd98:	2340      	movs	r3, #64	; 0x40
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e03c      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cda0:	2380      	movs	r3, #128	; 0x80
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e038      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a71      	ldr	r2, [pc, #452]	; (800cf74 <UART_SetConfig+0x908>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d130      	bne.n	800ce14 <UART_SetConfig+0x7a8>
 800cdb2:	4b6f      	ldr	r3, [pc, #444]	; (800cf70 <UART_SetConfig+0x904>)
 800cdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b05      	cmp	r3, #5
 800cdbc:	d826      	bhi.n	800ce0c <UART_SetConfig+0x7a0>
 800cdbe:	a201      	add	r2, pc, #4	; (adr r2, 800cdc4 <UART_SetConfig+0x758>)
 800cdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc4:	0800cddd 	.word	0x0800cddd
 800cdc8:	0800cde5 	.word	0x0800cde5
 800cdcc:	0800cded 	.word	0x0800cded
 800cdd0:	0800cdf5 	.word	0x0800cdf5
 800cdd4:	0800cdfd 	.word	0x0800cdfd
 800cdd8:	0800ce05 	.word	0x0800ce05
 800cddc:	2302      	movs	r3, #2
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde2:	e01a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdea:	e016      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf2:	e012      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfa:	e00e      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce02:	e00a      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800ce04:	2340      	movs	r3, #64	; 0x40
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0a:	e006      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800ce0c:	2380      	movs	r3, #128	; 0x80
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce12:	e002      	b.n	800ce1a <UART_SetConfig+0x7ae>
 800ce14:	2380      	movs	r3, #128	; 0x80
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a55      	ldr	r2, [pc, #340]	; (800cf74 <UART_SetConfig+0x908>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	f040 80f8 	bne.w	800d016 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce2a:	2b20      	cmp	r3, #32
 800ce2c:	dc46      	bgt.n	800cebc <UART_SetConfig+0x850>
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	db75      	blt.n	800cf1e <UART_SetConfig+0x8b2>
 800ce32:	3b02      	subs	r3, #2
 800ce34:	2b1e      	cmp	r3, #30
 800ce36:	d872      	bhi.n	800cf1e <UART_SetConfig+0x8b2>
 800ce38:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <UART_SetConfig+0x7d4>)
 800ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3e:	bf00      	nop
 800ce40:	0800cec3 	.word	0x0800cec3
 800ce44:	0800cf1f 	.word	0x0800cf1f
 800ce48:	0800cecb 	.word	0x0800cecb
 800ce4c:	0800cf1f 	.word	0x0800cf1f
 800ce50:	0800cf1f 	.word	0x0800cf1f
 800ce54:	0800cf1f 	.word	0x0800cf1f
 800ce58:	0800cedb 	.word	0x0800cedb
 800ce5c:	0800cf1f 	.word	0x0800cf1f
 800ce60:	0800cf1f 	.word	0x0800cf1f
 800ce64:	0800cf1f 	.word	0x0800cf1f
 800ce68:	0800cf1f 	.word	0x0800cf1f
 800ce6c:	0800cf1f 	.word	0x0800cf1f
 800ce70:	0800cf1f 	.word	0x0800cf1f
 800ce74:	0800cf1f 	.word	0x0800cf1f
 800ce78:	0800ceeb 	.word	0x0800ceeb
 800ce7c:	0800cf1f 	.word	0x0800cf1f
 800ce80:	0800cf1f 	.word	0x0800cf1f
 800ce84:	0800cf1f 	.word	0x0800cf1f
 800ce88:	0800cf1f 	.word	0x0800cf1f
 800ce8c:	0800cf1f 	.word	0x0800cf1f
 800ce90:	0800cf1f 	.word	0x0800cf1f
 800ce94:	0800cf1f 	.word	0x0800cf1f
 800ce98:	0800cf1f 	.word	0x0800cf1f
 800ce9c:	0800cf1f 	.word	0x0800cf1f
 800cea0:	0800cf1f 	.word	0x0800cf1f
 800cea4:	0800cf1f 	.word	0x0800cf1f
 800cea8:	0800cf1f 	.word	0x0800cf1f
 800ceac:	0800cf1f 	.word	0x0800cf1f
 800ceb0:	0800cf1f 	.word	0x0800cf1f
 800ceb4:	0800cf1f 	.word	0x0800cf1f
 800ceb8:	0800cf11 	.word	0x0800cf11
 800cebc:	2b40      	cmp	r3, #64	; 0x40
 800cebe:	d02a      	beq.n	800cf16 <UART_SetConfig+0x8aa>
 800cec0:	e02d      	b.n	800cf1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cec2:	f7fc fe0b 	bl	8009adc <HAL_RCCEx_GetD3PCLK1Freq>
 800cec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cec8:	e02f      	b.n	800cf2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fc fe1a 	bl	8009b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced8:	e027      	b.n	800cf2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceda:	f107 0318 	add.w	r3, r7, #24
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fc ff66 	bl	8009db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee8:	e01f      	b.n	800cf2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceea:	4b21      	ldr	r3, [pc, #132]	; (800cf70 <UART_SetConfig+0x904>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f003 0320 	and.w	r3, r3, #32
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d009      	beq.n	800cf0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cef6:	4b1e      	ldr	r3, [pc, #120]	; (800cf70 <UART_SetConfig+0x904>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	08db      	lsrs	r3, r3, #3
 800cefc:	f003 0303 	and.w	r3, r3, #3
 800cf00:	4a1d      	ldr	r2, [pc, #116]	; (800cf78 <UART_SetConfig+0x90c>)
 800cf02:	fa22 f303 	lsr.w	r3, r2, r3
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf08:	e00f      	b.n	800cf2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf0a:	4b1b      	ldr	r3, [pc, #108]	; (800cf78 <UART_SetConfig+0x90c>)
 800cf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0e:	e00c      	b.n	800cf2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf10:	4b1a      	ldr	r3, [pc, #104]	; (800cf7c <UART_SetConfig+0x910>)
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf14:	e009      	b.n	800cf2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf1c:	e005      	b.n	800cf2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 81ee 	beq.w	800d30e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf36:	4a12      	ldr	r2, [pc, #72]	; (800cf80 <UART_SetConfig+0x914>)
 800cf38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf40:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf44:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d305      	bcc.n	800cf62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d910      	bls.n	800cf84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf68:	e1d1      	b.n	800d30e <UART_SetConfig+0xca2>
 800cf6a:	bf00      	nop
 800cf6c:	40011c00 	.word	0x40011c00
 800cf70:	58024400 	.word	0x58024400
 800cf74:	58000c00 	.word	0x58000c00
 800cf78:	03d09000 	.word	0x03d09000
 800cf7c:	003d0900 	.word	0x003d0900
 800cf80:	0800e544 	.word	0x0800e544
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	2200      	movs	r2, #0
 800cf88:	60bb      	str	r3, [r7, #8]
 800cf8a:	60fa      	str	r2, [r7, #12]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	4ac0      	ldr	r2, [pc, #768]	; (800d294 <UART_SetConfig+0xc28>)
 800cf92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	2200      	movs	r2, #0
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfa6:	f7f3 f9b9 	bl	800031c <__aeabi_uldivmod>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	4610      	mov	r0, r2
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	f04f 0300 	mov.w	r3, #0
 800cfba:	020b      	lsls	r3, r1, #8
 800cfbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfc0:	0202      	lsls	r2, r0, #8
 800cfc2:	6979      	ldr	r1, [r7, #20]
 800cfc4:	6849      	ldr	r1, [r1, #4]
 800cfc6:	0849      	lsrs	r1, r1, #1
 800cfc8:	2000      	movs	r0, #0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	4605      	mov	r5, r0
 800cfce:	eb12 0804 	adds.w	r8, r2, r4
 800cfd2:	eb43 0905 	adc.w	r9, r3, r5
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	469a      	mov	sl, r3
 800cfde:	4693      	mov	fp, r2
 800cfe0:	4652      	mov	r2, sl
 800cfe2:	465b      	mov	r3, fp
 800cfe4:	4640      	mov	r0, r8
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	f7f3 f998 	bl	800031c <__aeabi_uldivmod>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4613      	mov	r3, r2
 800cff2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cffa:	d308      	bcc.n	800d00e <UART_SetConfig+0x9a2>
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d002:	d204      	bcs.n	800d00e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d00a:	60da      	str	r2, [r3, #12]
 800d00c:	e17f      	b.n	800d30e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d014:	e17b      	b.n	800d30e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d01e:	f040 80bd 	bne.w	800d19c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d022:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d026:	2b20      	cmp	r3, #32
 800d028:	dc48      	bgt.n	800d0bc <UART_SetConfig+0xa50>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	db7b      	blt.n	800d126 <UART_SetConfig+0xaba>
 800d02e:	2b20      	cmp	r3, #32
 800d030:	d879      	bhi.n	800d126 <UART_SetConfig+0xaba>
 800d032:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <UART_SetConfig+0x9cc>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d0c3 	.word	0x0800d0c3
 800d03c:	0800d0cb 	.word	0x0800d0cb
 800d040:	0800d127 	.word	0x0800d127
 800d044:	0800d127 	.word	0x0800d127
 800d048:	0800d0d3 	.word	0x0800d0d3
 800d04c:	0800d127 	.word	0x0800d127
 800d050:	0800d127 	.word	0x0800d127
 800d054:	0800d127 	.word	0x0800d127
 800d058:	0800d0e3 	.word	0x0800d0e3
 800d05c:	0800d127 	.word	0x0800d127
 800d060:	0800d127 	.word	0x0800d127
 800d064:	0800d127 	.word	0x0800d127
 800d068:	0800d127 	.word	0x0800d127
 800d06c:	0800d127 	.word	0x0800d127
 800d070:	0800d127 	.word	0x0800d127
 800d074:	0800d127 	.word	0x0800d127
 800d078:	0800d0f3 	.word	0x0800d0f3
 800d07c:	0800d127 	.word	0x0800d127
 800d080:	0800d127 	.word	0x0800d127
 800d084:	0800d127 	.word	0x0800d127
 800d088:	0800d127 	.word	0x0800d127
 800d08c:	0800d127 	.word	0x0800d127
 800d090:	0800d127 	.word	0x0800d127
 800d094:	0800d127 	.word	0x0800d127
 800d098:	0800d127 	.word	0x0800d127
 800d09c:	0800d127 	.word	0x0800d127
 800d0a0:	0800d127 	.word	0x0800d127
 800d0a4:	0800d127 	.word	0x0800d127
 800d0a8:	0800d127 	.word	0x0800d127
 800d0ac:	0800d127 	.word	0x0800d127
 800d0b0:	0800d127 	.word	0x0800d127
 800d0b4:	0800d127 	.word	0x0800d127
 800d0b8:	0800d119 	.word	0x0800d119
 800d0bc:	2b40      	cmp	r3, #64	; 0x40
 800d0be:	d02e      	beq.n	800d11e <UART_SetConfig+0xab2>
 800d0c0:	e031      	b.n	800d126 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0c2:	f7fb fde5 	bl	8008c90 <HAL_RCC_GetPCLK1Freq>
 800d0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0c8:	e033      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0ca:	f7fb fdf7 	bl	8008cbc <HAL_RCC_GetPCLK2Freq>
 800d0ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0d0:	e02f      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fc fd16 	bl	8009b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e0:	e027      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0e2:	f107 0318 	add.w	r3, r7, #24
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fc fe62 	bl	8009db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f0:	e01f      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0f2:	4b69      	ldr	r3, [pc, #420]	; (800d298 <UART_SetConfig+0xc2c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0320 	and.w	r3, r3, #32
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d009      	beq.n	800d112 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0fe:	4b66      	ldr	r3, [pc, #408]	; (800d298 <UART_SetConfig+0xc2c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	08db      	lsrs	r3, r3, #3
 800d104:	f003 0303 	and.w	r3, r3, #3
 800d108:	4a64      	ldr	r2, [pc, #400]	; (800d29c <UART_SetConfig+0xc30>)
 800d10a:	fa22 f303 	lsr.w	r3, r2, r3
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d110:	e00f      	b.n	800d132 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d112:	4b62      	ldr	r3, [pc, #392]	; (800d29c <UART_SetConfig+0xc30>)
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d116:	e00c      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d118:	4b61      	ldr	r3, [pc, #388]	; (800d2a0 <UART_SetConfig+0xc34>)
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d11c:	e009      	b.n	800d132 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d11e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d124:	e005      	b.n	800d132 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 80ea 	beq.w	800d30e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	4a55      	ldr	r2, [pc, #340]	; (800d294 <UART_SetConfig+0xc28>)
 800d140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d144:	461a      	mov	r2, r3
 800d146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d148:	fbb3 f3f2 	udiv	r3, r3, r2
 800d14c:	005a      	lsls	r2, r3, #1
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	085b      	lsrs	r3, r3, #1
 800d154:	441a      	add	r2, r3
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d15e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	2b0f      	cmp	r3, #15
 800d164:	d916      	bls.n	800d194 <UART_SetConfig+0xb28>
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d16c:	d212      	bcs.n	800d194 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	b29b      	uxth	r3, r3
 800d172:	f023 030f 	bic.w	r3, r3, #15
 800d176:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	085b      	lsrs	r3, r3, #1
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	b29a      	uxth	r2, r3
 800d184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d186:	4313      	orrs	r3, r2
 800d188:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d190:	60da      	str	r2, [r3, #12]
 800d192:	e0bc      	b.n	800d30e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d19a:	e0b8      	b.n	800d30e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d19c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1a0:	2b20      	cmp	r3, #32
 800d1a2:	dc4b      	bgt.n	800d23c <UART_SetConfig+0xbd0>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f2c0 8087 	blt.w	800d2b8 <UART_SetConfig+0xc4c>
 800d1aa:	2b20      	cmp	r3, #32
 800d1ac:	f200 8084 	bhi.w	800d2b8 <UART_SetConfig+0xc4c>
 800d1b0:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <UART_SetConfig+0xb4c>)
 800d1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b6:	bf00      	nop
 800d1b8:	0800d243 	.word	0x0800d243
 800d1bc:	0800d24b 	.word	0x0800d24b
 800d1c0:	0800d2b9 	.word	0x0800d2b9
 800d1c4:	0800d2b9 	.word	0x0800d2b9
 800d1c8:	0800d253 	.word	0x0800d253
 800d1cc:	0800d2b9 	.word	0x0800d2b9
 800d1d0:	0800d2b9 	.word	0x0800d2b9
 800d1d4:	0800d2b9 	.word	0x0800d2b9
 800d1d8:	0800d263 	.word	0x0800d263
 800d1dc:	0800d2b9 	.word	0x0800d2b9
 800d1e0:	0800d2b9 	.word	0x0800d2b9
 800d1e4:	0800d2b9 	.word	0x0800d2b9
 800d1e8:	0800d2b9 	.word	0x0800d2b9
 800d1ec:	0800d2b9 	.word	0x0800d2b9
 800d1f0:	0800d2b9 	.word	0x0800d2b9
 800d1f4:	0800d2b9 	.word	0x0800d2b9
 800d1f8:	0800d273 	.word	0x0800d273
 800d1fc:	0800d2b9 	.word	0x0800d2b9
 800d200:	0800d2b9 	.word	0x0800d2b9
 800d204:	0800d2b9 	.word	0x0800d2b9
 800d208:	0800d2b9 	.word	0x0800d2b9
 800d20c:	0800d2b9 	.word	0x0800d2b9
 800d210:	0800d2b9 	.word	0x0800d2b9
 800d214:	0800d2b9 	.word	0x0800d2b9
 800d218:	0800d2b9 	.word	0x0800d2b9
 800d21c:	0800d2b9 	.word	0x0800d2b9
 800d220:	0800d2b9 	.word	0x0800d2b9
 800d224:	0800d2b9 	.word	0x0800d2b9
 800d228:	0800d2b9 	.word	0x0800d2b9
 800d22c:	0800d2b9 	.word	0x0800d2b9
 800d230:	0800d2b9 	.word	0x0800d2b9
 800d234:	0800d2b9 	.word	0x0800d2b9
 800d238:	0800d2ab 	.word	0x0800d2ab
 800d23c:	2b40      	cmp	r3, #64	; 0x40
 800d23e:	d037      	beq.n	800d2b0 <UART_SetConfig+0xc44>
 800d240:	e03a      	b.n	800d2b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d242:	f7fb fd25 	bl	8008c90 <HAL_RCC_GetPCLK1Freq>
 800d246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d248:	e03c      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d24a:	f7fb fd37 	bl	8008cbc <HAL_RCC_GetPCLK2Freq>
 800d24e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d250:	e038      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fc56 	bl	8009b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d260:	e030      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d262:	f107 0318 	add.w	r3, r7, #24
 800d266:	4618      	mov	r0, r3
 800d268:	f7fc fda2 	bl	8009db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d270:	e028      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d272:	4b09      	ldr	r3, [pc, #36]	; (800d298 <UART_SetConfig+0xc2c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d012      	beq.n	800d2a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d27e:	4b06      	ldr	r3, [pc, #24]	; (800d298 <UART_SetConfig+0xc2c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	08db      	lsrs	r3, r3, #3
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	4a04      	ldr	r2, [pc, #16]	; (800d29c <UART_SetConfig+0xc30>)
 800d28a:	fa22 f303 	lsr.w	r3, r2, r3
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d290:	e018      	b.n	800d2c4 <UART_SetConfig+0xc58>
 800d292:	bf00      	nop
 800d294:	0800e544 	.word	0x0800e544
 800d298:	58024400 	.word	0x58024400
 800d29c:	03d09000 	.word	0x03d09000
 800d2a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d2a4:	4b24      	ldr	r3, [pc, #144]	; (800d338 <UART_SetConfig+0xccc>)
 800d2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a8:	e00c      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2aa:	4b24      	ldr	r3, [pc, #144]	; (800d33c <UART_SetConfig+0xcd0>)
 800d2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ae:	e009      	b.n	800d2c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2b6:	e005      	b.n	800d2c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2c2:	bf00      	nop
    }

    if (pclk != 0U)
 800d2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d021      	beq.n	800d30e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	4a1c      	ldr	r2, [pc, #112]	; (800d340 <UART_SetConfig+0xcd4>)
 800d2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	085b      	lsrs	r3, r3, #1
 800d2e2:	441a      	add	r2, r3
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	2b0f      	cmp	r3, #15
 800d2f2:	d909      	bls.n	800d308 <UART_SetConfig+0xc9c>
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2fa:	d205      	bcs.n	800d308 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	60da      	str	r2, [r3, #12]
 800d306:	e002      	b.n	800d30e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2201      	movs	r2, #1
 800d312:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2201      	movs	r2, #1
 800d31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2200      	movs	r2, #0
 800d322:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2200      	movs	r2, #0
 800d328:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d32a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3748      	adds	r7, #72	; 0x48
 800d332:	46bd      	mov	sp, r7
 800d334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d338:	03d09000 	.word	0x03d09000
 800d33c:	003d0900 	.word	0x003d0900
 800d340:	0800e544 	.word	0x0800e544

0800d344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00a      	beq.n	800d36e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d394:	f003 0304 	and.w	r3, r3, #4
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	f003 0308 	and.w	r3, r3, #8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	f003 0310 	and.w	r3, r3, #16
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00a      	beq.n	800d3f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3fa:	f003 0320 	and.w	r3, r3, #32
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00a      	beq.n	800d418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	430a      	orrs	r2, r1
 800d416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01a      	beq.n	800d45a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d43e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d442:	d10a      	bne.n	800d45a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	430a      	orrs	r2, r1
 800d458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00a      	beq.n	800d47c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	430a      	orrs	r2, r1
 800d47a:	605a      	str	r2, [r3, #4]
  }
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af02      	add	r7, sp, #8
 800d48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d498:	f7f7 f88c 	bl	80045b4 <HAL_GetTick>
 800d49c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0308 	and.w	r3, r3, #8
 800d4a8:	2b08      	cmp	r3, #8
 800d4aa:	d10e      	bne.n	800d4ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f82f 	bl	800d51e <UART_WaitOnFlagUntilTimeout>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e025      	b.n	800d516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	d10e      	bne.n	800d4f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f819 	bl	800d51e <UART_WaitOnFlagUntilTimeout>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	e00f      	b.n	800d516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2220      	movs	r2, #32
 800d4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2220      	movs	r2, #32
 800d502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b09c      	sub	sp, #112	; 0x70
 800d522:	af00      	add	r7, sp, #0
 800d524:	60f8      	str	r0, [r7, #12]
 800d526:	60b9      	str	r1, [r7, #8]
 800d528:	603b      	str	r3, [r7, #0]
 800d52a:	4613      	mov	r3, r2
 800d52c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d52e:	e0a9      	b.n	800d684 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	f000 80a5 	beq.w	800d684 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d53a:	f7f7 f83b 	bl	80045b4 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d546:	429a      	cmp	r2, r3
 800d548:	d302      	bcc.n	800d550 <UART_WaitOnFlagUntilTimeout+0x32>
 800d54a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d140      	bne.n	800d5d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d558:	e853 3f00 	ldrex	r3, [r3]
 800d55c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d564:	667b      	str	r3, [r7, #100]	; 0x64
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	461a      	mov	r2, r3
 800d56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d56e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d570:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d576:	e841 2300 	strex	r3, r2, [r1]
 800d57a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e6      	bne.n	800d550 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3308      	adds	r3, #8
 800d588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d58c:	e853 3f00 	ldrex	r3, [r3]
 800d590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	f023 0301 	bic.w	r3, r3, #1
 800d598:	663b      	str	r3, [r7, #96]	; 0x60
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3308      	adds	r3, #8
 800d5a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5aa:	e841 2300 	strex	r3, r2, [r1]
 800d5ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1e5      	bne.n	800d582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2220      	movs	r2, #32
 800d5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e069      	b.n	800d6a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0304 	and.w	r3, r3, #4
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d051      	beq.n	800d684 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ee:	d149      	bne.n	800d684 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d60e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	461a      	mov	r2, r3
 800d616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
 800d61a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d61e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d620:	e841 2300 	strex	r3, r2, [r1]
 800d624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e6      	bne.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3308      	adds	r3, #8
 800d632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	613b      	str	r3, [r7, #16]
   return(result);
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	f023 0301 	bic.w	r3, r3, #1
 800d642:	66bb      	str	r3, [r7, #104]	; 0x68
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3308      	adds	r3, #8
 800d64a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d64c:	623a      	str	r2, [r7, #32]
 800d64e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	69f9      	ldr	r1, [r7, #28]
 800d652:	6a3a      	ldr	r2, [r7, #32]
 800d654:	e841 2300 	strex	r3, r2, [r1]
 800d658:	61bb      	str	r3, [r7, #24]
   return(result);
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e5      	bne.n	800d62c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2220      	movs	r2, #32
 800d664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2220      	movs	r2, #32
 800d66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2220      	movs	r2, #32
 800d674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d680:	2303      	movs	r3, #3
 800d682:	e010      	b.n	800d6a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	69da      	ldr	r2, [r3, #28]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	4013      	ands	r3, r2
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	429a      	cmp	r2, r3
 800d692:	bf0c      	ite	eq
 800d694:	2301      	moveq	r3, #1
 800d696:	2300      	movne	r3, #0
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	461a      	mov	r2, r3
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	f43f af46 	beq.w	800d530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3770      	adds	r7, #112	; 0x70
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
	...

0800d6b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b096      	sub	sp, #88	; 0x58
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	88fa      	ldrh	r2, [r7, #6]
 800d6c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2222      	movs	r2, #34	; 0x22
 800d6d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d02c      	beq.n	800d73e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e8:	4a42      	ldr	r2, [pc, #264]	; (800d7f4 <UART_Start_Receive_DMA+0x144>)
 800d6ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f0:	4a41      	ldr	r2, [pc, #260]	; (800d7f8 <UART_Start_Receive_DMA+0x148>)
 800d6f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f8:	4a40      	ldr	r2, [pc, #256]	; (800d7fc <UART_Start_Receive_DMA+0x14c>)
 800d6fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d700:	2200      	movs	r2, #0
 800d702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3324      	adds	r3, #36	; 0x24
 800d70e:	4619      	mov	r1, r3
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d714:	461a      	mov	r2, r3
 800d716:	88fb      	ldrh	r3, [r7, #6]
 800d718:	f7f7 fdaa 	bl	8005270 <HAL_DMA_Start_IT>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00d      	beq.n	800d73e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2210      	movs	r2, #16
 800d726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2220      	movs	r2, #32
 800d736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e055      	b.n	800d7ea <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d018      	beq.n	800d780 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d756:	e853 3f00 	ldrex	r3, [r3]
 800d75a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d762:	657b      	str	r3, [r7, #84]	; 0x54
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	461a      	mov	r2, r3
 800d76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d76c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d76e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d774:	e841 2300 	strex	r3, r2, [r1]
 800d778:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1e6      	bne.n	800d74e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3308      	adds	r3, #8
 800d786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	e853 3f00 	ldrex	r3, [r3]
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	f043 0301 	orr.w	r3, r3, #1
 800d796:	653b      	str	r3, [r7, #80]	; 0x50
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3308      	adds	r3, #8
 800d79e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7a0:	637a      	str	r2, [r7, #52]	; 0x34
 800d7a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7a8:	e841 2300 	strex	r3, r2, [r1]
 800d7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1e5      	bne.n	800d780 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3308      	adds	r3, #8
 800d7ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	e853 3f00 	ldrex	r3, [r3]
 800d7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7d4:	623a      	str	r2, [r7, #32]
 800d7d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d8:	69f9      	ldr	r1, [r7, #28]
 800d7da:	6a3a      	ldr	r2, [r7, #32]
 800d7dc:	e841 2300 	strex	r3, r2, [r1]
 800d7e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1e5      	bne.n	800d7b4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3758      	adds	r7, #88	; 0x58
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800da03 	.word	0x0800da03
 800d7f8:	0800db25 	.word	0x0800db25
 800d7fc:	0800db5d 	.word	0x0800db5d

0800d800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d800:	b480      	push	{r7}
 800d802:	b08f      	sub	sp, #60	; 0x3c
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	61fb      	str	r3, [r7, #28]
   return(result);
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d81c:	637b      	str	r3, [r7, #52]	; 0x34
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d828:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d82e:	e841 2300 	strex	r3, r2, [r1]
 800d832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1e6      	bne.n	800d808 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3308      	adds	r3, #8
 800d840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	e853 3f00 	ldrex	r3, [r3]
 800d848:	60bb      	str	r3, [r7, #8]
   return(result);
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d850:	633b      	str	r3, [r7, #48]	; 0x30
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3308      	adds	r3, #8
 800d858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85a:	61ba      	str	r2, [r7, #24]
 800d85c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85e:	6979      	ldr	r1, [r7, #20]
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	e841 2300 	strex	r3, r2, [r1]
 800d866:	613b      	str	r3, [r7, #16]
   return(result);
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1e5      	bne.n	800d83a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2220      	movs	r2, #32
 800d872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d876:	bf00      	nop
 800d878:	373c      	adds	r7, #60	; 0x3c
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d884:	b480      	push	{r7}
 800d886:	b095      	sub	sp, #84	; 0x54
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8aa:	643b      	str	r3, [r7, #64]	; 0x40
 800d8ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8b2:	e841 2300 	strex	r3, r2, [r1]
 800d8b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e6      	bne.n	800d88c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	e853 3f00 	ldrex	r3, [r3]
 800d8cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8ce:	69fa      	ldr	r2, [r7, #28]
 800d8d0:	4b1e      	ldr	r3, [pc, #120]	; (800d94c <UART_EndRxTransfer+0xc8>)
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e5      	bne.n	800d8be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d118      	bne.n	800d92c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	e853 3f00 	ldrex	r3, [r3]
 800d906:	60bb      	str	r3, [r7, #8]
   return(result);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	f023 0310 	bic.w	r3, r3, #16
 800d90e:	647b      	str	r3, [r7, #68]	; 0x44
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d918:	61bb      	str	r3, [r7, #24]
 800d91a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6979      	ldr	r1, [r7, #20]
 800d91e:	69ba      	ldr	r2, [r7, #24]
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	613b      	str	r3, [r7, #16]
   return(result);
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e6      	bne.n	800d8fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d940:	bf00      	nop
 800d942:	3754      	adds	r7, #84	; 0x54
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	effffffe 	.word	0xeffffffe

0800d950 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b090      	sub	sp, #64	; 0x40
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	69db      	ldr	r3, [r3, #28]
 800d962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d966:	d037      	beq.n	800d9d8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96a:	2200      	movs	r2, #0
 800d96c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	623b      	str	r3, [r7, #32]
   return(result);
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d986:	63bb      	str	r3, [r7, #56]	; 0x38
 800d988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3308      	adds	r3, #8
 800d98e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d990:	633a      	str	r2, [r7, #48]	; 0x30
 800d992:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d998:	e841 2300 	strex	r3, r2, [r1]
 800d99c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e5      	bne.n	800d970 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	e853 3f00 	ldrex	r3, [r3]
 800d9b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c2:	61fb      	str	r3, [r7, #28]
 800d9c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c6:	69b9      	ldr	r1, [r7, #24]
 800d9c8:	69fa      	ldr	r2, [r7, #28]
 800d9ca:	e841 2300 	strex	r3, r2, [r1]
 800d9ce:	617b      	str	r3, [r7, #20]
   return(result);
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1e6      	bne.n	800d9a4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9d6:	e002      	b.n	800d9de <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d9d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9da:	f7f5 fa4f 	bl	8002e7c <HAL_UART_TxCpltCallback>
}
 800d9de:	bf00      	nop
 800d9e0:	3740      	adds	r7, #64	; 0x40
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7fe fe19 	bl	800c62c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9fa:	bf00      	nop
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b09c      	sub	sp, #112	; 0x70
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da18:	d071      	beq.n	800dafe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da1c:	2200      	movs	r2, #0
 800da1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da36:	66bb      	str	r3, [r7, #104]	; 0x68
 800da38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da40:	65bb      	str	r3, [r7, #88]	; 0x58
 800da42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e6      	bne.n	800da22 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3308      	adds	r3, #8
 800da5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	e853 3f00 	ldrex	r3, [r3]
 800da62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da66:	f023 0301 	bic.w	r3, r3, #1
 800da6a:	667b      	str	r3, [r7, #100]	; 0x64
 800da6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3308      	adds	r3, #8
 800da72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da74:	647a      	str	r2, [r7, #68]	; 0x44
 800da76:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da7c:	e841 2300 	strex	r3, r2, [r1]
 800da80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e5      	bne.n	800da54 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3308      	adds	r3, #8
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	e853 3f00 	ldrex	r3, [r3]
 800da96:	623b      	str	r3, [r7, #32]
   return(result);
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da9e:	663b      	str	r3, [r7, #96]	; 0x60
 800daa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800daa8:	633a      	str	r2, [r7, #48]	; 0x30
 800daaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab0:	e841 2300 	strex	r3, r2, [r1]
 800dab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1e5      	bne.n	800da88 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dabe:	2220      	movs	r2, #32
 800dac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d118      	bne.n	800dafe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	e853 3f00 	ldrex	r3, [r3]
 800dad8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f023 0310 	bic.w	r3, r3, #16
 800dae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daea:	61fb      	str	r3, [r7, #28]
 800daec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daee:	69b9      	ldr	r1, [r7, #24]
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	e841 2300 	strex	r3, r2, [r1]
 800daf6:	617b      	str	r3, [r7, #20]
   return(result);
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1e6      	bne.n	800dacc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db02:	2b01      	cmp	r3, #1
 800db04:	d107      	bne.n	800db16 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db0c:	4619      	mov	r1, r3
 800db0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db10:	f7fe fda0 	bl	800c654 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db14:	e002      	b.n	800db1c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800db16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db18:	f7f5 f9c2 	bl	8002ea0 <HAL_UART_RxCpltCallback>
}
 800db1c:	bf00      	nop
 800db1e:	3770      	adds	r7, #112	; 0x70
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db36:	2b01      	cmp	r3, #1
 800db38:	d109      	bne.n	800db4e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db40:	085b      	lsrs	r3, r3, #1
 800db42:	b29b      	uxth	r3, r3
 800db44:	4619      	mov	r1, r3
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7fe fd84 	bl	800c654 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db4c:	e002      	b.n	800db54 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe fd76 	bl	800c640 <HAL_UART_RxHalfCpltCallback>
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db68:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db84:	2b80      	cmp	r3, #128	; 0x80
 800db86:	d109      	bne.n	800db9c <UART_DMAError+0x40>
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b21      	cmp	r3, #33	; 0x21
 800db8c:	d106      	bne.n	800db9c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2200      	movs	r2, #0
 800db92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db96:	6978      	ldr	r0, [r7, #20]
 800db98:	f7ff fe32 	bl	800d800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba6:	2b40      	cmp	r3, #64	; 0x40
 800dba8:	d109      	bne.n	800dbbe <UART_DMAError+0x62>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b22      	cmp	r3, #34	; 0x22
 800dbae:	d106      	bne.n	800dbbe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dbb8:	6978      	ldr	r0, [r7, #20]
 800dbba:	f7ff fe63 	bl	800d884 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbc4:	f043 0210 	orr.w	r2, r3, #16
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbce:	6978      	ldr	r0, [r7, #20]
 800dbd0:	f7f5 f91c 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbd4:	bf00      	nop
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7f5 f906 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	e853 3f00 	ldrex	r3, [r3]
 800dc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc24:	61fb      	str	r3, [r7, #28]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	61bb      	str	r3, [r7, #24]
 800dc30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6979      	ldr	r1, [r7, #20]
 800dc34:	69ba      	ldr	r2, [r7, #24]
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e6      	bne.n	800dc10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7f5 f913 	bl	8002e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc56:	bf00      	nop
 800dc58:	3720      	adds	r7, #32
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b083      	sub	sp, #12
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b083      	sub	sp, #12
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc8e:	bf00      	nop
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b085      	sub	sp, #20
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d101      	bne.n	800dcb0 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcac:	2302      	movs	r3, #2
 800dcae:	e027      	b.n	800dd00 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2224      	movs	r2, #36	; 0x24
 800dcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f022 0201 	bic.w	r2, r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d101      	bne.n	800dd24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd20:	2302      	movs	r3, #2
 800dd22:	e02d      	b.n	800dd80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2224      	movs	r2, #36	; 0x24
 800dd30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f022 0201 	bic.w	r2, r2, #1
 800dd4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	430a      	orrs	r2, r1
 800dd5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f84f 	bl	800de04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d101      	bne.n	800dda0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	e02d      	b.n	800ddfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2224      	movs	r2, #36	; 0x24
 800ddac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f022 0201 	bic.w	r2, r2, #1
 800ddc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f811 	bl	800de04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2220      	movs	r2, #32
 800ddee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de10:	2b00      	cmp	r3, #0
 800de12:	d108      	bne.n	800de26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de24:	e031      	b.n	800de8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de26:	2310      	movs	r3, #16
 800de28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de2a:	2310      	movs	r3, #16
 800de2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	0e5b      	lsrs	r3, r3, #25
 800de36:	b2db      	uxtb	r3, r3
 800de38:	f003 0307 	and.w	r3, r3, #7
 800de3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	0f5b      	lsrs	r3, r3, #29
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0307 	and.w	r3, r3, #7
 800de4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	7b3a      	ldrb	r2, [r7, #12]
 800de52:	4911      	ldr	r1, [pc, #68]	; (800de98 <UARTEx_SetNbDataToProcess+0x94>)
 800de54:	5c8a      	ldrb	r2, [r1, r2]
 800de56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de5a:	7b3a      	ldrb	r2, [r7, #12]
 800de5c:	490f      	ldr	r1, [pc, #60]	; (800de9c <UARTEx_SetNbDataToProcess+0x98>)
 800de5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de60:	fb93 f3f2 	sdiv	r3, r3, r2
 800de64:	b29a      	uxth	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	7b7a      	ldrb	r2, [r7, #13]
 800de70:	4909      	ldr	r1, [pc, #36]	; (800de98 <UARTEx_SetNbDataToProcess+0x94>)
 800de72:	5c8a      	ldrb	r2, [r1, r2]
 800de74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de78:	7b7a      	ldrb	r2, [r7, #13]
 800de7a:	4908      	ldr	r1, [pc, #32]	; (800de9c <UARTEx_SetNbDataToProcess+0x98>)
 800de7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800de82:	b29a      	uxth	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800de8a:	bf00      	nop
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	0800e55c 	.word	0x0800e55c
 800de9c:	0800e564 	.word	0x0800e564

0800dea0 <__cxa_pure_virtual>:
 800dea0:	b508      	push	{r3, lr}
 800dea2:	f000 f80d 	bl	800dec0 <_ZSt9terminatev>

0800dea6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dea6:	b508      	push	{r3, lr}
 800dea8:	4780      	blx	r0
 800deaa:	f000 f80e 	bl	800deca <abort>
	...

0800deb0 <_ZSt13get_terminatev>:
 800deb0:	4b02      	ldr	r3, [pc, #8]	; (800debc <_ZSt13get_terminatev+0xc>)
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	f3bf 8f5b 	dmb	ish
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	24000010 	.word	0x24000010

0800dec0 <_ZSt9terminatev>:
 800dec0:	b508      	push	{r3, lr}
 800dec2:	f7ff fff5 	bl	800deb0 <_ZSt13get_terminatev>
 800dec6:	f7ff ffee 	bl	800dea6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800deca <abort>:
 800deca:	b508      	push	{r3, lr}
 800decc:	2006      	movs	r0, #6
 800dece:	f000 f873 	bl	800dfb8 <raise>
 800ded2:	2001      	movs	r0, #1
 800ded4:	f7f6 f9f6 	bl	80042c4 <_exit>

0800ded8 <__errno>:
 800ded8:	4b01      	ldr	r3, [pc, #4]	; (800dee0 <__errno+0x8>)
 800deda:	6818      	ldr	r0, [r3, #0]
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	24000014 	.word	0x24000014

0800dee4 <__libc_init_array>:
 800dee4:	b570      	push	{r4, r5, r6, lr}
 800dee6:	4d0d      	ldr	r5, [pc, #52]	; (800df1c <__libc_init_array+0x38>)
 800dee8:	4c0d      	ldr	r4, [pc, #52]	; (800df20 <__libc_init_array+0x3c>)
 800deea:	1b64      	subs	r4, r4, r5
 800deec:	10a4      	asrs	r4, r4, #2
 800deee:	2600      	movs	r6, #0
 800def0:	42a6      	cmp	r6, r4
 800def2:	d109      	bne.n	800df08 <__libc_init_array+0x24>
 800def4:	4d0b      	ldr	r5, [pc, #44]	; (800df24 <__libc_init_array+0x40>)
 800def6:	4c0c      	ldr	r4, [pc, #48]	; (800df28 <__libc_init_array+0x44>)
 800def8:	f000 f9b0 	bl	800e25c <_init>
 800defc:	1b64      	subs	r4, r4, r5
 800defe:	10a4      	asrs	r4, r4, #2
 800df00:	2600      	movs	r6, #0
 800df02:	42a6      	cmp	r6, r4
 800df04:	d105      	bne.n	800df12 <__libc_init_array+0x2e>
 800df06:	bd70      	pop	{r4, r5, r6, pc}
 800df08:	f855 3b04 	ldr.w	r3, [r5], #4
 800df0c:	4798      	blx	r3
 800df0e:	3601      	adds	r6, #1
 800df10:	e7ee      	b.n	800def0 <__libc_init_array+0xc>
 800df12:	f855 3b04 	ldr.w	r3, [r5], #4
 800df16:	4798      	blx	r3
 800df18:	3601      	adds	r6, #1
 800df1a:	e7f2      	b.n	800df02 <__libc_init_array+0x1e>
 800df1c:	0800e574 	.word	0x0800e574
 800df20:	0800e574 	.word	0x0800e574
 800df24:	0800e574 	.word	0x0800e574
 800df28:	0800e57c 	.word	0x0800e57c

0800df2c <memcpy>:
 800df2c:	440a      	add	r2, r1
 800df2e:	4291      	cmp	r1, r2
 800df30:	f100 33ff 	add.w	r3, r0, #4294967295
 800df34:	d100      	bne.n	800df38 <memcpy+0xc>
 800df36:	4770      	bx	lr
 800df38:	b510      	push	{r4, lr}
 800df3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df42:	4291      	cmp	r1, r2
 800df44:	d1f9      	bne.n	800df3a <memcpy+0xe>
 800df46:	bd10      	pop	{r4, pc}

0800df48 <memset>:
 800df48:	4402      	add	r2, r0
 800df4a:	4603      	mov	r3, r0
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d100      	bne.n	800df52 <memset+0xa>
 800df50:	4770      	bx	lr
 800df52:	f803 1b01 	strb.w	r1, [r3], #1
 800df56:	e7f9      	b.n	800df4c <memset+0x4>

0800df58 <realloc>:
 800df58:	4b02      	ldr	r3, [pc, #8]	; (800df64 <realloc+0xc>)
 800df5a:	460a      	mov	r2, r1
 800df5c:	4601      	mov	r1, r0
 800df5e:	6818      	ldr	r0, [r3, #0]
 800df60:	f000 b8da 	b.w	800e118 <_realloc_r>
 800df64:	24000014 	.word	0x24000014

0800df68 <_raise_r>:
 800df68:	291f      	cmp	r1, #31
 800df6a:	b538      	push	{r3, r4, r5, lr}
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	d904      	bls.n	800df7c <_raise_r+0x14>
 800df72:	2316      	movs	r3, #22
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	f04f 30ff 	mov.w	r0, #4294967295
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df7e:	b112      	cbz	r2, 800df86 <_raise_r+0x1e>
 800df80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df84:	b94b      	cbnz	r3, 800df9a <_raise_r+0x32>
 800df86:	4620      	mov	r0, r4
 800df88:	f000 f830 	bl	800dfec <_getpid_r>
 800df8c:	462a      	mov	r2, r5
 800df8e:	4601      	mov	r1, r0
 800df90:	4620      	mov	r0, r4
 800df92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df96:	f000 b817 	b.w	800dfc8 <_kill_r>
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d00a      	beq.n	800dfb4 <_raise_r+0x4c>
 800df9e:	1c59      	adds	r1, r3, #1
 800dfa0:	d103      	bne.n	800dfaa <_raise_r+0x42>
 800dfa2:	2316      	movs	r3, #22
 800dfa4:	6003      	str	r3, [r0, #0]
 800dfa6:	2001      	movs	r0, #1
 800dfa8:	e7e7      	b.n	800df7a <_raise_r+0x12>
 800dfaa:	2400      	movs	r4, #0
 800dfac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	4798      	blx	r3
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e7e0      	b.n	800df7a <_raise_r+0x12>

0800dfb8 <raise>:
 800dfb8:	4b02      	ldr	r3, [pc, #8]	; (800dfc4 <raise+0xc>)
 800dfba:	4601      	mov	r1, r0
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	f7ff bfd3 	b.w	800df68 <_raise_r>
 800dfc2:	bf00      	nop
 800dfc4:	24000014 	.word	0x24000014

0800dfc8 <_kill_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	; (800dfe8 <_kill_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7f6 f965 	bl	80042a4 <_kill>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_kill_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_kill_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	24000ec0 	.word	0x24000ec0

0800dfec <_getpid_r>:
 800dfec:	f7f6 b952 	b.w	8004294 <_getpid>

0800dff0 <sbrk_aligned>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	4e0e      	ldr	r6, [pc, #56]	; (800e02c <sbrk_aligned+0x3c>)
 800dff4:	460c      	mov	r4, r1
 800dff6:	6831      	ldr	r1, [r6, #0]
 800dff8:	4605      	mov	r5, r0
 800dffa:	b911      	cbnz	r1, 800e002 <sbrk_aligned+0x12>
 800dffc:	f000 f8bc 	bl	800e178 <_sbrk_r>
 800e000:	6030      	str	r0, [r6, #0]
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f000 f8b7 	bl	800e178 <_sbrk_r>
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	d00a      	beq.n	800e024 <sbrk_aligned+0x34>
 800e00e:	1cc4      	adds	r4, r0, #3
 800e010:	f024 0403 	bic.w	r4, r4, #3
 800e014:	42a0      	cmp	r0, r4
 800e016:	d007      	beq.n	800e028 <sbrk_aligned+0x38>
 800e018:	1a21      	subs	r1, r4, r0
 800e01a:	4628      	mov	r0, r5
 800e01c:	f000 f8ac 	bl	800e178 <_sbrk_r>
 800e020:	3001      	adds	r0, #1
 800e022:	d101      	bne.n	800e028 <sbrk_aligned+0x38>
 800e024:	f04f 34ff 	mov.w	r4, #4294967295
 800e028:	4620      	mov	r0, r4
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
 800e02c:	24000ebc 	.word	0x24000ebc

0800e030 <_malloc_r>:
 800e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e034:	1ccd      	adds	r5, r1, #3
 800e036:	f025 0503 	bic.w	r5, r5, #3
 800e03a:	3508      	adds	r5, #8
 800e03c:	2d0c      	cmp	r5, #12
 800e03e:	bf38      	it	cc
 800e040:	250c      	movcc	r5, #12
 800e042:	2d00      	cmp	r5, #0
 800e044:	4607      	mov	r7, r0
 800e046:	db01      	blt.n	800e04c <_malloc_r+0x1c>
 800e048:	42a9      	cmp	r1, r5
 800e04a:	d905      	bls.n	800e058 <_malloc_r+0x28>
 800e04c:	230c      	movs	r3, #12
 800e04e:	603b      	str	r3, [r7, #0]
 800e050:	2600      	movs	r6, #0
 800e052:	4630      	mov	r0, r6
 800e054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e058:	4e2e      	ldr	r6, [pc, #184]	; (800e114 <_malloc_r+0xe4>)
 800e05a:	f000 f89d 	bl	800e198 <__malloc_lock>
 800e05e:	6833      	ldr	r3, [r6, #0]
 800e060:	461c      	mov	r4, r3
 800e062:	bb34      	cbnz	r4, 800e0b2 <_malloc_r+0x82>
 800e064:	4629      	mov	r1, r5
 800e066:	4638      	mov	r0, r7
 800e068:	f7ff ffc2 	bl	800dff0 <sbrk_aligned>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	4604      	mov	r4, r0
 800e070:	d14d      	bne.n	800e10e <_malloc_r+0xde>
 800e072:	6834      	ldr	r4, [r6, #0]
 800e074:	4626      	mov	r6, r4
 800e076:	2e00      	cmp	r6, #0
 800e078:	d140      	bne.n	800e0fc <_malloc_r+0xcc>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	4631      	mov	r1, r6
 800e07e:	4638      	mov	r0, r7
 800e080:	eb04 0803 	add.w	r8, r4, r3
 800e084:	f000 f878 	bl	800e178 <_sbrk_r>
 800e088:	4580      	cmp	r8, r0
 800e08a:	d13a      	bne.n	800e102 <_malloc_r+0xd2>
 800e08c:	6821      	ldr	r1, [r4, #0]
 800e08e:	3503      	adds	r5, #3
 800e090:	1a6d      	subs	r5, r5, r1
 800e092:	f025 0503 	bic.w	r5, r5, #3
 800e096:	3508      	adds	r5, #8
 800e098:	2d0c      	cmp	r5, #12
 800e09a:	bf38      	it	cc
 800e09c:	250c      	movcc	r5, #12
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f7ff ffa5 	bl	800dff0 <sbrk_aligned>
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	d02b      	beq.n	800e102 <_malloc_r+0xd2>
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	442b      	add	r3, r5
 800e0ae:	6023      	str	r3, [r4, #0]
 800e0b0:	e00e      	b.n	800e0d0 <_malloc_r+0xa0>
 800e0b2:	6822      	ldr	r2, [r4, #0]
 800e0b4:	1b52      	subs	r2, r2, r5
 800e0b6:	d41e      	bmi.n	800e0f6 <_malloc_r+0xc6>
 800e0b8:	2a0b      	cmp	r2, #11
 800e0ba:	d916      	bls.n	800e0ea <_malloc_r+0xba>
 800e0bc:	1961      	adds	r1, r4, r5
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	6025      	str	r5, [r4, #0]
 800e0c2:	bf18      	it	ne
 800e0c4:	6059      	strne	r1, [r3, #4]
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	bf08      	it	eq
 800e0ca:	6031      	streq	r1, [r6, #0]
 800e0cc:	5162      	str	r2, [r4, r5]
 800e0ce:	604b      	str	r3, [r1, #4]
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f104 060b 	add.w	r6, r4, #11
 800e0d6:	f000 f865 	bl	800e1a4 <__malloc_unlock>
 800e0da:	f026 0607 	bic.w	r6, r6, #7
 800e0de:	1d23      	adds	r3, r4, #4
 800e0e0:	1af2      	subs	r2, r6, r3
 800e0e2:	d0b6      	beq.n	800e052 <_malloc_r+0x22>
 800e0e4:	1b9b      	subs	r3, r3, r6
 800e0e6:	50a3      	str	r3, [r4, r2]
 800e0e8:	e7b3      	b.n	800e052 <_malloc_r+0x22>
 800e0ea:	6862      	ldr	r2, [r4, #4]
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	bf0c      	ite	eq
 800e0f0:	6032      	streq	r2, [r6, #0]
 800e0f2:	605a      	strne	r2, [r3, #4]
 800e0f4:	e7ec      	b.n	800e0d0 <_malloc_r+0xa0>
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	6864      	ldr	r4, [r4, #4]
 800e0fa:	e7b2      	b.n	800e062 <_malloc_r+0x32>
 800e0fc:	4634      	mov	r4, r6
 800e0fe:	6876      	ldr	r6, [r6, #4]
 800e100:	e7b9      	b.n	800e076 <_malloc_r+0x46>
 800e102:	230c      	movs	r3, #12
 800e104:	603b      	str	r3, [r7, #0]
 800e106:	4638      	mov	r0, r7
 800e108:	f000 f84c 	bl	800e1a4 <__malloc_unlock>
 800e10c:	e7a1      	b.n	800e052 <_malloc_r+0x22>
 800e10e:	6025      	str	r5, [r4, #0]
 800e110:	e7de      	b.n	800e0d0 <_malloc_r+0xa0>
 800e112:	bf00      	nop
 800e114:	24000eb8 	.word	0x24000eb8

0800e118 <_realloc_r>:
 800e118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11c:	4680      	mov	r8, r0
 800e11e:	4614      	mov	r4, r2
 800e120:	460e      	mov	r6, r1
 800e122:	b921      	cbnz	r1, 800e12e <_realloc_r+0x16>
 800e124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e128:	4611      	mov	r1, r2
 800e12a:	f7ff bf81 	b.w	800e030 <_malloc_r>
 800e12e:	b92a      	cbnz	r2, 800e13c <_realloc_r+0x24>
 800e130:	f000 f83e 	bl	800e1b0 <_free_r>
 800e134:	4625      	mov	r5, r4
 800e136:	4628      	mov	r0, r5
 800e138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13c:	f000 f884 	bl	800e248 <_malloc_usable_size_r>
 800e140:	4284      	cmp	r4, r0
 800e142:	4607      	mov	r7, r0
 800e144:	d802      	bhi.n	800e14c <_realloc_r+0x34>
 800e146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e14a:	d812      	bhi.n	800e172 <_realloc_r+0x5a>
 800e14c:	4621      	mov	r1, r4
 800e14e:	4640      	mov	r0, r8
 800e150:	f7ff ff6e 	bl	800e030 <_malloc_r>
 800e154:	4605      	mov	r5, r0
 800e156:	2800      	cmp	r0, #0
 800e158:	d0ed      	beq.n	800e136 <_realloc_r+0x1e>
 800e15a:	42bc      	cmp	r4, r7
 800e15c:	4622      	mov	r2, r4
 800e15e:	4631      	mov	r1, r6
 800e160:	bf28      	it	cs
 800e162:	463a      	movcs	r2, r7
 800e164:	f7ff fee2 	bl	800df2c <memcpy>
 800e168:	4631      	mov	r1, r6
 800e16a:	4640      	mov	r0, r8
 800e16c:	f000 f820 	bl	800e1b0 <_free_r>
 800e170:	e7e1      	b.n	800e136 <_realloc_r+0x1e>
 800e172:	4635      	mov	r5, r6
 800e174:	e7df      	b.n	800e136 <_realloc_r+0x1e>
	...

0800e178 <_sbrk_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d06      	ldr	r5, [pc, #24]	; (800e194 <_sbrk_r+0x1c>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f7f6 f8a8 	bl	80042d8 <_sbrk>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_sbrk_r+0x1a>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_sbrk_r+0x1a>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	24000ec0 	.word	0x24000ec0

0800e198 <__malloc_lock>:
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <__malloc_lock+0x8>)
 800e19a:	f000 b85d 	b.w	800e258 <__retarget_lock_acquire_recursive>
 800e19e:	bf00      	nop
 800e1a0:	24000ec4 	.word	0x24000ec4

0800e1a4 <__malloc_unlock>:
 800e1a4:	4801      	ldr	r0, [pc, #4]	; (800e1ac <__malloc_unlock+0x8>)
 800e1a6:	f000 b858 	b.w	800e25a <__retarget_lock_release_recursive>
 800e1aa:	bf00      	nop
 800e1ac:	24000ec4 	.word	0x24000ec4

0800e1b0 <_free_r>:
 800e1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1b2:	2900      	cmp	r1, #0
 800e1b4:	d044      	beq.n	800e240 <_free_r+0x90>
 800e1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ba:	9001      	str	r0, [sp, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f1a1 0404 	sub.w	r4, r1, #4
 800e1c2:	bfb8      	it	lt
 800e1c4:	18e4      	addlt	r4, r4, r3
 800e1c6:	f7ff ffe7 	bl	800e198 <__malloc_lock>
 800e1ca:	4a1e      	ldr	r2, [pc, #120]	; (800e244 <_free_r+0x94>)
 800e1cc:	9801      	ldr	r0, [sp, #4]
 800e1ce:	6813      	ldr	r3, [r2, #0]
 800e1d0:	b933      	cbnz	r3, 800e1e0 <_free_r+0x30>
 800e1d2:	6063      	str	r3, [r4, #4]
 800e1d4:	6014      	str	r4, [r2, #0]
 800e1d6:	b003      	add	sp, #12
 800e1d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1dc:	f7ff bfe2 	b.w	800e1a4 <__malloc_unlock>
 800e1e0:	42a3      	cmp	r3, r4
 800e1e2:	d908      	bls.n	800e1f6 <_free_r+0x46>
 800e1e4:	6825      	ldr	r5, [r4, #0]
 800e1e6:	1961      	adds	r1, r4, r5
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf01      	itttt	eq
 800e1ec:	6819      	ldreq	r1, [r3, #0]
 800e1ee:	685b      	ldreq	r3, [r3, #4]
 800e1f0:	1949      	addeq	r1, r1, r5
 800e1f2:	6021      	streq	r1, [r4, #0]
 800e1f4:	e7ed      	b.n	800e1d2 <_free_r+0x22>
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	b10b      	cbz	r3, 800e200 <_free_r+0x50>
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	d9fa      	bls.n	800e1f6 <_free_r+0x46>
 800e200:	6811      	ldr	r1, [r2, #0]
 800e202:	1855      	adds	r5, r2, r1
 800e204:	42a5      	cmp	r5, r4
 800e206:	d10b      	bne.n	800e220 <_free_r+0x70>
 800e208:	6824      	ldr	r4, [r4, #0]
 800e20a:	4421      	add	r1, r4
 800e20c:	1854      	adds	r4, r2, r1
 800e20e:	42a3      	cmp	r3, r4
 800e210:	6011      	str	r1, [r2, #0]
 800e212:	d1e0      	bne.n	800e1d6 <_free_r+0x26>
 800e214:	681c      	ldr	r4, [r3, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	6053      	str	r3, [r2, #4]
 800e21a:	4421      	add	r1, r4
 800e21c:	6011      	str	r1, [r2, #0]
 800e21e:	e7da      	b.n	800e1d6 <_free_r+0x26>
 800e220:	d902      	bls.n	800e228 <_free_r+0x78>
 800e222:	230c      	movs	r3, #12
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	e7d6      	b.n	800e1d6 <_free_r+0x26>
 800e228:	6825      	ldr	r5, [r4, #0]
 800e22a:	1961      	adds	r1, r4, r5
 800e22c:	428b      	cmp	r3, r1
 800e22e:	bf04      	itt	eq
 800e230:	6819      	ldreq	r1, [r3, #0]
 800e232:	685b      	ldreq	r3, [r3, #4]
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	bf04      	itt	eq
 800e238:	1949      	addeq	r1, r1, r5
 800e23a:	6021      	streq	r1, [r4, #0]
 800e23c:	6054      	str	r4, [r2, #4]
 800e23e:	e7ca      	b.n	800e1d6 <_free_r+0x26>
 800e240:	b003      	add	sp, #12
 800e242:	bd30      	pop	{r4, r5, pc}
 800e244:	24000eb8 	.word	0x24000eb8

0800e248 <_malloc_usable_size_r>:
 800e248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24c:	1f18      	subs	r0, r3, #4
 800e24e:	2b00      	cmp	r3, #0
 800e250:	bfbc      	itt	lt
 800e252:	580b      	ldrlt	r3, [r1, r0]
 800e254:	18c0      	addlt	r0, r0, r3
 800e256:	4770      	bx	lr

0800e258 <__retarget_lock_acquire_recursive>:
 800e258:	4770      	bx	lr

0800e25a <__retarget_lock_release_recursive>:
 800e25a:	4770      	bx	lr

0800e25c <_init>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	bf00      	nop
 800e260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e262:	bc08      	pop	{r3}
 800e264:	469e      	mov	lr, r3
 800e266:	4770      	bx	lr

0800e268 <_fini>:
 800e268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26a:	bf00      	nop
 800e26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26e:	bc08      	pop	{r3}
 800e270:	469e      	mov	lr, r3
 800e272:	4770      	bx	lr
