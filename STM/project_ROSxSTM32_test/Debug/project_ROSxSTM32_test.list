
project_ROSxSTM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e570  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eb38  0800eb38  0001eb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800eb40  0800eb40  0001eb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800eb48  0800eb48  0001eb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  0800eb4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e44  24000218  0800ed64  00020218  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400105c  0800ed64  0002105c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f371  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000347b  00000000  00000000  0003f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  00042a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001390  00000000  00000000  00043ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e0b  00000000  00000000  00045258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a9e0  00000000  00000000  0007a063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015365d  00000000  00000000  00094a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e80a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c34  00000000  00000000  001e80f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000218 	.word	0x24000218
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e828 	.word	0x0800e828

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400021c 	.word	0x2400021c
 800030c:	0800e828 	.word	0x0800e828

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	4aa9      	ldr	r2, [pc, #676]	; (8000930 <pidCtrl+0x2b0>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2168      	movs	r1, #104	; 0x68
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	3318      	adds	r3, #24
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000908 <pidCtrl+0x288>
 80006a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006aa:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000910 <pidCtrl+0x290>
 80006ae:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 80006b2:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8000918 <pidCtrl+0x298>
 80006b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ba:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8000920 <pidCtrl+0x2a0>
 80006be:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c2:	4a9b      	ldr	r2, [pc, #620]	; (8000930 <pidCtrl+0x2b0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2168      	movs	r1, #104	; 0x68
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	3328      	adds	r3, #40	; 0x28
 80006d0:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d4:	4a96      	ldr	r2, [pc, #600]	; (8000930 <pidCtrl+0x2b0>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2168      	movs	r1, #104	; 0x68
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	3320      	adds	r3, #32
 80006e2:	ed93 6b00 	vldr	d6, [r3]
 80006e6:	4a92      	ldr	r2, [pc, #584]	; (8000930 <pidCtrl+0x2b0>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2168      	movs	r1, #104	; 0x68
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	3328      	adds	r3, #40	; 0x28
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <pidCtrl+0x2b0>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2168      	movs	r1, #104	; 0x68
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 800070e:	4a88      	ldr	r2, [pc, #544]	; (8000930 <pidCtrl+0x2b0>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2168      	movs	r1, #104	; 0x68
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	ed93 6b00 	vldr	d6, [r3]
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <pidCtrl+0x2b0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2168      	movs	r1, #104	; 0x68
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	3330      	adds	r3, #48	; 0x30
 800072c:	ed93 7b00 	vldr	d7, [r3]
 8000730:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000734:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <pidCtrl+0x2b0>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2168      	movs	r1, #104	; 0x68
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	3348      	adds	r3, #72	; 0x48
 8000742:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000746:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <pidCtrl+0x2b0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2168      	movs	r1, #104	; 0x68
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	3350      	adds	r3, #80	; 0x50
 8000754:	ed93 6b00 	vldr	d6, [r3]
 8000758:	4a75      	ldr	r2, [pc, #468]	; (8000930 <pidCtrl+0x2b0>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2168      	movs	r1, #104	; 0x68
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	ed93 5b00 	vldr	d5, [r3]
 800076a:	4a71      	ldr	r2, [pc, #452]	; (8000930 <pidCtrl+0x2b0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2168      	movs	r1, #104	; 0x68
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	3338      	adds	r3, #56	; 0x38
 8000778:	ed93 7b00 	vldr	d7, [r3]
 800077c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000780:	ed9f 4b67 	vldr	d4, [pc, #412]	; 8000920 <pidCtrl+0x2a0>
 8000784:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800078c:	4a68      	ldr	r2, [pc, #416]	; (8000930 <pidCtrl+0x2b0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3350      	adds	r3, #80	; 0x50
 800079a:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <pidCtrl+0x2b0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2168      	movs	r1, #104	; 0x68
 80007a4:	fb01 f303 	mul.w	r3, r1, r3
 80007a8:	4413      	add	r3, r2
 80007aa:	3310      	adds	r3, #16
 80007ac:	ed93 6b00 	vldr	d6, [r3]
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <pidCtrl+0x2b0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2168      	movs	r1, #104	; 0x68
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	3330      	adds	r3, #48	; 0x30
 80007be:	ed93 5b00 	vldr	d5, [r3]
 80007c2:	4a5b      	ldr	r2, [pc, #364]	; (8000930 <pidCtrl+0x2b0>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2168      	movs	r1, #104	; 0x68
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	3338      	adds	r3, #56	; 0x38
 80007d0:	ed93 7b00 	vldr	d7, [r3]
 80007d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007dc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000920 <pidCtrl+0x2a0>
 80007e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <pidCtrl+0x2b0>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	fb01 f303 	mul.w	r3, r1, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	3358      	adds	r3, #88	; 0x58
 80007f2:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80007f6:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <pidCtrl+0x2b0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2168      	movs	r1, #104	; 0x68
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3350      	adds	r3, #80	; 0x50
 8000804:	ed93 7b00 	vldr	d7, [r3]
 8000808:	eeb0 7bc7 	vabs.f64	d7, d7
 800080c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000810:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	dd1d      	ble.n	8000856 <pidCtrl+0x1d6>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <pidCtrl+0x2b0>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2168      	movs	r1, #104	; 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	4413      	add	r3, r2
 8000826:	3350      	adds	r3, #80	; 0x50
 8000828:	ed93 7b00 	vldr	d7, [r3]
 800082c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000834:	db03      	blt.n	800083e <pidCtrl+0x1be>
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <pidCtrl+0x2b4>)
 800083c:	e002      	b.n	8000844 <pidCtrl+0x1c4>
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <pidCtrl+0x2b8>)
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <pidCtrl+0x2b0>)
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2468      	movs	r4, #104	; 0x68
 800084a:	fb04 f101 	mul.w	r1, r4, r1
 800084e:	4401      	add	r1, r0
 8000850:	3150      	adds	r1, #80	; 0x50
 8000852:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 8000856:	4a36      	ldr	r2, [pc, #216]	; (8000930 <pidCtrl+0x2b0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2168      	movs	r1, #104	; 0x68
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	3348      	adds	r3, #72	; 0x48
 8000864:	ed93 6b00 	vldr	d6, [r3]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <pidCtrl+0x2b0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2168      	movs	r1, #104	; 0x68
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	4413      	add	r3, r2
 8000874:	3350      	adds	r3, #80	; 0x50
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <pidCtrl+0x2b0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2168      	movs	r1, #104	; 0x68
 8000884:	fb01 f303 	mul.w	r3, r1, r3
 8000888:	4413      	add	r3, r2
 800088a:	3358      	adds	r3, #88	; 0x58
 800088c:	ed93 7b00 	vldr	d7, [r3]
 8000890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <pidCtrl+0x2b0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	3340      	adds	r3, #64	; 0x40
 80008a2:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <pidCtrl+0x2b0>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <pidCtrl+0x2b0>)
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2468      	movs	r4, #104	; 0x68
 80008be:	fb04 f101 	mul.w	r1, r4, r1
 80008c2:	4401      	add	r1, r0
 80008c4:	3138      	adds	r1, #56	; 0x38
 80008c6:	e9c1 2300 	strd	r2, r3, [r1]

	Kpid[i].pulse = fabs(Kpid[i].u) * 3200;
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <pidCtrl+0x2b0>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2168      	movs	r1, #104	; 0x68
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	3340      	adds	r3, #64	; 0x40
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008e0:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000928 <pidCtrl+0x2a8>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <pidCtrl+0x2b0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2168      	movs	r1, #104	; 0x68
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	3360      	adds	r3, #96	; 0x60
 80008f6:	ed83 7b00 	vstr	d7, [r3]
//	if(Kpid[i].pulse > 3200)	Kpid[i].pulse = 3200;
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc90      	pop	{r4, r7}
 8000902:	4770      	bx	lr
 8000904:	f3af 8000 	nop.w
 8000908:	54cadf99 	.word	0x54cadf99
 800090c:	400921fb 	.word	0x400921fb
 8000910:	b6ae7d56 	.word	0xb6ae7d56
 8000914:	3fb97f62 	.word	0x3fb97f62
 8000918:	cccccccd 	.word	0xcccccccd
 800091c:	40e4cccc 	.word	0x40e4cccc
 8000920:	00000000 	.word	0x00000000
 8000924:	408f4000 	.word	0x408f4000
 8000928:	00000000 	.word	0x00000000
 800092c:	40a90000 	.word	0x40a90000
 8000930:	24000000 	.word	0x24000000
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f004 f88e 	bl	8004a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f862 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 fc68 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 fc3e 	bl	80011cc <MX_DMA_Init>
  MX_USART10_UART_Init();
 8000950:	f000 fbf0 	bl	8001134 <MX_USART10_UART_Init>
  MX_TIM3_Init();
 8000954:	f000 f91a 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000958:	f000 f96e 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM5_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000960:	f000 fa0e 	bl	8000d80 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000964:	f000 faa8 	bl	8000eb8 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000968:	f000 fb38 	bl	8000fdc <MX_TIM23_Init>
  MX_TIM24_Init();
 800096c:	f000 fb8c 	bl	8001088 <MX_TIM24_Init>
  MX_TIM2_Init();
 8000970:	f000 f8be 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim5);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <main+0xb0>)
 8000976:	f00a f807 	bl	800a988 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim2);
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xb4>)
 800097c:	f00a f804 	bl	800a988 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <main+0xb8>)
 8000984:	f00a f8de 	bl	800ab44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000988:	210c      	movs	r1, #12
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <main+0xb8>)
 800098c:	f00a f8da 	bl	800ab44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <main+0xbc>)
 8000994:	f00a f8d6 	bl	800ab44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <main+0xbc>)
 800099c:	f00a f8d2 	bl	800ab44 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <main+0xc0>)
 80009a4:	f00a fa90 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_2);
 80009a8:	2104      	movs	r1, #4
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <main+0xc0>)
 80009ac:	f00a fa8c 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xc4>)
 80009b4:	f00a fa88 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xc4>)
 80009bc:	f00a fa84 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <main+0xc8>)
 80009c4:	f00a fa80 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xc8>)
 80009cc:	f00a fa7c 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <main+0xcc>)
 80009d4:	f00a fa78 	bl	800aec8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_2);
 80009d8:	2104      	movs	r1, #4
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <main+0xcc>)
 80009dc:	f00a fa74 	bl	800aec8 <HAL_TIM_Encoder_Start>

//    for( int j = 0; j < 4; j ++){
//    	K_init(j);
//    }

    setup();
 80009e0:	f002 fd5c 	bl	800349c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		loop();
 80009e4:	f002 fd70 	bl	80034c8 <loop>
 80009e8:	e7fc      	b.n	80009e4 <main+0xa8>
 80009ea:	bf00      	nop
 80009ec:	24000318 	.word	0x24000318
 80009f0:	24000234 	.word	0x24000234
 80009f4:	24000364 	.word	0x24000364
 80009f8:	240003b0 	.word	0x240003b0
 80009fc:	24000448 	.word	0x24000448
 8000a00:	24000280 	.word	0x24000280
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	240003fc 	.word	0x240003fc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00d fd7a 	bl	800e514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00d fd74 	bl	800e514 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f007 fcc3 	bl	80083b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <SystemClock_Config+0xe0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <SystemClock_Config+0xe0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <SystemClock_Config+0xe0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a7a:	2315      	movs	r3, #21
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 fcc6 	bl	800842c <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fe5b 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	233f      	movs	r3, #63	; 0x3f
 8000aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f858 	bl	8008b88 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ade:	f000 fe3f 	bl	8001760 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3770      	adds	r7, #112	; 0x70
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024800 	.word	0x58024800

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	223f      	movs	r2, #63	; 0x3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b24:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b38:	f009 fece 	bl	800a8d8 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b42:	f000 fe0d 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b54:	f00a fc7a 	bl	800b44c <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f000 fdff 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b70:	f00b f9cc 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b7a:	f000 fdf1 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000234 	.word	0x24000234

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00d fcba 	bl	800e514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f00a f8be 	bl	800ad7c <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fdab 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f00b f978 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fd9d 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000280 	.word	0x24000280
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00d fc64 	bl	800e514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f00a f868 	bl	800ad7c <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 fd55 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f00b f922 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 fd47 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240002cc 	.word	0x240002cc
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_TIM5_Init+0x98>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d2a:	f009 fdd5 	bl	800a8d8 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fd14 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d46:	f00a fb81 	bl	800b44c <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fd06 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM5_Init+0x94>)
 8000d62:	f00b f8d3 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fcf8 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000318 	.word	0x24000318
 8000d7c:	40000c00 	.word	0x40000c00

08000d80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2234      	movs	r2, #52	; 0x34
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00d fbb1 	bl	800e514 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x134>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3199;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dc6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000dca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000de0:	f009 fe58 	bl	800aa94 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 fcb9 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e02:	f00b f883 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fca8 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e36:	f00a f9f5 	bl	800b224 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e40:	f000 fc8e 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e4e:	f00a f9e9 	bl	800b224 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 fc82 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000e92:	f00b f8d7 	bl	800c044 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8000e9c:	f000 fc60 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM8_Init+0x130>)
 8000ea2:	f003 fadd 	bl	8004460 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3760      	adds	r7, #96	; 0x60
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b098      	sub	sp, #96	; 0x60
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2234      	movs	r2, #52	; 0x34
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00d fb15 	bl	800e514 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM15_Init+0x120>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3199;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000efe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000f02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f16:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f18:	f009 fdbc 	bl	800aa94 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fc1d 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f36:	f00a ffe9 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fc0e 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f6a:	f00a f95b 	bl	800b224 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f74:	f000 fbf4 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000f82:	f00a f94f 	bl	800b224 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f8c:	f000 fbe8 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fb8:	f00b f844 	bl	800c044 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000fc2:	f000 fbcd 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM15_Init+0x11c>)
 8000fc8:	f003 fa4a 	bl	8004460 <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3760      	adds	r7, #96	; 0x60
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240003b0 	.word	0x240003b0
 8000fd8:	40014000 	.word	0x40014000

08000fdc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00d fa92 	bl	800e514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM23_Init+0xa4>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM23_Init+0xa8>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM23_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM23_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM23_Init+0xa4>)
 800104c:	f009 fe96 	bl	800ad7c <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 fb83 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM23_Init+0xa4>)
 8001068:	f00a ff50 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 fb75 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240003fc 	.word	0x240003fc
 8001084:	4000e000 	.word	0x4000e000

08001088 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	; 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00d fa3c 	bl	800e514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_TIM24_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM24_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM24_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM24_Init+0xa4>)
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM24_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010cc:	2303      	movs	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_TIM24_Init+0xa4>)
 80010f8:	f009 fe40 	bl	800ad7c <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 fb2d 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_TIM24_Init+0xa4>)
 8001114:	f00a fefa 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 fb1f 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000448 	.word	0x24000448
 8001130:	4000e400 	.word	0x4000e400

08001134 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_USART10_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 800117e:	f00b f81f 	bl	800c1c0 <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 faea 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 8001190:	f00d f8a2 	bl	800e2d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 fae1 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011a2:	f00d f8d7 	bl	800e354 <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 fad8 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_USART10_UART_Init+0x90>)
 80011b2:	f00d f858 	bl	800e266 <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fad0 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000494 	.word	0x24000494
 80011c8:	40011c00 	.word	0x40011c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x4c>)
 80011d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DMA_Init+0x4c>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_DMA_Init+0x4c>)
 80011e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	200b      	movs	r0, #11
 80011f6:	f003 fdc4 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fa:	200b      	movs	r0, #11
 80011fc:	f003 fddb 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200c      	movs	r0, #12
 8001206:	f003 fdbc 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800120a:	200c      	movs	r0, #12
 800120c:	f003 fdd3 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <MX_GPIO_Init+0x170>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <MX_GPIO_Init+0x170>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <MX_GPIO_Init+0x170>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x170>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_GPIO_Init+0x170>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x170>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <MX_GPIO_Init+0x170>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x170>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <MX_GPIO_Init+0x170>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <MX_GPIO_Init+0x170>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	; (800138c <MX_GPIO_Init+0x170>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a36      	ldr	r2, [pc, #216]	; (800138c <MX_GPIO_Init+0x170>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <MX_GPIO_Init+0x170>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <MX_GPIO_Init+0x170>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <MX_GPIO_Init+0x170>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_GPIO_Init+0x170>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_GPIO_Init+0x170>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0x170>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0x170>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001304:	2200      	movs	r2, #0
 8001306:	f249 51c0 	movw	r1, #38336	; 0x95c0
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_GPIO_Init+0x174>)
 800130c:	f007 f816 	bl	800833c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <MX_GPIO_Init+0x178>)
 8001318:	f007 f810 	bl	800833c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE7 PE8 PE10
                           PE12 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800131c:	f249 53c0 	movw	r3, #38336	; 0x95c0
 8001320:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <MX_GPIO_Init+0x174>)
 8001336:	f006 fd57 	bl	8007de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001340:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_GPIO_Init+0x17c>)
 8001352:	f006 fd49 	bl	8007de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_GPIO_Init+0x178>)
 8001370:	f006 fd3a 	bl	8007de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2028      	movs	r0, #40	; 0x28
 800137a:	f003 fd02 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fd19 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58021000 	.word	0x58021000
 8001394:	58020400 	.word	0x58020400
 8001398:	58020800 	.word	0x58020800
 800139c:	00000000 	.word	0x00000000

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM2) {
//		inter();
//	}
	if (htim->Instance == TIM5) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4aac      	ldr	r2, [pc, #688]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	f040 81c8 	bne.w	8001744 <HAL_TIM_PeriodElapsedCallback+0x3a4>
		Kpid[0].goalVel = Vy + Vx + (W * 0.152767);
 80013b4:	4bab      	ldr	r3, [pc, #684]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80013b6:	ed93 6b00 	vldr	d6, [r3]
 80013ba:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80013bc:	ed93 7b00 	vldr	d7, [r3]
 80013c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013c4:	4ba9      	ldr	r3, [pc, #676]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013c6:	ed93 7b00 	vldr	d7, [r3]
 80013ca:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8001640 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80013ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013d6:	4ba6      	ldr	r3, [pc, #664]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80013d8:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vy - Vx - (W * 0.152844);
 80013dc:	4ba1      	ldr	r3, [pc, #644]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80013de:	ed93 6b00 	vldr	d6, [r3]
 80013e2:	4ba1      	ldr	r3, [pc, #644]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80013e4:	ed93 7b00 	vldr	d7, [r3]
 80013e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013ec:	4b9f      	ldr	r3, [pc, #636]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013ee:	ed93 7b00 	vldr	d7, [r3]
 80013f2:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8001648 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80013f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013fe:	4b9c      	ldr	r3, [pc, #624]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001400:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
		Kpid[2].goalVel = Vy + Vx - (W * 0.152998);
 8001404:	4b97      	ldr	r3, [pc, #604]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001406:	ed93 6b00 	vldr	d6, [r3]
 800140a:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800140c:	ed93 7b00 	vldr	d7, [r3]
 8001410:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001414:	4b95      	ldr	r3, [pc, #596]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001416:	ed93 7b00 	vldr	d7, [r3]
 800141a:	ed9f 5b8d 	vldr	d5, [pc, #564]	; 8001650 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800141e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001422:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001426:	4b92      	ldr	r3, [pc, #584]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001428:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
		Kpid[3].goalVel = Vy - Vx + (W * 0.154852);
 800142c:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800142e:	ed93 6b00 	vldr	d6, [r3]
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001434:	ed93 7b00 	vldr	d7, [r3]
 8001438:	ee36 6b47 	vsub.f64	d6, d6, d7
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800143e:	ed93 7b00 	vldr	d7, [r3]
 8001442:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001658 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8001446:	ee27 7b05 	vmul.f64	d7, d7, d5
 800144a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001450:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158
		Kpid[0].enc = __HAL_TIM_GetCounter(&htim23);
 8001454:	4b87      	ldr	r3, [pc, #540]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b84      	ldr	r3, [pc, #528]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800145e:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim4) * -1;
 8001460:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	b29b      	uxth	r3, r3
 8001468:	425b      	negs	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b80      	ldr	r3, [pc, #512]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001470:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim24);
 8001474:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b7c      	ldr	r3, [pc, #496]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800147e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim3);
 8001482:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b79      	ldr	r3, [pc, #484]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800148c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		__HAL_TIM_SetCounter(&htim24, 0);
 8001490:	4b7a      	ldr	r3, [pc, #488]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim23, 0);
 8001498:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 80014a8:	4b73      	ldr	r3, [pc, #460]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24

		for( int i = 0; i < 4; i ++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e005      	b.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x122>
			pidCtrl(i);
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff f8e2 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	ddf6      	ble.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x116>
		}

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, Kpid[0].pulse);
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014ca:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d6:	ee17 2a90 	vmov	r2, s15
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, Kpid[1].pulse);
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014de:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 80014e2:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014ea:	ee17 2a90 	vmov	r2, s15
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[2].pulse);
 80014f0:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014f2:	ed93 7b4c 	vldr	d7, [r3, #304]	; 0x130
 80014f6:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014fe:	ee17 2a90 	vmov	r2, s15
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[3].pulse);
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001506:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001512:	ee17 2a90 	vmov	r2, s15
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151e:	485b      	ldr	r0, [pc, #364]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001520:	f006 ff0c 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800152a:	4858      	ldr	r0, [pc, #352]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800152c:	f006 ff06 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	4856      	ldr	r0, [pc, #344]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001538:	f006 ff00 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4853      	ldr	r0, [pc, #332]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001542:	f006 fefb 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154c:	4850      	ldr	r0, [pc, #320]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800154e:	f006 fef5 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	484d      	ldr	r0, [pc, #308]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800155a:	f006 feef 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	484a      	ldr	r0, [pc, #296]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001566:	f006 fee9 	bl	800833c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	4848      	ldr	r0, [pc, #288]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001570:	f006 fee4 	bl	800833c <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001574:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001576:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800157a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	dd06      	ble.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4840      	ldr	r0, [pc, #256]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800158c:	f006 fed6 	bl	800833c <HAL_GPIO_WritePin>
 8001590:	e00d      	b.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x20e>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001594:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001598:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d505      	bpl.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x20e>
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	4838      	ldr	r0, [pc, #224]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015aa:	f006 fec7 	bl	800833c <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015b0:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80015b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	dd06      	ble.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x22c>
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c4:	4832      	ldr	r0, [pc, #200]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015c6:	f006 feb9 	bl	800833c <HAL_GPIO_WritePin>
 80015ca:	e00c      	b.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x246>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015ce:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80015d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d504      	bpl.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x246>
 80015dc:	2201      	movs	r2, #1
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	482b      	ldr	r0, [pc, #172]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015e2:	f006 feab 	bl	800833c <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015e8:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 80015ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd06      	ble.n	8001604 <HAL_TIM_PeriodElapsedCallback+0x264>
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80015fe:	f006 fe9d 	bl	800833c <HAL_GPIO_WritePin>
 8001602:	e00d      	b.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x280>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001606:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 800160a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d505      	bpl.n	8001620 <HAL_TIM_PeriodElapsedCallback+0x280>
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	481d      	ldr	r0, [pc, #116]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800161c:	f006 fe8e 	bl	800833c <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001622:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8001626:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	dd31      	ble.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4816      	ldr	r0, [pc, #88]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001638:	f006 fe80 	bl	800833c <HAL_GPIO_WritePin>
 800163c:	e037      	b.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x30e>
 800163e:	bf00      	nop
 8001640:	7a743a64 	.word	0x7a743a64
 8001644:	3fc38dde 	.word	0x3fc38dde
 8001648:	66b1e5c1 	.word	0x66b1e5c1
 800164c:	3fc39064 	.word	0x3fc39064
 8001650:	3f2d3c79 	.word	0x3f2d3c79
 8001654:	3fc39570 	.word	0x3fc39570
 8001658:	b9dc2f40 	.word	0xb9dc2f40
 800165c:	3fc3d230 	.word	0x3fc3d230
 8001660:	40000c00 	.word	0x40000c00
 8001664:	24000620 	.word	0x24000620
 8001668:	24000618 	.word	0x24000618
 800166c:	24000628 	.word	0x24000628
 8001670:	24000000 	.word	0x24000000
 8001674:	240003fc 	.word	0x240003fc
 8001678:	240002cc 	.word	0x240002cc
 800167c:	24000448 	.word	0x24000448
 8001680:	24000280 	.word	0x24000280
 8001684:	24000364 	.word	0x24000364
 8001688:	240003b0 	.word	0x240003b0
 800168c:	58020400 	.word	0x58020400
 8001690:	58021000 	.word	0x58021000
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001696:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 800169a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d504      	bpl.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x30e>
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80016aa:	f006 fe47 	bl	800833c <HAL_GPIO_WritePin>

		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 80016ae:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016b0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016b6:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80016ba:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ Kpid[2].insVel + Kpid[3].insVel );
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016c0:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 80016c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016ca:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 80016ce:	ee36 7b07 	vadd.f64	d7, d6, d7
		rVy = 0.25 * ( Kpid[0].insVel + Kpid[1].insVel
 80016d2:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 80016d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80016dc:	ed83 7b00 	vstr	d7, [r3]
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016e2:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016e8:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80016ec:	ee36 6b47 	vsub.f64	d6, d6, d7
				+ Kpid[2].insVel - Kpid[3].insVel );
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016f2:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 80016f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80016fc:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8001700:	ee36 7b47 	vsub.f64	d7, d6, d7
		rVx = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001704:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8001708:	ee27 7b06 	vmul.f64	d7, d7, d6
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800170e:	ed83 7b00 	vstr	d7, [r3]
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001714:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800171a:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800171e:	ee36 6b47 	vsub.f64	d6, d6, d7
				- Kpid[2].insVel + Kpid[3].insVel );
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001724:	ed93 7b3e 	vldr	d7, [r3, #248]	; 0xf8
 8001728:	ee36 6b47 	vsub.f64	d6, d6, d7
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800172e:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
 8001732:	ee36 7b07 	vadd.f64	d7, d6, d7
		rW = 0.25 * ( Kpid[0].insVel - Kpid[1].insVel
 8001736:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 800173a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001740:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24000000 	.word	0x24000000
 8001750:	58021000 	.word	0x58021000
 8001754:	24000638 	.word	0x24000638
 8001758:	24000630 	.word	0x24000630
 800175c:	24000640 	.word	0x24000640

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>

0800176a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	0800eae8 	.word	0x0800eae8

080017ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
      data()
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffe8 	bl	800178c <_ZN3ros3MsgC1Ev>
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3304      	adds	r3, #4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffcf 	bl	800176a <_ZN3ros4TimeC1Ev>
    {
    }
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0800ead0 	.word	0x0800ead0

080017dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0a19      	lsrs	r1, r3, #8
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0c19      	lsrs	r1, r3, #16
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3302      	adds	r3, #2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0e19      	lsrs	r1, r3, #24
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3303      	adds	r3, #3
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3304      	adds	r3, #4
 8001832:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	4413      	add	r3, r2
 800183e:	b2ca      	uxtb	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0a19      	lsrs	r1, r3, #8
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	b2ca      	uxtb	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	0c19      	lsrs	r1, r3, #16
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3302      	adds	r3, #2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0e19      	lsrs	r1, r3, #24
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3303      	adds	r3, #3
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
      return offset;
 800187e:	68fb      	ldr	r3, [r7, #12]
    }
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	440b      	add	r3, r1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3302      	adds	r3, #2
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	440b      	add	r3, r1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3303      	adds	r3, #3
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	440b      	add	r3, r1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	061b      	lsls	r3, r3, #24
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3301      	adds	r3, #1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	440b      	add	r3, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3302      	adds	r3, #2
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	440b      	add	r3, r1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3303      	adds	r3, #3
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	440b      	add	r3, r1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3304      	adds	r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
     return offset;
 8001946:	68fb      	ldr	r3, [r7, #12]
    }
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Time"; };
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	0800e840 	.word	0x0800e840

08001970 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	0800e854 	.word	0x0800e854

0800198c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fef8 	bl	800178c <_ZN3ros3MsgC1Ev>
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	809a      	strh	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
    {
    }
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	0800eab8 	.word	0x0800eab8
 80019d0:	0800e878 	.word	0x0800e878

080019d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	8899      	ldrh	r1, [r3, #4]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	b2ca      	uxtb	r2, r1
 80019ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	889b      	ldrh	r3, [r3, #4]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	b299      	uxth	r1, r3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	3301      	adds	r3, #1
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3302      	adds	r3, #2
 8001a08:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fc7e 	bl	8000310 <strlen>
 8001a14:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	69b9      	ldr	r1, [r7, #24]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fd5c 	bl	80034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3304      	adds	r3, #4
 8001a28:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	18d0      	adds	r0, r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f00c fd5e 	bl	800e4f8 <memcpy>
      offset += length_topic_name;
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4413      	add	r3, r2
 8001a42:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fc61 	bl	8000310 <strlen>
 8001a4e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fd3f 	bl	80034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	18d0      	adds	r0, r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f00c fd41 	bl	800e4f8 <memcpy>
      offset += length_message_type;
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fc44 	bl	8000310 <strlen>
 8001a88:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	6939      	ldr	r1, [r7, #16]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 fd22 	bl	80034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	18d0      	adds	r0, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f00c fd24 	bl	800e4f8 <memcpy>
      offset += length_md5sum;
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0a19      	lsrs	r1, r3, #8
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0c19      	lsrs	r1, r3, #16
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0e19      	lsrs	r1, r3, #24
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3303      	adds	r3, #3
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b00:	69fb      	ldr	r3, [r7, #28]
    }
 8001b02:	4618      	mov	r0, r3
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b08a      	sub	sp, #40	; 0x28
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	889b      	ldrh	r3, [r3, #4]
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	440b      	add	r3, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	3302      	adds	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	441a      	add	r2, r3
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fcde 	bl	8003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d20c      	bcs.n	8001b8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	441a      	add	r2, r3
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	440b      	add	r3, r1
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3301      	adds	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e7ec      	b.n	8001b66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	4413      	add	r3, r2
 8001b92:	3b01      	subs	r3, #1
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	441a      	add	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	4413      	add	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	441a      	add	r2, r3
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fcab 	bl	8003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	6a3a      	ldr	r2, [r7, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d20c      	bcs.n	8001bf2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	441a      	add	r2, r3
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	440b      	add	r3, r1
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	3301      	adds	r3, #1
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	e7ec      	b.n	8001bcc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	441a      	add	r2, r3
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fc78 	bl	8003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d20c      	bcs.n	8001c58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	441a      	add	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	440b      	add	r3, r1
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e7ec      	b.n	8001c32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	441a      	add	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	440a      	add	r2, r1
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	3301      	adds	r3, #1
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	440b      	add	r3, r1
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	440b      	add	r3, r1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	440b      	add	r3, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	61bb      	str	r3, [r7, #24]
     return offset;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
    }
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	0800e87c 	.word	0x0800e87c

08001cf8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	0800e898 	.word	0x0800e898

08001d14 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd34 	bl	800178c <_ZN3ros3MsgC1Ev>
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	711a      	strb	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001d34:	609a      	str	r2, [r3, #8]
    {
    }
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	0800eaa0 	.word	0x0800eaa0
 8001d44:	0800e878 	.word	0x0800e878

08001d48 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	7912      	ldrb	r2, [r2, #4]
 8001d60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe facf 	bl	8000310 <strlen>
 8001d72:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fbad 	bl	80034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3304      	adds	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	18d0      	adds	r0, r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f00c fbaf 	bl	800e4f8 <memcpy>
      offset += length_msg;
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001da2:	68fb      	ldr	r3, [r7, #12]
    }
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	441a      	add	r2, r3
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fb9d 	bl	8003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3304      	adds	r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d20c      	bcs.n	8001e0e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	441a      	add	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	440b      	add	r3, r1
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e7ec      	b.n	8001de8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	3b01      	subs	r3, #1
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	441a      	add	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
     return offset;
 8001e32:	693b      	ldr	r3, [r7, #16]
    }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	0800e8bc 	.word	0x0800e8bc

08001e58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	0800e8d0 	.word	0x0800e8d0

08001e74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fc84 	bl	800178c <_ZN3ros3MsgC1Ev>
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800ea88 	.word	0x0800ea88

08001ebc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0a19      	lsrs	r1, r3, #8
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0c19      	lsrs	r1, r3, #16
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0e19      	lsrs	r1, r3, #24
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	3303      	adds	r3, #3
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2ca      	uxtb	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3304      	adds	r3, #4
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d22b      	bcs.n	8001f7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	0a19      	lsrs	r1, r3, #8
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	3301      	adds	r3, #1
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	0c19      	lsrs	r1, r3, #16
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3302      	adds	r3, #2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	0e19      	lsrs	r1, r3, #24
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3303      	adds	r3, #3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2ca      	uxtb	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	3301      	adds	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e7ce      	b.n	8001f18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	0a19      	lsrs	r1, r3, #8
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	0c19      	lsrs	r1, r3, #16
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	0e19      	lsrs	r1, r3, #24
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d22b      	bcs.n	800202a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0a19      	lsrs	r1, r3, #8
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0c19      	lsrs	r1, r3, #16
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3302      	adds	r3, #2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0e19      	lsrs	r1, r3, #24
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3303      	adds	r3, #3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	3304      	adds	r3, #4
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	e7ce      	b.n	8001fc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69d9      	ldr	r1, [r3, #28]
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	0a19      	lsrs	r1, r3, #8
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	0c19      	lsrs	r1, r3, #16
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3302      	adds	r3, #2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	0e19      	lsrs	r1, r3, #24
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	3303      	adds	r3, #3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3304      	adds	r3, #4
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d228      	bcs.n	80020d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f93e 	bl	8000310 <strlen>
 8002094:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fa1c 	bl	80034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3304      	adds	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	18d0      	adds	r0, r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4619      	mov	r1, r3
 80020c0:	f00c fa1a 	bl	800e4f8 <memcpy>
      offset += length_stringsi;
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4413      	add	r3, r2
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3301      	adds	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e7d1      	b.n	8002078 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020d6:	4618      	mov	r0, r3
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08e      	sub	sp, #56	; 0x38
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f8:	3301      	adds	r3, #1
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	4313      	orrs	r3, r2
 8002106:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	3302      	adds	r3, #2
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	6a3a      	ldr	r2, [r7, #32]
 8002116:	4313      	orrs	r3, r2
 8002118:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	3303      	adds	r3, #3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4313      	orrs	r3, r2
 800212a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	3304      	adds	r3, #4
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d90a      	bls.n	8002152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f00c f9ec 	bl	800e524 <realloc>
 800214c:	4602      	mov	r2, r0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002162:	429a      	cmp	r2, r3
 8002164:	d236      	bcs.n	80021d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440a      	add	r2, r1
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	3301      	adds	r3, #1
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	440b      	add	r3, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	3302      	adds	r3, #2
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	3303      	adds	r3, #3
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	440b      	add	r3, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	3304      	adds	r3, #4
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	3301      	adds	r3, #1
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
 80021d2:	e7c3      	b.n	800215c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	3301      	adds	r3, #1
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	3302      	adds	r3, #2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	3303      	adds	r3, #3
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4313      	orrs	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3304      	adds	r3, #4
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d90a      	bls.n	800223a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f00c f978 	bl	800e524 <realloc>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224a:	429a      	cmp	r2, r3
 800224c:	d236      	bcs.n	80022bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	440a      	add	r2, r1
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	3301      	adds	r3, #1
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	440b      	add	r3, r1
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002276:	3302      	adds	r3, #2
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	440b      	add	r3, r1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002288:	3303      	adds	r3, #3
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	440b      	add	r3, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	3304      	adds	r3, #4
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	3214      	adds	r2, #20
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	3301      	adds	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	e7c3      	b.n	8002244 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	3301      	adds	r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	3302      	adds	r3, #2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	3303      	adds	r3, #3
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	3304      	adds	r3, #4
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	429a      	cmp	r2, r3
 800230a:	d90a      	bls.n	8002322 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f00c f904 	bl	800e524 <realloc>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002332:	429a      	cmp	r2, r3
 8002334:	d23f      	bcs.n	80023b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	441a      	add	r2, r3
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f001 f8e8 	bl	8003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	3304      	adds	r3, #4
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	429a      	cmp	r2, r3
 800235c:	d20c      	bcs.n	8002378 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	441a      	add	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	440b      	add	r3, r1
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3301      	adds	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e7ec      	b.n	8002352 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	3b01      	subs	r3, #1
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	3b01      	subs	r3, #1
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	3220      	adds	r2, #32
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	3301      	adds	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b4:	e7ba      	b.n	800232c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80023b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3738      	adds	r7, #56	; 0x38
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0800e9dc 	.word	0x0800e9dc

080023dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	0800e8f4 	.word	0x0800e8f4

080023f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
  }
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a42      	ldr	r2, [pc, #264]	; (800255c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d068      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a40      	ldr	r2, [pc, #256]	; (8002560 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d061      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d05a      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d053      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04c      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d045      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a33      	ldr	r2, [pc, #204]	; (8002574 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d03e      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a31      	ldr	r2, [pc, #196]	; (8002578 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d037      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2e      	ldr	r2, [pc, #184]	; (800257c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d030      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d029      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	; (8002588 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d01b      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d014      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00d      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d006      	beq.n	8002528 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d109      	bne.n	800253c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253a:	e008      	b.n	800254e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40020010 	.word	0x40020010
 8002560:	40020028 	.word	0x40020028
 8002564:	40020040 	.word	0x40020040
 8002568:	40020058 	.word	0x40020058
 800256c:	40020070 	.word	0x40020070
 8002570:	40020088 	.word	0x40020088
 8002574:	400200a0 	.word	0x400200a0
 8002578:	400200b8 	.word	0x400200b8
 800257c:	40020410 	.word	0x40020410
 8002580:	40020428 	.word	0x40020428
 8002584:	40020440 	.word	0x40020440
 8002588:	40020458 	.word	0x40020458
 800258c:	40020470 	.word	0x40020470
 8002590:	40020488 	.word	0x40020488
 8002594:	400204a0 	.word	0x400204a0
 8002598:	400204b8 	.word	0x400204b8

0800259c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
      huart(&huart10), rind(0), twind(0), tfind(0){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <_ZN13STM32HardwareC1Ev+0x34>)
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	24000494 	.word	0x24000494

080025d4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f804 	bl	80025ea <_ZN13STM32Hardware10reset_rbufEv>
    }
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	4619      	mov	r1, r3
 8002600:	f009 fefc 	bl	800c3fc <HAL_UART_Receive_DMA>
    }
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_ZN13STM32Hardware4readEv>:

    int read(){
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff0d 	bl	8002440 <_ZN13STM32Hardware10getRdmaIndEv>
 8002626:	4603      	mov	r3, r0
 8002628:	429c      	cmp	r4, r3
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800263c:	1c59      	adds	r1, r3, #1
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800265c:	68fb      	ldr	r3, [r7, #12]
    }
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
	...

08002668 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002678:	2b20      	cmp	r3, #32
 800267a:	d108      	bne.n	800268e <_ZN13STM32Hardware5flushEv+0x26>
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <_ZN13STM32Hardware5flushEv+0xb4>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f083 0301 	eor.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <_ZN13STM32Hardware5flushEv+0x26>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <_ZN13STM32Hardware5flushEv+0x28>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03f      	beq.n	8002714 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d031      	beq.n	800270e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20a      	bcs.n	80026d0 <_ZN13STM32Hardware5flushEv+0x68>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	e006      	b.n	80026de <_ZN13STM32Hardware5flushEv+0x76>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026dc:	b29b      	uxth	r3, r3
 80026de:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	89fa      	ldrh	r2, [r7, #14]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f009 fdef 	bl	800c2d8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	4413      	add	r3, r2
 8002704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
      }
    }
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	24000614 	.word	0x24000614

08002720 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
      int n = length;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002736:	bfa8      	it	ge
 8002738:	f44f 7300 	movge.w	r3, #512	; 0x200
 800273c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002744:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4293      	cmp	r3, r2
 800274c:	bf28      	it	cs
 800274e:	4613      	movcs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002758:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fec7 	bl	800e4f8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	4413      	add	r3, r2
 8002774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	429a      	cmp	r2, r3
 8002784:	d00b      	beq.n	800279e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	18d1      	adds	r1, r2, r3
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	461a      	mov	r2, r3
 800279a:	f00b fead 	bl	800e4f8 <memcpy>
      }

      flush();
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff ff62 	bl	8002668 <_ZN13STM32Hardware5flushEv>
    }
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	f002 f9da 	bl	8004b6c <HAL_GetTick>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe ffdc 	bl	800178c <_ZN3ros3MsgC1Ev>
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800ea44 	.word	0x0800ea44

08002814 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002814:	b480      	push	{r7}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002828:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800282c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	4401      	add	r1, r0
 8002836:	b2d3      	uxtb	r3, r2
 8002838:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800283a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	0a02      	lsrs	r2, r0, #8
 8002848:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800284c:	0a0b      	lsrs	r3, r1, #8
 800284e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002850:	3101      	adds	r1, #1
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	4401      	add	r1, r0
 8002856:	b2d3      	uxtb	r3, r2
 8002858:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800285a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	0c02      	lsrs	r2, r0, #16
 8002868:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800286c:	0c0b      	lsrs	r3, r1, #16
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	3102      	adds	r1, #2
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	4401      	add	r1, r0
 8002876:	b2d3      	uxtb	r3, r2
 8002878:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800287a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	0e02      	lsrs	r2, r0, #24
 8002888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288c:	0e0b      	lsrs	r3, r1, #24
 800288e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002890:	3103      	adds	r1, #3
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	4401      	add	r1, r0
 8002896:	b2d3      	uxtb	r3, r2
 8002898:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800289a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	000a      	movs	r2, r1
 80028a8:	2300      	movs	r3, #0
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	3104      	adds	r1, #4
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	4401      	add	r1, r0
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80028b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	0a0a      	lsrs	r2, r1, #8
 80028c4:	2300      	movs	r3, #0
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	3105      	adds	r1, #5
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	4401      	add	r1, r0
 80028ce:	b2d3      	uxtb	r3, r2
 80028d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80028d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	0c0a      	lsrs	r2, r1, #16
 80028e0:	2300      	movs	r3, #0
 80028e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e4:	3106      	adds	r1, #6
 80028e6:	6838      	ldr	r0, [r7, #0]
 80028e8:	4401      	add	r1, r0
 80028ea:	b2d3      	uxtb	r3, r2
 80028ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80028ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	0e0a      	lsrs	r2, r1, #24
 80028fc:	2300      	movs	r3, #0
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	3107      	adds	r1, #7
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	4401      	add	r1, r0
 8002906:	b2d3      	uxtb	r3, r2
 8002908:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3308      	adds	r3, #8
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002916:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800291a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800291e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002920:	6838      	ldr	r0, [r7, #0]
 8002922:	4401      	add	r1, r0
 8002924:	b2d3      	uxtb	r3, r2
 8002926:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002928:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	0a02      	lsrs	r2, r0, #8
 8002936:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800293a:	0a0b      	lsrs	r3, r1, #8
 800293c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293e:	3101      	adds	r1, #1
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	4401      	add	r1, r0
 8002944:	b2d3      	uxtb	r3, r2
 8002946:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002948:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	0c02      	lsrs	r2, r0, #16
 8002956:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800295a:	0c0b      	lsrs	r3, r1, #16
 800295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295e:	3102      	adds	r1, #2
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	4401      	add	r1, r0
 8002964:	b2d3      	uxtb	r3, r2
 8002966:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	0e02      	lsrs	r2, r0, #24
 8002976:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800297a:	0e0b      	lsrs	r3, r1, #24
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	3103      	adds	r1, #3
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	4401      	add	r1, r0
 8002984:	b2d3      	uxtb	r3, r2
 8002986:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002988:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	000a      	movs	r2, r1
 8002996:	2300      	movs	r3, #0
 8002998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299a:	3104      	adds	r1, #4
 800299c:	6838      	ldr	r0, [r7, #0]
 800299e:	4401      	add	r1, r0
 80029a0:	b2d3      	uxtb	r3, r2
 80029a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80029a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	0a0a      	lsrs	r2, r1, #8
 80029b2:	2300      	movs	r3, #0
 80029b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b6:	3105      	adds	r1, #5
 80029b8:	6838      	ldr	r0, [r7, #0]
 80029ba:	4401      	add	r1, r0
 80029bc:	b2d3      	uxtb	r3, r2
 80029be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80029c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	0c0a      	lsrs	r2, r1, #16
 80029ce:	2300      	movs	r3, #0
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	3106      	adds	r1, #6
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	4401      	add	r1, r0
 80029d8:	b2d3      	uxtb	r3, r2
 80029da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80029dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	0e0a      	lsrs	r2, r1, #24
 80029ea:	2300      	movs	r3, #0
 80029ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ee:	3107      	adds	r1, #7
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	4401      	add	r1, r0
 80029f4:	b2d3      	uxtb	r3, r2
 80029f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3308      	adds	r3, #8
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a04:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	4401      	add	r1, r0
 8002a12:	b2d3      	uxtb	r3, r2
 8002a14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	0a02      	lsrs	r2, r0, #8
 8002a24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a28:	0a0b      	lsrs	r3, r1, #8
 8002a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2c:	3101      	adds	r1, #1
 8002a2e:	6838      	ldr	r0, [r7, #0]
 8002a30:	4401      	add	r1, r0
 8002a32:	b2d3      	uxtb	r3, r2
 8002a34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	0c02      	lsrs	r2, r0, #16
 8002a44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a48:	0c0b      	lsrs	r3, r1, #16
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	3102      	adds	r1, #2
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	4401      	add	r1, r0
 8002a52:	b2d3      	uxtb	r3, r2
 8002a54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002a56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	0e02      	lsrs	r2, r0, #24
 8002a64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a68:	0e0b      	lsrs	r3, r1, #24
 8002a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6c:	3103      	adds	r1, #3
 8002a6e:	6838      	ldr	r0, [r7, #0]
 8002a70:	4401      	add	r1, r0
 8002a72:	b2d3      	uxtb	r3, r2
 8002a74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	000a      	movs	r2, r1
 8002a84:	2300      	movs	r3, #0
 8002a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a88:	3104      	adds	r1, #4
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	4401      	add	r1, r0
 8002a8e:	b2d3      	uxtb	r3, r2
 8002a90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	0a0a      	lsrs	r2, r1, #8
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	3105      	adds	r1, #5
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	4401      	add	r1, r0
 8002aaa:	b2d3      	uxtb	r3, r2
 8002aac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	0c0a      	lsrs	r2, r1, #16
 8002abc:	2300      	movs	r3, #0
 8002abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac0:	3106      	adds	r1, #6
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	4401      	add	r1, r0
 8002ac6:	b2d3      	uxtb	r3, r2
 8002ac8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002aca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	0e0a      	lsrs	r2, r1, #24
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002adc:	3107      	adds	r1, #7
 8002ade:	6838      	ldr	r0, [r7, #0]
 8002ae0:	4401      	add	r1, r0
 8002ae2:	b2d3      	uxtb	r3, r2
 8002ae4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3308      	adds	r3, #8
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002aee:	4618      	mov	r0, r3
 8002af0:	372c      	adds	r7, #44	; 0x2c
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002afa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002afe:	b0eb      	sub	sp, #428	; 0x1ac
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002b06:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b1c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b20:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	461c      	mov	r4, r3
 8002b32:	4615      	mov	r5, r2
 8002b34:	ea40 0804 	orr.w	r8, r0, r4
 8002b38:	ea41 0905 	orr.w	r9, r1, r5
 8002b3c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b40:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	469a      	mov	sl, r3
 8002b58:	4693      	mov	fp, r2
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b66:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002b6a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002b6e:	ea40 0402 	orr.w	r4, r0, r2
 8002b72:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002b76:	430b      	orrs	r3, r1
 8002b78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b7c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002b80:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b84:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8c:	1c9a      	adds	r2, r3, #2
 8002b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002b9e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002bae:	464c      	mov	r4, r9
 8002bb0:	0423      	lsls	r3, r4, #16
 8002bb2:	4644      	mov	r4, r8
 8002bb4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002bb8:	4644      	mov	r4, r8
 8002bba:	0422      	lsls	r2, r4, #16
 8002bbc:	ea40 0402 	orr.w	r4, r0, r2
 8002bc0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002bca:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002bce:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bd2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bda:	1cda      	adds	r2, r3, #3
 8002bdc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002bec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002bf0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002bfc:	4623      	mov	r3, r4
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c04:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002c08:	4623      	mov	r3, r4
 8002c0a:	4303      	orrs	r3, r0
 8002c0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c10:	462b      	mov	r3, r5
 8002c12:	430b      	orrs	r3, r1
 8002c14:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c18:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002c1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c28:	1d1a      	adds	r2, r3, #4
 8002c2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002c3a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002c4a:	0023      	movs	r3, r4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	ea40 0402 	orr.w	r4, r0, r2
 8002c52:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002c56:	430b      	orrs	r3, r1
 8002c58:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c5c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002c60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c6c:	1d5a      	adds	r2, r3, #5
 8002c6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002c7e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002c8e:	0223      	lsls	r3, r4, #8
 8002c90:	2200      	movs	r2, #0
 8002c92:	ea40 0402 	orr.w	r4, r0, r2
 8002c96:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002ca0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002ca4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ca8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cb0:	1d9a      	adds	r2, r3, #6
 8002cb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cc2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002cd2:	0423      	lsls	r3, r4, #16
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	ea40 0402 	orr.w	r4, r0, r2
 8002cda:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ce4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002ce8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002cf0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf4:	1dda      	adds	r2, r3, #7
 8002cf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002d06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002d16:	0623      	lsls	r3, r4, #24
 8002d18:	2200      	movs	r2, #0
 8002d1a:	ea40 0402 	orr.w	r4, r0, r2
 8002d1e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d28:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002d2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002d30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d34:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d38:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002d3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d40:	3308      	adds	r3, #8
 8002d42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d56:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d6a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002d6e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002d72:	4623      	mov	r3, r4
 8002d74:	4303      	orrs	r3, r0
 8002d76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d82:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002d86:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d8a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002da4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002db4:	464c      	mov	r4, r9
 8002db6:	0223      	lsls	r3, r4, #8
 8002db8:	4644      	mov	r4, r8
 8002dba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002dbe:	4644      	mov	r4, r8
 8002dc0:	0222      	lsls	r2, r4, #8
 8002dc2:	ea40 0402 	orr.w	r4, r0, r2
 8002dc6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002dd0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002dd4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ddc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002df2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002e02:	464c      	mov	r4, r9
 8002e04:	0423      	lsls	r3, r4, #16
 8002e06:	4644      	mov	r4, r8
 8002e08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e0c:	4644      	mov	r4, r8
 8002e0e:	0422      	lsls	r2, r4, #16
 8002e10:	ea40 0402 	orr.w	r4, r0, r2
 8002e14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002e22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e2e:	1cda      	adds	r2, r3, #3
 8002e30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e34:	4413      	add	r3, r2
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002e48:	4623      	mov	r3, r4
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e50:	4623      	mov	r3, r4
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	4303      	orrs	r3, r0
 8002e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e64:	462b      	mov	r3, r5
 8002e66:	430b      	orrs	r3, r1
 8002e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002e70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e7c:	1d1a      	adds	r2, r3, #4
 8002e7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002e9e:	0023      	movs	r3, r4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	ea40 0402 	orr.w	r4, r0, r2
 8002ea6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002eb0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002eb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002eb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ebc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec0:	1d5a      	adds	r2, r3, #5
 8002ec2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ed2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002ee2:	0223      	lsls	r3, r4, #8
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	ea40 0402 	orr.w	r4, r0, r2
 8002eea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ef4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002ef8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002efc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f04:	1d9a      	adds	r2, r3, #6
 8002f06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002f26:	0423      	lsls	r3, r4, #16
 8002f28:	2200      	movs	r2, #0
 8002f2a:	ea40 0402 	orr.w	r4, r0, r2
 8002f2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002f32:	430b      	orrs	r3, r1
 8002f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002f3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f48:	1dda      	adds	r2, r3, #7
 8002f4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002f6a:	0623      	lsls	r3, r4, #24
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	ea40 0402 	orr.w	r4, r0, r2
 8002f72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002f76:	430b      	orrs	r3, r1
 8002f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002f80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002f84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f88:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002f8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002f90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f94:	3308      	adds	r3, #8
 8002f96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fa6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002faa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fb2:	4413      	add	r3, r2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fbe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fc2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fcc:	462b      	mov	r3, r5
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002fd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe8:	4413      	add	r3, r2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2200      	movs	r2, #0
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003000:	464c      	mov	r4, r9
 8003002:	0223      	lsls	r3, r4, #8
 8003004:	4644      	mov	r4, r8
 8003006:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800300a:	4644      	mov	r4, r8
 800300c:	0222      	lsls	r2, r4, #8
 800300e:	ea40 0402 	orr.w	r4, r0, r2
 8003012:	66bc      	str	r4, [r7, #104]	; 0x68
 8003014:	430b      	orrs	r3, r1
 8003016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003018:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800301c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003020:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003024:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2200      	movs	r2, #0
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
 8003038:	667a      	str	r2, [r7, #100]	; 0x64
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003046:	464c      	mov	r4, r9
 8003048:	0423      	lsls	r3, r4, #16
 800304a:	4644      	mov	r4, r8
 800304c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003050:	4644      	mov	r4, r8
 8003052:	0422      	lsls	r2, r4, #16
 8003054:	ea40 0402 	orr.w	r4, r0, r2
 8003058:	65bc      	str	r4, [r7, #88]	; 0x58
 800305a:	430b      	orrs	r3, r1
 800305c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003062:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003066:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800306a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800306e:	1cda      	adds	r2, r3, #3
 8003070:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2200      	movs	r2, #0
 800307c:	653b      	str	r3, [r7, #80]	; 0x50
 800307e:	657a      	str	r2, [r7, #84]	; 0x54
 8003080:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003084:	4623      	mov	r3, r4
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800308a:	4623      	mov	r3, r4
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003090:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003094:	4623      	mov	r3, r4
 8003096:	4303      	orrs	r3, r0
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
 800309a:	462b      	mov	r3, r5
 800309c:	430b      	orrs	r3, r1
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80030a4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80030a8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b0:	1d1a      	adds	r2, r3, #4
 80030b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80030cc:	0023      	movs	r3, r4
 80030ce:	2200      	movs	r2, #0
 80030d0:	ea40 0402 	orr.w	r4, r0, r2
 80030d4:	633c      	str	r4, [r7, #48]	; 0x30
 80030d6:	430b      	orrs	r3, r1
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80030de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030ea:	1d5a      	adds	r2, r3, #5
 80030ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2200      	movs	r2, #0
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003106:	0223      	lsls	r3, r4, #8
 8003108:	2200      	movs	r2, #0
 800310a:	ea40 0402 	orr.w	r4, r0, r2
 800310e:	623c      	str	r4, [r7, #32]
 8003110:	430b      	orrs	r3, r1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003118:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800311c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003120:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003124:	3306      	adds	r3, #6
 8003126:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	61fa      	str	r2, [r7, #28]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	69bc      	ldr	r4, [r7, #24]
 8003140:	0423      	lsls	r3, r4, #16
 8003142:	2200      	movs	r2, #0
 8003144:	ea40 0402 	orr.w	r4, r0, r2
 8003148:	613c      	str	r4, [r7, #16]
 800314a:	430b      	orrs	r3, r1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003152:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003156:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800315a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800315e:	3307      	adds	r3, #7
 8003160:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2200      	movs	r2, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	68bc      	ldr	r4, [r7, #8]
 800317a:	0623      	lsls	r3, r4, #24
 800317c:	2200      	movs	r2, #0
 800317e:	ea40 0402 	orr.w	r4, r0, r2
 8003182:	603c      	str	r4, [r7, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	e9d7 3400 	ldrd	r3, r4, [r7]
 800318c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003190:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003194:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003198:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800319c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a0:	3308      	adds	r3, #8
 80031a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80031a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80031aa:	4618      	mov	r0, r3
 80031ac:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031b6:	4770      	bx	lr

080031b8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	0800e918 	.word	0x0800e918

080031d4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	0800e930 	.word	0x0800e930

080031f0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fac6 	bl	800178c <_ZN3ros3MsgC1Ev>
 8003200:	4a08      	ldr	r2, [pc, #32]	; (8003224 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3308      	adds	r3, #8
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fada 	bl	80027c4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3328      	adds	r3, #40	; 0x28
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fad5 	bl	80027c4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	0800ea2c 	.word	0x0800ea2c

08003228 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 0008 	add.w	r0, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7ff fae6 	bl	8002814 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7ff fad9 	bl	8002814 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
      return offset;
 800326a:	68fb      	ldr	r3, [r7, #12]
    }
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0008 	add.w	r0, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4413      	add	r3, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7ff fc33 	bl	8002afa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	f7ff fc26 	bl	8002afa <_ZN13geometry_msgs7Vector311deserializeEPh>
 80032ae:	4602      	mov	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80032b6:	68fb      	ldr	r3, [r7, #12]
    }
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	0800e954 	.word	0x0800e954

080032dc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	0800e968 	.word	0x0800e968

080032f8 <_Z8callbackRKN13geometry_msgs5TwistE>:
		*speed = (double) enc
				/ (4 * resolution * reduction_ratio) * frequency;
}

void callback(const geometry_msgs::Twist &msg)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	Vx = msg.linear.x;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003306:	490a      	ldr	r1, [pc, #40]	; (8003330 <_Z8callbackRKN13geometry_msgs5TwistE+0x38>)
 8003308:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = msg.linear.y;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <_Z8callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003314:	e9c1 2300 	strd	r2, r3, [r1]
	W = msg.angular.z;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800331e:	4906      	ldr	r1, [pc, #24]	; (8003338 <_Z8callbackRKN13geometry_msgs5TwistE+0x40>)
 8003320:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	24000618 	.word	0x24000618
 8003334:	24000620 	.word	0x24000620
 8003338:	24000628 	.word	0x24000628

0800333c <_Z13Error_Handlerv>:
ros::Publisher pub("/ins_vel", &insVel);
//	std_msgs

/* UART Communication */
void Error_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003340:	b672      	cpsid	i
}
 8003342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003344:	e7fe      	b.n	8003344 <_Z13Error_Handlerv+0x8>
	...

08003348 <_ZL20MX_USART10_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART10_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800334c:	4b2c      	ldr	r3, [pc, #176]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800334e:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <_ZL20MX_USART10_UART_Initv+0xbc>)
 8003350:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8003352:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003358:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b27      	ldr	r3, [pc, #156]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003386:	2200      	movs	r2, #0
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 800338c:	2200      	movs	r2, #0
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8003390:	481b      	ldr	r0, [pc, #108]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 8003392:	f008 ff15 	bl	800c1c0 <HAL_UART_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <_ZL20MX_USART10_UART_Initv+0x62>
  {
    Error_Handler();
 80033a6:	f7ff ffc9 	bl	800333c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033aa:	2100      	movs	r1, #0
 80033ac:	4814      	ldr	r0, [pc, #80]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033ae:	f00a ff93 	bl	800e2d8 <HAL_UARTEx_SetTxFifoThreshold>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <_ZL20MX_USART10_UART_Initv+0x7e>
  {
    Error_Handler();
 80033c2:	f7ff ffbb 	bl	800333c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033c6:	2100      	movs	r1, #0
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033ca:	f00a ffc3 	bl	800e354 <HAL_UARTEx_SetRxFifoThreshold>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <_ZL20MX_USART10_UART_Initv+0x9a>
  {
    Error_Handler();
 80033de:	f7ff ffad 	bl	800333c <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80033e2:	4807      	ldr	r0, [pc, #28]	; (8003400 <_ZL20MX_USART10_UART_Initv+0xb8>)
 80033e4:	f00a ff3f 	bl	800e266 <HAL_UARTEx_DisableFifoMode>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <_ZL20MX_USART10_UART_Initv+0xb4>
  {
    Error_Handler();
 80033f8:	f7ff ffa0 	bl	800333c <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	24000494 	.word	0x24000494
 8003404:	40011c00 	.word	0x40011c00

08003408 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    if(huart == &huart10){
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_UART_ErrorCallback+0x5c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d120      	bne.n	800345a <HAL_UART_ErrorCallback+0x52>
// 		set velocity 0 before uart reinitialization
        Vx = 0.0;
 8003418:	4913      	ldr	r1, [pc, #76]	; (8003468 <HAL_UART_ErrorCallback+0x60>)
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9c1 2300 	strd	r2, r3, [r1]
        Vy = 0.0;
 8003426:	4911      	ldr	r1, [pc, #68]	; (800346c <HAL_UART_ErrorCallback+0x64>)
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9c1 2300 	strd	r2, r3, [r1]
        W = 0.0;
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <HAL_UART_ErrorCallback+0x68>)
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_DeInit(&huart10);
 8003442:	4808      	ldr	r0, [pc, #32]	; (8003464 <HAL_UART_ErrorCallback+0x5c>)
 8003444:	f008 ff0c 	bl	800c260 <HAL_UART_DeInit>
	MX_USART10_UART_Init();
 8003448:	f7ff ff7e 	bl	8003348 <_ZL20MX_USART10_UART_Initv>
	nh.getHardware()->init();
 800344c:	4809      	ldr	r0, [pc, #36]	; (8003474 <HAL_UART_ErrorCallback+0x6c>)
 800344e:	f000 f94d 	bl	80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff f8bd 	bl	80025d4 <_ZN13STM32Hardware4initEv>
    }
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	24000494 	.word	0x24000494
 8003468:	24000618 	.word	0x24000618
 800346c:	24000620 	.word	0x24000620
 8003470:	24000628 	.word	0x24000628
 8003474:	24000690 	.word	0x24000690

08003478 <HAL_UART_RxCpltCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
//{
//    nh.getHardware()->flush();
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003480:	4805      	ldr	r0, [pc, #20]	; (8003498 <HAL_UART_RxCpltCallback+0x20>)
 8003482:	f000 f933 	bl	80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f8ae 	bl	80025ea <_ZN13STM32Hardware10reset_rbufEv>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	24000690 	.word	0x24000690

0800349c <setup>:
void setup(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
    nh.initNode();
 80034a0:	4806      	ldr	r0, [pc, #24]	; (80034bc <setup+0x20>)
 80034a2:	f000 f92f 	bl	8003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <setup+0x24>)
 80034a8:	4804      	ldr	r0, [pc, #16]	; (80034bc <setup+0x20>)
 80034aa:	f000 f948 	bl	800373e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.advertise(pub);
 80034ae:	4905      	ldr	r1, [pc, #20]	; (80034c4 <setup+0x28>)
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <setup+0x20>)
 80034b2:	f000 f96f 	bl	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	24000690 	.word	0x24000690
 80034c0:	24000fd0 	.word	0x24000fd0
 80034c4:	24001030 	.word	0x24001030

080034c8 <loop>:
void loop(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <loop+0x10>)
 80034ce:	f000 f991 	bl	80037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	24000690 	.word	0x24000690

080034dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d80d      	bhi.n	800350c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	fa22 f103 	lsr.w	r1, r2, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	b2ca      	uxtb	r2, r1
 8003502:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e7ee      	b.n	80034ea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d811      	bhi.n	8003556 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	440a      	add	r2, r1
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	4611      	mov	r1, r2
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	00d2      	lsls	r2, r2, #3
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e7ea      	b.n	800352c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	0800ea74 	.word	0x0800ea74

08003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ffe8 	bl	8003564 <_ZN3ros15NodeHandleBase_C1Ev>
 8003594:	4a3a      	ldr	r2, [pc, #232]	; (8003680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fffc 	bl	800259c <_ZN13STM32HardwareC1Ev>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fc5e 	bl	8001e74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b18      	cmp	r3, #24
 80035c0:	d80b      	bhi.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3301      	adds	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e7f0      	b.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b18      	cmp	r3, #24
 80035e2:	d80a      	bhi.n	80035fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ec:	2100      	movs	r1, #0
 80035ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	e7f1      	b.n	80035de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d20a      	bcs.n	800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e7f0      	b.n	80035fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003626:	d20a      	bcs.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e7f0      	b.n	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	0800ea18 	.word	0x0800ea18

08003684 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	0800ea5c 	.word	0x0800ea5c

080036a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ffe5 	bl	8003684 <_ZN3ros11Subscriber_C1Ev>
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3310      	adds	r3, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fd93 	bl	80031f0 <_ZN13geometry_msgs5TwistC1Ev>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	659a      	str	r2, [r3, #88]	; 0x58
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  };
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	0800ea00 	.word	0x0800ea00

080036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
  }
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff5f 	bl	80025d4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b18      	cmp	r3, #24
 8003750:	dc19      	bgt.n	8003786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	f202 2222 	addw	r2, r2, #546	; 0x222
 800375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003762:	6839      	ldr	r1, [r7, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f202 2222 	addw	r2, r2, #546	; 0x222
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	605a      	str	r2, [r3, #4]
        return true;
 800377a:	2301      	movs	r3, #1
 800377c:	e004      	b.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e7e2      	b.n	800374c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003786:	2300      	movs	r3, #0
  }
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b18      	cmp	r3, #24
 80037a6:	dc1e      	bgt.n	80037e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	60da      	str	r2, [r3, #12]
        return true;
 80037da:	2301      	movs	r3, #1
 80037dc:	e004      	b.n	80037e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e7dd      	b.n	80037a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80037e6:	2300      	movs	r3, #0
  }
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe ffd3 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003806:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003816:	4293      	cmp	r3, r2
 8003818:	d903      	bls.n	8003822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d903      	bls.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003846:	2b00      	cmp	r3, #0
 8003848:	d014      	beq.n	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe ffac 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003860:	429a      	cmp	r2, r3
 8003862:	bf8c      	ite	hi
 8003864:	2301      	movhi	r3, #1
 8003866:	2300      	movls	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800386e:	f06f 0301 	mvn.w	r3, #1
 8003872:	e194      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fec7 	bl	800260c <_ZN13STM32Hardware4readEv>
 800387e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f2c0 8174 	blt.w	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800389e:	2b07      	cmp	r3, #7
 80038a0:	d11e      	bne.n	80038e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	b2d1      	uxtb	r1, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	460a      	mov	r2, r1
 80038ba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80038c4:	1e5a      	subs	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1b4      	bne.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80038de:	e7af      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d128      	bne.n	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2bff      	cmp	r3, #255	; 0xff
 80038ee:	d10d      	bne.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f103 0214 	add.w	r2, r3, #20
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800390a:	e799      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff4b 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003916:	4602      	mov	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	bf8c      	ite	hi
 8003924:	2301      	movhi	r3, #1
 8003926:	2300      	movls	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d088      	beq.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	e130      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003942:	2b01      	cmp	r3, #1
 8003944:	d118      	bne.n	8003978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2bfe      	cmp	r3, #254	; 0xfe
 800394a:	d107      	bne.n	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800395a:	e771      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800396a:	2b00      	cmp	r3, #0
 800396c:	f47f af68 	bne.w	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f918 	bl	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003976:	e763      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800397e:	2b02      	cmp	r3, #2
 8003980:	d113      	bne.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80039a8:	e74a      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d110      	bne.n	80039d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039d4:	e734      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d116      	bne.n	8003a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80039e6:	425a      	negs	r2, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	bf58      	it	pl
 80039ee:	4253      	negpl	r3, r2
 80039f0:	2bff      	cmp	r3, #255	; 0xff
 80039f2:	d107      	bne.n	8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a02:	e71d      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a0c:	e718      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d10f      	bne.n	8003a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003a36:	e703      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d117      	bne.n	8003a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2207      	movs	r2, #7
 8003a58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f aeec 	bne.w	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a70:	e6e6      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	f47f aee1 	bne.w	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003a8c:	425a      	negs	r2, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	bf58      	it	pl
 8003a94:	4253      	negpl	r3, r2
 8003a96:	2bff      	cmp	r3, #255	; 0xff
 8003a98:	f47f aed2 	bne.w	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d110      	bne.n	8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f87d 	bl	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f898 	bl	8003be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e06a      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ace:	2b0a      	cmp	r3, #10
 8003ad0:	d107      	bne.n	8003ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f960 	bl	8003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003ae0:	e6ae      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d10e      	bne.n	8003b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fe faef 	bl	80020de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003b08:	e69a      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b10:	2b0b      	cmp	r3, #11
 8003b12:	d104      	bne.n	8003b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003b1c:	e690      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b24:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f43f ae84 	beq.w	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b3e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b52:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4798      	blx	r3
    while (true)
 8003b6e:	e667      	b.n	8003840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003b70:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d906      	bls.n	8003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f809 	bl	8003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003b9c:	2300      	movs	r3, #0
  }
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd fdfa 	bl	80017ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f107 020c 	add.w	r2, r7, #12
 8003bc2:	210a      	movs	r1, #10
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
    rt_time = hardware_.time();
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fded 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003be2:	b590      	push	{r4, r7, lr}
 8003be4:	b08b      	sub	sp, #44	; 0x2c
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003bea:	f107 030c 	add.w	r3, r7, #12
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd fecc 	bl	800198c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b18      	cmp	r3, #24
 8003bfc:	dc63      	bgt.n	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d056      	beq.n	8003cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4798      	blx	r3
 8003c60:	4603      	mov	r3, r0
 8003c62:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	4798      	blx	r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c96:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681c      	ldr	r4, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe fbba 	bl	8002426 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	e798      	b.n	8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b18      	cmp	r3, #24
 8003cce:	dc5f      	bgt.n	8003d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d053      	beq.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4798      	blx	r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4608      	mov	r0, r1
 8003d48:	4798      	blx	r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d52:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681c      	ldr	r4, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3304      	adds	r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4798      	blx	r3
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	461a      	mov	r2, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e79c      	b.n	8003cca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003d98:	bf00      	nop
 8003d9a:	372c      	adds	r7, #44	; 0x2c
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}

08003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fcfc 	bl	80017ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fcf7 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fd5b 	bl	800188c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	4915      	ldr	r1, [pc, #84]	; (8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ddc:	fba1 1303 	umull	r1, r3, r1, r3
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003dec:	fba3 0302 	umull	r0, r3, r3, r2
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df6:	fb00 f303 	mul.w	r3, r0, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	440b      	add	r3, r1
 8003e04:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8a6 	bl	8003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fcc7 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	10624dd3 	.word	0x10624dd3
 8003e34:	000f4240 	.word	0x000f4240

08003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b63      	cmp	r3, #99	; 0x63
 8003e48:	dd09      	ble.n	8003e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003e50:	f083 0301 	eor.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e079      	b.n	8003f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003e6a:	3207      	adds	r2, #7
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22fe      	movs	r2, #254	; 0xfe
 8003e80:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003eaa:	4413      	add	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	121b      	asrs	r3, r3, #8
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	3306      	adds	r3, #6
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dc0d      	bgt.n	8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e7ec      	b.n	8003eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3307      	adds	r3, #7
 8003f04:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	425a      	negs	r2, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	bf58      	it	pl
 8003f10:	4253      	negpl	r3, r2
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	6179      	str	r1, [r7, #20]
 8003f1a:	43d2      	mvns	r2, r2
 8003f1c:	b2d1      	uxtb	r1, r2
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	460a      	mov	r2, r1
 8003f24:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2e:	dc0a      	bgt.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1d18      	adds	r0, r3, #4
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fe fbef 	bl	8002720 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	e005      	b.n	8003f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f46:	4905      	ldr	r1, [pc, #20]	; (8003f5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f849 	bl	8003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	0800e98c 	.word	0x0800e98c

08003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fc1c 	bl	80027ac <_ZN13STM32Hardware4timeEv>
 8003f74:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4915      	ldr	r1, [pc, #84]	; (8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003f7e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f82:	099b      	lsrs	r3, r3, #6
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	1e5a      	subs	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003f96:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fa0:	fb00 f303 	mul.w	r3, r0, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003fa8:	fb02 f303 	mul.w	r3, r2, r3
 8003fac:	1aca      	subs	r2, r1, r3
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fc fb2c 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	10624dd3 	.word	0x10624dd3
 8003fd8:	000f4240 	.word	0x000f4240
 8003fdc:	3b9aca00 	.word	0x3b9aca00

08003fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	2103      	movs	r1, #3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f804 	bl	8003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	460b      	mov	r3, r1
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fe80 	bl	8001d14 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004014:	7afb      	ldrb	r3, [r7, #11]
 8004016:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f107 0214 	add.w	r2, r7, #20
 8004026:	2107      	movs	r1, #7
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	4798      	blx	r3
  }
 800402c:	bf00      	nop
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_Z41__static_initialization_and_destruction_0ii>:
	insVel.angular.z = rW;
	run_inter0 ++;
	pub.publish(&insVel);

	run_inter1 ++;
}
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d116      	bne.n	8004072 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist insVel;
 800404e:	480b      	ldr	r0, [pc, #44]	; (800407c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004050:	f7ff f8ce 	bl	80031f0 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004054:	480a      	ldr	r0, [pc, #40]	; (8004080 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004056:	f7ff fa95 	bl	8003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 800405a:	2301      	movs	r3, #1
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004062:	f7ff fb1f 	bl	80036a4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("/ins_vel", &insVel);
 8004066:	2300      	movs	r3, #0
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800406a:	4909      	ldr	r1, [pc, #36]	; (8004090 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800406c:	4809      	ldr	r0, [pc, #36]	; (8004094 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800406e:	f7fe f9c3 	bl	80023f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	24000648 	.word	0x24000648
 8004080:	24000690 	.word	0x24000690
 8004084:	080032f9 	.word	0x080032f9
 8004088:	0800e9c8 	.word	0x0800e9c8
 800408c:	24000fd0 	.word	0x24000fd0
 8004090:	0800e9d0 	.word	0x0800e9d0
 8004094:	24001030 	.word	0x24001030

08004098 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3310      	adds	r3, #16
 80040a6:	6839      	ldr	r1, [r7, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f8e3 	bl	8003274 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	3210      	adds	r2, #16
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
  }
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80040ce:	4618      	mov	r0, r3
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3310      	adds	r3, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff f8ea 	bl	80032c0 <_ZN13geometry_msgs5Twist7getTypeEv>
 80040ec:	4603      	mov	r3, r0
  }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3310      	adds	r3, #16
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f8ea 	bl	80032dc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004108:	4603      	mov	r3, r0
  }
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    return configured_;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_GLOBAL__sub_I_count>:
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
 8004130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004134:	2001      	movs	r0, #1
 8004136:	f7ff ff7d 	bl	8004034 <_Z41__static_initialization_and_destruction_0ii>
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_MspInit+0x3c>)
 8004144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004148:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <HAL_MspInit+0x3c>)
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_MspInit+0x3c>)
 8004154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	2005      	movs	r0, #5
 8004166:	f000 fe0c 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800416a:	2005      	movs	r0, #5
 800416c:	f000 fe23 	bl	8004db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	58024400 	.word	0x58024400

0800417c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d117      	bne.n	80041be <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418e:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 8004190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004194:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 80041a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041ac:	2200      	movs	r2, #0
 80041ae:	2100      	movs	r1, #0
 80041b0:	201c      	movs	r0, #28
 80041b2:	f000 fde6 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041b6:	201c      	movs	r0, #28
 80041b8:	f000 fdfd 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80041bc:	e01b      	b.n	80041f6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <HAL_TIM_Base_MspInit+0x88>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d116      	bne.n	80041f6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 80041ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 80041d0:	f043 0308 	orr.w	r3, r3, #8
 80041d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_TIM_Base_MspInit+0x84>)
 80041da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	2032      	movs	r0, #50	; 0x32
 80041ec:	f000 fdc9 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80041f0:	2032      	movs	r0, #50	; 0x32
 80041f2:	f000 fde0 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
 8004204:	40000c00 	.word	0x40000c00

08004208 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b090      	sub	sp, #64	; 0x40
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a69      	ldr	r2, [pc, #420]	; (80043cc <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d12e      	bne.n	8004288 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800422a:	4b69      	ldr	r3, [pc, #420]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800422c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004230:	4a67      	ldr	r2, [pc, #412]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800423c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004248:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800424a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800424e:	4a60      	ldr	r2, [pc, #384]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004258:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800425a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004266:	23c0      	movs	r3, #192	; 0xc0
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	2302      	movs	r3, #2
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004272:	2300      	movs	r3, #0
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004276:	2302      	movs	r3, #2
 8004278:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800427e:	4619      	mov	r1, r3
 8004280:	4854      	ldr	r0, [pc, #336]	; (80043d4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004282:	f003 fdb1 	bl	8007de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004286:	e09c      	b.n	80043c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12f      	bne.n	80042f2 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004292:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004298:	4a4d      	ldr	r2, [pc, #308]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b6:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042b8:	f043 0308 	orr.w	r3, r3, #8
 80042bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80042ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042dc:	2300      	movs	r3, #0
 80042de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042e0:	2302      	movs	r3, #2
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e8:	4619      	mov	r1, r3
 80042ea:	483c      	ldr	r0, [pc, #240]	; (80043dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80042ec:	f003 fd7c 	bl	8007de8 <HAL_GPIO_Init>
}
 80042f0:	e067      	b.n	80043c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d12e      	bne.n	800435a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80042fc:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80042fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004302:	4a33      	ldr	r2, [pc, #204]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004308:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800430c:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800430e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800431c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004320:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004322:	f043 0320 	orr.w	r3, r3, #32
 8004326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800432c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004338:	2303      	movs	r3, #3
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004344:	2300      	movs	r3, #0
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004348:	230d      	movs	r3, #13
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800434c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004350:	4619      	mov	r1, r3
 8004352:	4824      	ldr	r0, [pc, #144]	; (80043e4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8004354:	f003 fd48 	bl	8007de8 <HAL_GPIO_Init>
}
 8004358:	e033      	b.n	80043c2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM24)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d12e      	bne.n	80043c2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004366:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004370:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004376:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004388:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800438a:	f043 0320 	orr.w	r3, r3, #32
 800438e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80043a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2302      	movs	r3, #2
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2300      	movs	r3, #0
 80043b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80043b2:	230e      	movs	r3, #14
 80043b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ba:	4619      	mov	r1, r3
 80043bc:	4809      	ldr	r0, [pc, #36]	; (80043e4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80043be:	f003 fd13 	bl	8007de8 <HAL_GPIO_Init>
}
 80043c2:	bf00      	nop
 80043c4:	3740      	adds	r7, #64	; 0x40
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40000400 	.word	0x40000400
 80043d0:	58024400 	.word	0x58024400
 80043d4:	58020000 	.word	0x58020000
 80043d8:	40000800 	.word	0x40000800
 80043dc:	58020c00 	.word	0x58020c00
 80043e0:	4000e000 	.word	0x4000e000
 80043e4:	58021400 	.word	0x58021400
 80043e8:	4000e400 	.word	0x4000e400

080043ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a16      	ldr	r2, [pc, #88]	; (8004454 <HAL_TIM_PWM_MspInit+0x68>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10f      	bne.n	800441e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 8004400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 8004406:	f043 0302 	orr.w	r3, r3, #2
 800440a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 8004410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800441c:	e013      	b.n	8004446 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a0e      	ldr	r2, [pc, #56]	; (800445c <HAL_TIM_PWM_MspInit+0x70>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10e      	bne.n	8004446 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 800442a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_TIM_PWM_MspInit+0x6c>)
 800443a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010400 	.word	0x40010400
 8004458:	58024400 	.word	0x58024400
 800445c:	40014000 	.word	0x40014000

08004460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a35      	ldr	r2, [pc, #212]	; (8004554 <HAL_TIM_MspPostInit+0xf4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d120      	bne.n	80044c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 8004484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004488:	4a33      	ldr	r2, [pc, #204]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 8004494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ae:	2300      	movs	r3, #0
 80044b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044b2:	2303      	movs	r3, #3
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b6:	f107 0314 	add.w	r3, r7, #20
 80044ba:	4619      	mov	r1, r3
 80044bc:	4827      	ldr	r0, [pc, #156]	; (800455c <HAL_TIM_MspPostInit+0xfc>)
 80044be:	f003 fc93 	bl	8007de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80044c2:	e042      	b.n	800454a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_TIM_MspPostInit+0x100>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d13d      	bne.n	800454a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d4:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044de:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f2:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <HAL_TIM_MspPostInit+0xf8>)
 80044fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800450a:	2320      	movs	r3, #32
 800450c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	2302      	movs	r3, #2
 8004510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800451a:	2304      	movs	r3, #4
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	4619      	mov	r1, r3
 8004524:	480f      	ldr	r0, [pc, #60]	; (8004564 <HAL_TIM_MspPostInit+0x104>)
 8004526:	f003 fc5f 	bl	8007de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800452a:	2308      	movs	r3, #8
 800452c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452e:	2302      	movs	r3, #2
 8004530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800453a:	2304      	movs	r3, #4
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453e:	f107 0314 	add.w	r3, r7, #20
 8004542:	4619      	mov	r1, r3
 8004544:	4808      	ldr	r0, [pc, #32]	; (8004568 <HAL_TIM_MspPostInit+0x108>)
 8004546:	f003 fc4f 	bl	8007de8 <HAL_GPIO_Init>
}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40010400 	.word	0x40010400
 8004558:	58024400 	.word	0x58024400
 800455c:	58020800 	.word	0x58020800
 8004560:	40014000 	.word	0x40014000
 8004564:	58021000 	.word	0x58021000
 8004568:	58020000 	.word	0x58020000

0800456c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b0b6      	sub	sp, #216	; 0xd8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	22b4      	movs	r2, #180	; 0xb4
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f009 ffc1 	bl	800e514 <memset>
  if(huart->Instance==USART10)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a62      	ldr	r2, [pc, #392]	; (8004720 <HAL_UART_MspInit+0x1b4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	f040 80bc 	bne.w	8004716 <HAL_UART_MspInit+0x1aa>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800459e:	2301      	movs	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 fe77 	bl	80092a0 <HAL_RCCEx_PeriphCLKConfig>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045b8:	f7fd f8d2 	bl	8001760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c2:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045cc:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045da:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	4a50      	ldr	r2, [pc, #320]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045e2:	f043 0310 	orr.w	r3, r3, #16
 80045e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ea:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <HAL_UART_MspInit+0x1b8>)
 80045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045f8:	2304      	movs	r3, #4
 80045fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8004610:	2304      	movs	r3, #4
 8004612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004616:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800461a:	4619      	mov	r1, r3
 800461c:	4842      	ldr	r0, [pc, #264]	; (8004728 <HAL_UART_MspInit+0x1bc>)
 800461e:	f003 fbe3 	bl	8007de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004622:	2308      	movs	r3, #8
 8004624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	2302      	movs	r3, #2
 800462a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 800463a:	230b      	movs	r3, #11
 800463c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004640:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004644:	4619      	mov	r1, r3
 8004646:	4838      	ldr	r0, [pc, #224]	; (8004728 <HAL_UART_MspInit+0x1bc>)
 8004648:	f003 fbce 	bl	8007de8 <HAL_GPIO_Init>

    /* USART10 DMA Init */
    /* USART10_RX Init */
    hdma_usart10_rx.Instance = DMA1_Stream0;
 800464c:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_UART_MspInit+0x1c0>)
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_UART_MspInit+0x1c4>)
 8004650:	601a      	str	r2, [r3, #0]
    hdma_usart10_rx.Init.Request = DMA_REQUEST_USART10_RX;
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004654:	2276      	movs	r2, #118	; 0x76
 8004656:	605a      	str	r2, [r3, #4]
    hdma_usart10_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004658:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_UART_MspInit+0x1c0>)
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]
    hdma_usart10_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004660:	2200      	movs	r2, #0
 8004662:	60da      	str	r2, [r3, #12]
    hdma_usart10_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004664:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800466a:	611a      	str	r2, [r3, #16]
    hdma_usart10_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800466c:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_UART_MspInit+0x1c0>)
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
    hdma_usart10_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004672:	4b2e      	ldr	r3, [pc, #184]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
    hdma_usart10_rx.Init.Mode = DMA_CIRCULAR;
 8004678:	4b2c      	ldr	r3, [pc, #176]	; (800472c <HAL_UART_MspInit+0x1c0>)
 800467a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467e:	61da      	str	r2, [r3, #28]
    hdma_usart10_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004686:	621a      	str	r2, [r3, #32]
    hdma_usart10_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_UART_MspInit+0x1c0>)
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_rx) != HAL_OK)
 800468e:	4827      	ldr	r0, [pc, #156]	; (800472c <HAL_UART_MspInit+0x1c0>)
 8004690:	f000 fbba 	bl	8004e08 <HAL_DMA_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800469a:	f7fd f861 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart10_rx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a22      	ldr	r2, [pc, #136]	; (800472c <HAL_UART_MspInit+0x1c0>)
 80046a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80046a4:	4a21      	ldr	r2, [pc, #132]	; (800472c <HAL_UART_MspInit+0x1c0>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10_TX Init */
    hdma_usart10_tx.Instance = DMA1_Stream1;
 80046aa:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_UART_MspInit+0x1cc>)
 80046ae:	601a      	str	r2, [r3, #0]
    hdma_usart10_tx.Init.Request = DMA_REQUEST_USART10_TX;
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046b2:	2277      	movs	r2, #119	; 0x77
 80046b4:	605a      	str	r2, [r3, #4]
    hdma_usart10_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b6:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	609a      	str	r2, [r3, #8]
    hdma_usart10_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046bc:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    hdma_usart10_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c8:	611a      	str	r2, [r3, #16]
    hdma_usart10_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	615a      	str	r2, [r3, #20]
    hdma_usart10_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d0:	4b18      	ldr	r3, [pc, #96]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	619a      	str	r2, [r3, #24]
    hdma_usart10_tx.Init.Mode = DMA_NORMAL;
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046d8:	2200      	movs	r2, #0
 80046da:	61da      	str	r2, [r3, #28]
    hdma_usart10_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046e2:	621a      	str	r2, [r3, #32]
    hdma_usart10_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart10_tx) != HAL_OK)
 80046ea:	4812      	ldr	r0, [pc, #72]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046ec:	f000 fb8c 	bl	8004e08 <HAL_DMA_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_UART_MspInit+0x18e>
    {
      Error_Handler();
 80046f6:	f7fd f833 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart10_tx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78
 8004700:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <HAL_UART_MspInit+0x1c8>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART10 interrupt Init */
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	209c      	movs	r0, #156	; 0x9c
 800470c:	f000 fb39 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8004710:	209c      	movs	r0, #156	; 0x9c
 8004712:	f000 fb50 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8004716:	bf00      	nop
 8004718:	37d8      	adds	r7, #216	; 0xd8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40011c00 	.word	0x40011c00
 8004724:	58024400 	.word	0x58024400
 8004728:	58021000 	.word	0x58021000
 800472c:	24000524 	.word	0x24000524
 8004730:	40020010 	.word	0x40020010
 8004734:	2400059c 	.word	0x2400059c
 8004738:	40020028 	.word	0x40020028

0800473c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART10)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0f      	ldr	r2, [pc, #60]	; (8004788 <HAL_UART_MspDeInit+0x4c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d118      	bne.n	8004780 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART10_MspDeInit 0 */

  /* USER CODE END USART10_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART10_CLK_DISABLE();
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_UART_MspDeInit+0x50>)
 8004750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004754:	4a0d      	ldr	r2, [pc, #52]	; (800478c <HAL_UART_MspDeInit+0x50>)
 8004756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_3);
 800475e:	210c      	movs	r1, #12
 8004760:	480b      	ldr	r0, [pc, #44]	; (8004790 <HAL_UART_MspDeInit+0x54>)
 8004762:	f003 fce9 	bl	8008138 <HAL_GPIO_DeInit>

    /* USART10 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fea6 	bl	80054bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fea1 	bl	80054bc <HAL_DMA_DeInit>

    /* USART10 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART10_IRQn);
 800477a:	209c      	movs	r0, #156	; 0x9c
 800477c:	f000 fb29 	bl	8004dd2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART10_MspDeInit 1 */

  /* USER CODE END USART10_MspDeInit 1 */
  }

}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40011c00 	.word	0x40011c00
 800478c:	58024400 	.word	0x58024400
 8004790:	58021000 	.word	0x58021000

08004794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <NMI_Handler+0x4>

0800479a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800479e:	e7fe      	b.n	800479e <HardFault_Handler+0x4>

080047a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047a4:	e7fe      	b.n	80047a4 <MemManage_Handler+0x4>

080047a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047aa:	e7fe      	b.n	80047aa <BusFault_Handler+0x4>

080047ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <UsageFault_Handler+0x4>

080047b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047e0:	f000 f9b0 	bl	8004b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047e4:	bf00      	nop
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_rx);
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <DMA1_Stream0_IRQHandler+0x10>)
 80047fe:	f001 ffe1 	bl	80067c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	24000524 	.word	0x24000524

0800480c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart10_tx);
 8004810:	4802      	ldr	r0, [pc, #8]	; (800481c <DMA1_Stream1_IRQHandler+0x10>)
 8004812:	f001 ffd7 	bl	80067c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2400059c 	.word	0x2400059c

08004820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004824:	4802      	ldr	r0, [pc, #8]	; (8004830 <TIM2_IRQHandler+0x10>)
 8004826:	f006 fbdd 	bl	800afe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	24000234 	.word	0x24000234

08004834 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004838:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800483c:	f003 fd97 	bl	800836e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004840:	bf00      	nop
 8004842:	bd80      	pop	{r7, pc}

08004844 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004848:	4802      	ldr	r0, [pc, #8]	; (8004854 <TIM5_IRQHandler+0x10>)
 800484a:	f006 fbcb 	bl	800afe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	24000318 	.word	0x24000318

08004858 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 800485c:	4802      	ldr	r0, [pc, #8]	; (8004868 <USART10_IRQHandler+0x10>)
 800485e:	f007 fe23 	bl	800c4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	24000494 	.word	0x24000494

0800486c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
	return 1;
 8004870:	2301      	movs	r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_kill>:

int _kill(int pid, int sig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004886:	f009 fe0d 	bl	800e4a4 <__errno>
 800488a:	4603      	mov	r3, r0
 800488c:	2216      	movs	r2, #22
 800488e:	601a      	str	r2, [r3, #0]
	return -1;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_exit>:

void _exit (int status)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048a4:	f04f 31ff 	mov.w	r1, #4294967295
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ffe7 	bl	800487c <_kill>
	while (1) {}		/* Make sure we hang here */
 80048ae:	e7fe      	b.n	80048ae <_exit+0x12>

080048b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048b8:	4a14      	ldr	r2, [pc, #80]	; (800490c <_sbrk+0x5c>)
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <_sbrk+0x60>)
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <_sbrk+0x64>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <_sbrk+0x64>)
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <_sbrk+0x68>)
 80048d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <_sbrk+0x64>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d207      	bcs.n	80048f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048e0:	f009 fde0 	bl	800e4a4 <__errno>
 80048e4:	4603      	mov	r3, r0
 80048e6:	220c      	movs	r2, #12
 80048e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	e009      	b.n	8004904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <_sbrk+0x64>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_sbrk+0x64>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	4a05      	ldr	r2, [pc, #20]	; (8004914 <_sbrk+0x64>)
 8004900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	24050000 	.word	0x24050000
 8004910:	00000400 	.word	0x00000400
 8004914:	24001044 	.word	0x24001044
 8004918:	24001060 	.word	0x24001060

0800491c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004920:	4b32      	ldr	r3, [pc, #200]	; (80049ec <SystemInit+0xd0>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	4a31      	ldr	r2, [pc, #196]	; (80049ec <SystemInit+0xd0>)
 8004928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800492c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004930:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <SystemInit+0xd4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2b06      	cmp	r3, #6
 800493a:	d807      	bhi.n	800494c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <SystemInit+0xd4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 030f 	bic.w	r3, r3, #15
 8004944:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <SystemInit+0xd4>)
 8004946:	f043 0307 	orr.w	r3, r3, #7
 800494a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800494c:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <SystemInit+0xd8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <SystemInit+0xd8>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <SystemInit+0xd8>)
 800495a:	2200      	movs	r2, #0
 800495c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800495e:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <SystemInit+0xd8>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4924      	ldr	r1, [pc, #144]	; (80049f4 <SystemInit+0xd8>)
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <SystemInit+0xdc>)
 8004966:	4013      	ands	r3, r2
 8004968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <SystemInit+0xd4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <SystemInit+0xd4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 030f 	bic.w	r3, r3, #15
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <SystemInit+0xd4>)
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <SystemInit+0xd8>)
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <SystemInit+0xd8>)
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <SystemInit+0xd8>)
 8004994:	2200      	movs	r2, #0
 8004996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004998:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <SystemInit+0xd8>)
 800499a:	4a18      	ldr	r2, [pc, #96]	; (80049fc <SystemInit+0xe0>)
 800499c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800499e:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <SystemInit+0xd8>)
 80049a0:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <SystemInit+0xe4>)
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <SystemInit+0xd8>)
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <SystemInit+0xe8>)
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <SystemInit+0xd8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <SystemInit+0xd8>)
 80049b2:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <SystemInit+0xe8>)
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <SystemInit+0xd8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <SystemInit+0xd8>)
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <SystemInit+0xe8>)
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <SystemInit+0xd8>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <SystemInit+0xd8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <SystemInit+0xd8>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <SystemInit+0xd8>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <SystemInit+0xec>)
 80049dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80049e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	52002000 	.word	0x52002000
 80049f4:	58024400 	.word	0x58024400
 80049f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80049fc:	02020200 	.word	0x02020200
 8004a00:	01ff0000 	.word	0x01ff0000
 8004a04:	01010280 	.word	0x01010280
 8004a08:	52004000 	.word	0x52004000

08004a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a10:	f7ff ff84 	bl	800491c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a14:	480c      	ldr	r0, [pc, #48]	; (8004a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a16:	490d      	ldr	r1, [pc, #52]	; (8004a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a18:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a1c:	e002      	b.n	8004a24 <LoopCopyDataInit>

08004a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a22:	3304      	adds	r3, #4

08004a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a28:	d3f9      	bcc.n	8004a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a2c:	4c0a      	ldr	r4, [pc, #40]	; (8004a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a30:	e001      	b.n	8004a36 <LoopFillZerobss>

08004a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a34:	3204      	adds	r2, #4

08004a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a38:	d3fb      	bcc.n	8004a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a3a:	f009 fd39 	bl	800e4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a3e:	f7fb ff7d 	bl	800093c <main>
  bx  lr
 8004a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a4c:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8004a50:	0800eb4c 	.word	0x0800eb4c
  ldr r2, =_sbss
 8004a54:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8004a58:	2400105c 	.word	0x2400105c

08004a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a5c:	e7fe      	b.n	8004a5c <ADC3_IRQHandler>
	...

08004a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a66:	2003      	movs	r0, #3
 8004a68:	f000 f980 	bl	8004d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a6c:	f004 fa42 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_Init+0x68>)
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	4913      	ldr	r1, [pc, #76]	; (8004acc <HAL_Init+0x6c>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_Init+0x68>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <HAL_Init+0x6c>)
 8004a94:	5cd3      	ldrb	r3, [r2, r3]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <HAL_Init+0x70>)
 8004aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aa4:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <HAL_Init+0x74>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004aaa:	200f      	movs	r0, #15
 8004aac:	f000 f814 	bl	8004ad8 <HAL_InitTick>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e002      	b.n	8004ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004aba:	f7ff fb3f 	bl	800413c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	0800eaf8 	.word	0x0800eaf8
 8004ad0:	240001a4 	.word	0x240001a4
 8004ad4:	240001a0 	.word	0x240001a0

08004ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_InitTick+0x60>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e021      	b.n	8004b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_InitTick+0x64>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_InitTick+0x60>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f973 	bl	8004dee <HAL_SYSTICK_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00e      	b.n	8004b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d80a      	bhi.n	8004b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b18:	2200      	movs	r2, #0
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f000 f92f 	bl	8004d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b24:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <HAL_InitTick+0x68>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	240001ac 	.word	0x240001ac
 8004b3c:	240001a0 	.word	0x240001a0
 8004b40:	240001a8 	.word	0x240001a8

08004b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_IncTick+0x20>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x24>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4413      	add	r3, r2
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_IncTick+0x24>)
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	240001ac 	.word	0x240001ac
 8004b68:	24001048 	.word	0x24001048

08004b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_GetTick+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	24001048 	.word	0x24001048

08004b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bb2:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	60d3      	str	r3, [r2, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	05fa0000 	.word	0x05fa0000

08004bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 0307 	and.w	r3, r3, #7
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db0b      	blt.n	8004c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfa:	88fb      	ldrh	r3, [r7, #6]
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4907      	ldr	r1, [pc, #28]	; (8004c20 <__NVIC_EnableIRQ+0x38>)
 8004c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2001      	movs	r0, #1
 8004c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e100 	.word	0xe000e100

08004c24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db12      	blt.n	8004c5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	490a      	ldr	r1, [pc, #40]	; (8004c68 <__NVIC_DisableIRQ+0x44>)
 8004c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2001      	movs	r0, #1
 8004c46:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c50:	f3bf 8f4f 	dsb	sy
}
 8004c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c56:	f3bf 8f6f 	isb	sy
}
 8004c5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db0a      	blt.n	8004c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	490c      	ldr	r1, [pc, #48]	; (8004cb8 <__NVIC_SetPriority+0x4c>)
 8004c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c94:	e00a      	b.n	8004cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4908      	ldr	r1, [pc, #32]	; (8004cbc <__NVIC_SetPriority+0x50>)
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	0112      	lsls	r2, r2, #4
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	440b      	add	r3, r1
 8004caa:	761a      	strb	r2, [r3, #24]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf28      	it	cs
 8004cde:	2304      	movcs	r3, #4
 8004ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d902      	bls.n	8004cf0 <NVIC_EncodePriority+0x30>
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3b03      	subs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <NVIC_EncodePriority+0x32>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	401a      	ands	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43d9      	mvns	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d18:	4313      	orrs	r3, r2
         );
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d38:	d301      	bcc.n	8004d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <SysTick_Config+0x40>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d46:	210f      	movs	r1, #15
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	f7ff ff8e 	bl	8004c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <SysTick_Config+0x40>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d56:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <SysTick_Config+0x40>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e010 	.word	0xe000e010

08004d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff05 	bl	8004b84 <__NVIC_SetPriorityGrouping>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d90:	f7ff ff1c 	bl	8004bcc <__NVIC_GetPriorityGrouping>
 8004d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff90 	bl	8004cc0 <NVIC_EncodePriority>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff5f 	bl	8004c6c <__NVIC_SetPriority>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ff0f 	bl	8004be8 <__NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ff1f 	bl	8004c24 <__NVIC_DisableIRQ>
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff96 	bl	8004d28 <SysTick_Config>
 8004dfc:	4603      	mov	r3, r0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff feac 	bl	8004b6c <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e314      	b.n	800544a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a66      	ldr	r2, [pc, #408]	; (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a62      	ldr	r2, [pc, #392]	; (8004fcc <HAL_DMA_Init+0x1c4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a60      	ldr	r2, [pc, #384]	; (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a5f      	ldr	r2, [pc, #380]	; (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5d      	ldr	r2, [pc, #372]	; (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a5c      	ldr	r2, [pc, #368]	; (8004fdc <HAL_DMA_Init+0x1d4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5a      	ldr	r2, [pc, #360]	; (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a59      	ldr	r2, [pc, #356]	; (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a57      	ldr	r2, [pc, #348]	; (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a56      	ldr	r2, [pc, #344]	; (8004fec <HAL_DMA_Init+0x1e4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a54      	ldr	r2, [pc, #336]	; (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a53      	ldr	r2, [pc, #332]	; (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a51      	ldr	r2, [pc, #324]	; (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a50      	ldr	r2, [pc, #320]	; (8004ffc <HAL_DMA_Init+0x1f4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Init+0xbc>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_DMA_Init+0xbe>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 813c 	beq.w	8005144 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a37      	ldr	r2, [pc, #220]	; (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a36      	ldr	r2, [pc, #216]	; (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <HAL_DMA_Init+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	; (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_DMA_Init+0x1d4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a28      	ldr	r2, [pc, #160]	; (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a27      	ldr	r2, [pc, #156]	; (8004fec <HAL_DMA_Init+0x1e4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_DMA_Init+0x1f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_Init+0x186>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e007      	b.n	8004f9e <HAL_DMA_Init+0x196>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f9e:	e02f      	b.n	8005000 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa0:	f7ff fde4 	bl	8004b6c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d928      	bls.n	8005000 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e244      	b.n	800544a <HAL_DMA_Init+0x642>
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c8      	bne.n	8004fa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4b84      	ldr	r3, [pc, #528]	; (800522c <HAL_DMA_Init+0x424>)
 800501a:	4013      	ands	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005026:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005032:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b04      	cmp	r3, #4
 8005052:	d107      	bne.n	8005064 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	4313      	orrs	r3, r2
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b28      	cmp	r3, #40	; 0x28
 800506a:	d903      	bls.n	8005074 <HAL_DMA_Init+0x26c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b2e      	cmp	r3, #46	; 0x2e
 8005072:	d91f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b3e      	cmp	r3, #62	; 0x3e
 800507a:	d903      	bls.n	8005084 <HAL_DMA_Init+0x27c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b42      	cmp	r3, #66	; 0x42
 8005082:	d917      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b46      	cmp	r3, #70	; 0x46
 800508a:	d903      	bls.n	8005094 <HAL_DMA_Init+0x28c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b48      	cmp	r3, #72	; 0x48
 8005092:	d90f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b4e      	cmp	r3, #78	; 0x4e
 800509a:	d903      	bls.n	80050a4 <HAL_DMA_Init+0x29c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b52      	cmp	r3, #82	; 0x52
 80050a2:	d907      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b73      	cmp	r3, #115	; 0x73
 80050aa:	d905      	bls.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b77      	cmp	r3, #119	; 0x77
 80050b2:	d801      	bhi.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_DMA_Init+0x2b2>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d117      	bne.n	8005120 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00e      	beq.n	8005120 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fce6 	bl	8007ad4 <DMA_CheckFifoParam>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2240      	movs	r2, #64	; 0x40
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e194      	b.n	800544a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f002 fc21 	bl	8007970 <DMA_CalcBaseAndBitshift>
 800512e:	4603      	mov	r3, r0
 8005130:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	223f      	movs	r2, #63	; 0x3f
 800513c:	409a      	lsls	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e0ca      	b.n	80052da <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a39      	ldr	r2, [pc, #228]	; (8005230 <HAL_DMA_Init+0x428>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a38      	ldr	r2, [pc, #224]	; (8005234 <HAL_DMA_Init+0x42c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d01d      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a36      	ldr	r2, [pc, #216]	; (8005238 <HAL_DMA_Init+0x430>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a35      	ldr	r2, [pc, #212]	; (800523c <HAL_DMA_Init+0x434>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a33      	ldr	r2, [pc, #204]	; (8005240 <HAL_DMA_Init+0x438>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a32      	ldr	r2, [pc, #200]	; (8005244 <HAL_DMA_Init+0x43c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a30      	ldr	r2, [pc, #192]	; (8005248 <HAL_DMA_Init+0x440>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_DMA_Init+0x38c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <HAL_DMA_Init+0x444>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_DMA_Init+0x390>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_DMA_Init+0x392>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8094 	beq.w	80052c8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a22      	ldr	r2, [pc, #136]	; (8005230 <HAL_DMA_Init+0x428>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d021      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_DMA_Init+0x42c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01c      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_DMA_Init+0x430>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d017      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <HAL_DMA_Init+0x434>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d012      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <HAL_DMA_Init+0x438>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00d      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_DMA_Init+0x43c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d008      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_DMA_Init+0x440>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <HAL_DMA_Init+0x3e6>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_DMA_Init+0x444>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <HAL_DMA_Init+0x448>)
 800520c:	4013      	ands	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d01d      	beq.n	8005254 <HAL_DMA_Init+0x44c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d102      	bne.n	8005226 <HAL_DMA_Init+0x41e>
 8005220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005224:	e017      	b.n	8005256 <HAL_DMA_Init+0x44e>
 8005226:	2300      	movs	r3, #0
 8005228:	e015      	b.n	8005256 <HAL_DMA_Init+0x44e>
 800522a:	bf00      	nop
 800522c:	fe10803f 	.word	0xfe10803f
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494
 8005250:	fffe000f 	.word	0xfffe000f
 8005254:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68d2      	ldr	r2, [r2, #12]
 800525a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800525c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800526c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005274:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800527c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005284:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	4b6e      	ldr	r3, [pc, #440]	; (8005454 <HAL_DMA_Init+0x64c>)
 800529c:	4413      	add	r3, r2
 800529e:	4a6e      	ldr	r2, [pc, #440]	; (8005458 <HAL_DMA_Init+0x650>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	009a      	lsls	r2, r3, #2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f002 fb5f 	bl	8007970 <DMA_CalcBaseAndBitshift>
 80052b2:	4603      	mov	r3, r0
 80052b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e008      	b.n	80052da <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2240      	movs	r2, #64	; 0x40
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2203      	movs	r2, #3
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0b7      	b.n	800544a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a5f      	ldr	r2, [pc, #380]	; (800545c <HAL_DMA_Init+0x654>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d072      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a5d      	ldr	r2, [pc, #372]	; (8005460 <HAL_DMA_Init+0x658>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d06d      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a5c      	ldr	r2, [pc, #368]	; (8005464 <HAL_DMA_Init+0x65c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d068      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5a      	ldr	r2, [pc, #360]	; (8005468 <HAL_DMA_Init+0x660>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d063      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a59      	ldr	r2, [pc, #356]	; (800546c <HAL_DMA_Init+0x664>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d05e      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a57      	ldr	r2, [pc, #348]	; (8005470 <HAL_DMA_Init+0x668>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d059      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a56      	ldr	r2, [pc, #344]	; (8005474 <HAL_DMA_Init+0x66c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d054      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a54      	ldr	r2, [pc, #336]	; (8005478 <HAL_DMA_Init+0x670>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d04f      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a53      	ldr	r2, [pc, #332]	; (800547c <HAL_DMA_Init+0x674>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d04a      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a51      	ldr	r2, [pc, #324]	; (8005480 <HAL_DMA_Init+0x678>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d045      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a50      	ldr	r2, [pc, #320]	; (8005484 <HAL_DMA_Init+0x67c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d040      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a4e      	ldr	r2, [pc, #312]	; (8005488 <HAL_DMA_Init+0x680>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d03b      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a4d      	ldr	r2, [pc, #308]	; (800548c <HAL_DMA_Init+0x684>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d036      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <HAL_DMA_Init+0x688>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d031      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_DMA_Init+0x68c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d02c      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a48      	ldr	r2, [pc, #288]	; (8005498 <HAL_DMA_Init+0x690>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d027      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a47      	ldr	r2, [pc, #284]	; (800549c <HAL_DMA_Init+0x694>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d022      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <HAL_DMA_Init+0x698>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01d      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a44      	ldr	r2, [pc, #272]	; (80054a4 <HAL_DMA_Init+0x69c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <HAL_DMA_Init+0x6a0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a41      	ldr	r2, [pc, #260]	; (80054ac <HAL_DMA_Init+0x6a4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a3f      	ldr	r2, [pc, #252]	; (80054b0 <HAL_DMA_Init+0x6a8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a3e      	ldr	r2, [pc, #248]	; (80054b4 <HAL_DMA_Init+0x6ac>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_DMA_Init+0x5c2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a3c      	ldr	r2, [pc, #240]	; (80054b8 <HAL_DMA_Init+0x6b0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_DMA_Init+0x5c6>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_DMA_Init+0x5c8>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d032      	beq.n	800543a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f002 fbf9 	bl	8007bcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b80      	cmp	r3, #128	; 0x80
 80053e0:	d102      	bne.n	80053e8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_DMA_Init+0x620>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b08      	cmp	r3, #8
 800540c:	d80c      	bhi.n	8005428 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 fc76 	bl	8007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e008      	b.n	800543a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	a7fdabf8 	.word	0xa7fdabf8
 8005458:	cccccccd 	.word	0xcccccccd
 800545c:	40020010 	.word	0x40020010
 8005460:	40020028 	.word	0x40020028
 8005464:	40020040 	.word	0x40020040
 8005468:	40020058 	.word	0x40020058
 800546c:	40020070 	.word	0x40020070
 8005470:	40020088 	.word	0x40020088
 8005474:	400200a0 	.word	0x400200a0
 8005478:	400200b8 	.word	0x400200b8
 800547c:	40020410 	.word	0x40020410
 8005480:	40020428 	.word	0x40020428
 8005484:	40020440 	.word	0x40020440
 8005488:	40020458 	.word	0x40020458
 800548c:	40020470 	.word	0x40020470
 8005490:	40020488 	.word	0x40020488
 8005494:	400204a0 	.word	0x400204a0
 8005498:	400204b8 	.word	0x400204b8
 800549c:	58025408 	.word	0x58025408
 80054a0:	5802541c 	.word	0x5802541c
 80054a4:	58025430 	.word	0x58025430
 80054a8:	58025444 	.word	0x58025444
 80054ac:	58025458 	.word	0x58025458
 80054b0:	5802546c 	.word	0x5802546c
 80054b4:	58025480 	.word	0x58025480
 80054b8:	58025494 	.word	0x58025494

080054bc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e1a8      	b.n	8005820 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a82      	ldr	r2, [pc, #520]	; (80056dc <HAL_DMA_DeInit+0x220>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04a      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a80      	ldr	r2, [pc, #512]	; (80056e0 <HAL_DMA_DeInit+0x224>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d045      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a7f      	ldr	r2, [pc, #508]	; (80056e4 <HAL_DMA_DeInit+0x228>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d040      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7d      	ldr	r2, [pc, #500]	; (80056e8 <HAL_DMA_DeInit+0x22c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d03b      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7c      	ldr	r2, [pc, #496]	; (80056ec <HAL_DMA_DeInit+0x230>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d036      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a7a      	ldr	r2, [pc, #488]	; (80056f0 <HAL_DMA_DeInit+0x234>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d031      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a79      	ldr	r2, [pc, #484]	; (80056f4 <HAL_DMA_DeInit+0x238>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d02c      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a77      	ldr	r2, [pc, #476]	; (80056f8 <HAL_DMA_DeInit+0x23c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d027      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a76      	ldr	r2, [pc, #472]	; (80056fc <HAL_DMA_DeInit+0x240>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d022      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a74      	ldr	r2, [pc, #464]	; (8005700 <HAL_DMA_DeInit+0x244>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a73      	ldr	r2, [pc, #460]	; (8005704 <HAL_DMA_DeInit+0x248>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a71      	ldr	r2, [pc, #452]	; (8005708 <HAL_DMA_DeInit+0x24c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a70      	ldr	r2, [pc, #448]	; (800570c <HAL_DMA_DeInit+0x250>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6e      	ldr	r2, [pc, #440]	; (8005710 <HAL_DMA_DeInit+0x254>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6d      	ldr	r2, [pc, #436]	; (8005714 <HAL_DMA_DeInit+0x258>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_DMA_DeInit+0xb2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a6b      	ldr	r2, [pc, #428]	; (8005718 <HAL_DMA_DeInit+0x25c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d108      	bne.n	8005580 <HAL_DMA_DeInit+0xc4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e007      	b.n	8005590 <HAL_DMA_DeInit+0xd4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a51      	ldr	r2, [pc, #324]	; (80056dc <HAL_DMA_DeInit+0x220>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a50      	ldr	r2, [pc, #320]	; (80056e0 <HAL_DMA_DeInit+0x224>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a4e      	ldr	r2, [pc, #312]	; (80056e4 <HAL_DMA_DeInit+0x228>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a4d      	ldr	r2, [pc, #308]	; (80056e8 <HAL_DMA_DeInit+0x22c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a4b      	ldr	r2, [pc, #300]	; (80056ec <HAL_DMA_DeInit+0x230>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a4a      	ldr	r2, [pc, #296]	; (80056f0 <HAL_DMA_DeInit+0x234>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a48      	ldr	r2, [pc, #288]	; (80056f4 <HAL_DMA_DeInit+0x238>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a47      	ldr	r2, [pc, #284]	; (80056f8 <HAL_DMA_DeInit+0x23c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a45      	ldr	r2, [pc, #276]	; (80056fc <HAL_DMA_DeInit+0x240>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a44      	ldr	r2, [pc, #272]	; (8005700 <HAL_DMA_DeInit+0x244>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a42      	ldr	r2, [pc, #264]	; (8005704 <HAL_DMA_DeInit+0x248>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a41      	ldr	r2, [pc, #260]	; (8005708 <HAL_DMA_DeInit+0x24c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a3f      	ldr	r2, [pc, #252]	; (800570c <HAL_DMA_DeInit+0x250>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a3e      	ldr	r2, [pc, #248]	; (8005710 <HAL_DMA_DeInit+0x254>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <HAL_DMA_DeInit+0x258>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_DMA_DeInit+0x174>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <HAL_DMA_DeInit+0x25c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_DMA_DeInit+0x178>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_DMA_DeInit+0x17a>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d025      	beq.n	8005686 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2221      	movs	r2, #33	; 0x21
 8005668:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f002 f980 	bl	8007970 <DMA_CalcBaseAndBitshift>
 8005670:	4603      	mov	r3, r0
 8005672:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	223f      	movs	r2, #63	; 0x3f
 800567e:	409a      	lsls	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	e081      	b.n	800578a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a24      	ldr	r2, [pc, #144]	; (800571c <HAL_DMA_DeInit+0x260>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d022      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_DMA_DeInit+0x264>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01d      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_DMA_DeInit+0x268>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d018      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_DMA_DeInit+0x26c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_DMA_DeInit+0x270>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00e      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_DMA_DeInit+0x274>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d009      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_DMA_DeInit+0x278>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_DMA_DeInit+0x21a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_DMA_DeInit+0x27c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d132      	bne.n	800573c <HAL_DMA_DeInit+0x280>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e031      	b.n	800573e <HAL_DMA_DeInit+0x282>
 80056da:	bf00      	nop
 80056dc:	40020010 	.word	0x40020010
 80056e0:	40020028 	.word	0x40020028
 80056e4:	40020040 	.word	0x40020040
 80056e8:	40020058 	.word	0x40020058
 80056ec:	40020070 	.word	0x40020070
 80056f0:	40020088 	.word	0x40020088
 80056f4:	400200a0 	.word	0x400200a0
 80056f8:	400200b8 	.word	0x400200b8
 80056fc:	40020410 	.word	0x40020410
 8005700:	40020428 	.word	0x40020428
 8005704:	40020440 	.word	0x40020440
 8005708:	40020458 	.word	0x40020458
 800570c:	40020470 	.word	0x40020470
 8005710:	40020488 	.word	0x40020488
 8005714:	400204a0 	.word	0x400204a0
 8005718:	400204b8 	.word	0x400204b8
 800571c:	58025408 	.word	0x58025408
 8005720:	5802541c 	.word	0x5802541c
 8005724:	58025430 	.word	0x58025430
 8005728:	58025444 	.word	0x58025444
 800572c:	58025458 	.word	0x58025458
 8005730:	5802546c 	.word	0x5802546c
 8005734:	58025480 	.word	0x58025480
 8005738:	58025494 	.word	0x58025494
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d021      	beq.n	8005786 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2200      	movs	r2, #0
 8005750:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f002 f900 	bl	8007970 <DMA_CalcBaseAndBitshift>
 8005770:	4603      	mov	r3, r0
 8005772:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2201      	movs	r2, #1
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	e001      	b.n	800578a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e04a      	b.n	8005820 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f002 fa1e 	bl	8007bcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057a8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <HAL_DMA_DeInit+0x316>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d80b      	bhi.n	80057d2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f002 faa0 	bl	8007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057d0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e226      	b.n	8005c92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_DMA_Start_IT+0x2a>
 800584e:	2302      	movs	r3, #2
 8005850:	e21f      	b.n	8005c92 <HAL_DMA_Start_IT+0x46a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	f040 820a 	bne.w	8005c7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a68      	ldr	r2, [pc, #416]	; (8005a1c <HAL_DMA_Start_IT+0x1f4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d04a      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a66      	ldr	r2, [pc, #408]	; (8005a20 <HAL_DMA_Start_IT+0x1f8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d045      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a65      	ldr	r2, [pc, #404]	; (8005a24 <HAL_DMA_Start_IT+0x1fc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d040      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a63      	ldr	r2, [pc, #396]	; (8005a28 <HAL_DMA_Start_IT+0x200>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d03b      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <HAL_DMA_Start_IT+0x204>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d036      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a60      	ldr	r2, [pc, #384]	; (8005a30 <HAL_DMA_Start_IT+0x208>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d031      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5f      	ldr	r2, [pc, #380]	; (8005a34 <HAL_DMA_Start_IT+0x20c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d02c      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5d      	ldr	r2, [pc, #372]	; (8005a38 <HAL_DMA_Start_IT+0x210>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d027      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5c      	ldr	r2, [pc, #368]	; (8005a3c <HAL_DMA_Start_IT+0x214>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d022      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5a      	ldr	r2, [pc, #360]	; (8005a40 <HAL_DMA_Start_IT+0x218>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01d      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <HAL_DMA_Start_IT+0x21c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a57      	ldr	r2, [pc, #348]	; (8005a48 <HAL_DMA_Start_IT+0x220>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_DMA_Start_IT+0x224>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a54      	ldr	r2, [pc, #336]	; (8005a50 <HAL_DMA_Start_IT+0x228>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a53      	ldr	r2, [pc, #332]	; (8005a54 <HAL_DMA_Start_IT+0x22c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_DMA_Start_IT+0xee>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a51      	ldr	r2, [pc, #324]	; (8005a58 <HAL_DMA_Start_IT+0x230>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <HAL_DMA_Start_IT+0x100>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <HAL_DMA_Start_IT+0x110>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 fe6a 	bl	8007618 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a34      	ldr	r2, [pc, #208]	; (8005a1c <HAL_DMA_Start_IT+0x1f4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d04a      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <HAL_DMA_Start_IT+0x1f8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d045      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a31      	ldr	r2, [pc, #196]	; (8005a24 <HAL_DMA_Start_IT+0x1fc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d040      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_DMA_Start_IT+0x200>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d03b      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2e      	ldr	r2, [pc, #184]	; (8005a2c <HAL_DMA_Start_IT+0x204>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d036      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <HAL_DMA_Start_IT+0x208>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d031      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <HAL_DMA_Start_IT+0x20c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02c      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <HAL_DMA_Start_IT+0x210>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d027      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <HAL_DMA_Start_IT+0x214>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <HAL_DMA_Start_IT+0x218>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <HAL_DMA_Start_IT+0x21c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <HAL_DMA_Start_IT+0x220>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <HAL_DMA_Start_IT+0x224>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <HAL_DMA_Start_IT+0x228>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <HAL_DMA_Start_IT+0x22c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_DMA_Start_IT+0x1bc>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_DMA_Start_IT+0x230>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_DMA_Start_IT+0x1c0>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_DMA_Start_IT+0x1c2>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d036      	beq.n	8005a5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f023 021e 	bic.w	r2, r3, #30
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0216 	orr.w	r2, r2, #22
 8005a00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03e      	beq.n	8005a88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0208 	orr.w	r2, r2, #8
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e035      	b.n	8005a88 <HAL_DMA_Start_IT+0x260>
 8005a1c:	40020010 	.word	0x40020010
 8005a20:	40020028 	.word	0x40020028
 8005a24:	40020040 	.word	0x40020040
 8005a28:	40020058 	.word	0x40020058
 8005a2c:	40020070 	.word	0x40020070
 8005a30:	40020088 	.word	0x40020088
 8005a34:	400200a0 	.word	0x400200a0
 8005a38:	400200b8 	.word	0x400200b8
 8005a3c:	40020410 	.word	0x40020410
 8005a40:	40020428 	.word	0x40020428
 8005a44:	40020440 	.word	0x40020440
 8005a48:	40020458 	.word	0x40020458
 8005a4c:	40020470 	.word	0x40020470
 8005a50:	40020488 	.word	0x40020488
 8005a54:	400204a0 	.word	0x400204a0
 8005a58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 020e 	bic.w	r2, r3, #14
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 020a 	orr.w	r2, r2, #10
 8005a6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0204 	orr.w	r2, r2, #4
 8005a86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a83      	ldr	r2, [pc, #524]	; (8005c9c <HAL_DMA_Start_IT+0x474>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d072      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a82      	ldr	r2, [pc, #520]	; (8005ca0 <HAL_DMA_Start_IT+0x478>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d06d      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a80      	ldr	r2, [pc, #512]	; (8005ca4 <HAL_DMA_Start_IT+0x47c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d068      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_DMA_Start_IT+0x480>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d063      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_DMA_Start_IT+0x484>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d05e      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7c      	ldr	r2, [pc, #496]	; (8005cb0 <HAL_DMA_Start_IT+0x488>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d059      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7a      	ldr	r2, [pc, #488]	; (8005cb4 <HAL_DMA_Start_IT+0x48c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d054      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a79      	ldr	r2, [pc, #484]	; (8005cb8 <HAL_DMA_Start_IT+0x490>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d04f      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a77      	ldr	r2, [pc, #476]	; (8005cbc <HAL_DMA_Start_IT+0x494>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d04a      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a76      	ldr	r2, [pc, #472]	; (8005cc0 <HAL_DMA_Start_IT+0x498>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d045      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a74      	ldr	r2, [pc, #464]	; (8005cc4 <HAL_DMA_Start_IT+0x49c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d040      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a73      	ldr	r2, [pc, #460]	; (8005cc8 <HAL_DMA_Start_IT+0x4a0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d03b      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a71      	ldr	r2, [pc, #452]	; (8005ccc <HAL_DMA_Start_IT+0x4a4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d036      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a70      	ldr	r2, [pc, #448]	; (8005cd0 <HAL_DMA_Start_IT+0x4a8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d031      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a6e      	ldr	r2, [pc, #440]	; (8005cd4 <HAL_DMA_Start_IT+0x4ac>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d02c      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a6d      	ldr	r2, [pc, #436]	; (8005cd8 <HAL_DMA_Start_IT+0x4b0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d027      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6b      	ldr	r2, [pc, #428]	; (8005cdc <HAL_DMA_Start_IT+0x4b4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d022      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6a      	ldr	r2, [pc, #424]	; (8005ce0 <HAL_DMA_Start_IT+0x4b8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d01d      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <HAL_DMA_Start_IT+0x4bc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a67      	ldr	r2, [pc, #412]	; (8005ce8 <HAL_DMA_Start_IT+0x4c0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a65      	ldr	r2, [pc, #404]	; (8005cec <HAL_DMA_Start_IT+0x4c4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a64      	ldr	r2, [pc, #400]	; (8005cf0 <HAL_DMA_Start_IT+0x4c8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a62      	ldr	r2, [pc, #392]	; (8005cf4 <HAL_DMA_Start_IT+0x4cc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_DMA_Start_IT+0x350>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a61      	ldr	r2, [pc, #388]	; (8005cf8 <HAL_DMA_Start_IT+0x4d0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_DMA_Start_IT+0x354>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <HAL_DMA_Start_IT+0x356>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01a      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a37      	ldr	r2, [pc, #220]	; (8005c9c <HAL_DMA_Start_IT+0x474>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d04a      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a36      	ldr	r2, [pc, #216]	; (8005ca0 <HAL_DMA_Start_IT+0x478>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d045      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <HAL_DMA_Start_IT+0x47c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d040      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <HAL_DMA_Start_IT+0x480>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d03b      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a31      	ldr	r2, [pc, #196]	; (8005cac <HAL_DMA_Start_IT+0x484>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d036      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <HAL_DMA_Start_IT+0x488>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d031      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2e      	ldr	r2, [pc, #184]	; (8005cb4 <HAL_DMA_Start_IT+0x48c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d02c      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2d      	ldr	r2, [pc, #180]	; (8005cb8 <HAL_DMA_Start_IT+0x490>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d027      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_DMA_Start_IT+0x494>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d022      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <HAL_DMA_Start_IT+0x498>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d01d      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a28      	ldr	r2, [pc, #160]	; (8005cc4 <HAL_DMA_Start_IT+0x49c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d018      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <HAL_DMA_Start_IT+0x4a0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a25      	ldr	r2, [pc, #148]	; (8005ccc <HAL_DMA_Start_IT+0x4a4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <HAL_DMA_Start_IT+0x4a8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <HAL_DMA_Start_IT+0x4ac>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_DMA_Start_IT+0x430>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <HAL_DMA_Start_IT+0x4b0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <HAL_DMA_Start_IT+0x442>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e012      	b.n	8005c90 <HAL_DMA_Start_IT+0x468>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e009      	b.n	8005c90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40020010 	.word	0x40020010
 8005ca0:	40020028 	.word	0x40020028
 8005ca4:	40020040 	.word	0x40020040
 8005ca8:	40020058 	.word	0x40020058
 8005cac:	40020070 	.word	0x40020070
 8005cb0:	40020088 	.word	0x40020088
 8005cb4:	400200a0 	.word	0x400200a0
 8005cb8:	400200b8 	.word	0x400200b8
 8005cbc:	40020410 	.word	0x40020410
 8005cc0:	40020428 	.word	0x40020428
 8005cc4:	40020440 	.word	0x40020440
 8005cc8:	40020458 	.word	0x40020458
 8005ccc:	40020470 	.word	0x40020470
 8005cd0:	40020488 	.word	0x40020488
 8005cd4:	400204a0 	.word	0x400204a0
 8005cd8:	400204b8 	.word	0x400204b8
 8005cdc:	58025408 	.word	0x58025408
 8005ce0:	5802541c 	.word	0x5802541c
 8005ce4:	58025430 	.word	0x58025430
 8005ce8:	58025444 	.word	0x58025444
 8005cec:	58025458 	.word	0x58025458
 8005cf0:	5802546c 	.word	0x5802546c
 8005cf4:	58025480 	.word	0x58025480
 8005cf8:	58025494 	.word	0x58025494

08005cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7fe ff32 	bl	8004b6c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e2dc      	b.n	80062ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d008      	beq.n	8005d32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e2cd      	b.n	80062ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a76      	ldr	r2, [pc, #472]	; (8005f10 <HAL_DMA_Abort+0x214>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d04a      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a74      	ldr	r2, [pc, #464]	; (8005f14 <HAL_DMA_Abort+0x218>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d045      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a73      	ldr	r2, [pc, #460]	; (8005f18 <HAL_DMA_Abort+0x21c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d040      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a71      	ldr	r2, [pc, #452]	; (8005f1c <HAL_DMA_Abort+0x220>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d03b      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <HAL_DMA_Abort+0x224>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d036      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a6e      	ldr	r2, [pc, #440]	; (8005f24 <HAL_DMA_Abort+0x228>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d031      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6d      	ldr	r2, [pc, #436]	; (8005f28 <HAL_DMA_Abort+0x22c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d02c      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6b      	ldr	r2, [pc, #428]	; (8005f2c <HAL_DMA_Abort+0x230>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d027      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6a      	ldr	r2, [pc, #424]	; (8005f30 <HAL_DMA_Abort+0x234>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a68      	ldr	r2, [pc, #416]	; (8005f34 <HAL_DMA_Abort+0x238>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01d      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <HAL_DMA_Abort+0x23c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d018      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a65      	ldr	r2, [pc, #404]	; (8005f3c <HAL_DMA_Abort+0x240>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a64      	ldr	r2, [pc, #400]	; (8005f40 <HAL_DMA_Abort+0x244>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a62      	ldr	r2, [pc, #392]	; (8005f44 <HAL_DMA_Abort+0x248>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a61      	ldr	r2, [pc, #388]	; (8005f48 <HAL_DMA_Abort+0x24c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_DMA_Abort+0xd6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a5f      	ldr	r2, [pc, #380]	; (8005f4c <HAL_DMA_Abort+0x250>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_DMA_Abort+0xda>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_DMA_Abort+0xdc>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 021e 	bic.w	r2, r2, #30
 8005dea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e00a      	b.n	8005e1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 020e 	bic.w	r2, r2, #14
 8005e12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a3c      	ldr	r2, [pc, #240]	; (8005f10 <HAL_DMA_Abort+0x214>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d072      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3a      	ldr	r2, [pc, #232]	; (8005f14 <HAL_DMA_Abort+0x218>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d06d      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a39      	ldr	r2, [pc, #228]	; (8005f18 <HAL_DMA_Abort+0x21c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d068      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a37      	ldr	r2, [pc, #220]	; (8005f1c <HAL_DMA_Abort+0x220>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d063      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a36      	ldr	r2, [pc, #216]	; (8005f20 <HAL_DMA_Abort+0x224>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d05e      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a34      	ldr	r2, [pc, #208]	; (8005f24 <HAL_DMA_Abort+0x228>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d059      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a33      	ldr	r2, [pc, #204]	; (8005f28 <HAL_DMA_Abort+0x22c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d054      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a31      	ldr	r2, [pc, #196]	; (8005f2c <HAL_DMA_Abort+0x230>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d04f      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a30      	ldr	r2, [pc, #192]	; (8005f30 <HAL_DMA_Abort+0x234>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <HAL_DMA_Abort+0x238>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <HAL_DMA_Abort+0x23c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <HAL_DMA_Abort+0x240>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2a      	ldr	r2, [pc, #168]	; (8005f40 <HAL_DMA_Abort+0x244>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <HAL_DMA_Abort+0x248>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a27      	ldr	r2, [pc, #156]	; (8005f48 <HAL_DMA_Abort+0x24c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <HAL_DMA_Abort+0x250>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a24      	ldr	r2, [pc, #144]	; (8005f50 <HAL_DMA_Abort+0x254>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_DMA_Abort+0x258>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <HAL_DMA_Abort+0x25c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_DMA_Abort+0x260>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	; (8005f60 <HAL_DMA_Abort+0x264>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_DMA_Abort+0x268>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <HAL_DMA_Abort+0x26c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_Abort+0x20e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_DMA_Abort+0x270>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d132      	bne.n	8005f70 <HAL_DMA_Abort+0x274>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e031      	b.n	8005f72 <HAL_DMA_Abort+0x276>
 8005f0e:	bf00      	nop
 8005f10:	40020010 	.word	0x40020010
 8005f14:	40020028 	.word	0x40020028
 8005f18:	40020040 	.word	0x40020040
 8005f1c:	40020058 	.word	0x40020058
 8005f20:	40020070 	.word	0x40020070
 8005f24:	40020088 	.word	0x40020088
 8005f28:	400200a0 	.word	0x400200a0
 8005f2c:	400200b8 	.word	0x400200b8
 8005f30:	40020410 	.word	0x40020410
 8005f34:	40020428 	.word	0x40020428
 8005f38:	40020440 	.word	0x40020440
 8005f3c:	40020458 	.word	0x40020458
 8005f40:	40020470 	.word	0x40020470
 8005f44:	40020488 	.word	0x40020488
 8005f48:	400204a0 	.word	0x400204a0
 8005f4c:	400204b8 	.word	0x400204b8
 8005f50:	58025408 	.word	0x58025408
 8005f54:	5802541c 	.word	0x5802541c
 8005f58:	58025430 	.word	0x58025430
 8005f5c:	58025444 	.word	0x58025444
 8005f60:	58025458 	.word	0x58025458
 8005f64:	5802546c 	.word	0x5802546c
 8005f68:	58025480 	.word	0x58025480
 8005f6c:	58025494 	.word	0x58025494
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6d      	ldr	r2, [pc, #436]	; (8006140 <HAL_DMA_Abort+0x444>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d04a      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6b      	ldr	r2, [pc, #428]	; (8006144 <HAL_DMA_Abort+0x448>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d045      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a6a      	ldr	r2, [pc, #424]	; (8006148 <HAL_DMA_Abort+0x44c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d040      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a68      	ldr	r2, [pc, #416]	; (800614c <HAL_DMA_Abort+0x450>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d03b      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a67      	ldr	r2, [pc, #412]	; (8006150 <HAL_DMA_Abort+0x454>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d036      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a65      	ldr	r2, [pc, #404]	; (8006154 <HAL_DMA_Abort+0x458>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d031      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a64      	ldr	r2, [pc, #400]	; (8006158 <HAL_DMA_Abort+0x45c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d02c      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a62      	ldr	r2, [pc, #392]	; (800615c <HAL_DMA_Abort+0x460>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d027      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a61      	ldr	r2, [pc, #388]	; (8006160 <HAL_DMA_Abort+0x464>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d022      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a5f      	ldr	r2, [pc, #380]	; (8006164 <HAL_DMA_Abort+0x468>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01d      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a5e      	ldr	r2, [pc, #376]	; (8006168 <HAL_DMA_Abort+0x46c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5c      	ldr	r2, [pc, #368]	; (800616c <HAL_DMA_Abort+0x470>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5b      	ldr	r2, [pc, #364]	; (8006170 <HAL_DMA_Abort+0x474>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a59      	ldr	r2, [pc, #356]	; (8006174 <HAL_DMA_Abort+0x478>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a58      	ldr	r2, [pc, #352]	; (8006178 <HAL_DMA_Abort+0x47c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_DMA_Abort+0x32a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a56      	ldr	r2, [pc, #344]	; (800617c <HAL_DMA_Abort+0x480>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <HAL_DMA_Abort+0x33c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e007      	b.n	8006048 <HAL_DMA_Abort+0x34c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006048:	e013      	b.n	8006072 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800604a:	f7fe fd8f 	bl	8004b6c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b05      	cmp	r3, #5
 8006056:	d90c      	bls.n	8006072 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2203      	movs	r2, #3
 8006062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e12d      	b.n	80062ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e5      	bne.n	800604a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <HAL_DMA_Abort+0x444>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d04a      	beq.n	800611e <HAL_DMA_Abort+0x422>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <HAL_DMA_Abort+0x448>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d045      	beq.n	800611e <HAL_DMA_Abort+0x422>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2c      	ldr	r2, [pc, #176]	; (8006148 <HAL_DMA_Abort+0x44c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d040      	beq.n	800611e <HAL_DMA_Abort+0x422>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2a      	ldr	r2, [pc, #168]	; (800614c <HAL_DMA_Abort+0x450>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d03b      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a29      	ldr	r2, [pc, #164]	; (8006150 <HAL_DMA_Abort+0x454>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d036      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_DMA_Abort+0x458>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d031      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a26      	ldr	r2, [pc, #152]	; (8006158 <HAL_DMA_Abort+0x45c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d02c      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a24      	ldr	r2, [pc, #144]	; (800615c <HAL_DMA_Abort+0x460>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d027      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a23      	ldr	r2, [pc, #140]	; (8006160 <HAL_DMA_Abort+0x464>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d022      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a21      	ldr	r2, [pc, #132]	; (8006164 <HAL_DMA_Abort+0x468>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01d      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a20      	ldr	r2, [pc, #128]	; (8006168 <HAL_DMA_Abort+0x46c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1e      	ldr	r2, [pc, #120]	; (800616c <HAL_DMA_Abort+0x470>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <HAL_DMA_Abort+0x422>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_DMA_Abort+0x474>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_DMA_Abort+0x422>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <HAL_DMA_Abort+0x478>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_DMA_Abort+0x422>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <HAL_DMA_Abort+0x47c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_DMA_Abort+0x422>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <HAL_DMA_Abort+0x480>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d101      	bne.n	8006122 <HAL_DMA_Abort+0x426>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_DMA_Abort+0x428>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d02b      	beq.n	8006180 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	223f      	movs	r2, #63	; 0x3f
 8006138:	409a      	lsls	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	e02a      	b.n	8006196 <HAL_DMA_Abort+0x49a>
 8006140:	40020010 	.word	0x40020010
 8006144:	40020028 	.word	0x40020028
 8006148:	40020040 	.word	0x40020040
 800614c:	40020058 	.word	0x40020058
 8006150:	40020070 	.word	0x40020070
 8006154:	40020088 	.word	0x40020088
 8006158:	400200a0 	.word	0x400200a0
 800615c:	400200b8 	.word	0x400200b8
 8006160:	40020410 	.word	0x40020410
 8006164:	40020428 	.word	0x40020428
 8006168:	40020440 	.word	0x40020440
 800616c:	40020458 	.word	0x40020458
 8006170:	40020470 	.word	0x40020470
 8006174:	40020488 	.word	0x40020488
 8006178:	400204a0 	.word	0x400204a0
 800617c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006184:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2201      	movs	r2, #1
 8006190:	409a      	lsls	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4f      	ldr	r2, [pc, #316]	; (80062d8 <HAL_DMA_Abort+0x5dc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d072      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a4d      	ldr	r2, [pc, #308]	; (80062dc <HAL_DMA_Abort+0x5e0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d06d      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a4c      	ldr	r2, [pc, #304]	; (80062e0 <HAL_DMA_Abort+0x5e4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d068      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a4a      	ldr	r2, [pc, #296]	; (80062e4 <HAL_DMA_Abort+0x5e8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d063      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a49      	ldr	r2, [pc, #292]	; (80062e8 <HAL_DMA_Abort+0x5ec>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d05e      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a47      	ldr	r2, [pc, #284]	; (80062ec <HAL_DMA_Abort+0x5f0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d059      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a46      	ldr	r2, [pc, #280]	; (80062f0 <HAL_DMA_Abort+0x5f4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d054      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a44      	ldr	r2, [pc, #272]	; (80062f4 <HAL_DMA_Abort+0x5f8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04f      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <HAL_DMA_Abort+0x5fc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d04a      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a41      	ldr	r2, [pc, #260]	; (80062fc <HAL_DMA_Abort+0x600>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d045      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <HAL_DMA_Abort+0x604>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d040      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a3e      	ldr	r2, [pc, #248]	; (8006304 <HAL_DMA_Abort+0x608>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d03b      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <HAL_DMA_Abort+0x60c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d036      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a3b      	ldr	r2, [pc, #236]	; (800630c <HAL_DMA_Abort+0x610>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <HAL_DMA_Abort+0x614>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d02c      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <HAL_DMA_Abort+0x618>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d027      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a37      	ldr	r2, [pc, #220]	; (8006318 <HAL_DMA_Abort+0x61c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a35      	ldr	r2, [pc, #212]	; (800631c <HAL_DMA_Abort+0x620>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a34      	ldr	r2, [pc, #208]	; (8006320 <HAL_DMA_Abort+0x624>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a32      	ldr	r2, [pc, #200]	; (8006324 <HAL_DMA_Abort+0x628>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a31      	ldr	r2, [pc, #196]	; (8006328 <HAL_DMA_Abort+0x62c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2f      	ldr	r2, [pc, #188]	; (800632c <HAL_DMA_Abort+0x630>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2e      	ldr	r2, [pc, #184]	; (8006330 <HAL_DMA_Abort+0x634>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_DMA_Abort+0x58a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <HAL_DMA_Abort+0x638>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <HAL_DMA_Abort+0x58e>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_DMA_Abort+0x590>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d015      	beq.n	80062bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006298:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40020010 	.word	0x40020010
 80062dc:	40020028 	.word	0x40020028
 80062e0:	40020040 	.word	0x40020040
 80062e4:	40020058 	.word	0x40020058
 80062e8:	40020070 	.word	0x40020070
 80062ec:	40020088 	.word	0x40020088
 80062f0:	400200a0 	.word	0x400200a0
 80062f4:	400200b8 	.word	0x400200b8
 80062f8:	40020410 	.word	0x40020410
 80062fc:	40020428 	.word	0x40020428
 8006300:	40020440 	.word	0x40020440
 8006304:	40020458 	.word	0x40020458
 8006308:	40020470 	.word	0x40020470
 800630c:	40020488 	.word	0x40020488
 8006310:	400204a0 	.word	0x400204a0
 8006314:	400204b8 	.word	0x400204b8
 8006318:	58025408 	.word	0x58025408
 800631c:	5802541c 	.word	0x5802541c
 8006320:	58025430 	.word	0x58025430
 8006324:	58025444 	.word	0x58025444
 8006328:	58025458 	.word	0x58025458
 800632c:	5802546c 	.word	0x5802546c
 8006330:	58025480 	.word	0x58025480
 8006334:	58025494 	.word	0x58025494

08006338 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e237      	b.n	80067ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d004      	beq.n	8006360 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2280      	movs	r2, #128	; 0x80
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e22c      	b.n	80067ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5c      	ldr	r2, [pc, #368]	; (80064d8 <HAL_DMA_Abort_IT+0x1a0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d04a      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a5b      	ldr	r2, [pc, #364]	; (80064dc <HAL_DMA_Abort_IT+0x1a4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d045      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a59      	ldr	r2, [pc, #356]	; (80064e0 <HAL_DMA_Abort_IT+0x1a8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d040      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a58      	ldr	r2, [pc, #352]	; (80064e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d03b      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a56      	ldr	r2, [pc, #344]	; (80064e8 <HAL_DMA_Abort_IT+0x1b0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d036      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a55      	ldr	r2, [pc, #340]	; (80064ec <HAL_DMA_Abort_IT+0x1b4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d031      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a53      	ldr	r2, [pc, #332]	; (80064f0 <HAL_DMA_Abort_IT+0x1b8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02c      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a52      	ldr	r2, [pc, #328]	; (80064f4 <HAL_DMA_Abort_IT+0x1bc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d027      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a50      	ldr	r2, [pc, #320]	; (80064f8 <HAL_DMA_Abort_IT+0x1c0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a4f      	ldr	r2, [pc, #316]	; (80064fc <HAL_DMA_Abort_IT+0x1c4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d01d      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4d      	ldr	r2, [pc, #308]	; (8006500 <HAL_DMA_Abort_IT+0x1c8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a4c      	ldr	r2, [pc, #304]	; (8006504 <HAL_DMA_Abort_IT+0x1cc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a4a      	ldr	r2, [pc, #296]	; (8006508 <HAL_DMA_Abort_IT+0x1d0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a49      	ldr	r2, [pc, #292]	; (800650c <HAL_DMA_Abort_IT+0x1d4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a47      	ldr	r2, [pc, #284]	; (8006510 <HAL_DMA_Abort_IT+0x1d8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_DMA_Abort_IT+0xc8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a46      	ldr	r2, [pc, #280]	; (8006514 <HAL_DMA_Abort_IT+0x1dc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d101      	bne.n	8006404 <HAL_DMA_Abort_IT+0xcc>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <HAL_DMA_Abort_IT+0xce>
 8006404:	2300      	movs	r3, #0
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 8086 	beq.w	8006518 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2204      	movs	r2, #4
 8006410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2f      	ldr	r2, [pc, #188]	; (80064d8 <HAL_DMA_Abort_IT+0x1a0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d04a      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <HAL_DMA_Abort_IT+0x1a4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d045      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_DMA_Abort_IT+0x1a8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d040      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2b      	ldr	r2, [pc, #172]	; (80064e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d03b      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d036      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a28      	ldr	r2, [pc, #160]	; (80064ec <HAL_DMA_Abort_IT+0x1b4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d031      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d02c      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d027      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a23      	ldr	r2, [pc, #140]	; (80064f8 <HAL_DMA_Abort_IT+0x1c0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d022      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a22      	ldr	r2, [pc, #136]	; (80064fc <HAL_DMA_Abort_IT+0x1c4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d01d      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <HAL_DMA_Abort_IT+0x1c8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d018      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <HAL_DMA_Abort_IT+0x1cc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_DMA_Abort_IT+0x1d0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_DMA_Abort_IT+0x1d4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_DMA_Abort_IT+0x1d8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x17c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a19      	ldr	r2, [pc, #100]	; (8006514 <HAL_DMA_Abort_IT+0x1dc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <HAL_DMA_Abort_IT+0x18e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e178      	b.n	80067b8 <HAL_DMA_Abort_IT+0x480>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e16f      	b.n	80067b8 <HAL_DMA_Abort_IT+0x480>
 80064d8:	40020010 	.word	0x40020010
 80064dc:	40020028 	.word	0x40020028
 80064e0:	40020040 	.word	0x40020040
 80064e4:	40020058 	.word	0x40020058
 80064e8:	40020070 	.word	0x40020070
 80064ec:	40020088 	.word	0x40020088
 80064f0:	400200a0 	.word	0x400200a0
 80064f4:	400200b8 	.word	0x400200b8
 80064f8:	40020410 	.word	0x40020410
 80064fc:	40020428 	.word	0x40020428
 8006500:	40020440 	.word	0x40020440
 8006504:	40020458 	.word	0x40020458
 8006508:	40020470 	.word	0x40020470
 800650c:	40020488 	.word	0x40020488
 8006510:	400204a0 	.word	0x400204a0
 8006514:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 020e 	bic.w	r2, r2, #14
 8006526:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a6c      	ldr	r2, [pc, #432]	; (80066e0 <HAL_DMA_Abort_IT+0x3a8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04a      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6b      	ldr	r2, [pc, #428]	; (80066e4 <HAL_DMA_Abort_IT+0x3ac>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d045      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a69      	ldr	r2, [pc, #420]	; (80066e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d040      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a68      	ldr	r2, [pc, #416]	; (80066ec <HAL_DMA_Abort_IT+0x3b4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d03b      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a66      	ldr	r2, [pc, #408]	; (80066f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d036      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a65      	ldr	r2, [pc, #404]	; (80066f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d031      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a63      	ldr	r2, [pc, #396]	; (80066f8 <HAL_DMA_Abort_IT+0x3c0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02c      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a62      	ldr	r2, [pc, #392]	; (80066fc <HAL_DMA_Abort_IT+0x3c4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d027      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a60      	ldr	r2, [pc, #384]	; (8006700 <HAL_DMA_Abort_IT+0x3c8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a5f      	ldr	r2, [pc, #380]	; (8006704 <HAL_DMA_Abort_IT+0x3cc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a5d      	ldr	r2, [pc, #372]	; (8006708 <HAL_DMA_Abort_IT+0x3d0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a5c      	ldr	r2, [pc, #368]	; (800670c <HAL_DMA_Abort_IT+0x3d4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5a      	ldr	r2, [pc, #360]	; (8006710 <HAL_DMA_Abort_IT+0x3d8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a59      	ldr	r2, [pc, #356]	; (8006714 <HAL_DMA_Abort_IT+0x3dc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a57      	ldr	r2, [pc, #348]	; (8006718 <HAL_DMA_Abort_IT+0x3e0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_DMA_Abort_IT+0x290>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a56      	ldr	r2, [pc, #344]	; (800671c <HAL_DMA_Abort_IT+0x3e4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <HAL_DMA_Abort_IT+0x2a2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e007      	b.n	80065ea <HAL_DMA_Abort_IT+0x2b2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <HAL_DMA_Abort_IT+0x3a8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d072      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3a      	ldr	r2, [pc, #232]	; (80066e4 <HAL_DMA_Abort_IT+0x3ac>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d06d      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a39      	ldr	r2, [pc, #228]	; (80066e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d068      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a37      	ldr	r2, [pc, #220]	; (80066ec <HAL_DMA_Abort_IT+0x3b4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d063      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a36      	ldr	r2, [pc, #216]	; (80066f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d05e      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a34      	ldr	r2, [pc, #208]	; (80066f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d059      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <HAL_DMA_Abort_IT+0x3c0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d054      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a31      	ldr	r2, [pc, #196]	; (80066fc <HAL_DMA_Abort_IT+0x3c4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d04f      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a30      	ldr	r2, [pc, #192]	; (8006700 <HAL_DMA_Abort_IT+0x3c8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <HAL_DMA_Abort_IT+0x3cc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2d      	ldr	r2, [pc, #180]	; (8006708 <HAL_DMA_Abort_IT+0x3d0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2b      	ldr	r2, [pc, #172]	; (800670c <HAL_DMA_Abort_IT+0x3d4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <HAL_DMA_Abort_IT+0x3d8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a28      	ldr	r2, [pc, #160]	; (8006714 <HAL_DMA_Abort_IT+0x3dc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a27      	ldr	r2, [pc, #156]	; (8006718 <HAL_DMA_Abort_IT+0x3e0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a25      	ldr	r2, [pc, #148]	; (800671c <HAL_DMA_Abort_IT+0x3e4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a24      	ldr	r2, [pc, #144]	; (8006720 <HAL_DMA_Abort_IT+0x3e8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a22      	ldr	r2, [pc, #136]	; (8006724 <HAL_DMA_Abort_IT+0x3ec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a21      	ldr	r2, [pc, #132]	; (8006728 <HAL_DMA_Abort_IT+0x3f0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <HAL_DMA_Abort_IT+0x3f4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <HAL_DMA_Abort_IT+0x3f8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <HAL_DMA_Abort_IT+0x3fc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <HAL_DMA_Abort_IT+0x400>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Abort_IT+0x3a2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <HAL_DMA_Abort_IT+0x404>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d132      	bne.n	8006740 <HAL_DMA_Abort_IT+0x408>
 80066da:	2301      	movs	r3, #1
 80066dc:	e031      	b.n	8006742 <HAL_DMA_Abort_IT+0x40a>
 80066de:	bf00      	nop
 80066e0:	40020010 	.word	0x40020010
 80066e4:	40020028 	.word	0x40020028
 80066e8:	40020040 	.word	0x40020040
 80066ec:	40020058 	.word	0x40020058
 80066f0:	40020070 	.word	0x40020070
 80066f4:	40020088 	.word	0x40020088
 80066f8:	400200a0 	.word	0x400200a0
 80066fc:	400200b8 	.word	0x400200b8
 8006700:	40020410 	.word	0x40020410
 8006704:	40020428 	.word	0x40020428
 8006708:	40020440 	.word	0x40020440
 800670c:	40020458 	.word	0x40020458
 8006710:	40020470 	.word	0x40020470
 8006714:	40020488 	.word	0x40020488
 8006718:	400204a0 	.word	0x400204a0
 800671c:	400204b8 	.word	0x400204b8
 8006720:	58025408 	.word	0x58025408
 8006724:	5802541c 	.word	0x5802541c
 8006728:	58025430 	.word	0x58025430
 800672c:	58025444 	.word	0x58025444
 8006730:	58025458 	.word	0x58025458
 8006734:	5802546c 	.word	0x5802546c
 8006738:	58025480 	.word	0x58025480
 800673c:	58025494 	.word	0x58025494
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d028      	beq.n	8006798 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006754:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006774:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006796:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067d0:	4b67      	ldr	r3, [pc, #412]	; (8006970 <HAL_DMA_IRQHandler+0x1ac>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a67      	ldr	r2, [pc, #412]	; (8006974 <HAL_DMA_IRQHandler+0x1b0>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0a9b      	lsrs	r3, r3, #10
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a5f      	ldr	r2, [pc, #380]	; (8006978 <HAL_DMA_IRQHandler+0x1b4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d04a      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5d      	ldr	r2, [pc, #372]	; (800697c <HAL_DMA_IRQHandler+0x1b8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d045      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5c      	ldr	r2, [pc, #368]	; (8006980 <HAL_DMA_IRQHandler+0x1bc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d040      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5a      	ldr	r2, [pc, #360]	; (8006984 <HAL_DMA_IRQHandler+0x1c0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d03b      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a59      	ldr	r2, [pc, #356]	; (8006988 <HAL_DMA_IRQHandler+0x1c4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d036      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a57      	ldr	r2, [pc, #348]	; (800698c <HAL_DMA_IRQHandler+0x1c8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d031      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a56      	ldr	r2, [pc, #344]	; (8006990 <HAL_DMA_IRQHandler+0x1cc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d02c      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a54      	ldr	r2, [pc, #336]	; (8006994 <HAL_DMA_IRQHandler+0x1d0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d027      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a53      	ldr	r2, [pc, #332]	; (8006998 <HAL_DMA_IRQHandler+0x1d4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d022      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a51      	ldr	r2, [pc, #324]	; (800699c <HAL_DMA_IRQHandler+0x1d8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01d      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a50      	ldr	r2, [pc, #320]	; (80069a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d018      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4e      	ldr	r2, [pc, #312]	; (80069a4 <HAL_DMA_IRQHandler+0x1e0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4d      	ldr	r2, [pc, #308]	; (80069a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a4b      	ldr	r2, [pc, #300]	; (80069ac <HAL_DMA_IRQHandler+0x1e8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a4a      	ldr	r2, [pc, #296]	; (80069b0 <HAL_DMA_IRQHandler+0x1ec>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a48      	ldr	r2, [pc, #288]	; (80069b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <HAL_DMA_IRQHandler+0xd6>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <HAL_DMA_IRQHandler+0xd8>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 842b 	beq.w	80070f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2208      	movs	r2, #8
 80068ac:	409a      	lsls	r2, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80a2 	beq.w	80069fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2e      	ldr	r2, [pc, #184]	; (8006978 <HAL_DMA_IRQHandler+0x1b4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d04a      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2d      	ldr	r2, [pc, #180]	; (800697c <HAL_DMA_IRQHandler+0x1b8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d045      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2b      	ldr	r2, [pc, #172]	; (8006980 <HAL_DMA_IRQHandler+0x1bc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d040      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2a      	ldr	r2, [pc, #168]	; (8006984 <HAL_DMA_IRQHandler+0x1c0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d03b      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_DMA_IRQHandler+0x1c4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d036      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a27      	ldr	r2, [pc, #156]	; (800698c <HAL_DMA_IRQHandler+0x1c8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d031      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a25      	ldr	r2, [pc, #148]	; (8006990 <HAL_DMA_IRQHandler+0x1cc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02c      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a24      	ldr	r2, [pc, #144]	; (8006994 <HAL_DMA_IRQHandler+0x1d0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d027      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a22      	ldr	r2, [pc, #136]	; (8006998 <HAL_DMA_IRQHandler+0x1d4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d022      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a21      	ldr	r2, [pc, #132]	; (800699c <HAL_DMA_IRQHandler+0x1d8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d01d      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <HAL_DMA_IRQHandler+0x1e0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <HAL_DMA_IRQHandler+0x1e8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d009      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_DMA_IRQHandler+0x1ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d12f      	bne.n	80069b8 <HAL_DMA_IRQHandler+0x1f4>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	e02e      	b.n	80069cc <HAL_DMA_IRQHandler+0x208>
 800696e:	bf00      	nop
 8006970:	240001a0 	.word	0x240001a0
 8006974:	1b4e81b5 	.word	0x1b4e81b5
 8006978:	40020010 	.word	0x40020010
 800697c:	40020028 	.word	0x40020028
 8006980:	40020040 	.word	0x40020040
 8006984:	40020058 	.word	0x40020058
 8006988:	40020070 	.word	0x40020070
 800698c:	40020088 	.word	0x40020088
 8006990:	400200a0 	.word	0x400200a0
 8006994:	400200b8 	.word	0x400200b8
 8006998:	40020410 	.word	0x40020410
 800699c:	40020428 	.word	0x40020428
 80069a0:	40020440 	.word	0x40020440
 80069a4:	40020458 	.word	0x40020458
 80069a8:	40020470 	.word	0x40020470
 80069ac:	40020488 	.word	0x40020488
 80069b0:	400204a0 	.word	0x400204a0
 80069b4:	400204b8 	.word	0x400204b8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d015      	beq.n	80069fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2208      	movs	r2, #8
 80069ea:	409a      	lsls	r2, r3
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f4:	f043 0201 	orr.w	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d06e      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a69      	ldr	r2, [pc, #420]	; (8006bbc <HAL_DMA_IRQHandler+0x3f8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d04a      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a67      	ldr	r2, [pc, #412]	; (8006bc0 <HAL_DMA_IRQHandler+0x3fc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d045      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a66      	ldr	r2, [pc, #408]	; (8006bc4 <HAL_DMA_IRQHandler+0x400>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d040      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a64      	ldr	r2, [pc, #400]	; (8006bc8 <HAL_DMA_IRQHandler+0x404>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d03b      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a63      	ldr	r2, [pc, #396]	; (8006bcc <HAL_DMA_IRQHandler+0x408>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d036      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a61      	ldr	r2, [pc, #388]	; (8006bd0 <HAL_DMA_IRQHandler+0x40c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d031      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a60      	ldr	r2, [pc, #384]	; (8006bd4 <HAL_DMA_IRQHandler+0x410>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d02c      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a5e      	ldr	r2, [pc, #376]	; (8006bd8 <HAL_DMA_IRQHandler+0x414>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d027      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a5d      	ldr	r2, [pc, #372]	; (8006bdc <HAL_DMA_IRQHandler+0x418>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5b      	ldr	r2, [pc, #364]	; (8006be0 <HAL_DMA_IRQHandler+0x41c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d01d      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5a      	ldr	r2, [pc, #360]	; (8006be4 <HAL_DMA_IRQHandler+0x420>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a58      	ldr	r2, [pc, #352]	; (8006be8 <HAL_DMA_IRQHandler+0x424>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a57      	ldr	r2, [pc, #348]	; (8006bec <HAL_DMA_IRQHandler+0x428>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a55      	ldr	r2, [pc, #340]	; (8006bf0 <HAL_DMA_IRQHandler+0x42c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a54      	ldr	r2, [pc, #336]	; (8006bf4 <HAL_DMA_IRQHandler+0x430>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a52      	ldr	r2, [pc, #328]	; (8006bf8 <HAL_DMA_IRQHandler+0x434>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0x304>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e003      	b.n	8006ad0 <HAL_DMA_IRQHandler+0x30c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00d      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2201      	movs	r2, #1
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	f043 0202 	orr.w	r2, r3, #2
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2204      	movs	r2, #4
 8006afa:	409a      	lsls	r2, r3
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 808f 	beq.w	8006c24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2c      	ldr	r2, [pc, #176]	; (8006bbc <HAL_DMA_IRQHandler+0x3f8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d04a      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <HAL_DMA_IRQHandler+0x3fc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d045      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a29      	ldr	r2, [pc, #164]	; (8006bc4 <HAL_DMA_IRQHandler+0x400>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d040      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a27      	ldr	r2, [pc, #156]	; (8006bc8 <HAL_DMA_IRQHandler+0x404>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d03b      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a26      	ldr	r2, [pc, #152]	; (8006bcc <HAL_DMA_IRQHandler+0x408>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d036      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a24      	ldr	r2, [pc, #144]	; (8006bd0 <HAL_DMA_IRQHandler+0x40c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d031      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a23      	ldr	r2, [pc, #140]	; (8006bd4 <HAL_DMA_IRQHandler+0x410>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d02c      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <HAL_DMA_IRQHandler+0x414>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d027      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <HAL_DMA_IRQHandler+0x418>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <HAL_DMA_IRQHandler+0x41c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <HAL_DMA_IRQHandler+0x420>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_DMA_IRQHandler+0x424>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <HAL_DMA_IRQHandler+0x428>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_DMA_IRQHandler+0x42c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <HAL_DMA_IRQHandler+0x430>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <HAL_DMA_IRQHandler+0x434>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d12a      	bne.n	8006bfc <HAL_DMA_IRQHandler+0x438>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e023      	b.n	8006c04 <HAL_DMA_IRQHandler+0x440>
 8006bbc:	40020010 	.word	0x40020010
 8006bc0:	40020028 	.word	0x40020028
 8006bc4:	40020040 	.word	0x40020040
 8006bc8:	40020058 	.word	0x40020058
 8006bcc:	40020070 	.word	0x40020070
 8006bd0:	40020088 	.word	0x40020088
 8006bd4:	400200a0 	.word	0x400200a0
 8006bd8:	400200b8 	.word	0x400200b8
 8006bdc:	40020410 	.word	0x40020410
 8006be0:	40020428 	.word	0x40020428
 8006be4:	40020440 	.word	0x40020440
 8006be8:	40020458 	.word	0x40020458
 8006bec:	40020470 	.word	0x40020470
 8006bf0:	40020488 	.word	0x40020488
 8006bf4:	400204a0 	.word	0x400204a0
 8006bf8:	400204b8 	.word	0x400204b8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2204      	movs	r2, #4
 8006c12:	409a      	lsls	r2, r3
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	f043 0204 	orr.w	r2, r3, #4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80a6 	beq.w	8006d86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a85      	ldr	r2, [pc, #532]	; (8006e54 <HAL_DMA_IRQHandler+0x690>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d04a      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a83      	ldr	r2, [pc, #524]	; (8006e58 <HAL_DMA_IRQHandler+0x694>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d045      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a82      	ldr	r2, [pc, #520]	; (8006e5c <HAL_DMA_IRQHandler+0x698>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d040      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a80      	ldr	r2, [pc, #512]	; (8006e60 <HAL_DMA_IRQHandler+0x69c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d03b      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7f      	ldr	r2, [pc, #508]	; (8006e64 <HAL_DMA_IRQHandler+0x6a0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d036      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a7d      	ldr	r2, [pc, #500]	; (8006e68 <HAL_DMA_IRQHandler+0x6a4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d031      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a7c      	ldr	r2, [pc, #496]	; (8006e6c <HAL_DMA_IRQHandler+0x6a8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d02c      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7a      	ldr	r2, [pc, #488]	; (8006e70 <HAL_DMA_IRQHandler+0x6ac>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d027      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a79      	ldr	r2, [pc, #484]	; (8006e74 <HAL_DMA_IRQHandler+0x6b0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a77      	ldr	r2, [pc, #476]	; (8006e78 <HAL_DMA_IRQHandler+0x6b4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a76      	ldr	r2, [pc, #472]	; (8006e7c <HAL_DMA_IRQHandler+0x6b8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a74      	ldr	r2, [pc, #464]	; (8006e80 <HAL_DMA_IRQHandler+0x6bc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a73      	ldr	r2, [pc, #460]	; (8006e84 <HAL_DMA_IRQHandler+0x6c0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a71      	ldr	r2, [pc, #452]	; (8006e88 <HAL_DMA_IRQHandler+0x6c4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a70      	ldr	r2, [pc, #448]	; (8006e8c <HAL_DMA_IRQHandler+0x6c8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6e      	ldr	r2, [pc, #440]	; (8006e90 <HAL_DMA_IRQHandler+0x6cc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_DMA_IRQHandler+0x52c>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf14      	ite	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	2300      	moveq	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e009      	b.n	8006d04 <HAL_DMA_IRQHandler+0x540>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	2300      	moveq	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03e      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	2210      	movs	r2, #16
 8006d12:	409a      	lsls	r2, r3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d024      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
 8006d44:	e01f      	b.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01b      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	e016      	b.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0208 	bic.w	r2, r2, #8
 8006d74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2220      	movs	r2, #32
 8006d90:	409a      	lsls	r2, r3
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8110 	beq.w	8006fbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <HAL_DMA_IRQHandler+0x690>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d04a      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <HAL_DMA_IRQHandler+0x694>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d045      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <HAL_DMA_IRQHandler+0x698>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d040      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <HAL_DMA_IRQHandler+0x69c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d03b      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a26      	ldr	r2, [pc, #152]	; (8006e64 <HAL_DMA_IRQHandler+0x6a0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d036      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <HAL_DMA_IRQHandler+0x6a4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d031      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <HAL_DMA_IRQHandler+0x6a8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d02c      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <HAL_DMA_IRQHandler+0x6ac>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d027      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a20      	ldr	r2, [pc, #128]	; (8006e74 <HAL_DMA_IRQHandler+0x6b0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d022      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_DMA_IRQHandler+0x6b4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d01d      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <HAL_DMA_IRQHandler+0x6b8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d018      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_DMA_IRQHandler+0x6bc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <HAL_DMA_IRQHandler+0x6c0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00e      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_DMA_IRQHandler+0x6c4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a17      	ldr	r2, [pc, #92]	; (8006e8c <HAL_DMA_IRQHandler+0x6c8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a16      	ldr	r2, [pc, #88]	; (8006e90 <HAL_DMA_IRQHandler+0x6cc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d12b      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x6d0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e02a      	b.n	8006ea8 <HAL_DMA_IRQHandler+0x6e4>
 8006e52:	bf00      	nop
 8006e54:	40020010 	.word	0x40020010
 8006e58:	40020028 	.word	0x40020028
 8006e5c:	40020040 	.word	0x40020040
 8006e60:	40020058 	.word	0x40020058
 8006e64:	40020070 	.word	0x40020070
 8006e68:	40020088 	.word	0x40020088
 8006e6c:	400200a0 	.word	0x400200a0
 8006e70:	400200b8 	.word	0x400200b8
 8006e74:	40020410 	.word	0x40020410
 8006e78:	40020428 	.word	0x40020428
 8006e7c:	40020440 	.word	0x40020440
 8006e80:	40020458 	.word	0x40020458
 8006e84:	40020470 	.word	0x40020470
 8006e88:	40020488 	.word	0x40020488
 8006e8c:	400204a0 	.word	0x400204a0
 8006e90:	400204b8 	.word	0x400204b8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf14      	ite	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8087 	beq.w	8006fbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	409a      	lsls	r2, r3
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d139      	bne.n	8006f3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0216 	bic.w	r2, r2, #22
 8006ed8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ee8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <HAL_DMA_IRQHandler+0x736>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0208 	bic.w	r2, r2, #8
 8006f08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	223f      	movs	r2, #63	; 0x3f
 8006f14:	409a      	lsls	r2, r3
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 834a 	beq.w	80075c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
          }
          return;
 8006f3c:	e344      	b.n	80075c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d018      	beq.n	8006f7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d108      	bne.n	8006f6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d02c      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
 8006f6a:	e027      	b.n	8006fbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d023      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
 8006f7c:	e01e      	b.n	8006fbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10f      	bne.n	8006fac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0210 	bic.w	r2, r2, #16
 8006f9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8306 	beq.w	80075d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8088 	beq.w	80070e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7a      	ldr	r2, [pc, #488]	; (80071cc <HAL_DMA_IRQHandler+0xa08>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d04a      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a79      	ldr	r2, [pc, #484]	; (80071d0 <HAL_DMA_IRQHandler+0xa0c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d045      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a77      	ldr	r2, [pc, #476]	; (80071d4 <HAL_DMA_IRQHandler+0xa10>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d040      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a76      	ldr	r2, [pc, #472]	; (80071d8 <HAL_DMA_IRQHandler+0xa14>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d03b      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a74      	ldr	r2, [pc, #464]	; (80071dc <HAL_DMA_IRQHandler+0xa18>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d036      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a73      	ldr	r2, [pc, #460]	; (80071e0 <HAL_DMA_IRQHandler+0xa1c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d031      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a71      	ldr	r2, [pc, #452]	; (80071e4 <HAL_DMA_IRQHandler+0xa20>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d02c      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a70      	ldr	r2, [pc, #448]	; (80071e8 <HAL_DMA_IRQHandler+0xa24>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d027      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <HAL_DMA_IRQHandler+0xa28>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d022      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6d      	ldr	r2, [pc, #436]	; (80071f0 <HAL_DMA_IRQHandler+0xa2c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d01d      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6b      	ldr	r2, [pc, #428]	; (80071f4 <HAL_DMA_IRQHandler+0xa30>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d018      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6a      	ldr	r2, [pc, #424]	; (80071f8 <HAL_DMA_IRQHandler+0xa34>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a68      	ldr	r2, [pc, #416]	; (80071fc <HAL_DMA_IRQHandler+0xa38>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a67      	ldr	r2, [pc, #412]	; (8007200 <HAL_DMA_IRQHandler+0xa3c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a65      	ldr	r2, [pc, #404]	; (8007204 <HAL_DMA_IRQHandler+0xa40>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a64      	ldr	r2, [pc, #400]	; (8007208 <HAL_DMA_IRQHandler+0xa44>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d108      	bne.n	800708e <HAL_DMA_IRQHandler+0x8ca>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e007      	b.n	800709e <HAL_DMA_IRQHandler+0x8da>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d307      	bcc.n	80070ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f2      	bne.n	800709e <HAL_DMA_IRQHandler+0x8da>
 80070b8:	e000      	b.n	80070bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2203      	movs	r2, #3
 80070ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070d2:	e003      	b.n	80070dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8272 	beq.w	80075d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	e26c      	b.n	80075d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a43      	ldr	r2, [pc, #268]	; (800720c <HAL_DMA_IRQHandler+0xa48>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d022      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a42      	ldr	r2, [pc, #264]	; (8007210 <HAL_DMA_IRQHandler+0xa4c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d01d      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a40      	ldr	r2, [pc, #256]	; (8007214 <HAL_DMA_IRQHandler+0xa50>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d018      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <HAL_DMA_IRQHandler+0xa54>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3d      	ldr	r2, [pc, #244]	; (800721c <HAL_DMA_IRQHandler+0xa58>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00e      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a3c      	ldr	r2, [pc, #240]	; (8007220 <HAL_DMA_IRQHandler+0xa5c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d009      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3a      	ldr	r2, [pc, #232]	; (8007224 <HAL_DMA_IRQHandler+0xa60>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d004      	beq.n	8007148 <HAL_DMA_IRQHandler+0x984>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a39      	ldr	r2, [pc, #228]	; (8007228 <HAL_DMA_IRQHandler+0xa64>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d101      	bne.n	800714c <HAL_DMA_IRQHandler+0x988>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <HAL_DMA_IRQHandler+0x98a>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 823f 	beq.w	80075d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2204      	movs	r2, #4
 8007166:	409a      	lsls	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80cd 	beq.w	800730c <HAL_DMA_IRQHandler+0xb48>
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80c7 	beq.w	800730c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2204      	movs	r2, #4
 8007188:	409a      	lsls	r2, r3
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d049      	beq.n	800722c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8210 	beq.w	80075cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b4:	e20a      	b.n	80075cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8206 	beq.w	80075cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c8:	e200      	b.n	80075cc <HAL_DMA_IRQHandler+0xe08>
 80071ca:	bf00      	nop
 80071cc:	40020010 	.word	0x40020010
 80071d0:	40020028 	.word	0x40020028
 80071d4:	40020040 	.word	0x40020040
 80071d8:	40020058 	.word	0x40020058
 80071dc:	40020070 	.word	0x40020070
 80071e0:	40020088 	.word	0x40020088
 80071e4:	400200a0 	.word	0x400200a0
 80071e8:	400200b8 	.word	0x400200b8
 80071ec:	40020410 	.word	0x40020410
 80071f0:	40020428 	.word	0x40020428
 80071f4:	40020440 	.word	0x40020440
 80071f8:	40020458 	.word	0x40020458
 80071fc:	40020470 	.word	0x40020470
 8007200:	40020488 	.word	0x40020488
 8007204:	400204a0 	.word	0x400204a0
 8007208:	400204b8 	.word	0x400204b8
 800720c:	58025408 	.word	0x58025408
 8007210:	5802541c 	.word	0x5802541c
 8007214:	58025430 	.word	0x58025430
 8007218:	58025444 	.word	0x58025444
 800721c:	58025458 	.word	0x58025458
 8007220:	5802546c 	.word	0x5802546c
 8007224:	58025480 	.word	0x58025480
 8007228:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d160      	bne.n	80072f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7f      	ldr	r2, [pc, #508]	; (8007438 <HAL_DMA_IRQHandler+0xc74>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d04a      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7d      	ldr	r2, [pc, #500]	; (800743c <HAL_DMA_IRQHandler+0xc78>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d045      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7c      	ldr	r2, [pc, #496]	; (8007440 <HAL_DMA_IRQHandler+0xc7c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d040      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7a      	ldr	r2, [pc, #488]	; (8007444 <HAL_DMA_IRQHandler+0xc80>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d03b      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a79      	ldr	r2, [pc, #484]	; (8007448 <HAL_DMA_IRQHandler+0xc84>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d036      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a77      	ldr	r2, [pc, #476]	; (800744c <HAL_DMA_IRQHandler+0xc88>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d031      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a76      	ldr	r2, [pc, #472]	; (8007450 <HAL_DMA_IRQHandler+0xc8c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d02c      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a74      	ldr	r2, [pc, #464]	; (8007454 <HAL_DMA_IRQHandler+0xc90>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d027      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a73      	ldr	r2, [pc, #460]	; (8007458 <HAL_DMA_IRQHandler+0xc94>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d022      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a71      	ldr	r2, [pc, #452]	; (800745c <HAL_DMA_IRQHandler+0xc98>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01d      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a70      	ldr	r2, [pc, #448]	; (8007460 <HAL_DMA_IRQHandler+0xc9c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d018      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a6e      	ldr	r2, [pc, #440]	; (8007464 <HAL_DMA_IRQHandler+0xca0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a6d      	ldr	r2, [pc, #436]	; (8007468 <HAL_DMA_IRQHandler+0xca4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6b      	ldr	r2, [pc, #428]	; (800746c <HAL_DMA_IRQHandler+0xca8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6a      	ldr	r2, [pc, #424]	; (8007470 <HAL_DMA_IRQHandler+0xcac>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a68      	ldr	r2, [pc, #416]	; (8007474 <HAL_DMA_IRQHandler+0xcb0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <HAL_DMA_IRQHandler+0xb24>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0208 	bic.w	r2, r2, #8
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e007      	b.n	80072f8 <HAL_DMA_IRQHandler+0xb34>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8165 	beq.w	80075cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800730a:	e15f      	b.n	80075cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2202      	movs	r2, #2
 8007316:	409a      	lsls	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80c5 	beq.w	80074ac <HAL_DMA_IRQHandler+0xce8>
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80bf 	beq.w	80074ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2202      	movs	r2, #2
 8007338:	409a      	lsls	r2, r3
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d018      	beq.n	800737a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 813a 	beq.w	80075d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007364:	e134      	b.n	80075d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8130 	beq.w	80075d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007378:	e12a      	b.n	80075d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 8089 	bne.w	8007498 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2b      	ldr	r2, [pc, #172]	; (8007438 <HAL_DMA_IRQHandler+0xc74>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d04a      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a29      	ldr	r2, [pc, #164]	; (800743c <HAL_DMA_IRQHandler+0xc78>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a28      	ldr	r2, [pc, #160]	; (8007440 <HAL_DMA_IRQHandler+0xc7c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d040      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a26      	ldr	r2, [pc, #152]	; (8007444 <HAL_DMA_IRQHandler+0xc80>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a25      	ldr	r2, [pc, #148]	; (8007448 <HAL_DMA_IRQHandler+0xc84>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d036      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a23      	ldr	r2, [pc, #140]	; (800744c <HAL_DMA_IRQHandler+0xc88>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a22      	ldr	r2, [pc, #136]	; (8007450 <HAL_DMA_IRQHandler+0xc8c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d02c      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a20      	ldr	r2, [pc, #128]	; (8007454 <HAL_DMA_IRQHandler+0xc90>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d027      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1f      	ldr	r2, [pc, #124]	; (8007458 <HAL_DMA_IRQHandler+0xc94>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1d      	ldr	r2, [pc, #116]	; (800745c <HAL_DMA_IRQHandler+0xc98>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01d      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_DMA_IRQHandler+0xc9c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <HAL_DMA_IRQHandler+0xca0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a19      	ldr	r2, [pc, #100]	; (8007468 <HAL_DMA_IRQHandler+0xca4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a17      	ldr	r2, [pc, #92]	; (800746c <HAL_DMA_IRQHandler+0xca8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_DMA_IRQHandler+0xcac>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_DMA_IRQHandler+0xc62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a14      	ldr	r2, [pc, #80]	; (8007474 <HAL_DMA_IRQHandler+0xcb0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d128      	bne.n	8007478 <HAL_DMA_IRQHandler+0xcb4>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0214 	bic.w	r2, r2, #20
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e027      	b.n	8007488 <HAL_DMA_IRQHandler+0xcc4>
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 020a 	bic.w	r2, r2, #10
 8007486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8097 	beq.w	80075d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074aa:	e091      	b.n	80075d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	2208      	movs	r2, #8
 80074b6:	409a      	lsls	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 8088 	beq.w	80075d2 <HAL_DMA_IRQHandler+0xe0e>
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8082 	beq.w	80075d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a41      	ldr	r2, [pc, #260]	; (80075d8 <HAL_DMA_IRQHandler+0xe14>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d04a      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a3f      	ldr	r2, [pc, #252]	; (80075dc <HAL_DMA_IRQHandler+0xe18>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d045      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a3e      	ldr	r2, [pc, #248]	; (80075e0 <HAL_DMA_IRQHandler+0xe1c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d040      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3c      	ldr	r2, [pc, #240]	; (80075e4 <HAL_DMA_IRQHandler+0xe20>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d03b      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	; (80075e8 <HAL_DMA_IRQHandler+0xe24>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d036      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a39      	ldr	r2, [pc, #228]	; (80075ec <HAL_DMA_IRQHandler+0xe28>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d031      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <HAL_DMA_IRQHandler+0xe2c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d02c      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	; (80075f4 <HAL_DMA_IRQHandler+0xe30>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d027      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <HAL_DMA_IRQHandler+0xe34>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d022      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a33      	ldr	r2, [pc, #204]	; (80075fc <HAL_DMA_IRQHandler+0xe38>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01d      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a32      	ldr	r2, [pc, #200]	; (8007600 <HAL_DMA_IRQHandler+0xe3c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d018      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	; (8007604 <HAL_DMA_IRQHandler+0xe40>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a2f      	ldr	r2, [pc, #188]	; (8007608 <HAL_DMA_IRQHandler+0xe44>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2d      	ldr	r2, [pc, #180]	; (800760c <HAL_DMA_IRQHandler+0xe48>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2c      	ldr	r2, [pc, #176]	; (8007610 <HAL_DMA_IRQHandler+0xe4c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2a      	ldr	r2, [pc, #168]	; (8007614 <HAL_DMA_IRQHandler+0xe50>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d108      	bne.n	8007580 <HAL_DMA_IRQHandler+0xdbc>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 021c 	bic.w	r2, r2, #28
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e007      	b.n	8007590 <HAL_DMA_IRQHandler+0xdcc>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 020e 	bic.w	r2, r2, #14
 800758e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
 80075c6:	e004      	b.n	80075d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075d2:	3728      	adds	r7, #40	; 0x28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40020010 	.word	0x40020010
 80075dc:	40020028 	.word	0x40020028
 80075e0:	40020040 	.word	0x40020040
 80075e4:	40020058 	.word	0x40020058
 80075e8:	40020070 	.word	0x40020070
 80075ec:	40020088 	.word	0x40020088
 80075f0:	400200a0 	.word	0x400200a0
 80075f4:	400200b8 	.word	0x400200b8
 80075f8:	40020410 	.word	0x40020410
 80075fc:	40020428 	.word	0x40020428
 8007600:	40020440 	.word	0x40020440
 8007604:	40020458 	.word	0x40020458
 8007608:	40020470 	.word	0x40020470
 800760c:	40020488 	.word	0x40020488
 8007610:	400204a0 	.word	0x400204a0
 8007614:	400204b8 	.word	0x400204b8

08007618 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007630:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a7f      	ldr	r2, [pc, #508]	; (8007834 <DMA_SetConfig+0x21c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d072      	beq.n	8007722 <DMA_SetConfig+0x10a>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a7d      	ldr	r2, [pc, #500]	; (8007838 <DMA_SetConfig+0x220>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d06d      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a7c      	ldr	r2, [pc, #496]	; (800783c <DMA_SetConfig+0x224>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d068      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a7a      	ldr	r2, [pc, #488]	; (8007840 <DMA_SetConfig+0x228>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d063      	beq.n	8007722 <DMA_SetConfig+0x10a>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a79      	ldr	r2, [pc, #484]	; (8007844 <DMA_SetConfig+0x22c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d05e      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a77      	ldr	r2, [pc, #476]	; (8007848 <DMA_SetConfig+0x230>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d059      	beq.n	8007722 <DMA_SetConfig+0x10a>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a76      	ldr	r2, [pc, #472]	; (800784c <DMA_SetConfig+0x234>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d054      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a74      	ldr	r2, [pc, #464]	; (8007850 <DMA_SetConfig+0x238>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d04f      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a73      	ldr	r2, [pc, #460]	; (8007854 <DMA_SetConfig+0x23c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d04a      	beq.n	8007722 <DMA_SetConfig+0x10a>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a71      	ldr	r2, [pc, #452]	; (8007858 <DMA_SetConfig+0x240>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d045      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a70      	ldr	r2, [pc, #448]	; (800785c <DMA_SetConfig+0x244>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d040      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a6e      	ldr	r2, [pc, #440]	; (8007860 <DMA_SetConfig+0x248>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d03b      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a6d      	ldr	r2, [pc, #436]	; (8007864 <DMA_SetConfig+0x24c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d036      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6b      	ldr	r2, [pc, #428]	; (8007868 <DMA_SetConfig+0x250>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a6a      	ldr	r2, [pc, #424]	; (800786c <DMA_SetConfig+0x254>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d02c      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a68      	ldr	r2, [pc, #416]	; (8007870 <DMA_SetConfig+0x258>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d027      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a67      	ldr	r2, [pc, #412]	; (8007874 <DMA_SetConfig+0x25c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a65      	ldr	r2, [pc, #404]	; (8007878 <DMA_SetConfig+0x260>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a64      	ldr	r2, [pc, #400]	; (800787c <DMA_SetConfig+0x264>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a62      	ldr	r2, [pc, #392]	; (8007880 <DMA_SetConfig+0x268>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <DMA_SetConfig+0x10a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a61      	ldr	r2, [pc, #388]	; (8007884 <DMA_SetConfig+0x26c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a5f      	ldr	r2, [pc, #380]	; (8007888 <DMA_SetConfig+0x270>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <DMA_SetConfig+0x10a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5e      	ldr	r2, [pc, #376]	; (800788c <DMA_SetConfig+0x274>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <DMA_SetConfig+0x10a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5c      	ldr	r2, [pc, #368]	; (8007890 <DMA_SetConfig+0x278>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <DMA_SetConfig+0x10e>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <DMA_SetConfig+0x110>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007734:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007746:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a39      	ldr	r2, [pc, #228]	; (8007834 <DMA_SetConfig+0x21c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d04a      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a38      	ldr	r2, [pc, #224]	; (8007838 <DMA_SetConfig+0x220>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d045      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a36      	ldr	r2, [pc, #216]	; (800783c <DMA_SetConfig+0x224>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d040      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a35      	ldr	r2, [pc, #212]	; (8007840 <DMA_SetConfig+0x228>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d03b      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a33      	ldr	r2, [pc, #204]	; (8007844 <DMA_SetConfig+0x22c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d036      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a32      	ldr	r2, [pc, #200]	; (8007848 <DMA_SetConfig+0x230>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d031      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a30      	ldr	r2, [pc, #192]	; (800784c <DMA_SetConfig+0x234>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d02c      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a2f      	ldr	r2, [pc, #188]	; (8007850 <DMA_SetConfig+0x238>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d027      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2d      	ldr	r2, [pc, #180]	; (8007854 <DMA_SetConfig+0x23c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2c      	ldr	r2, [pc, #176]	; (8007858 <DMA_SetConfig+0x240>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01d      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2a      	ldr	r2, [pc, #168]	; (800785c <DMA_SetConfig+0x244>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a29      	ldr	r2, [pc, #164]	; (8007860 <DMA_SetConfig+0x248>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a27      	ldr	r2, [pc, #156]	; (8007864 <DMA_SetConfig+0x24c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a26      	ldr	r2, [pc, #152]	; (8007868 <DMA_SetConfig+0x250>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a24      	ldr	r2, [pc, #144]	; (800786c <DMA_SetConfig+0x254>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <DMA_SetConfig+0x1d0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a23      	ldr	r2, [pc, #140]	; (8007870 <DMA_SetConfig+0x258>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d101      	bne.n	80077ec <DMA_SetConfig+0x1d4>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <DMA_SetConfig+0x1d6>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d059      	beq.n	80078a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	223f      	movs	r2, #63	; 0x3f
 80077fc:	409a      	lsls	r2, r3
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007810:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d138      	bne.n	8007894 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007832:	e086      	b.n	8007942 <DMA_SetConfig+0x32a>
 8007834:	40020010 	.word	0x40020010
 8007838:	40020028 	.word	0x40020028
 800783c:	40020040 	.word	0x40020040
 8007840:	40020058 	.word	0x40020058
 8007844:	40020070 	.word	0x40020070
 8007848:	40020088 	.word	0x40020088
 800784c:	400200a0 	.word	0x400200a0
 8007850:	400200b8 	.word	0x400200b8
 8007854:	40020410 	.word	0x40020410
 8007858:	40020428 	.word	0x40020428
 800785c:	40020440 	.word	0x40020440
 8007860:	40020458 	.word	0x40020458
 8007864:	40020470 	.word	0x40020470
 8007868:	40020488 	.word	0x40020488
 800786c:	400204a0 	.word	0x400204a0
 8007870:	400204b8 	.word	0x400204b8
 8007874:	58025408 	.word	0x58025408
 8007878:	5802541c 	.word	0x5802541c
 800787c:	58025430 	.word	0x58025430
 8007880:	58025444 	.word	0x58025444
 8007884:	58025458 	.word	0x58025458
 8007888:	5802546c 	.word	0x5802546c
 800788c:	58025480 	.word	0x58025480
 8007890:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
}
 80078a4:	e04d      	b.n	8007942 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <DMA_SetConfig+0x338>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d022      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a27      	ldr	r2, [pc, #156]	; (8007954 <DMA_SetConfig+0x33c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01d      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <DMA_SetConfig+0x340>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d018      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a24      	ldr	r2, [pc, #144]	; (800795c <DMA_SetConfig+0x344>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d013      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a23      	ldr	r2, [pc, #140]	; (8007960 <DMA_SetConfig+0x348>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00e      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a21      	ldr	r2, [pc, #132]	; (8007964 <DMA_SetConfig+0x34c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d009      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a20      	ldr	r2, [pc, #128]	; (8007968 <DMA_SetConfig+0x350>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <DMA_SetConfig+0x2de>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1e      	ldr	r2, [pc, #120]	; (800796c <DMA_SetConfig+0x354>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d101      	bne.n	80078fa <DMA_SetConfig+0x2e2>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <DMA_SetConfig+0x2e4>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2201      	movs	r2, #1
 800790a:	409a      	lsls	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d108      	bne.n	8007932 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	60da      	str	r2, [r3, #12]
}
 8007930:	e007      	b.n	8007942 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	60da      	str	r2, [r3, #12]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	58025408 	.word	0x58025408
 8007954:	5802541c 	.word	0x5802541c
 8007958:	58025430 	.word	0x58025430
 800795c:	58025444 	.word	0x58025444
 8007960:	58025458 	.word	0x58025458
 8007964:	5802546c 	.word	0x5802546c
 8007968:	58025480 	.word	0x58025480
 800796c:	58025494 	.word	0x58025494

08007970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a42      	ldr	r2, [pc, #264]	; (8007a88 <DMA_CalcBaseAndBitshift+0x118>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d04a      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a41      	ldr	r2, [pc, #260]	; (8007a8c <DMA_CalcBaseAndBitshift+0x11c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d045      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a3f      	ldr	r2, [pc, #252]	; (8007a90 <DMA_CalcBaseAndBitshift+0x120>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d040      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a3e      	ldr	r2, [pc, #248]	; (8007a94 <DMA_CalcBaseAndBitshift+0x124>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d03b      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <DMA_CalcBaseAndBitshift+0x128>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d036      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a3b      	ldr	r2, [pc, #236]	; (8007a9c <DMA_CalcBaseAndBitshift+0x12c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d031      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a39      	ldr	r2, [pc, #228]	; (8007aa0 <DMA_CalcBaseAndBitshift+0x130>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d02c      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a38      	ldr	r2, [pc, #224]	; (8007aa4 <DMA_CalcBaseAndBitshift+0x134>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d027      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a36      	ldr	r2, [pc, #216]	; (8007aa8 <DMA_CalcBaseAndBitshift+0x138>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d022      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a35      	ldr	r2, [pc, #212]	; (8007aac <DMA_CalcBaseAndBitshift+0x13c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d01d      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a33      	ldr	r2, [pc, #204]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x140>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d018      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a32      	ldr	r2, [pc, #200]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x144>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a30      	ldr	r2, [pc, #192]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x148>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00e      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a2f      	ldr	r2, [pc, #188]	; (8007abc <DMA_CalcBaseAndBitshift+0x14c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d009      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2d      	ldr	r2, [pc, #180]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x150>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xa8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2c      	ldr	r2, [pc, #176]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x154>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d101      	bne.n	8007a1c <DMA_CalcBaseAndBitshift+0xac>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <DMA_CalcBaseAndBitshift+0xae>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d024      	beq.n	8007a6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	3b10      	subs	r3, #16
 8007a2a:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x158>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	4a24      	ldr	r2, [pc, #144]	; (8007acc <DMA_CalcBaseAndBitshift+0x15c>)
 8007a3c:	5cd3      	ldrb	r3, [r2, r3]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d908      	bls.n	8007a5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x160>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	; 0x58
 8007a5a:	e00d      	b.n	8007a78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x160>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6593      	str	r3, [r2, #88]	; 0x58
 8007a6a:	e005      	b.n	8007a78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
 8007ac8:	aaaaaaab 	.word	0xaaaaaaab
 8007acc:	0800eb08 	.word	0x0800eb08
 8007ad0:	fffffc00 	.word	0xfffffc00

08007ad4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d120      	bne.n	8007b2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d858      	bhi.n	8007ba2 <DMA_CheckFifoParam+0xce>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <DMA_CheckFifoParam+0x24>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b1b 	.word	0x08007b1b
 8007b00:	08007b09 	.word	0x08007b09
 8007b04:	08007ba3 	.word	0x08007ba3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d048      	beq.n	8007ba6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b18:	e045      	b.n	8007ba6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b22:	d142      	bne.n	8007baa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b28:	e03f      	b.n	8007baa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	d123      	bne.n	8007b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d838      	bhi.n	8007bae <DMA_CheckFifoParam+0xda>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <DMA_CheckFifoParam+0x70>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b5b 	.word	0x08007b5b
 8007b4c:	08007b55 	.word	0x08007b55
 8007b50:	08007b6d 	.word	0x08007b6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	73fb      	strb	r3, [r7, #15]
        break;
 8007b58:	e030      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d025      	beq.n	8007bb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b6a:	e022      	b.n	8007bb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b74:	d11f      	bne.n	8007bb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b7a:	e01c      	b.n	8007bb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d902      	bls.n	8007b8a <DMA_CheckFifoParam+0xb6>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d003      	beq.n	8007b90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b88:	e018      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007b8e:	e015      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00e      	beq.n	8007bba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba0:	e00b      	b.n	8007bba <DMA_CheckFifoParam+0xe6>
        break;
 8007ba2:	bf00      	nop
 8007ba4:	e00a      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        break;
 8007ba6:	bf00      	nop
 8007ba8:	e008      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        break;
 8007baa:	bf00      	nop
 8007bac:	e006      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        break;
 8007bae:	bf00      	nop
 8007bb0:	e004      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        break;
 8007bb2:	bf00      	nop
 8007bb4:	e002      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
        break;
 8007bb6:	bf00      	nop
 8007bb8:	e000      	b.n	8007bbc <DMA_CheckFifoParam+0xe8>
    break;
 8007bba:	bf00      	nop
    }
  }

  return status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop

08007bcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a38      	ldr	r2, [pc, #224]	; (8007cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d022      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a36      	ldr	r2, [pc, #216]	; (8007cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01d      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a35      	ldr	r2, [pc, #212]	; (8007cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d018      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a33      	ldr	r2, [pc, #204]	; (8007ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a32      	ldr	r2, [pc, #200]	; (8007cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a30      	ldr	r2, [pc, #192]	; (8007cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d009      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2f      	ldr	r2, [pc, #188]	; (8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d004      	beq.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d101      	bne.n	8007c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e000      	b.n	8007c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01a      	beq.n	8007c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	3b08      	subs	r3, #8
 8007c3c:	4a28      	ldr	r2, [pc, #160]	; (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	091b      	lsrs	r3, r3, #4
 8007c44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2201      	movs	r2, #1
 8007c62:	409a      	lsls	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c68:	e024      	b.n	8007cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	3b10      	subs	r3, #16
 8007c72:	4a1e      	ldr	r2, [pc, #120]	; (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d806      	bhi.n	8007c92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a1b      	ldr	r2, [pc, #108]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d902      	bls.n	8007c92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a16      	ldr	r2, [pc, #88]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f003 031f 	and.w	r3, r3, #31
 8007cac:	2201      	movs	r2, #1
 8007cae:	409a      	lsls	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	58025408 	.word	0x58025408
 8007cc4:	5802541c 	.word	0x5802541c
 8007cc8:	58025430 	.word	0x58025430
 8007ccc:	58025444 	.word	0x58025444
 8007cd0:	58025458 	.word	0x58025458
 8007cd4:	5802546c 	.word	0x5802546c
 8007cd8:	58025480 	.word	0x58025480
 8007cdc:	58025494 	.word	0x58025494
 8007ce0:	cccccccd 	.word	0xcccccccd
 8007ce4:	16009600 	.word	0x16009600
 8007ce8:	58025880 	.word	0x58025880
 8007cec:	aaaaaaab 	.word	0xaaaaaaab
 8007cf0:	400204b8 	.word	0x400204b8
 8007cf4:	4002040f 	.word	0x4002040f
 8007cf8:	10008200 	.word	0x10008200
 8007cfc:	40020880 	.word	0x40020880

08007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d04a      	beq.n	8007dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d847      	bhi.n	8007dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a25      	ldr	r2, [pc, #148]	; (8007db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d022      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a24      	ldr	r2, [pc, #144]	; (8007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d01d      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d018      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a21      	ldr	r2, [pc, #132]	; (8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00e      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d101      	bne.n	8007d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d70:	2300      	movs	r3, #0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d88:	671a      	str	r2, [r3, #112]	; 0x70
 8007d8a:	e009      	b.n	8007da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007d9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	2201      	movs	r2, #1
 8007da6:	409a      	lsls	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	58025408 	.word	0x58025408
 8007dbc:	5802541c 	.word	0x5802541c
 8007dc0:	58025430 	.word	0x58025430
 8007dc4:	58025444 	.word	0x58025444
 8007dc8:	58025458 	.word	0x58025458
 8007dcc:	5802546c 	.word	0x5802546c
 8007dd0:	58025480 	.word	0x58025480
 8007dd4:	58025494 	.word	0x58025494
 8007dd8:	1600963f 	.word	0x1600963f
 8007ddc:	58025940 	.word	0x58025940
 8007de0:	1000823f 	.word	0x1000823f
 8007de4:	40020940 	.word	0x40020940

08007de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b089      	sub	sp, #36	; 0x24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007df6:	4b86      	ldr	r3, [pc, #536]	; (8008010 <HAL_GPIO_Init+0x228>)
 8007df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dfa:	e18c      	b.n	8008116 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	2101      	movs	r1, #1
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	fa01 f303 	lsl.w	r3, r1, r3
 8007e08:	4013      	ands	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 817e 	beq.w	8008110 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d005      	beq.n	8007e2c <HAL_GPIO_Init+0x44>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d130      	bne.n	8007e8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	2203      	movs	r2, #3
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4013      	ands	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e62:	2201      	movs	r2, #1
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	f003 0201 	and.w	r2, r3, #1
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d017      	beq.n	8007eca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d123      	bne.n	8007f1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	08da      	lsrs	r2, r3, #3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3208      	adds	r2, #8
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	220f      	movs	r2, #15
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	08da      	lsrs	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3208      	adds	r2, #8
 8007f18:	69b9      	ldr	r1, [r7, #24]
 8007f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	2203      	movs	r2, #3
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f003 0203 	and.w	r2, r3, #3
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80d8 	beq.w	8008110 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f60:	4b2c      	ldr	r3, [pc, #176]	; (8008014 <HAL_GPIO_Init+0x22c>)
 8007f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f66:	4a2b      	ldr	r2, [pc, #172]	; (8008014 <HAL_GPIO_Init+0x22c>)
 8007f68:	f043 0302 	orr.w	r3, r3, #2
 8007f6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <HAL_GPIO_Init+0x22c>)
 8007f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f7e:	4a26      	ldr	r2, [pc, #152]	; (8008018 <HAL_GPIO_Init+0x230>)
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	089b      	lsrs	r3, r3, #2
 8007f84:	3302      	adds	r3, #2
 8007f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	220f      	movs	r2, #15
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	43db      	mvns	r3, r3
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1d      	ldr	r2, [pc, #116]	; (800801c <HAL_GPIO_Init+0x234>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d04a      	beq.n	8008040 <HAL_GPIO_Init+0x258>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <HAL_GPIO_Init+0x238>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d02b      	beq.n	800800a <HAL_GPIO_Init+0x222>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <HAL_GPIO_Init+0x23c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d025      	beq.n	8008006 <HAL_GPIO_Init+0x21e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <HAL_GPIO_Init+0x240>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01f      	beq.n	8008002 <HAL_GPIO_Init+0x21a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a19      	ldr	r2, [pc, #100]	; (800802c <HAL_GPIO_Init+0x244>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d019      	beq.n	8007ffe <HAL_GPIO_Init+0x216>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_GPIO_Init+0x248>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <HAL_GPIO_Init+0x212>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a17      	ldr	r2, [pc, #92]	; (8008034 <HAL_GPIO_Init+0x24c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00d      	beq.n	8007ff6 <HAL_GPIO_Init+0x20e>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a16      	ldr	r2, [pc, #88]	; (8008038 <HAL_GPIO_Init+0x250>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <HAL_GPIO_Init+0x20a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a15      	ldr	r2, [pc, #84]	; (800803c <HAL_GPIO_Init+0x254>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d101      	bne.n	8007fee <HAL_GPIO_Init+0x206>
 8007fea:	2309      	movs	r3, #9
 8007fec:	e029      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8007fee:	230a      	movs	r3, #10
 8007ff0:	e027      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8007ff2:	2307      	movs	r3, #7
 8007ff4:	e025      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8007ff6:	2306      	movs	r3, #6
 8007ff8:	e023      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8007ffa:	2305      	movs	r3, #5
 8007ffc:	e021      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8007ffe:	2304      	movs	r3, #4
 8008000:	e01f      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8008002:	2303      	movs	r3, #3
 8008004:	e01d      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 8008006:	2302      	movs	r3, #2
 8008008:	e01b      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 800800a:	2301      	movs	r3, #1
 800800c:	e019      	b.n	8008042 <HAL_GPIO_Init+0x25a>
 800800e:	bf00      	nop
 8008010:	58000080 	.word	0x58000080
 8008014:	58024400 	.word	0x58024400
 8008018:	58000400 	.word	0x58000400
 800801c:	58020000 	.word	0x58020000
 8008020:	58020400 	.word	0x58020400
 8008024:	58020800 	.word	0x58020800
 8008028:	58020c00 	.word	0x58020c00
 800802c:	58021000 	.word	0x58021000
 8008030:	58021400 	.word	0x58021400
 8008034:	58021800 	.word	0x58021800
 8008038:	58021c00 	.word	0x58021c00
 800803c:	58022400 	.word	0x58022400
 8008040:	2300      	movs	r3, #0
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	f002 0203 	and.w	r2, r2, #3
 8008048:	0092      	lsls	r2, r2, #2
 800804a:	4093      	lsls	r3, r2
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	4313      	orrs	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008052:	4938      	ldr	r1, [pc, #224]	; (8008134 <HAL_GPIO_Init+0x34c>)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	089b      	lsrs	r3, r3, #2
 8008058:	3302      	adds	r3, #2
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	43db      	mvns	r3, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4013      	ands	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800808e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	43db      	mvns	r3, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	4013      	ands	r3, r2
 800809e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	4013      	ands	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	43db      	mvns	r3, r3
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	4013      	ands	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	3301      	adds	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	f47f ae6b 	bne.w	8007dfc <HAL_GPIO_Init+0x14>
  }
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	3724      	adds	r7, #36	; 0x24
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	58000400 	.word	0x58000400

08008138 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008146:	4b72      	ldr	r3, [pc, #456]	; (8008310 <HAL_GPIO_DeInit+0x1d8>)
 8008148:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800814a:	e0d3      	b.n	80082f4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800814c:	2201      	movs	r2, #1
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4013      	ands	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 80c6 	beq.w	80082ee <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008162:	4a6c      	ldr	r2, [pc, #432]	; (8008314 <HAL_GPIO_DeInit+0x1dc>)
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	089b      	lsrs	r3, r3, #2
 8008168:	3302      	adds	r3, #2
 800816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800816e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	220f      	movs	r2, #15
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4013      	ands	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a64      	ldr	r2, [pc, #400]	; (8008318 <HAL_GPIO_DeInit+0x1e0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d031      	beq.n	80081f0 <HAL_GPIO_DeInit+0xb8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a63      	ldr	r2, [pc, #396]	; (800831c <HAL_GPIO_DeInit+0x1e4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d02b      	beq.n	80081ec <HAL_GPIO_DeInit+0xb4>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a62      	ldr	r2, [pc, #392]	; (8008320 <HAL_GPIO_DeInit+0x1e8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d025      	beq.n	80081e8 <HAL_GPIO_DeInit+0xb0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a61      	ldr	r2, [pc, #388]	; (8008324 <HAL_GPIO_DeInit+0x1ec>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d01f      	beq.n	80081e4 <HAL_GPIO_DeInit+0xac>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a60      	ldr	r2, [pc, #384]	; (8008328 <HAL_GPIO_DeInit+0x1f0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d019      	beq.n	80081e0 <HAL_GPIO_DeInit+0xa8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a5f      	ldr	r2, [pc, #380]	; (800832c <HAL_GPIO_DeInit+0x1f4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d013      	beq.n	80081dc <HAL_GPIO_DeInit+0xa4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a5e      	ldr	r2, [pc, #376]	; (8008330 <HAL_GPIO_DeInit+0x1f8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00d      	beq.n	80081d8 <HAL_GPIO_DeInit+0xa0>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a5d      	ldr	r2, [pc, #372]	; (8008334 <HAL_GPIO_DeInit+0x1fc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <HAL_GPIO_DeInit+0x9c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <HAL_GPIO_DeInit+0x200>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d101      	bne.n	80081d0 <HAL_GPIO_DeInit+0x98>
 80081cc:	2309      	movs	r3, #9
 80081ce:	e010      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081d0:	230a      	movs	r3, #10
 80081d2:	e00e      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081d4:	2307      	movs	r3, #7
 80081d6:	e00c      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081d8:	2306      	movs	r3, #6
 80081da:	e00a      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081dc:	2305      	movs	r3, #5
 80081de:	e008      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081e0:	2304      	movs	r3, #4
 80081e2:	e006      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081e4:	2303      	movs	r3, #3
 80081e6:	e004      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e002      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <HAL_GPIO_DeInit+0xba>
 80081f0:	2300      	movs	r3, #0
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	f002 0203 	and.w	r2, r2, #3
 80081f8:	0092      	lsls	r2, r2, #2
 80081fa:	4093      	lsls	r3, r2
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d136      	bne.n	8008270 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	43db      	mvns	r3, r3
 800820a:	401a      	ands	r2, r3
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	43db      	mvns	r3, r3
 8008218:	401a      	ands	r2, r3
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800821e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	43db      	mvns	r3, r3
 8008228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800822c:	4013      	ands	r3, r2
 800822e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	43db      	mvns	r3, r3
 800823a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800823e:	4013      	ands	r3, r2
 8008240:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	220f      	movs	r2, #15
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008252:	4a30      	ldr	r2, [pc, #192]	; (8008314 <HAL_GPIO_DeInit+0x1dc>)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	089b      	lsrs	r3, r3, #2
 8008258:	3302      	adds	r3, #2
 800825a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	43da      	mvns	r2, r3
 8008262:	482c      	ldr	r0, [pc, #176]	; (8008314 <HAL_GPIO_DeInit+0x1dc>)
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	400a      	ands	r2, r1
 800826a:	3302      	adds	r3, #2
 800826c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	2103      	movs	r1, #3
 800827a:	fa01 f303 	lsl.w	r3, r1, r3
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	08da      	lsrs	r2, r3, #3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3208      	adds	r2, #8
 800828c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	220f      	movs	r2, #15
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43db      	mvns	r3, r3
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	08d2      	lsrs	r2, r2, #3
 80082a4:	4019      	ands	r1, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3208      	adds	r2, #8
 80082aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	2103      	movs	r1, #3
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	43db      	mvns	r3, r3
 80082be:	401a      	ands	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	2101      	movs	r1, #1
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	fa01 f303 	lsl.w	r3, r1, r3
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	2103      	movs	r1, #3
 80082e2:	fa01 f303 	lsl.w	r3, r1, r3
 80082e6:	43db      	mvns	r3, r3
 80082e8:	401a      	ands	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	3301      	adds	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f af25 	bne.w	800814c <HAL_GPIO_DeInit+0x14>
  }
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	58000080 	.word	0x58000080
 8008314:	58000400 	.word	0x58000400
 8008318:	58020000 	.word	0x58020000
 800831c:	58020400 	.word	0x58020400
 8008320:	58020800 	.word	0x58020800
 8008324:	58020c00 	.word	0x58020c00
 8008328:	58021000 	.word	0x58021000
 800832c:	58021400 	.word	0x58021400
 8008330:	58021800 	.word	0x58021800
 8008334:	58021c00 	.word	0x58021c00
 8008338:	58022400 	.word	0x58022400

0800833c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	807b      	strh	r3, [r7, #2]
 8008348:	4613      	mov	r3, r2
 800834a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800834c:	787b      	ldrb	r3, [r7, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008352:	887a      	ldrh	r2, [r7, #2]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008358:	e003      	b.n	8008362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800835a:	887b      	ldrh	r3, [r7, #2]
 800835c:	041a      	lsls	r2, r3, #16
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	619a      	str	r2, [r3, #24]
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	4603      	mov	r3, r0
 8008376:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f804 	bl	80083a2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	4603      	mov	r3, r0
 80083aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80083c0:	4b19      	ldr	r3, [pc, #100]	; (8008428 <HAL_PWREx_ConfigSupply+0x70>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d00a      	beq.n	80083e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80083cc:	4b16      	ldr	r3, [pc, #88]	; (8008428 <HAL_PWREx_ConfigSupply+0x70>)
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d001      	beq.n	80083de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e01f      	b.n	800841e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	e01d      	b.n	800841e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80083e2:	4b11      	ldr	r3, [pc, #68]	; (8008428 <HAL_PWREx_ConfigSupply+0x70>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f023 0207 	bic.w	r2, r3, #7
 80083ea:	490f      	ldr	r1, [pc, #60]	; (8008428 <HAL_PWREx_ConfigSupply+0x70>)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083f2:	f7fc fbbb 	bl	8004b6c <HAL_GetTick>
 80083f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083f8:	e009      	b.n	800840e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083fa:	f7fc fbb7 	bl	8004b6c <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008408:	d901      	bls.n	800840e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e007      	b.n	800841e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800840e:	4b06      	ldr	r3, [pc, #24]	; (8008428 <HAL_PWREx_ConfigSupply+0x70>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841a:	d1ee      	bne.n	80083fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	58024800 	.word	0x58024800

0800842c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e39d      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8087 	beq.w	800855a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800844c:	4b88      	ldr	r3, [pc, #544]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008456:	4b86      	ldr	r3, [pc, #536]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	2b10      	cmp	r3, #16
 8008460:	d007      	beq.n	8008472 <HAL_RCC_OscConfig+0x46>
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	2b18      	cmp	r3, #24
 8008466:	d110      	bne.n	800848a <HAL_RCC_OscConfig+0x5e>
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d10b      	bne.n	800848a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008472:	4b7f      	ldr	r3, [pc, #508]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d06c      	beq.n	8008558 <HAL_RCC_OscConfig+0x12c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d168      	bne.n	8008558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e377      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008492:	d106      	bne.n	80084a2 <HAL_RCC_OscConfig+0x76>
 8008494:	4b76      	ldr	r3, [pc, #472]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a75      	ldr	r2, [pc, #468]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800849a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e02e      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10c      	bne.n	80084c4 <HAL_RCC_OscConfig+0x98>
 80084aa:	4b71      	ldr	r3, [pc, #452]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a70      	ldr	r2, [pc, #448]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4b6e      	ldr	r3, [pc, #440]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a6d      	ldr	r2, [pc, #436]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	e01d      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCC_OscConfig+0xbc>
 80084ce:	4b68      	ldr	r3, [pc, #416]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a67      	ldr	r2, [pc, #412]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b65      	ldr	r3, [pc, #404]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a64      	ldr	r2, [pc, #400]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	e00b      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084e8:	4b61      	ldr	r3, [pc, #388]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a60      	ldr	r2, [pc, #384]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4b5e      	ldr	r3, [pc, #376]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a5d      	ldr	r2, [pc, #372]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80084fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d013      	beq.n	8008530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fc fb30 	bl	8004b6c <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008510:	f7fc fb2c 	bl	8004b6c <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	; 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e32b      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008522:	4b53      	ldr	r3, [pc, #332]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0xe4>
 800852e:	e014      	b.n	800855a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008530:	f7fc fb1c 	bl	8004b6c <HAL_GetTick>
 8008534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008538:	f7fc fb18 	bl	8004b6c <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b64      	cmp	r3, #100	; 0x64
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e317      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800854a:	4b49      	ldr	r3, [pc, #292]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x10c>
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 808c 	beq.w	8008680 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008570:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008572:	4b3f      	ldr	r3, [pc, #252]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <HAL_RCC_OscConfig+0x162>
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	2b18      	cmp	r3, #24
 8008582:	d137      	bne.n	80085f4 <HAL_RCC_OscConfig+0x1c8>
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d132      	bne.n	80085f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800858e:	4b38      	ldr	r3, [pc, #224]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_RCC_OscConfig+0x17a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e2e9      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085a6:	4b32      	ldr	r3, [pc, #200]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f023 0219 	bic.w	r2, r3, #25
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	492f      	ldr	r1, [pc, #188]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085b8:	f7fc fad8 	bl	8004b6c <HAL_GetTick>
 80085bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c0:	f7fc fad4 	bl	8004b6c <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e2d3      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085d2:	4b27      	ldr	r3, [pc, #156]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085de:	4b24      	ldr	r3, [pc, #144]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	4920      	ldr	r1, [pc, #128]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085f2:	e045      	b.n	8008680 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d026      	beq.n	800864a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085fc:	4b1c      	ldr	r3, [pc, #112]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f023 0219 	bic.w	r2, r3, #25
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	4919      	ldr	r1, [pc, #100]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800860a:	4313      	orrs	r3, r2
 800860c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860e:	f7fc faad 	bl	8004b6c <HAL_GetTick>
 8008612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008616:	f7fc faa9 	bl	8004b6c <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e2a8      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008634:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	061b      	lsls	r3, r3, #24
 8008642:	490b      	ldr	r1, [pc, #44]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008644:	4313      	orrs	r3, r2
 8008646:	604b      	str	r3, [r1, #4]
 8008648:	e01a      	b.n	8008680 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a08      	ldr	r2, [pc, #32]	; (8008670 <HAL_RCC_OscConfig+0x244>)
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008656:	f7fc fa89 	bl	8004b6c <HAL_GetTick>
 800865a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800865c:	e00a      	b.n	8008674 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800865e:	f7fc fa85 	bl	8004b6c <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d903      	bls.n	8008674 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e284      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
 8008670:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008674:	4b96      	ldr	r3, [pc, #600]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1ee      	bne.n	800865e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b00      	cmp	r3, #0
 800868a:	d06a      	beq.n	8008762 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800868c:	4b90      	ldr	r3, [pc, #576]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008694:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008696:	4b8e      	ldr	r3, [pc, #568]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d007      	beq.n	80086b2 <HAL_RCC_OscConfig+0x286>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b18      	cmp	r3, #24
 80086a6:	d11b      	bne.n	80086e0 <HAL_RCC_OscConfig+0x2b4>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d116      	bne.n	80086e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086b2:	4b87      	ldr	r3, [pc, #540]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_RCC_OscConfig+0x29e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	2b80      	cmp	r3, #128	; 0x80
 80086c4:	d001      	beq.n	80086ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e257      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ca:	4b81      	ldr	r3, [pc, #516]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	497d      	ldr	r1, [pc, #500]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086de:	e040      	b.n	8008762 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d023      	beq.n	8008730 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086e8:	4b79      	ldr	r3, [pc, #484]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a78      	ldr	r2, [pc, #480]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80086ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f4:	f7fc fa3a 	bl	8004b6c <HAL_GetTick>
 80086f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086fc:	f7fc fa36 	bl	8004b6c <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e235      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800870e:	4b70      	ldr	r3, [pc, #448]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f0      	beq.n	80086fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800871a:	4b6d      	ldr	r3, [pc, #436]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	061b      	lsls	r3, r3, #24
 8008728:	4969      	ldr	r1, [pc, #420]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800872a:	4313      	orrs	r3, r2
 800872c:	60cb      	str	r3, [r1, #12]
 800872e:	e018      	b.n	8008762 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008730:	4b67      	ldr	r3, [pc, #412]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a66      	ldr	r2, [pc, #408]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fc fa16 	bl	8004b6c <HAL_GetTick>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008744:	f7fc fa12 	bl	8004b6c <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e211      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008756:	4b5e      	ldr	r3, [pc, #376]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d036      	beq.n	80087dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d019      	beq.n	80087aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008776:	4b56      	ldr	r3, [pc, #344]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800877a:	4a55      	ldr	r2, [pc, #340]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008782:	f7fc f9f3 	bl	8004b6c <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800878a:	f7fc f9ef 	bl	8004b6c <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e1ee      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800879c:	4b4c      	ldr	r3, [pc, #304]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800879e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f0      	beq.n	800878a <HAL_RCC_OscConfig+0x35e>
 80087a8:	e018      	b.n	80087dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087aa:	4b49      	ldr	r3, [pc, #292]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80087ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ae:	4a48      	ldr	r2, [pc, #288]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b6:	f7fc f9d9 	bl	8004b6c <HAL_GetTick>
 80087ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087bc:	e008      	b.n	80087d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087be:	f7fc f9d5 	bl	8004b6c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d901      	bls.n	80087d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e1d4      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087d0:	4b3f      	ldr	r3, [pc, #252]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80087d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f0      	bne.n	80087be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d036      	beq.n	8008856 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d019      	beq.n	8008824 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087f0:	4b37      	ldr	r3, [pc, #220]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a36      	ldr	r2, [pc, #216]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80087f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087fc:	f7fc f9b6 	bl	8004b6c <HAL_GetTick>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008804:	f7fc f9b2 	bl	8004b6c <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e1b1      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008816:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0f0      	beq.n	8008804 <HAL_RCC_OscConfig+0x3d8>
 8008822:	e018      	b.n	8008856 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008824:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a29      	ldr	r2, [pc, #164]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800882a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008830:	f7fc f99c 	bl	8004b6c <HAL_GetTick>
 8008834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008838:	f7fc f998 	bl	8004b6c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e197      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f0      	bne.n	8008838 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8086 	beq.w	8008970 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <HAL_RCC_OscConfig+0x4a8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1a      	ldr	r2, [pc, #104]	; (80088d4 <HAL_RCC_OscConfig+0x4a8>)
 800886a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800886e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008870:	f7fc f97c 	bl	8004b6c <HAL_GetTick>
 8008874:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008878:	f7fc f978 	bl	8004b6c <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b64      	cmp	r3, #100	; 0x64
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e177      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <HAL_RCC_OscConfig+0x4a8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f0      	beq.n	8008878 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d106      	bne.n	80088ac <HAL_RCC_OscConfig+0x480>
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	6713      	str	r3, [r2, #112]	; 0x70
 80088aa:	e032      	b.n	8008912 <HAL_RCC_OscConfig+0x4e6>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d111      	bne.n	80088d8 <HAL_RCC_OscConfig+0x4ac>
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b8:	4a05      	ldr	r2, [pc, #20]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088ba:	f023 0301 	bic.w	r3, r3, #1
 80088be:	6713      	str	r3, [r2, #112]	; 0x70
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	4a02      	ldr	r2, [pc, #8]	; (80088d0 <HAL_RCC_OscConfig+0x4a4>)
 80088c6:	f023 0304 	bic.w	r3, r3, #4
 80088ca:	6713      	str	r3, [r2, #112]	; 0x70
 80088cc:	e021      	b.n	8008912 <HAL_RCC_OscConfig+0x4e6>
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	58024800 	.word	0x58024800
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d10c      	bne.n	80088fa <HAL_RCC_OscConfig+0x4ce>
 80088e0:	4b83      	ldr	r3, [pc, #524]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80088e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e4:	4a82      	ldr	r2, [pc, #520]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80088e6:	f043 0304 	orr.w	r3, r3, #4
 80088ea:	6713      	str	r3, [r2, #112]	; 0x70
 80088ec:	4b80      	ldr	r3, [pc, #512]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80088ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f0:	4a7f      	ldr	r2, [pc, #508]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	6713      	str	r3, [r2, #112]	; 0x70
 80088f8:	e00b      	b.n	8008912 <HAL_RCC_OscConfig+0x4e6>
 80088fa:	4b7d      	ldr	r3, [pc, #500]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	4a7c      	ldr	r2, [pc, #496]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	6713      	str	r3, [r2, #112]	; 0x70
 8008906:	4b7a      	ldr	r3, [pc, #488]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890a:	4a79      	ldr	r2, [pc, #484]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 800890c:	f023 0304 	bic.w	r3, r3, #4
 8008910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d015      	beq.n	8008946 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800891a:	f7fc f927 	bl	8004b6c <HAL_GetTick>
 800891e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008920:	e00a      	b.n	8008938 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008922:	f7fc f923 	bl	8004b6c <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008930:	4293      	cmp	r3, r2
 8008932:	d901      	bls.n	8008938 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e120      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008938:	4b6d      	ldr	r3, [pc, #436]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0ee      	beq.n	8008922 <HAL_RCC_OscConfig+0x4f6>
 8008944:	e014      	b.n	8008970 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008946:	f7fc f911 	bl	8004b6c <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800894c:	e00a      	b.n	8008964 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800894e:	f7fc f90d 	bl	8004b6c <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	f241 3288 	movw	r2, #5000	; 0x1388
 800895c:	4293      	cmp	r3, r2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e10a      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008964:	4b62      	ldr	r3, [pc, #392]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1ee      	bne.n	800894e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80ff 	beq.w	8008b78 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800897a:	4b5d      	ldr	r3, [pc, #372]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008982:	2b18      	cmp	r3, #24
 8008984:	f000 80ba 	beq.w	8008afc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b02      	cmp	r3, #2
 800898e:	f040 8095 	bne.w	8008abc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008992:	4b57      	ldr	r3, [pc, #348]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a56      	ldr	r2, [pc, #344]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899e:	f7fc f8e5 	bl	8004b6c <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a6:	f7fc f8e1 	bl	8004b6c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0e0      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b8:	4b4d      	ldr	r3, [pc, #308]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089c4:	4b4a      	ldr	r3, [pc, #296]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80089c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089c8:	4b4a      	ldr	r3, [pc, #296]	; (8008af4 <HAL_RCC_OscConfig+0x6c8>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089d4:	0112      	lsls	r2, r2, #4
 80089d6:	430a      	orrs	r2, r1
 80089d8:	4945      	ldr	r1, [pc, #276]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	628b      	str	r3, [r1, #40]	; 0x28
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	3b01      	subs	r3, #1
 80089ee:	025b      	lsls	r3, r3, #9
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	3b01      	subs	r3, #1
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a06:	3b01      	subs	r3, #1
 8008a08:	061b      	lsls	r3, r3, #24
 8008a0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a0e:	4938      	ldr	r1, [pc, #224]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a14:	4b36      	ldr	r3, [pc, #216]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	4a35      	ldr	r2, [pc, #212]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a20:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a24:	4b34      	ldr	r3, [pc, #208]	; (8008af8 <HAL_RCC_OscConfig+0x6cc>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a2c:	00d2      	lsls	r2, r2, #3
 8008a2e:	4930      	ldr	r1, [pc, #192]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a34:	4b2e      	ldr	r3, [pc, #184]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f023 020c 	bic.w	r2, r3, #12
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	492b      	ldr	r1, [pc, #172]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a46:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	f023 0202 	bic.w	r2, r3, #2
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a52:	4927      	ldr	r1, [pc, #156]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a58:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a64:	4b22      	ldr	r3, [pc, #136]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4a21      	ldr	r2, [pc, #132]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a70:	4b1f      	ldr	r3, [pc, #124]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	4a1e      	ldr	r2, [pc, #120]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008a7c:	4b1c      	ldr	r3, [pc, #112]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a1b      	ldr	r2, [pc, #108]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a88:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a94:	f7fc f86a 	bl	8004b6c <HAL_GetTick>
 8008a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a9c:	f7fc f866 	bl	8004b6c <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e065      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x670>
 8008aba:	e05d      	b.n	8008b78 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008abc:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0b      	ldr	r2, [pc, #44]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7fc f850 	bl	8004b6c <HAL_GetTick>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ad0:	f7fc f84c 	bl	8004b6c <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e04b      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae2:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <HAL_RCC_OscConfig+0x6c4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x6a4>
 8008aee:	e043      	b.n	8008b78 <HAL_RCC_OscConfig+0x74c>
 8008af0:	58024400 	.word	0x58024400
 8008af4:	fffffc0c 	.word	0xfffffc0c
 8008af8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008afc:	4b21      	ldr	r3, [pc, #132]	; (8008b84 <HAL_RCC_OscConfig+0x758>)
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b02:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <HAL_RCC_OscConfig+0x758>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d031      	beq.n	8008b74 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f003 0203 	and.w	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d12a      	bne.n	8008b74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d122      	bne.n	8008b74 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d11a      	bne.n	8008b74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	0a5b      	lsrs	r3, r3, #9
 8008b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d111      	bne.n	8008b74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d108      	bne.n	8008b74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	0e1b      	lsrs	r3, r3, #24
 8008b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d001      	beq.n	8008b78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	58024400 	.word	0x58024400

08008b88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e19c      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b9c:	4b8a      	ldr	r3, [pc, #552]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d910      	bls.n	8008bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008baa:	4b87      	ldr	r3, [pc, #540]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f023 020f 	bic.w	r2, r3, #15
 8008bb2:	4985      	ldr	r1, [pc, #532]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	4b83      	ldr	r3, [pc, #524]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 030f 	and.w	r3, r3, #15
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d001      	beq.n	8008bcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e184      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d010      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	4b7b      	ldr	r3, [pc, #492]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d908      	bls.n	8008bfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008be8:	4b78      	ldr	r3, [pc, #480]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	4975      	ldr	r1, [pc, #468]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d010      	beq.n	8008c28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695a      	ldr	r2, [r3, #20]
 8008c0a:	4b70      	ldr	r3, [pc, #448]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d908      	bls.n	8008c28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c16:	4b6d      	ldr	r3, [pc, #436]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	496a      	ldr	r1, [pc, #424]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d010      	beq.n	8008c56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	4b64      	ldr	r3, [pc, #400]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d908      	bls.n	8008c56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c44:	4b61      	ldr	r3, [pc, #388]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	495e      	ldr	r1, [pc, #376]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d010      	beq.n	8008c84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69da      	ldr	r2, [r3, #28]
 8008c66:	4b59      	ldr	r3, [pc, #356]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d908      	bls.n	8008c84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c72:	4b56      	ldr	r3, [pc, #344]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	4953      	ldr	r1, [pc, #332]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d010      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d908      	bls.n	8008cb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca0:	4b4a      	ldr	r3, [pc, #296]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f023 020f 	bic.w	r2, r3, #15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4947      	ldr	r1, [pc, #284]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d055      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cbe:	4b43      	ldr	r3, [pc, #268]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	4940      	ldr	r1, [pc, #256]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d107      	bne.n	8008ce8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cd8:	4b3c      	ldr	r3, [pc, #240]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d121      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0f6      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d107      	bne.n	8008d00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cf0:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d115      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e0ea      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d107      	bne.n	8008d18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d08:	4b30      	ldr	r3, [pc, #192]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e0de      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d18:	4b2c      	ldr	r3, [pc, #176]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0d6      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d28:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f023 0207 	bic.w	r2, r3, #7
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4925      	ldr	r1, [pc, #148]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d3a:	f7fb ff17 	bl	8004b6c <HAL_GetTick>
 8008d3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d40:	e00a      	b.n	8008d58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d42:	f7fb ff13 	bl	8004b6c <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d901      	bls.n	8008d58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e0be      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d58:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d1eb      	bne.n	8008d42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	4b14      	ldr	r3, [pc, #80]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d208      	bcs.n	8008d98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d86:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f023 020f 	bic.w	r2, r3, #15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	490e      	ldr	r1, [pc, #56]	; (8008dcc <HAL_RCC_ClockConfig+0x244>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d214      	bcs.n	8008dd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da6:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f023 020f 	bic.w	r2, r3, #15
 8008dae:	4906      	ldr	r1, [pc, #24]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db6:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <HAL_RCC_ClockConfig+0x240>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d005      	beq.n	8008dd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e086      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x34e>
 8008dc8:	52002000 	.word	0x52002000
 8008dcc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d010      	beq.n	8008dfe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	4b3f      	ldr	r3, [pc, #252]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d208      	bcs.n	8008dfe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008dec:	4b3c      	ldr	r3, [pc, #240]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	4939      	ldr	r1, [pc, #228]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d010      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	695a      	ldr	r2, [r3, #20]
 8008e0e:	4b34      	ldr	r3, [pc, #208]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d208      	bcs.n	8008e2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e1a:	4b31      	ldr	r3, [pc, #196]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	492e      	ldr	r1, [pc, #184]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699a      	ldr	r2, [r3, #24]
 8008e3c:	4b28      	ldr	r3, [pc, #160]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d208      	bcs.n	8008e5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	4922      	ldr	r1, [pc, #136]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d010      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	69da      	ldr	r2, [r3, #28]
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d208      	bcs.n	8008e88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008e76:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	4917      	ldr	r1, [pc, #92]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e88:	f000 f834 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	4912      	ldr	r1, [pc, #72]	; (8008ee4 <HAL_RCC_ClockConfig+0x35c>)
 8008e9a:	5ccb      	ldrb	r3, [r1, r3]
 8008e9c:	f003 031f 	and.w	r3, r3, #31
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <HAL_RCC_ClockConfig+0x358>)
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	4a0d      	ldr	r2, [pc, #52]	; (8008ee4 <HAL_RCC_ClockConfig+0x35c>)
 8008eb0:	5cd3      	ldrb	r3, [r2, r3]
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <HAL_RCC_ClockConfig+0x360>)
 8008ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <HAL_RCC_ClockConfig+0x364>)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_RCC_ClockConfig+0x368>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fb fe04 	bl	8004ad8 <HAL_InitTick>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	0800eaf8 	.word	0x0800eaf8
 8008ee8:	240001a4 	.word	0x240001a4
 8008eec:	240001a0 	.word	0x240001a0
 8008ef0:	240001a8 	.word	0x240001a8

08008ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b089      	sub	sp, #36	; 0x24
 8008ef8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008efa:	4bb3      	ldr	r3, [pc, #716]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f02:	2b18      	cmp	r3, #24
 8008f04:	f200 8155 	bhi.w	80091b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f75 	.word	0x08008f75
 8008f14:	080091b3 	.word	0x080091b3
 8008f18:	080091b3 	.word	0x080091b3
 8008f1c:	080091b3 	.word	0x080091b3
 8008f20:	080091b3 	.word	0x080091b3
 8008f24:	080091b3 	.word	0x080091b3
 8008f28:	080091b3 	.word	0x080091b3
 8008f2c:	080091b3 	.word	0x080091b3
 8008f30:	08008f9b 	.word	0x08008f9b
 8008f34:	080091b3 	.word	0x080091b3
 8008f38:	080091b3 	.word	0x080091b3
 8008f3c:	080091b3 	.word	0x080091b3
 8008f40:	080091b3 	.word	0x080091b3
 8008f44:	080091b3 	.word	0x080091b3
 8008f48:	080091b3 	.word	0x080091b3
 8008f4c:	080091b3 	.word	0x080091b3
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	080091b3 	.word	0x080091b3
 8008f58:	080091b3 	.word	0x080091b3
 8008f5c:	080091b3 	.word	0x080091b3
 8008f60:	080091b3 	.word	0x080091b3
 8008f64:	080091b3 	.word	0x080091b3
 8008f68:	080091b3 	.word	0x080091b3
 8008f6c:	080091b3 	.word	0x080091b3
 8008f70:	08008fa7 	.word	0x08008fa7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f74:	4b94      	ldr	r3, [pc, #592]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f80:	4b91      	ldr	r3, [pc, #580]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a90      	ldr	r2, [pc, #576]	; (80091cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008f92:	e111      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f94:	4b8d      	ldr	r3, [pc, #564]	; (80091cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f96:	61bb      	str	r3, [r7, #24]
    break;
 8008f98:	e10e      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f9a:	4b8d      	ldr	r3, [pc, #564]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f9c:	61bb      	str	r3, [r7, #24]
    break;
 8008f9e:	e10b      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fa0:	4b8c      	ldr	r3, [pc, #560]	; (80091d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fa2:	61bb      	str	r3, [r7, #24]
    break;
 8008fa4:	e108      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa6:	4b88      	ldr	r3, [pc, #544]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fb0:	4b85      	ldr	r3, [pc, #532]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	091b      	lsrs	r3, r3, #4
 8008fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fbc:	4b82      	ldr	r3, [pc, #520]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fc6:	4b80      	ldr	r3, [pc, #512]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80e1 	beq.w	80091ac <HAL_RCC_GetSysClockFreq+0x2b8>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	f000 8083 	beq.w	80090f8 <HAL_RCC_GetSysClockFreq+0x204>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	f200 80a1 	bhi.w	800913c <HAL_RCC_GetSysClockFreq+0x248>
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0x114>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d056      	beq.n	80090b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009006:	e099      	b.n	800913c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009008:	4b6f      	ldr	r3, [pc, #444]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d02d      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009014:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	08db      	lsrs	r3, r3, #3
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	4a6b      	ldr	r2, [pc, #428]	; (80091cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009020:	fa22 f303 	lsr.w	r3, r2, r3
 8009024:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903e:	4b62      	ldr	r3, [pc, #392]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009052:	eddf 5a61 	vldr	s11, [pc, #388]	; 80091d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800906e:	e087      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80091dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b51      	ldr	r3, [pc, #324]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009092:	ed97 6a02 	vldr	s12, [r7, #8]
 8009096:	eddf 5a50 	vldr	s11, [pc, #320]	; 80091d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b2:	e065      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80091e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c6:	4b40      	ldr	r3, [pc, #256]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80091d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f6:	e043      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	eddf 6a38 	vldr	s13, [pc, #224]	; 80091e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b2f      	ldr	r3, [pc, #188]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a02 	vldr	s12, [r7, #8]
 800911e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80091d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800913a:	e021      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eddf 6a26 	vldr	s13, [pc, #152]	; 80091e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b1e      	ldr	r3, [pc, #120]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009162:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80091d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	0a5b      	lsrs	r3, r3, #9
 8009186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918a:	3301      	adds	r3, #1
 800918c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	ee07 3a90 	vmov	s15, r3
 8009194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009198:	edd7 6a07 	vldr	s13, [r7, #28]
 800919c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a4:	ee17 3a90 	vmov	r3, s15
 80091a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80091aa:	e005      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
    break;
 80091b0:	e002      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091b4:	61bb      	str	r3, [r7, #24]
    break;
 80091b6:	bf00      	nop
  }

  return sysclockfreq;
 80091b8:	69bb      	ldr	r3, [r7, #24]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3724      	adds	r7, #36	; 0x24
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	58024400 	.word	0x58024400
 80091cc:	03d09000 	.word	0x03d09000
 80091d0:	003d0900 	.word	0x003d0900
 80091d4:	017d7840 	.word	0x017d7840
 80091d8:	46000000 	.word	0x46000000
 80091dc:	4c742400 	.word	0x4c742400
 80091e0:	4a742400 	.word	0x4a742400
 80091e4:	4bbebc20 	.word	0x4bbebc20

080091e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091ee:	f7ff fe81 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b10      	ldr	r3, [pc, #64]	; (8009238 <HAL_RCC_GetHCLKFreq+0x50>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	0a1b      	lsrs	r3, r3, #8
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	490f      	ldr	r1, [pc, #60]	; (800923c <HAL_RCC_GetHCLKFreq+0x54>)
 8009200:	5ccb      	ldrb	r3, [r1, r3]
 8009202:	f003 031f 	and.w	r3, r3, #31
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <HAL_RCC_GetHCLKFreq+0x50>)
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	4a09      	ldr	r2, [pc, #36]	; (800923c <HAL_RCC_GetHCLKFreq+0x54>)
 8009216:	5cd3      	ldrb	r3, [r2, r3]
 8009218:	f003 031f 	and.w	r3, r3, #31
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	fa22 f303 	lsr.w	r3, r2, r3
 8009222:	4a07      	ldr	r2, [pc, #28]	; (8009240 <HAL_RCC_GetHCLKFreq+0x58>)
 8009224:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009226:	4a07      	ldr	r2, [pc, #28]	; (8009244 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <HAL_RCC_GetHCLKFreq+0x58>)
 800922e:	681b      	ldr	r3, [r3, #0]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	58024400 	.word	0x58024400
 800923c:	0800eaf8 	.word	0x0800eaf8
 8009240:	240001a4 	.word	0x240001a4
 8009244:	240001a0 	.word	0x240001a0

08009248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800924c:	f7ff ffcc 	bl	80091e8 <HAL_RCC_GetHCLKFreq>
 8009250:	4602      	mov	r2, r0
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	091b      	lsrs	r3, r3, #4
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	4904      	ldr	r1, [pc, #16]	; (8009270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800925e:	5ccb      	ldrb	r3, [r1, r3]
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	58024400 	.word	0x58024400
 8009270:	0800eaf8 	.word	0x0800eaf8

08009274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009278:	f7ff ffb6 	bl	80091e8 <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b06      	ldr	r3, [pc, #24]	; (8009298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4904      	ldr	r1, [pc, #16]	; (800929c <HAL_RCC_GetPCLK2Freq+0x28>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd80      	pop	{r7, pc}
 8009298:	58024400 	.word	0x58024400
 800929c:	0800eaf8 	.word	0x0800eaf8

080092a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092ac:	2300      	movs	r3, #0
 80092ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d03f      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092c4:	d02a      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092ca:	d824      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092d0:	d018      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092d6:	d81e      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80092dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e0:	d007      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80092e2:	e018      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e4:	4ba4      	ldr	r3, [pc, #656]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e8:	4aa3      	ldr	r2, [pc, #652]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80092f0:	e015      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	2102      	movs	r1, #2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 f989 	bl	800a610 <RCCEx_PLL2_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009302:	e00c      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3324      	adds	r3, #36	; 0x24
 8009308:	2102      	movs	r1, #2
 800930a:	4618      	mov	r0, r3
 800930c:	f001 fa32 	bl	800a774 <RCCEx_PLL3_Config>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009314:	e003      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	75fb      	strb	r3, [r7, #23]
      break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800931c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009324:	4b94      	ldr	r3, [pc, #592]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009330:	4991      	ldr	r1, [pc, #580]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009332:	4313      	orrs	r3, r2
 8009334:	650b      	str	r3, [r1, #80]	; 0x50
 8009336:	e001      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009344:	2b00      	cmp	r3, #0
 8009346:	d03d      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934c:	2b04      	cmp	r3, #4
 800934e:	d826      	bhi.n	800939e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009350:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	0800936d 	.word	0x0800936d
 800935c:	0800937b 	.word	0x0800937b
 8009360:	0800938d 	.word	0x0800938d
 8009364:	080093a5 	.word	0x080093a5
 8009368:	080093a5 	.word	0x080093a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936c:	4b82      	ldr	r3, [pc, #520]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	4a81      	ldr	r2, [pc, #516]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009378:	e015      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f945 	bl	800a610 <RCCEx_PLL2_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800938a:	e00c      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3324      	adds	r3, #36	; 0x24
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f9ee 	bl	800a774 <RCCEx_PLL3_Config>
 8009398:	4603      	mov	r3, r0
 800939a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800939c:	e003      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
      break;
 80093a2:	e000      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093ac:	4b72      	ldr	r3, [pc, #456]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b0:	f023 0207 	bic.w	r2, r3, #7
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b8:	496f      	ldr	r1, [pc, #444]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	650b      	str	r3, [r1, #80]	; 0x50
 80093be:	e001      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d051      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093d6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80093da:	d036      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80093dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80093e0:	d830      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80093e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093e6:	d032      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80093e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093ec:	d82a      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80093ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093f2:	d02e      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80093f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093f8:	d824      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80093fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093fe:	d018      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009404:	d81e      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800940a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800940e:	d007      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009410:	e018      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009412:	4b59      	ldr	r3, [pc, #356]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	4a58      	ldr	r2, [pc, #352]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800941e:	e019      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f8f2 	bl	800a610 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009430:	e010      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f001 f99b 	bl	800a774 <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009442:	e007      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e004      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800944a:	bf00      	nop
 800944c:	e002      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800944e:	bf00      	nop
 8009450:	e000      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800945a:	4b47      	ldr	r3, [pc, #284]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800945c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009468:	4943      	ldr	r1, [pc, #268]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800946a:	4313      	orrs	r3, r2
 800946c:	658b      	str	r3, [r1, #88]	; 0x58
 800946e:	e001      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947c:	2b00      	cmp	r3, #0
 800947e:	d051      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009486:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800948a:	d036      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800948c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009490:	d830      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009496:	d032      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800949c:	d82a      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800949e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094a2:	d02e      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80094a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094a8:	d824      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80094aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094ae:	d018      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80094b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094b4:	d81e      	bhi.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80094ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094be:	d007      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80094c0:	e018      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c2:	4b2d      	ldr	r3, [pc, #180]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	4a2c      	ldr	r2, [pc, #176]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094ce:	e019      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 f89a 	bl	800a610 <RCCEx_PLL2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094e0:	e010      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3324      	adds	r3, #36	; 0x24
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f001 f943 	bl	800a774 <RCCEx_PLL3_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094f2:	e007      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
      break;
 80094f8:	e004      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800950a:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800950c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009518:	4917      	ldr	r1, [pc, #92]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800951a:	4313      	orrs	r3, r2
 800951c:	658b      	str	r3, [r1, #88]	; 0x58
 800951e:	e001      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d035      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009534:	2b30      	cmp	r3, #48	; 0x30
 8009536:	d01c      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009538:	2b30      	cmp	r3, #48	; 0x30
 800953a:	d817      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800953c:	2b20      	cmp	r3, #32
 800953e:	d00c      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009540:	2b20      	cmp	r3, #32
 8009542:	d813      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d019      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009548:	2b10      	cmp	r3, #16
 800954a:	d10f      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a09      	ldr	r2, [pc, #36]	; (8009578 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009558:	e011      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2102      	movs	r1, #2
 8009560:	4618      	mov	r0, r3
 8009562:	f001 f855 	bl	800a610 <RCCEx_PLL2_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800956a:	e008      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
      break;
 8009570:	e005      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009572:	bf00      	nop
 8009574:	e003      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009576:	bf00      	nop
 8009578:	58024400 	.word	0x58024400
      break;
 800957c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009584:	4ba3      	ldr	r3, [pc, #652]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009590:	49a0      	ldr	r1, [pc, #640]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009592:	4313      	orrs	r3, r2
 8009594:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009596:	e001      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d047      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b0:	d030      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80095b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b6:	d82a      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80095b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095bc:	d02c      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80095be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095c2:	d824      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80095c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095c8:	d018      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80095ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ce:	d81e      	bhi.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80095d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d8:	d007      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80095da:	e018      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095dc:	4b8d      	ldr	r3, [pc, #564]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	4a8c      	ldr	r2, [pc, #560]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80095e8:	e017      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 f80d 	bl	800a610 <RCCEx_PLL2_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80095fa:	e00e      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3324      	adds	r3, #36	; 0x24
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f8b6 	bl	800a774 <RCCEx_PLL3_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800960c:	e005      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	75fb      	strb	r3, [r7, #23]
      break;
 8009612:	e002      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009620:	4b7c      	ldr	r3, [pc, #496]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009624:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962c:	4979      	ldr	r1, [pc, #484]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800962e:	4313      	orrs	r3, r2
 8009630:	650b      	str	r3, [r1, #80]	; 0x50
 8009632:	e001      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d049      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800964c:	d02e      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800964e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009652:	d828      	bhi.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009658:	d02a      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800965a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800965e:	d822      	bhi.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009664:	d026      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800966a:	d81c      	bhi.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800966c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009670:	d010      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009676:	d816      	bhi.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01d      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800967c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009680:	d111      	bne.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	2101      	movs	r1, #1
 8009688:	4618      	mov	r0, r3
 800968a:	f000 ffc1 	bl	800a610 <RCCEx_PLL2_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009692:	e012      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3324      	adds	r3, #36	; 0x24
 8009698:	2101      	movs	r1, #1
 800969a:	4618      	mov	r0, r3
 800969c:	f001 f86a 	bl	800a774 <RCCEx_PLL3_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80096a4:	e009      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
      break;
 80096aa:	e006      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80096ac:	bf00      	nop
 80096ae:	e004      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80096b0:	bf00      	nop
 80096b2:	e002      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80096b4:	bf00      	nop
 80096b6:	e000      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80096b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80096c0:	4b54      	ldr	r3, [pc, #336]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096cc:	4951      	ldr	r1, [pc, #324]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	650b      	str	r3, [r1, #80]	; 0x50
 80096d2:	e001      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d04b      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80096ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ee:	d02e      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80096f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096f4:	d828      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d02a      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009700:	d822      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009706:	d026      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800970c:	d81c      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009712:	d010      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009718:	d816      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01d      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800971e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009722:	d111      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3304      	adds	r3, #4
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f000 ff70 	bl	800a610 <RCCEx_PLL2_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009734:	e012      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3324      	adds	r3, #36	; 0x24
 800973a:	2101      	movs	r1, #1
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f819 	bl	800a774 <RCCEx_PLL3_Config>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009746:	e009      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	75fb      	strb	r3, [r7, #23]
      break;
 800974c:	e006      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800974e:	bf00      	nop
 8009750:	e004      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009752:	bf00      	nop
 8009754:	e002      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800975a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009762:	4b2c      	ldr	r3, [pc, #176]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009766:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009770:	4928      	ldr	r1, [pc, #160]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009772:	4313      	orrs	r3, r2
 8009774:	658b      	str	r3, [r1, #88]	; 0x58
 8009776:	e001      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d02f      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800978c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009790:	d00e      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009796:	d814      	bhi.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d015      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800979c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097a0:	d10f      	bne.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	4a1b      	ldr	r2, [pc, #108]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80097ae:	e00c      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3304      	adds	r3, #4
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 ff2a 	bl	800a610 <RCCEx_PLL2_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80097c0:	e003      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80097c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d109      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097d0:	4b10      	ldr	r3, [pc, #64]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097dc:	490d      	ldr	r1, [pc, #52]	; (8009814 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	650b      	str	r3, [r1, #80]	; 0x50
 80097e2:	e001      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d034      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d81d      	bhi.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	0800983f 	.word	0x0800983f
 8009808:	08009819 	.word	0x08009819
 800980c:	08009827 	.word	0x08009827
 8009810:	0800983f 	.word	0x0800983f
 8009814:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009818:	4bb1      	ldr	r3, [pc, #708]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4ab0      	ldr	r2, [pc, #704]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800981e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009824:	e00c      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3304      	adds	r3, #4
 800982a:	2102      	movs	r1, #2
 800982c:	4618      	mov	r0, r3
 800982e:	f000 feef 	bl	800a610 <RCCEx_PLL2_Config>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009836:	e003      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	e000      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800983e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009846:	4ba6      	ldr	r3, [pc, #664]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984a:	f023 0203 	bic.w	r2, r3, #3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	49a3      	ldr	r1, [pc, #652]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009854:	4313      	orrs	r3, r2
 8009856:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009858:	e001      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 8086 	beq.w	8009978 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800986c:	4b9d      	ldr	r3, [pc, #628]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a9c      	ldr	r2, [pc, #624]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009878:	f7fb f978 	bl	8004b6c <HAL_GetTick>
 800987c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800987e:	e009      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009880:	f7fb f974 	bl	8004b6c <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	; 0x64
 800988c:	d902      	bls.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	75fb      	strb	r3, [r7, #23]
        break;
 8009892:	e005      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009894:	4b93      	ldr	r3, [pc, #588]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0ef      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d166      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098a6:	4b8e      	ldr	r3, [pc, #568]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098b0:	4053      	eors	r3, r2
 80098b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d013      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098ba:	4b89      	ldr	r3, [pc, #548]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098c4:	4b86      	ldr	r3, [pc, #536]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	4a85      	ldr	r2, [pc, #532]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098d0:	4b83      	ldr	r3, [pc, #524]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d4:	4a82      	ldr	r2, [pc, #520]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098dc:	4a80      	ldr	r2, [pc, #512]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ec:	d115      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ee:	f7fb f93d 	bl	8004b6c <HAL_GetTick>
 80098f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098f4:	e00b      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098f6:	f7fb f939 	bl	8004b6c <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	f241 3288 	movw	r2, #5000	; 0x1388
 8009904:	4293      	cmp	r3, r2
 8009906:	d902      	bls.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	75fb      	strb	r3, [r7, #23]
            break;
 800990c:	e005      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800990e:	4b74      	ldr	r3, [pc, #464]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0ed      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d126      	bne.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800992e:	d10d      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009930:	4b6b      	ldr	r3, [pc, #428]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800993e:	0919      	lsrs	r1, r3, #4
 8009940:	4b69      	ldr	r3, [pc, #420]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009942:	400b      	ands	r3, r1
 8009944:	4966      	ldr	r1, [pc, #408]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009946:	4313      	orrs	r3, r2
 8009948:	610b      	str	r3, [r1, #16]
 800994a:	e005      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800994c:	4b64      	ldr	r3, [pc, #400]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	4a63      	ldr	r2, [pc, #396]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009956:	6113      	str	r3, [r2, #16]
 8009958:	4b61      	ldr	r3, [pc, #388]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800995a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009966:	495e      	ldr	r1, [pc, #376]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009968:	4313      	orrs	r3, r2
 800996a:	670b      	str	r3, [r1, #112]	; 0x70
 800996c:	e004      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	75bb      	strb	r3, [r7, #22]
 8009972:	e001      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d07e      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009988:	2b28      	cmp	r3, #40	; 0x28
 800998a:	d867      	bhi.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800998c:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	08009a63 	.word	0x08009a63
 8009998:	08009a5d 	.word	0x08009a5d
 800999c:	08009a5d 	.word	0x08009a5d
 80099a0:	08009a5d 	.word	0x08009a5d
 80099a4:	08009a5d 	.word	0x08009a5d
 80099a8:	08009a5d 	.word	0x08009a5d
 80099ac:	08009a5d 	.word	0x08009a5d
 80099b0:	08009a5d 	.word	0x08009a5d
 80099b4:	08009a39 	.word	0x08009a39
 80099b8:	08009a5d 	.word	0x08009a5d
 80099bc:	08009a5d 	.word	0x08009a5d
 80099c0:	08009a5d 	.word	0x08009a5d
 80099c4:	08009a5d 	.word	0x08009a5d
 80099c8:	08009a5d 	.word	0x08009a5d
 80099cc:	08009a5d 	.word	0x08009a5d
 80099d0:	08009a5d 	.word	0x08009a5d
 80099d4:	08009a4b 	.word	0x08009a4b
 80099d8:	08009a5d 	.word	0x08009a5d
 80099dc:	08009a5d 	.word	0x08009a5d
 80099e0:	08009a5d 	.word	0x08009a5d
 80099e4:	08009a5d 	.word	0x08009a5d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a5d 	.word	0x08009a5d
 80099f0:	08009a5d 	.word	0x08009a5d
 80099f4:	08009a63 	.word	0x08009a63
 80099f8:	08009a5d 	.word	0x08009a5d
 80099fc:	08009a5d 	.word	0x08009a5d
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a5d 	.word	0x08009a5d
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	08009a5d 	.word	0x08009a5d
 8009a10:	08009a5d 	.word	0x08009a5d
 8009a14:	08009a63 	.word	0x08009a63
 8009a18:	08009a5d 	.word	0x08009a5d
 8009a1c:	08009a5d 	.word	0x08009a5d
 8009a20:	08009a5d 	.word	0x08009a5d
 8009a24:	08009a5d 	.word	0x08009a5d
 8009a28:	08009a5d 	.word	0x08009a5d
 8009a2c:	08009a5d 	.word	0x08009a5d
 8009a30:	08009a5d 	.word	0x08009a5d
 8009a34:	08009a63 	.word	0x08009a63
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fde6 	bl	800a610 <RCCEx_PLL2_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009a48:	e00c      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3324      	adds	r3, #36	; 0x24
 8009a4e:	2101      	movs	r1, #1
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fe8f 	bl	800a774 <RCCEx_PLL3_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009a5a:	e003      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a60:	e000      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a76:	491a      	ldr	r1, [pc, #104]	; (8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a7c:	e001      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d03e      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d820      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009aed 	.word	0x08009aed
 8009aa0:	08009ab5 	.word	0x08009ab5
 8009aa4:	08009ac7 	.word	0x08009ac7
 8009aa8:	08009aed 	.word	0x08009aed
 8009aac:	08009aed 	.word	0x08009aed
 8009ab0:	08009aed 	.word	0x08009aed
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fda8 	bl	800a610 <RCCEx_PLL2_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ac4:	e013      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3324      	adds	r3, #36	; 0x24
 8009aca:	2101      	movs	r1, #1
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fe51 	bl	800a774 <RCCEx_PLL3_Config>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ad6:	e00a      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
      break;
 8009adc:	e007      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009ade:	bf00      	nop
 8009ae0:	58024400 	.word	0x58024400
 8009ae4:	58024800 	.word	0x58024800
 8009ae8:	00ffffcf 	.word	0x00ffffcf
      break;
 8009aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009af4:	4b9f      	ldr	r3, [pc, #636]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af8:	f023 0207 	bic.w	r2, r3, #7
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b00:	499c      	ldr	r1, [pc, #624]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	654b      	str	r3, [r1, #84]	; 0x54
 8009b06:	e001      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d039      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d820      	bhi.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b6b 	.word	0x08009b6b
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b53 	.word	0x08009b53
 8009b34:	08009b6b 	.word	0x08009b6b
 8009b38:	08009b6b 	.word	0x08009b6b
 8009b3c:	08009b6b 	.word	0x08009b6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3304      	adds	r3, #4
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fd62 	bl	800a610 <RCCEx_PLL2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009b50:	e00c      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3324      	adds	r3, #36	; 0x24
 8009b56:	2101      	movs	r1, #1
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fe0b 	bl	800a774 <RCCEx_PLL3_Config>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009b62:	e003      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	75fb      	strb	r3, [r7, #23]
      break;
 8009b68:	e000      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b72:	4b80      	ldr	r3, [pc, #512]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b76:	f023 0207 	bic.w	r2, r3, #7
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b80:	497c      	ldr	r1, [pc, #496]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	658b      	str	r3, [r1, #88]	; 0x58
 8009b86:	e001      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d04b      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba2:	d02e      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba8:	d828      	bhi.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bae:	d02a      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb4:	d822      	bhi.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bba:	d026      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bc0:	d81c      	bhi.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc6:	d010      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bcc:	d816      	bhi.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d01d      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd6:	d111      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 fd16 	bl	800a610 <RCCEx_PLL2_Config>
 8009be4:	4603      	mov	r3, r0
 8009be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009be8:	e012      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3324      	adds	r3, #36	; 0x24
 8009bee:	2102      	movs	r1, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fdbf 	bl	800a774 <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009bfa:	e009      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8009c00:	e006      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c02:	bf00      	nop
 8009c04:	e004      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c06:	bf00      	nop
 8009c08:	e002      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c0a:	bf00      	nop
 8009c0c:	e000      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c16:	4b57      	ldr	r3, [pc, #348]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	4953      	ldr	r1, [pc, #332]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	654b      	str	r3, [r1, #84]	; 0x54
 8009c2a:	e001      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d04b      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c46:	d02e      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009c48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c4c:	d828      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c52:	d02a      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c58:	d822      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c5e:	d026      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c64:	d81c      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c6a:	d010      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c70:	d816      	bhi.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01d      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c7a:	d111      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fcc4 	bl	800a610 <RCCEx_PLL2_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c8c:	e012      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3324      	adds	r3, #36	; 0x24
 8009c92:	2102      	movs	r1, #2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fd6d 	bl	800a774 <RCCEx_PLL3_Config>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c9e:	e009      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca4:	e006      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009ca6:	bf00      	nop
 8009ca8:	e004      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009caa:	bf00      	nop
 8009cac:	e002      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cba:	4b2e      	ldr	r3, [pc, #184]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cc8:	492a      	ldr	r1, [pc, #168]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8009cce:	e001      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d04d      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ce6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009cea:	d02e      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009cec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009cf0:	d828      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf6:	d02a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfc:	d822      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009cfe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d02:	d026      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009d04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d08:	d81c      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d0e:	d010      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d14:	d816      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01d      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d1e:	d111      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fc72 	bl	800a610 <RCCEx_PLL2_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d30:	e012      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	2102      	movs	r1, #2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fd1b 	bl	800a774 <RCCEx_PLL3_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d42:	e009      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	75fb      	strb	r3, [r7, #23]
      break;
 8009d48:	e006      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10c      	bne.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d5e:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d6c:	4901      	ldr	r1, [pc, #4]	; (8009d74 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	658b      	str	r3, [r1, #88]	; 0x58
 8009d72:	e003      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0308 	and.w	r3, r3, #8
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d018      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d90:	d10a      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3324      	adds	r3, #36	; 0x24
 8009d96:	2102      	movs	r1, #2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fceb 	bl	800a774 <RCCEx_PLL3_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009da8:	4b8a      	ldr	r3, [pc, #552]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db4:	4987      	ldr	r1, [pc, #540]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0310 	and.w	r3, r3, #16
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01a      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd0:	d10a      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3324      	adds	r3, #36	; 0x24
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fccb 	bl	800a774 <RCCEx_PLL3_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009de8:	4b7a      	ldr	r3, [pc, #488]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df6:	4977      	ldr	r1, [pc, #476]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d034      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e12:	d01d      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e18:	d817      	bhi.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e22:	d009      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e24:	e011      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fbef 	bl	800a610 <RCCEx_PLL2_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e36:	e00c      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3324      	adds	r3, #36	; 0x24
 8009e3c:	2102      	movs	r1, #2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fc98 	bl	800a774 <RCCEx_PLL3_Config>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e48:	e003      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4e:	e000      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e58:	4b5e      	ldr	r3, [pc, #376]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e66:	495b      	ldr	r1, [pc, #364]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	658b      	str	r3, [r1, #88]	; 0x58
 8009e6c:	e001      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d033      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e88:	d01c      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009e8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e8e:	d816      	bhi.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e94:	d003      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e9a:	d007      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009e9c:	e00f      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9e:	4b4d      	ldr	r3, [pc, #308]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a4c      	ldr	r2, [pc, #304]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009eaa:	e00c      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fc5e 	bl	800a774 <RCCEx_PLL3_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ebc:	e003      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ecc:	4b41      	ldr	r3, [pc, #260]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eda:	493e      	ldr	r1, [pc, #248]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	654b      	str	r3, [r1, #84]	; 0x54
 8009ee0:	e001      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d029      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009efe:	d007      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009f00:	e00f      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f02:	4b34      	ldr	r3, [pc, #208]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	4a33      	ldr	r2, [pc, #204]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f0e:	e00b      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	2102      	movs	r1, #2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fb7a 	bl	800a610 <RCCEx_PLL2_Config>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f20:	e002      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	75fb      	strb	r3, [r7, #23]
      break;
 8009f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d109      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f2e:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3a:	4926      	ldr	r1, [pc, #152]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f40:	e001      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3324      	adds	r3, #36	; 0x24
 8009f56:	2102      	movs	r1, #2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fc0b 	bl	800a774 <RCCEx_PLL3_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d033      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f7c:	d017      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f82:	d811      	bhi.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f88:	d013      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f8e:	d80b      	bhi.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d010      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f98:	d106      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f9a:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	4a0d      	ldr	r2, [pc, #52]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009fa6:	e007      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
      break;
 8009fac:	e004      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009fae:	bf00      	nop
 8009fb0:	e002      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009fb2:	bf00      	nop
 8009fb4:	e000      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fca:	4902      	ldr	r1, [pc, #8]	; (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	654b      	str	r3, [r1, #84]	; 0x54
 8009fd0:	e004      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009fd2:	bf00      	nop
 8009fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fe8:	4b29      	ldr	r3, [pc, #164]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff4:	4926      	ldr	r1, [pc, #152]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a006:	4b22      	ldr	r3, [pc, #136]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a012:	491f      	ldr	r1, [pc, #124]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a014:	4313      	orrs	r3, r2
 800a016:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00d      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a024:	4b1a      	ldr	r3, [pc, #104]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a02a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a02e:	6113      	str	r3, [r2, #16]
 800a030:	4b17      	ldr	r3, [pc, #92]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a032:	691a      	ldr	r2, [r3, #16]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a03a:	4915      	ldr	r1, [pc, #84]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	da08      	bge.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a048:	4b11      	ldr	r3, [pc, #68]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a04c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a054:	490e      	ldr	r1, [pc, #56]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a056:	4313      	orrs	r3, r2
 800a058:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a074:	4906      	ldr	r1, [pc, #24]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a076:	4313      	orrs	r3, r2
 800a078:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a07a:	7dbb      	ldrb	r3, [r7, #22]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	58024400 	.word	0x58024400

0800a094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a098:	f7ff f8a6 	bl	80091e8 <HAL_RCC_GetHCLKFreq>
 800a09c:	4602      	mov	r2, r0
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	f003 0307 	and.w	r3, r3, #7
 800a0a8:	4904      	ldr	r1, [pc, #16]	; (800a0bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a0aa:	5ccb      	ldrb	r3, [r1, r3]
 800a0ac:	f003 031f 	and.w	r3, r3, #31
 800a0b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	58024400 	.word	0x58024400
 800a0bc:	0800eaf8 	.word	0x0800eaf8

0800a0c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b089      	sub	sp, #36	; 0x24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0c8:	4ba1      	ldr	r3, [pc, #644]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a0d2:	4b9f      	ldr	r3, [pc, #636]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d6:	0b1b      	lsrs	r3, r3, #12
 800a0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a0de:	4b9c      	ldr	r3, [pc, #624]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	091b      	lsrs	r3, r3, #4
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0ea:	4b99      	ldr	r3, [pc, #612]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ee:	08db      	lsrs	r3, r3, #3
 800a0f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	fb02 f303 	mul.w	r3, r2, r3
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8111 	beq.w	800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b02      	cmp	r3, #2
 800a112:	f000 8083 	beq.w	800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	f200 80a1 	bhi.w	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d056      	beq.n	800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a12a:	e099      	b.n	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a12c:	4b88      	ldr	r3, [pc, #544]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0320 	and.w	r3, r3, #32
 800a134:	2b00      	cmp	r3, #0
 800a136:	d02d      	beq.n	800a194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a138:	4b85      	ldr	r3, [pc, #532]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	08db      	lsrs	r3, r3, #3
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	4a84      	ldr	r2, [pc, #528]	; (800a354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a144:	fa22 f303 	lsr.w	r3, r2, r3
 800a148:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a162:	4b7b      	ldr	r3, [pc, #492]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a172:	ed97 6a03 	vldr	s12, [r7, #12]
 800a176:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a192:	e087      	b.n	800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a35c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a6:	4b6a      	ldr	r3, [pc, #424]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d6:	e065      	b.n	800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ea:	4b59      	ldr	r3, [pc, #356]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a21a:	e043      	b.n	800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22e:	4b48      	ldr	r3, [pc, #288]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a242:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a25a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25e:	e021      	b.n	800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a272:	4b37      	ldr	r3, [pc, #220]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a282:	ed97 6a03 	vldr	s12, [r7, #12]
 800a286:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a2a4:	4b2a      	ldr	r3, [pc, #168]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	0a5b      	lsrs	r3, r3, #9
 800a2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ca:	ee17 2a90 	vmov	r2, s15
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a2d2:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	0c1b      	lsrs	r3, r3, #16
 800a2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2dc:	ee07 3a90 	vmov	s15, r3
 800a2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2f8:	ee17 2a90 	vmov	r2, s15
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a300:	4b13      	ldr	r3, [pc, #76]	; (800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	0e1b      	lsrs	r3, r3, #24
 800a306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a31a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a326:	ee17 2a90 	vmov	r2, s15
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a32e:	e008      	b.n	800a342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	609a      	str	r2, [r3, #8]
}
 800a342:	bf00      	nop
 800a344:	3724      	adds	r7, #36	; 0x24
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	58024400 	.word	0x58024400
 800a354:	03d09000 	.word	0x03d09000
 800a358:	46000000 	.word	0x46000000
 800a35c:	4c742400 	.word	0x4c742400
 800a360:	4a742400 	.word	0x4a742400
 800a364:	4bbebc20 	.word	0x4bbebc20

0800a368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a368:	b480      	push	{r7}
 800a36a:	b089      	sub	sp, #36	; 0x24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a370:	4ba1      	ldr	r3, [pc, #644]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a37a:	4b9f      	ldr	r3, [pc, #636]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37e:	0d1b      	lsrs	r3, r3, #20
 800a380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a386:	4b9c      	ldr	r3, [pc, #624]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a392:	4b99      	ldr	r3, [pc, #612]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	08db      	lsrs	r3, r3, #3
 800a398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	fb02 f303 	mul.w	r3, r2, r3
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8111 	beq.w	800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	f000 8083 	beq.w	800a4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	f200 80a1 	bhi.w	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d056      	beq.n	800a480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a3d2:	e099      	b.n	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d4:	4b88      	ldr	r3, [pc, #544]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0320 	and.w	r3, r3, #32
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d02d      	beq.n	800a43c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3e0:	4b85      	ldr	r3, [pc, #532]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	08db      	lsrs	r3, r3, #3
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	4a84      	ldr	r2, [pc, #528]	; (800a5fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	ee07 3a90 	vmov	s15, r3
 800a3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b7b      	ldr	r3, [pc, #492]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a43a:	e087      	b.n	800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b6a      	ldr	r3, [pc, #424]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a462:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a47e:	e065      	b.n	800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a492:	4b59      	ldr	r3, [pc, #356]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4c2:	e043      	b.n	800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d6:	4b48      	ldr	r3, [pc, #288]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a506:	e021      	b.n	800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51a:	4b37      	ldr	r3, [pc, #220]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a54a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a54c:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	0a5b      	lsrs	r3, r3, #9
 800a552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a566:	edd7 6a07 	vldr	s13, [r7, #28]
 800a56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a572:	ee17 2a90 	vmov	r2, s15
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a57a:	4b1f      	ldr	r3, [pc, #124]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57e:	0c1b      	lsrs	r3, r3, #16
 800a580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a584:	ee07 3a90 	vmov	s15, r3
 800a588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a590:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a594:	edd7 6a07 	vldr	s13, [r7, #28]
 800a598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a0:	ee17 2a90 	vmov	r2, s15
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a5a8:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ac:	0e1b      	lsrs	r3, r3, #24
 800a5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ce:	ee17 2a90 	vmov	r2, s15
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a5d6:	e008      	b.n	800a5ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	609a      	str	r2, [r3, #8]
}
 800a5ea:	bf00      	nop
 800a5ec:	3724      	adds	r7, #36	; 0x24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	03d09000 	.word	0x03d09000
 800a600:	46000000 	.word	0x46000000
 800a604:	4c742400 	.word	0x4c742400
 800a608:	4a742400 	.word	0x4a742400
 800a60c:	4bbebc20 	.word	0x4bbebc20

0800a610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a61e:	4b53      	ldr	r3, [pc, #332]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b03      	cmp	r3, #3
 800a628:	d101      	bne.n	800a62e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e099      	b.n	800a762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a62e:	4b4f      	ldr	r3, [pc, #316]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a4e      	ldr	r2, [pc, #312]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a63a:	f7fa fa97 	bl	8004b6c <HAL_GetTick>
 800a63e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a640:	e008      	b.n	800a654 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a642:	f7fa fa93 	bl	8004b6c <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d901      	bls.n	800a654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e086      	b.n	800a762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a654:	4b45      	ldr	r3, [pc, #276]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f0      	bne.n	800a642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a660:	4b42      	ldr	r3, [pc, #264]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	031b      	lsls	r3, r3, #12
 800a66e:	493f      	ldr	r1, [pc, #252]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a670:	4313      	orrs	r3, r2
 800a672:	628b      	str	r3, [r1, #40]	; 0x28
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	3b01      	subs	r3, #1
 800a684:	025b      	lsls	r3, r3, #9
 800a686:	b29b      	uxth	r3, r3
 800a688:	431a      	orrs	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	3b01      	subs	r3, #1
 800a690:	041b      	lsls	r3, r3, #16
 800a692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	061b      	lsls	r3, r3, #24
 800a6a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6a4:	4931      	ldr	r1, [pc, #196]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a6aa:	4b30      	ldr	r3, [pc, #192]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	492d      	ldr	r1, [pc, #180]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a6bc:	4b2b      	ldr	r3, [pc, #172]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	f023 0220 	bic.w	r2, r3, #32
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	4928      	ldr	r1, [pc, #160]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a6ce:	4b27      	ldr	r3, [pc, #156]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	4a26      	ldr	r2, [pc, #152]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6d4:	f023 0310 	bic.w	r3, r3, #16
 800a6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a6da:	4b24      	ldr	r3, [pc, #144]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6de:	4b24      	ldr	r3, [pc, #144]	; (800a770 <RCCEx_PLL2_Config+0x160>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	69d2      	ldr	r2, [r2, #28]
 800a6e6:	00d2      	lsls	r2, r2, #3
 800a6e8:	4920      	ldr	r1, [pc, #128]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a6ee:	4b1f      	ldr	r3, [pc, #124]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f2:	4a1e      	ldr	r2, [pc, #120]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a6f4:	f043 0310 	orr.w	r3, r3, #16
 800a6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a700:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	4a19      	ldr	r2, [pc, #100]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a70a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a70c:	e00f      	b.n	800a72e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d106      	bne.n	800a722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a714:	4b15      	ldr	r3, [pc, #84]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	4a14      	ldr	r2, [pc, #80]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a71a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a71e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a720:	e005      	b.n	800a72e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a722:	4b12      	ldr	r3, [pc, #72]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a726:	4a11      	ldr	r2, [pc, #68]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a72c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a72e:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a0e      	ldr	r2, [pc, #56]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a73a:	f7fa fa17 	bl	8004b6c <HAL_GetTick>
 800a73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a740:	e008      	b.n	800a754 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a742:	f7fa fa13 	bl	8004b6c <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d901      	bls.n	800a754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e006      	b.n	800a762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <RCCEx_PLL2_Config+0x15c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0f0      	beq.n	800a742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	58024400 	.word	0x58024400
 800a770:	ffff0007 	.word	0xffff0007

0800a774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a782:	4b53      	ldr	r3, [pc, #332]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d101      	bne.n	800a792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e099      	b.n	800a8c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a792:	4b4f      	ldr	r3, [pc, #316]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a4e      	ldr	r2, [pc, #312]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a79e:	f7fa f9e5 	bl	8004b6c <HAL_GetTick>
 800a7a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7a4:	e008      	b.n	800a7b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7a6:	f7fa f9e1 	bl	8004b6c <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d901      	bls.n	800a7b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e086      	b.n	800a8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7b8:	4b45      	ldr	r3, [pc, #276]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1f0      	bne.n	800a7a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a7c4:	4b42      	ldr	r3, [pc, #264]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	051b      	lsls	r3, r3, #20
 800a7d2:	493f      	ldr	r1, [pc, #252]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	025b      	lsls	r3, r3, #9
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	041b      	lsls	r3, r3, #16
 800a7f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	3b01      	subs	r3, #1
 800a802:	061b      	lsls	r3, r3, #24
 800a804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a808:	4931      	ldr	r1, [pc, #196]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a80e:	4b30      	ldr	r3, [pc, #192]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	492d      	ldr	r1, [pc, #180]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a820:	4b2b      	ldr	r3, [pc, #172]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	4928      	ldr	r1, [pc, #160]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a832:	4b27      	ldr	r3, [pc, #156]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a836:	4a26      	ldr	r2, [pc, #152]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a83c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a83e:	4b24      	ldr	r3, [pc, #144]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a842:	4b24      	ldr	r3, [pc, #144]	; (800a8d4 <RCCEx_PLL3_Config+0x160>)
 800a844:	4013      	ands	r3, r2
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	69d2      	ldr	r2, [r2, #28]
 800a84a:	00d2      	lsls	r2, r2, #3
 800a84c:	4920      	ldr	r1, [pc, #128]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a852:	4b1f      	ldr	r3, [pc, #124]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a856:	4a1e      	ldr	r2, [pc, #120]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a85c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a864:	4b1a      	ldr	r3, [pc, #104]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	4a19      	ldr	r2, [pc, #100]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a86a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a86e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a870:	e00f      	b.n	800a892 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d106      	bne.n	800a886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a878:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	4a14      	ldr	r2, [pc, #80]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a87e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a882:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a884:	e005      	b.n	800a892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	4a11      	ldr	r2, [pc, #68]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a88c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a892:	4b0f      	ldr	r3, [pc, #60]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a0e      	ldr	r2, [pc, #56]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a89e:	f7fa f965 	bl	8004b6c <HAL_GetTick>
 800a8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8a4:	e008      	b.n	800a8b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a8a6:	f7fa f961 	bl	8004b6c <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e006      	b.n	800a8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <RCCEx_PLL3_Config+0x15c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0f0      	beq.n	800a8a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	ffff0007 	.word	0xffff0007

0800a8d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e049      	b.n	800a97e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7f9 fc3c 	bl	800417c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3304      	adds	r3, #4
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f000 feb8 	bl	800b68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d001      	beq.n	800a9a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e05e      	b.n	800aa5e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0201 	orr.w	r2, r2, #1
 800a9b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a2b      	ldr	r2, [pc, #172]	; (800aa6c <HAL_TIM_Base_Start_IT+0xe4>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d02c      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ca:	d027      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a27      	ldr	r2, [pc, #156]	; (800aa70 <HAL_TIM_Base_Start_IT+0xe8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d022      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a26      	ldr	r2, [pc, #152]	; (800aa74 <HAL_TIM_Base_Start_IT+0xec>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d01d      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a24      	ldr	r2, [pc, #144]	; (800aa78 <HAL_TIM_Base_Start_IT+0xf0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d018      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a23      	ldr	r2, [pc, #140]	; (800aa7c <HAL_TIM_Base_Start_IT+0xf4>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a21      	ldr	r2, [pc, #132]	; (800aa80 <HAL_TIM_Base_Start_IT+0xf8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00e      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a20      	ldr	r2, [pc, #128]	; (800aa84 <HAL_TIM_Base_Start_IT+0xfc>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d009      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a1e      	ldr	r2, [pc, #120]	; (800aa88 <HAL_TIM_Base_Start_IT+0x100>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d004      	beq.n	800aa1c <HAL_TIM_Base_Start_IT+0x94>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <HAL_TIM_Base_Start_IT+0x104>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d115      	bne.n	800aa48 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <HAL_TIM_Base_Start_IT+0x108>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b06      	cmp	r3, #6
 800aa2c:	d015      	beq.n	800aa5a <HAL_TIM_Base_Start_IT+0xd2>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa34:	d011      	beq.n	800aa5a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f042 0201 	orr.w	r2, r2, #1
 800aa44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa46:	e008      	b.n	800aa5a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	e000      	b.n	800aa5c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	40000400 	.word	0x40000400
 800aa74:	40000800 	.word	0x40000800
 800aa78:	40000c00 	.word	0x40000c00
 800aa7c:	40010400 	.word	0x40010400
 800aa80:	40001800 	.word	0x40001800
 800aa84:	40014000 	.word	0x40014000
 800aa88:	4000e000 	.word	0x4000e000
 800aa8c:	4000e400 	.word	0x4000e400
 800aa90:	00010007 	.word	0x00010007

0800aa94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e049      	b.n	800ab3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f9 fc96 	bl	80043ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3304      	adds	r3, #4
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f000 fdda 	bl	800b68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d109      	bne.n	800ab68 <HAL_TIM_PWM_Start+0x24>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	e03c      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d109      	bne.n	800ab82 <HAL_TIM_PWM_Start+0x3e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	bf14      	ite	ne
 800ab7a:	2301      	movne	r3, #1
 800ab7c:	2300      	moveq	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	e02f      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d109      	bne.n	800ab9c <HAL_TIM_PWM_Start+0x58>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e022      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b0c      	cmp	r3, #12
 800aba0:	d109      	bne.n	800abb6 <HAL_TIM_PWM_Start+0x72>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	e015      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d109      	bne.n	800abd0 <HAL_TIM_PWM_Start+0x8c>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e008      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	bf14      	ite	ne
 800abdc:	2301      	movne	r3, #1
 800abde:	2300      	moveq	r3, #0
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e0ab      	b.n	800ad42 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <HAL_TIM_PWM_Start+0xb6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abf8:	e023      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_PWM_Start+0xc6>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac08:	e01b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIM_PWM_Start+0xd6>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac18:	e013      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d104      	bne.n	800ac2a <HAL_TIM_PWM_Start+0xe6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac28:	e00b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b10      	cmp	r3, #16
 800ac2e:	d104      	bne.n	800ac3a <HAL_TIM_PWM_Start+0xf6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac38:	e003      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 f938 	bl	800bec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a3d      	ldr	r2, [pc, #244]	; (800ad4c <HAL_TIM_PWM_Start+0x208>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d013      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x13e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a3c      	ldr	r2, [pc, #240]	; (800ad50 <HAL_TIM_PWM_Start+0x20c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00e      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x13e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a3a      	ldr	r2, [pc, #232]	; (800ad54 <HAL_TIM_PWM_Start+0x210>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d009      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x13e>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a39      	ldr	r2, [pc, #228]	; (800ad58 <HAL_TIM_PWM_Start+0x214>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d004      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x13e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a37      	ldr	r2, [pc, #220]	; (800ad5c <HAL_TIM_PWM_Start+0x218>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d101      	bne.n	800ac86 <HAL_TIM_PWM_Start+0x142>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <HAL_TIM_PWM_Start+0x144>
 800ac86:	2300      	movs	r3, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a2a      	ldr	r2, [pc, #168]	; (800ad4c <HAL_TIM_PWM_Start+0x208>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d02c      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acae:	d027      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a2a      	ldr	r2, [pc, #168]	; (800ad60 <HAL_TIM_PWM_Start+0x21c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d022      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a29      	ldr	r2, [pc, #164]	; (800ad64 <HAL_TIM_PWM_Start+0x220>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d01d      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a27      	ldr	r2, [pc, #156]	; (800ad68 <HAL_TIM_PWM_Start+0x224>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d018      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1f      	ldr	r2, [pc, #124]	; (800ad50 <HAL_TIM_PWM_Start+0x20c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d013      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a23      	ldr	r2, [pc, #140]	; (800ad6c <HAL_TIM_PWM_Start+0x228>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00e      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <HAL_TIM_PWM_Start+0x210>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d009      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <HAL_TIM_PWM_Start+0x22c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_TIM_PWM_Start+0x1bc>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a1e      	ldr	r2, [pc, #120]	; (800ad74 <HAL_TIM_PWM_Start+0x230>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d115      	bne.n	800ad2c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <HAL_TIM_PWM_Start+0x234>)
 800ad08:	4013      	ands	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b06      	cmp	r3, #6
 800ad10:	d015      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x1fa>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad18:	d011      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0201 	orr.w	r2, r2, #1
 800ad28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2a:	e008      	b.n	800ad3e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	e000      	b.n	800ad40 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	40010000 	.word	0x40010000
 800ad50:	40010400 	.word	0x40010400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40014400 	.word	0x40014400
 800ad5c:	40014800 	.word	0x40014800
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40001800 	.word	0x40001800
 800ad70:	4000e000 	.word	0x4000e000
 800ad74:	4000e400 	.word	0x4000e400
 800ad78:	00010007 	.word	0x00010007

0800ad7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e08f      	b.n	800aeb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d106      	bne.n	800adaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7f9 fa2f 	bl	8004208 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6899      	ldr	r1, [r3, #8]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4b3e      	ldr	r3, [pc, #248]	; (800aeb8 <HAL_TIM_Encoder_Init+0x13c>)
 800adbe:	400b      	ands	r3, r1
 800adc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 fc5d 	bl	800b68c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	4b31      	ldr	r3, [pc, #196]	; (800aebc <HAL_TIM_Encoder_Init+0x140>)
 800adf8:	4013      	ands	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	4313      	orrs	r3, r2
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4b2b      	ldr	r3, [pc, #172]	; (800aec0 <HAL_TIM_Encoder_Init+0x144>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	4b2a      	ldr	r3, [pc, #168]	; (800aec4 <HAL_TIM_Encoder_Init+0x148>)
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	011a      	lsls	r2, r3, #4
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	031b      	lsls	r3, r3, #12
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	fffebff8 	.word	0xfffebff8
 800aebc:	fffffcfc 	.word	0xfffffcfc
 800aec0:	fffff3f3 	.word	0xfffff3f3
 800aec4:	ffff0f0f 	.word	0xffff0f0f

0800aec8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aed8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aee0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d110      	bne.n	800af1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d102      	bne.n	800af04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aefe:	7b7b      	ldrb	r3, [r7, #13]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d001      	beq.n	800af08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e069      	b.n	800afdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af18:	e031      	b.n	800af7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d110      	bne.n	800af42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d102      	bne.n	800af2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af26:	7b3b      	ldrb	r3, [r7, #12]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d001      	beq.n	800af30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e055      	b.n	800afdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2202      	movs	r2, #2
 800af3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af40:	e01d      	b.n	800af7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d108      	bne.n	800af5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d105      	bne.n	800af5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af4e:	7b7b      	ldrb	r3, [r7, #13]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d102      	bne.n	800af5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af54:	7b3b      	ldrb	r3, [r7, #12]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d001      	beq.n	800af5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e03e      	b.n	800afdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2202      	movs	r2, #2
 800af62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2202      	movs	r2, #2
 800af7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_TIM_Encoder_Start+0xc4>
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b04      	cmp	r3, #4
 800af88:	d008      	beq.n	800af9c <HAL_TIM_Encoder_Start+0xd4>
 800af8a:	e00f      	b.n	800afac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2201      	movs	r2, #1
 800af92:	2100      	movs	r1, #0
 800af94:	4618      	mov	r0, r3
 800af96:	f000 ff93 	bl	800bec0 <TIM_CCxChannelCmd>
      break;
 800af9a:	e016      	b.n	800afca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2201      	movs	r2, #1
 800afa2:	2104      	movs	r1, #4
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 ff8b 	bl	800bec0 <TIM_CCxChannelCmd>
      break;
 800afaa:	e00e      	b.n	800afca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2201      	movs	r2, #1
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 ff83 	bl	800bec0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2201      	movs	r2, #1
 800afc0:	2104      	movs	r1, #4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 ff7c 	bl	800bec0 <TIM_CCxChannelCmd>
      break;
 800afc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d122      	bne.n	800b040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b02      	cmp	r3, #2
 800b006:	d11b      	bne.n	800b040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f06f 0202 	mvn.w	r2, #2
 800b010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	f003 0303 	and.w	r3, r3, #3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb12 	bl	800b650 <HAL_TIM_IC_CaptureCallback>
 800b02c:	e005      	b.n	800b03a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fb04 	bl	800b63c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fb15 	bl	800b664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0304 	and.w	r3, r3, #4
 800b04a:	2b04      	cmp	r3, #4
 800b04c:	d122      	bne.n	800b094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d11b      	bne.n	800b094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f06f 0204 	mvn.w	r2, #4
 800b064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fae8 	bl	800b650 <HAL_TIM_IC_CaptureCallback>
 800b080:	e005      	b.n	800b08e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fada 	bl	800b63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 faeb 	bl	800b664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0308 	and.w	r3, r3, #8
 800b09e:	2b08      	cmp	r3, #8
 800b0a0:	d122      	bne.n	800b0e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f003 0308 	and.w	r3, r3, #8
 800b0ac:	2b08      	cmp	r3, #8
 800b0ae:	d11b      	bne.n	800b0e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f06f 0208 	mvn.w	r2, #8
 800b0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2204      	movs	r2, #4
 800b0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fabe 	bl	800b650 <HAL_TIM_IC_CaptureCallback>
 800b0d4:	e005      	b.n	800b0e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fab0 	bl	800b63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fac1 	bl	800b664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	f003 0310 	and.w	r3, r3, #16
 800b0f2:	2b10      	cmp	r3, #16
 800b0f4:	d122      	bne.n	800b13c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f003 0310 	and.w	r3, r3, #16
 800b100:	2b10      	cmp	r3, #16
 800b102:	d11b      	bne.n	800b13c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f06f 0210 	mvn.w	r2, #16
 800b10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2208      	movs	r2, #8
 800b112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa94 	bl	800b650 <HAL_TIM_IC_CaptureCallback>
 800b128:	e005      	b.n	800b136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fa86 	bl	800b63c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fa97 	bl	800b664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10e      	bne.n	800b168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b01      	cmp	r3, #1
 800b156:	d107      	bne.n	800b168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0201 	mvn.w	r2, #1
 800b160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7f6 f91c 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b172:	2b80      	cmp	r3, #128	; 0x80
 800b174:	d10e      	bne.n	800b194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b180:	2b80      	cmp	r3, #128	; 0x80
 800b182:	d107      	bne.n	800b194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b18c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 f802 	bl	800c198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a2:	d10e      	bne.n	800b1c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ae:	2b80      	cmp	r3, #128	; 0x80
 800b1b0:	d107      	bne.n	800b1c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fff5 	bl	800c1ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1cc:	2b40      	cmp	r3, #64	; 0x40
 800b1ce:	d10e      	bne.n	800b1ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1da:	2b40      	cmp	r3, #64	; 0x40
 800b1dc:	d107      	bne.n	800b1ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fa45 	bl	800b678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b20      	cmp	r3, #32
 800b1fa:	d10e      	bne.n	800b21a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b20      	cmp	r3, #32
 800b208:	d107      	bne.n	800b21a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f06f 0220 	mvn.w	r2, #32
 800b212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 ffb5 	bl	800c184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d101      	bne.n	800b242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b23e:	2302      	movs	r3, #2
 800b240:	e0ff      	b.n	800b442 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2201      	movs	r2, #1
 800b246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b14      	cmp	r3, #20
 800b24e:	f200 80f0 	bhi.w	800b432 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b252:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b2ad 	.word	0x0800b2ad
 800b25c:	0800b433 	.word	0x0800b433
 800b260:	0800b433 	.word	0x0800b433
 800b264:	0800b433 	.word	0x0800b433
 800b268:	0800b2ed 	.word	0x0800b2ed
 800b26c:	0800b433 	.word	0x0800b433
 800b270:	0800b433 	.word	0x0800b433
 800b274:	0800b433 	.word	0x0800b433
 800b278:	0800b32f 	.word	0x0800b32f
 800b27c:	0800b433 	.word	0x0800b433
 800b280:	0800b433 	.word	0x0800b433
 800b284:	0800b433 	.word	0x0800b433
 800b288:	0800b36f 	.word	0x0800b36f
 800b28c:	0800b433 	.word	0x0800b433
 800b290:	0800b433 	.word	0x0800b433
 800b294:	0800b433 	.word	0x0800b433
 800b298:	0800b3b1 	.word	0x0800b3b1
 800b29c:	0800b433 	.word	0x0800b433
 800b2a0:	0800b433 	.word	0x0800b433
 800b2a4:	0800b433 	.word	0x0800b433
 800b2a8:	0800b3f1 	.word	0x0800b3f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 fa90 	bl	800b7d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	699a      	ldr	r2, [r3, #24]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0208 	orr.w	r2, r2, #8
 800b2c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699a      	ldr	r2, [r3, #24]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f022 0204 	bic.w	r2, r2, #4
 800b2d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6999      	ldr	r1, [r3, #24]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	691a      	ldr	r2, [r3, #16]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	619a      	str	r2, [r3, #24]
      break;
 800b2ea:	e0a5      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fb00 	bl	800b8f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	699a      	ldr	r2, [r3, #24]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	699a      	ldr	r2, [r3, #24]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6999      	ldr	r1, [r3, #24]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	021a      	lsls	r2, r3, #8
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	619a      	str	r2, [r3, #24]
      break;
 800b32c:	e084      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fb69 	bl	800ba0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	69da      	ldr	r2, [r3, #28]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f042 0208 	orr.w	r2, r2, #8
 800b348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	69da      	ldr	r2, [r3, #28]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0204 	bic.w	r2, r2, #4
 800b358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	69d9      	ldr	r1, [r3, #28]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	430a      	orrs	r2, r1
 800b36a:	61da      	str	r2, [r3, #28]
      break;
 800b36c:	e064      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	4618      	mov	r0, r3
 800b376:	f000 fbd1 	bl	800bb1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69da      	ldr	r2, [r3, #28]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	69da      	ldr	r2, [r3, #28]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69d9      	ldr	r1, [r3, #28]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	021a      	lsls	r2, r3, #8
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	61da      	str	r2, [r3, #28]
      break;
 800b3ae:	e043      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fc1a 	bl	800bbf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0208 	orr.w	r2, r2, #8
 800b3ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0204 	bic.w	r2, r2, #4
 800b3da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	691a      	ldr	r2, [r3, #16]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b3ee:	e023      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	68b9      	ldr	r1, [r7, #8]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fc5e 	bl	800bcb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b40a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b41a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	021a      	lsls	r2, r3, #8
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b430:	e002      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	75fb      	strb	r3, [r7, #23]
      break;
 800b436:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b440:	7dfb      	ldrb	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop

0800b44c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_TIM_ConfigClockSource+0x1c>
 800b464:	2302      	movs	r3, #2
 800b466:	e0dc      	b.n	800b622 <HAL_TIM_ConfigClockSource+0x1d6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	4b6a      	ldr	r3, [pc, #424]	; (800b62c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b484:	4013      	ands	r3, r2
 800b486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b48e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a64      	ldr	r2, [pc, #400]	; (800b630 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	f000 80a9 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4a4:	4a62      	ldr	r2, [pc, #392]	; (800b630 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	f200 80ae 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4ac:	4a61      	ldr	r2, [pc, #388]	; (800b634 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	f000 80a1 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4b4:	4a5f      	ldr	r2, [pc, #380]	; (800b634 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	f200 80a6 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4bc:	4a5e      	ldr	r2, [pc, #376]	; (800b638 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	f000 8099 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4c4:	4a5c      	ldr	r2, [pc, #368]	; (800b638 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	f200 809e 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4d0:	f000 8091 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b4d8:	f200 8096 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e0:	f000 8089 	beq.w	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b4e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e8:	f200 808e 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4f0:	d03e      	beq.n	800b570 <HAL_TIM_ConfigClockSource+0x124>
 800b4f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4f6:	f200 8087 	bhi.w	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fe:	f000 8086 	beq.w	800b60e <HAL_TIM_ConfigClockSource+0x1c2>
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d87f      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b508:	2b70      	cmp	r3, #112	; 0x70
 800b50a:	d01a      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0xf6>
 800b50c:	2b70      	cmp	r3, #112	; 0x70
 800b50e:	d87b      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b510:	2b60      	cmp	r3, #96	; 0x60
 800b512:	d050      	beq.n	800b5b6 <HAL_TIM_ConfigClockSource+0x16a>
 800b514:	2b60      	cmp	r3, #96	; 0x60
 800b516:	d877      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b518:	2b50      	cmp	r3, #80	; 0x50
 800b51a:	d03c      	beq.n	800b596 <HAL_TIM_ConfigClockSource+0x14a>
 800b51c:	2b50      	cmp	r3, #80	; 0x50
 800b51e:	d873      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b520:	2b40      	cmp	r3, #64	; 0x40
 800b522:	d058      	beq.n	800b5d6 <HAL_TIM_ConfigClockSource+0x18a>
 800b524:	2b40      	cmp	r3, #64	; 0x40
 800b526:	d86f      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b528:	2b30      	cmp	r3, #48	; 0x30
 800b52a:	d064      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b52c:	2b30      	cmp	r3, #48	; 0x30
 800b52e:	d86b      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b530:	2b20      	cmp	r3, #32
 800b532:	d060      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b534:	2b20      	cmp	r3, #32
 800b536:	d867      	bhi.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d05c      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b53c:	2b10      	cmp	r3, #16
 800b53e:	d05a      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b540:	e062      	b.n	800b608 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6899      	ldr	r1, [r3, #8]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f000 fc95 	bl	800be80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	609a      	str	r2, [r3, #8]
      break;
 800b56e:	e04f      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6818      	ldr	r0, [r3, #0]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	6899      	ldr	r1, [r3, #8]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f000 fc7e 	bl	800be80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b592:	609a      	str	r2, [r3, #8]
      break;
 800b594:	e03c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	6859      	ldr	r1, [r3, #4]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f000 fbee 	bl	800bd84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2150      	movs	r1, #80	; 0x50
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fc48 	bl	800be44 <TIM_ITRx_SetConfig>
      break;
 800b5b4:	e02c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6859      	ldr	r1, [r3, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f000 fc0d 	bl	800bde2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2160      	movs	r1, #96	; 0x60
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fc38 	bl	800be44 <TIM_ITRx_SetConfig>
      break;
 800b5d4:	e01c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	6859      	ldr	r1, [r3, #4]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f000 fbce 	bl	800bd84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2140      	movs	r1, #64	; 0x40
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fc28 	bl	800be44 <TIM_ITRx_SetConfig>
      break;
 800b5f4:	e00c      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f000 fc1f 	bl	800be44 <TIM_ITRx_SetConfig>
      break;
 800b606:	e003      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	73fb      	strb	r3, [r7, #15]
      break;
 800b60c:	e000      	b.n	800b610 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b60e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	ffceff88 	.word	0xffceff88
 800b630:	00100040 	.word	0x00100040
 800b634:	00100030 	.word	0x00100030
 800b638:	00100020 	.word	0x00100020

0800b63c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a44      	ldr	r2, [pc, #272]	; (800b7b0 <TIM_Base_SetConfig+0x124>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d013      	beq.n	800b6cc <TIM_Base_SetConfig+0x40>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6aa:	d00f      	beq.n	800b6cc <TIM_Base_SetConfig+0x40>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a41      	ldr	r2, [pc, #260]	; (800b7b4 <TIM_Base_SetConfig+0x128>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d00b      	beq.n	800b6cc <TIM_Base_SetConfig+0x40>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a40      	ldr	r2, [pc, #256]	; (800b7b8 <TIM_Base_SetConfig+0x12c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d007      	beq.n	800b6cc <TIM_Base_SetConfig+0x40>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a3f      	ldr	r2, [pc, #252]	; (800b7bc <TIM_Base_SetConfig+0x130>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d003      	beq.n	800b6cc <TIM_Base_SetConfig+0x40>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a3e      	ldr	r2, [pc, #248]	; (800b7c0 <TIM_Base_SetConfig+0x134>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d108      	bne.n	800b6de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a33      	ldr	r2, [pc, #204]	; (800b7b0 <TIM_Base_SetConfig+0x124>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d027      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ec:	d023      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a30      	ldr	r2, [pc, #192]	; (800b7b4 <TIM_Base_SetConfig+0x128>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d01f      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a2f      	ldr	r2, [pc, #188]	; (800b7b8 <TIM_Base_SetConfig+0x12c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d01b      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a2e      	ldr	r2, [pc, #184]	; (800b7bc <TIM_Base_SetConfig+0x130>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d017      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a2d      	ldr	r2, [pc, #180]	; (800b7c0 <TIM_Base_SetConfig+0x134>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d013      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a2c      	ldr	r2, [pc, #176]	; (800b7c4 <TIM_Base_SetConfig+0x138>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d00f      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a2b      	ldr	r2, [pc, #172]	; (800b7c8 <TIM_Base_SetConfig+0x13c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00b      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a2a      	ldr	r2, [pc, #168]	; (800b7cc <TIM_Base_SetConfig+0x140>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d007      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a29      	ldr	r2, [pc, #164]	; (800b7d0 <TIM_Base_SetConfig+0x144>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d003      	beq.n	800b736 <TIM_Base_SetConfig+0xaa>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a28      	ldr	r2, [pc, #160]	; (800b7d4 <TIM_Base_SetConfig+0x148>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d108      	bne.n	800b748 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b73c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4313      	orrs	r3, r2
 800b746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	4313      	orrs	r3, r2
 800b754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <TIM_Base_SetConfig+0x124>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00f      	beq.n	800b794 <TIM_Base_SetConfig+0x108>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a12      	ldr	r2, [pc, #72]	; (800b7c0 <TIM_Base_SetConfig+0x134>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00b      	beq.n	800b794 <TIM_Base_SetConfig+0x108>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a11      	ldr	r2, [pc, #68]	; (800b7c4 <TIM_Base_SetConfig+0x138>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d007      	beq.n	800b794 <TIM_Base_SetConfig+0x108>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a10      	ldr	r2, [pc, #64]	; (800b7c8 <TIM_Base_SetConfig+0x13c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d003      	beq.n	800b794 <TIM_Base_SetConfig+0x108>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a0f      	ldr	r2, [pc, #60]	; (800b7cc <TIM_Base_SetConfig+0x140>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d103      	bne.n	800b79c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	691a      	ldr	r2, [r3, #16]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	615a      	str	r2, [r3, #20]
}
 800b7a2:	bf00      	nop
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	40010000 	.word	0x40010000
 800b7b4:	40000400 	.word	0x40000400
 800b7b8:	40000800 	.word	0x40000800
 800b7bc:	40000c00 	.word	0x40000c00
 800b7c0:	40010400 	.word	0x40010400
 800b7c4:	40014000 	.word	0x40014000
 800b7c8:	40014400 	.word	0x40014400
 800b7cc:	40014800 	.word	0x40014800
 800b7d0:	4000e000 	.word	0x4000e000
 800b7d4:	4000e400 	.word	0x4000e400

0800b7d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f023 0201 	bic.w	r2, r3, #1
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4b37      	ldr	r3, [pc, #220]	; (800b8e0 <TIM_OC1_SetConfig+0x108>)
 800b804:	4013      	ands	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0303 	bic.w	r3, r3, #3
 800b80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f023 0302 	bic.w	r3, r3, #2
 800b820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4313      	orrs	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a2d      	ldr	r2, [pc, #180]	; (800b8e4 <TIM_OC1_SetConfig+0x10c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d00f      	beq.n	800b854 <TIM_OC1_SetConfig+0x7c>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a2c      	ldr	r2, [pc, #176]	; (800b8e8 <TIM_OC1_SetConfig+0x110>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00b      	beq.n	800b854 <TIM_OC1_SetConfig+0x7c>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a2b      	ldr	r2, [pc, #172]	; (800b8ec <TIM_OC1_SetConfig+0x114>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d007      	beq.n	800b854 <TIM_OC1_SetConfig+0x7c>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a2a      	ldr	r2, [pc, #168]	; (800b8f0 <TIM_OC1_SetConfig+0x118>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d003      	beq.n	800b854 <TIM_OC1_SetConfig+0x7c>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a29      	ldr	r2, [pc, #164]	; (800b8f4 <TIM_OC1_SetConfig+0x11c>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d10c      	bne.n	800b86e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f023 0308 	bic.w	r3, r3, #8
 800b85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f023 0304 	bic.w	r3, r3, #4
 800b86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a1c      	ldr	r2, [pc, #112]	; (800b8e4 <TIM_OC1_SetConfig+0x10c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00f      	beq.n	800b896 <TIM_OC1_SetConfig+0xbe>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a1b      	ldr	r2, [pc, #108]	; (800b8e8 <TIM_OC1_SetConfig+0x110>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00b      	beq.n	800b896 <TIM_OC1_SetConfig+0xbe>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a1a      	ldr	r2, [pc, #104]	; (800b8ec <TIM_OC1_SetConfig+0x114>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d007      	beq.n	800b896 <TIM_OC1_SetConfig+0xbe>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a19      	ldr	r2, [pc, #100]	; (800b8f0 <TIM_OC1_SetConfig+0x118>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d003      	beq.n	800b896 <TIM_OC1_SetConfig+0xbe>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a18      	ldr	r2, [pc, #96]	; (800b8f4 <TIM_OC1_SetConfig+0x11c>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d111      	bne.n	800b8ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	621a      	str	r2, [r3, #32]
}
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	fffeff8f 	.word	0xfffeff8f
 800b8e4:	40010000 	.word	0x40010000
 800b8e8:	40010400 	.word	0x40010400
 800b8ec:	40014000 	.word	0x40014000
 800b8f0:	40014400 	.word	0x40014400
 800b8f4:	40014800 	.word	0x40014800

0800b8f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	f023 0210 	bic.w	r2, r3, #16
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	4b34      	ldr	r3, [pc, #208]	; (800b9f4 <TIM_OC2_SetConfig+0xfc>)
 800b924:	4013      	ands	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	4313      	orrs	r3, r2
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f023 0320 	bic.w	r3, r3, #32
 800b942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a29      	ldr	r2, [pc, #164]	; (800b9f8 <TIM_OC2_SetConfig+0x100>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d003      	beq.n	800b960 <TIM_OC2_SetConfig+0x68>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a28      	ldr	r2, [pc, #160]	; (800b9fc <TIM_OC2_SetConfig+0x104>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d10d      	bne.n	800b97c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	4313      	orrs	r3, r2
 800b972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b97a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a1e      	ldr	r2, [pc, #120]	; (800b9f8 <TIM_OC2_SetConfig+0x100>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00f      	beq.n	800b9a4 <TIM_OC2_SetConfig+0xac>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a1d      	ldr	r2, [pc, #116]	; (800b9fc <TIM_OC2_SetConfig+0x104>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00b      	beq.n	800b9a4 <TIM_OC2_SetConfig+0xac>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a1c      	ldr	r2, [pc, #112]	; (800ba00 <TIM_OC2_SetConfig+0x108>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d007      	beq.n	800b9a4 <TIM_OC2_SetConfig+0xac>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a1b      	ldr	r2, [pc, #108]	; (800ba04 <TIM_OC2_SetConfig+0x10c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d003      	beq.n	800b9a4 <TIM_OC2_SetConfig+0xac>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a1a      	ldr	r2, [pc, #104]	; (800ba08 <TIM_OC2_SetConfig+0x110>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d113      	bne.n	800b9cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	621a      	str	r2, [r3, #32]
}
 800b9e6:	bf00      	nop
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	feff8fff 	.word	0xfeff8fff
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40010400 	.word	0x40010400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800

0800ba0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	4b33      	ldr	r3, [pc, #204]	; (800bb04 <TIM_OC3_SetConfig+0xf8>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a28      	ldr	r2, [pc, #160]	; (800bb08 <TIM_OC3_SetConfig+0xfc>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d003      	beq.n	800ba72 <TIM_OC3_SetConfig+0x66>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <TIM_OC3_SetConfig+0x100>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d10d      	bne.n	800ba8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a1d      	ldr	r2, [pc, #116]	; (800bb08 <TIM_OC3_SetConfig+0xfc>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d00f      	beq.n	800bab6 <TIM_OC3_SetConfig+0xaa>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a1c      	ldr	r2, [pc, #112]	; (800bb0c <TIM_OC3_SetConfig+0x100>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00b      	beq.n	800bab6 <TIM_OC3_SetConfig+0xaa>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <TIM_OC3_SetConfig+0x104>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d007      	beq.n	800bab6 <TIM_OC3_SetConfig+0xaa>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a1a      	ldr	r2, [pc, #104]	; (800bb14 <TIM_OC3_SetConfig+0x108>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d003      	beq.n	800bab6 <TIM_OC3_SetConfig+0xaa>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a19      	ldr	r2, [pc, #100]	; (800bb18 <TIM_OC3_SetConfig+0x10c>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d113      	bne.n	800bade <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800babc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	011b      	lsls	r3, r3, #4
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	011b      	lsls	r3, r3, #4
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	4313      	orrs	r3, r2
 800badc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	621a      	str	r2, [r3, #32]
}
 800baf8:	bf00      	nop
 800bafa:	371c      	adds	r7, #28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	fffeff8f 	.word	0xfffeff8f
 800bb08:	40010000 	.word	0x40010000
 800bb0c:	40010400 	.word	0x40010400
 800bb10:	40014000 	.word	0x40014000
 800bb14:	40014400 	.word	0x40014400
 800bb18:	40014800 	.word	0x40014800

0800bb1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	69db      	ldr	r3, [r3, #28]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <TIM_OC4_SetConfig+0xbc>)
 800bb48:	4013      	ands	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	021b      	lsls	r3, r3, #8
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	031b      	lsls	r3, r3, #12
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a19      	ldr	r2, [pc, #100]	; (800bbdc <TIM_OC4_SetConfig+0xc0>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d00f      	beq.n	800bb9c <TIM_OC4_SetConfig+0x80>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a18      	ldr	r2, [pc, #96]	; (800bbe0 <TIM_OC4_SetConfig+0xc4>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00b      	beq.n	800bb9c <TIM_OC4_SetConfig+0x80>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a17      	ldr	r2, [pc, #92]	; (800bbe4 <TIM_OC4_SetConfig+0xc8>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d007      	beq.n	800bb9c <TIM_OC4_SetConfig+0x80>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a16      	ldr	r2, [pc, #88]	; (800bbe8 <TIM_OC4_SetConfig+0xcc>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d003      	beq.n	800bb9c <TIM_OC4_SetConfig+0x80>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a15      	ldr	r2, [pc, #84]	; (800bbec <TIM_OC4_SetConfig+0xd0>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d109      	bne.n	800bbb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	019b      	lsls	r3, r3, #6
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	621a      	str	r2, [r3, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	feff8fff 	.word	0xfeff8fff
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40010400 	.word	0x40010400
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800

0800bbf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4b21      	ldr	r3, [pc, #132]	; (800bca0 <TIM_OC5_SetConfig+0xb0>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	041b      	lsls	r3, r3, #16
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <TIM_OC5_SetConfig+0xb4>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d00f      	beq.n	800bc66 <TIM_OC5_SetConfig+0x76>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a17      	ldr	r2, [pc, #92]	; (800bca8 <TIM_OC5_SetConfig+0xb8>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d00b      	beq.n	800bc66 <TIM_OC5_SetConfig+0x76>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a16      	ldr	r2, [pc, #88]	; (800bcac <TIM_OC5_SetConfig+0xbc>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d007      	beq.n	800bc66 <TIM_OC5_SetConfig+0x76>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a15      	ldr	r2, [pc, #84]	; (800bcb0 <TIM_OC5_SetConfig+0xc0>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d003      	beq.n	800bc66 <TIM_OC5_SetConfig+0x76>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a14      	ldr	r2, [pc, #80]	; (800bcb4 <TIM_OC5_SetConfig+0xc4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d109      	bne.n	800bc7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	021b      	lsls	r3, r3, #8
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	621a      	str	r2, [r3, #32]
}
 800bc94:	bf00      	nop
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	fffeff8f 	.word	0xfffeff8f
 800bca4:	40010000 	.word	0x40010000
 800bca8:	40010400 	.word	0x40010400
 800bcac:	40014000 	.word	0x40014000
 800bcb0:	40014400 	.word	0x40014400
 800bcb4:	40014800 	.word	0x40014800

0800bcb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a1b      	ldr	r3, [r3, #32]
 800bcd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4b22      	ldr	r3, [pc, #136]	; (800bd6c <TIM_OC6_SetConfig+0xb4>)
 800bce4:	4013      	ands	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	051b      	lsls	r3, r3, #20
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a19      	ldr	r2, [pc, #100]	; (800bd70 <TIM_OC6_SetConfig+0xb8>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d00f      	beq.n	800bd30 <TIM_OC6_SetConfig+0x78>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a18      	ldr	r2, [pc, #96]	; (800bd74 <TIM_OC6_SetConfig+0xbc>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d00b      	beq.n	800bd30 <TIM_OC6_SetConfig+0x78>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <TIM_OC6_SetConfig+0xc0>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d007      	beq.n	800bd30 <TIM_OC6_SetConfig+0x78>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a16      	ldr	r2, [pc, #88]	; (800bd7c <TIM_OC6_SetConfig+0xc4>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d003      	beq.n	800bd30 <TIM_OC6_SetConfig+0x78>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a15      	ldr	r2, [pc, #84]	; (800bd80 <TIM_OC6_SetConfig+0xc8>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d109      	bne.n	800bd44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	029b      	lsls	r3, r3, #10
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	621a      	str	r2, [r3, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	feff8fff 	.word	0xfeff8fff
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40010400 	.word	0x40010400
 800bd78:	40014000 	.word	0x40014000
 800bd7c:	40014400 	.word	0x40014400
 800bd80:	40014800 	.word	0x40014800

0800bd84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b087      	sub	sp, #28
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a1b      	ldr	r3, [r3, #32]
 800bd94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	f023 0201 	bic.w	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bdae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f023 030a 	bic.w	r3, r3, #10
 800bdc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	621a      	str	r2, [r3, #32]
}
 800bdd6:	bf00      	nop
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b087      	sub	sp, #28
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	60f8      	str	r0, [r7, #12]
 800bdea:	60b9      	str	r1, [r7, #8]
 800bdec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	f023 0210 	bic.w	r2, r3, #16
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	031b      	lsls	r3, r3, #12
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	4313      	orrs	r3, r2
 800be16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	011b      	lsls	r3, r3, #4
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4313      	orrs	r3, r2
 800be28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	621a      	str	r2, [r3, #32]
}
 800be36:	bf00      	nop
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4b09      	ldr	r3, [pc, #36]	; (800be7c <TIM_ITRx_SetConfig+0x38>)
 800be58:	4013      	ands	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4313      	orrs	r3, r2
 800be62:	f043 0307 	orr.w	r3, r3, #7
 800be66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	609a      	str	r2, [r3, #8]
}
 800be6e:	bf00      	nop
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	ffcfff8f 	.word	0xffcfff8f

0800be80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be80:	b480      	push	{r7}
 800be82:	b087      	sub	sp, #28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	021a      	lsls	r2, r3, #8
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	431a      	orrs	r2, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	609a      	str	r2, [r3, #8]
}
 800beb4:	bf00      	nop
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f003 031f 	and.w	r3, r3, #31
 800bed2:	2201      	movs	r2, #1
 800bed4:	fa02 f303 	lsl.w	r3, r2, r3
 800bed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a1a      	ldr	r2, [r3, #32]
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	43db      	mvns	r3, r3
 800bee2:	401a      	ands	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6a1a      	ldr	r2, [r3, #32]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	f003 031f 	and.w	r3, r3, #31
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	fa01 f303 	lsl.w	r3, r1, r3
 800bef8:	431a      	orrs	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	621a      	str	r2, [r3, #32]
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
	...

0800bf0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e077      	b.n	800c014 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2202      	movs	r2, #2
 800bf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a35      	ldr	r2, [pc, #212]	; (800c020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d004      	beq.n	800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a34      	ldr	r2, [pc, #208]	; (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d108      	bne.n	800bf6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a25      	ldr	r2, [pc, #148]	; (800c020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d02c      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf96:	d027      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a22      	ldr	r2, [pc, #136]	; (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d022      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a21      	ldr	r2, [pc, #132]	; (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d01d      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a1f      	ldr	r2, [pc, #124]	; (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d018      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a1a      	ldr	r2, [pc, #104]	; (800c024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d013      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a1b      	ldr	r2, [pc, #108]	; (800c034 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d00e      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a1a      	ldr	r2, [pc, #104]	; (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d009      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a18      	ldr	r2, [pc, #96]	; (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d004      	beq.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a17      	ldr	r2, [pc, #92]	; (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d10c      	bne.n	800c002 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	40010000 	.word	0x40010000
 800c024:	40010400 	.word	0x40010400
 800c028:	40000400 	.word	0x40000400
 800c02c:	40000800 	.word	0x40000800
 800c030:	40000c00 	.word	0x40000c00
 800c034:	40001800 	.word	0x40001800
 800c038:	40014000 	.word	0x40014000
 800c03c:	4000e000 	.word	0x4000e000
 800c040:	4000e400 	.word	0x4000e400

0800c044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e087      	b.n	800c170 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	4313      	orrs	r3, r2
 800c074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a27      	ldr	r2, [pc, #156]	; (800c17c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d004      	beq.n	800c0ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a25      	ldr	r2, [pc, #148]	; (800c180 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d106      	bne.n	800c0fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a1e      	ldr	r2, [pc, #120]	; (800c17c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d004      	beq.n	800c110 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a1d      	ldr	r2, [pc, #116]	; (800c180 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d126      	bne.n	800c15e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11a:	051b      	lsls	r3, r3, #20
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	4313      	orrs	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a0e      	ldr	r2, [pc, #56]	; (800c17c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a0d      	ldr	r2, [pc, #52]	; (800c180 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d106      	bne.n	800c15e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	40010000 	.word	0x40010000
 800c180:	40010400 	.word	0x40010400

0800c184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1b4:	bf00      	nop
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e042      	b.n	800c258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d106      	bne.n	800c1ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7f8 f9c1 	bl	800456c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2224      	movs	r2, #36	; 0x24
 800c1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f022 0201 	bic.w	r2, r2, #1
 800c200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fd18 	bl	800cc38 <UART_SetConfig>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d101      	bne.n	800c212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e022      	b.n	800c258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f001 fb78 	bl	800d910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c22e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689a      	ldr	r2, [r3, #8]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c23e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f042 0201 	orr.w	r2, r2, #1
 800c24e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f001 fbff 	bl	800da54 <UART_CheckIdleState>
 800c256:	4603      	mov	r3, r0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e02e      	b.n	800c2d0 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2224      	movs	r2, #36	; 0x24
 800c276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0201 	bic.w	r2, r2, #1
 800c288:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2200      	movs	r2, #0
 800c298:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7f8 fa4a 	bl	800473c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	d17a      	bne.n	800c3e6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d002      	beq.n	800c2fc <HAL_UART_Transmit_DMA+0x24>
 800c2f6:	88fb      	ldrh	r3, [r7, #6]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e073      	b.n	800c3e8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <HAL_UART_Transmit_DMA+0x36>
 800c30a:	2302      	movs	r3, #2
 800c30c:	e06c      	b.n	800c3e8 <HAL_UART_Transmit_DMA+0x110>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	88fa      	ldrh	r2, [r7, #6]
 800c320:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	88fa      	ldrh	r2, [r7, #6]
 800c328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2221      	movs	r2, #33	; 0x21
 800c338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c340:	2b00      	cmp	r3, #0
 800c342:	d02c      	beq.n	800c39e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c348:	4a29      	ldr	r2, [pc, #164]	; (800c3f0 <HAL_UART_Transmit_DMA+0x118>)
 800c34a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c350:	4a28      	ldr	r2, [pc, #160]	; (800c3f4 <HAL_UART_Transmit_DMA+0x11c>)
 800c352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c358:	4a27      	ldr	r2, [pc, #156]	; (800c3f8 <HAL_UART_Transmit_DMA+0x120>)
 800c35a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c360:	2200      	movs	r2, #0
 800c362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c36c:	4619      	mov	r1, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3328      	adds	r3, #40	; 0x28
 800c374:	461a      	mov	r2, r3
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	f7f9 fa56 	bl	8005828 <HAL_DMA_Start_IT>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00d      	beq.n	800c39e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2210      	movs	r2, #16
 800c386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e024      	b.n	800c3e8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2240      	movs	r2, #64	; 0x40
 800c3a4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ce:	623a      	str	r2, [r7, #32]
 800c3d0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d2:	69f9      	ldr	r1, [r7, #28]
 800c3d4:	6a3a      	ldr	r2, [r7, #32]
 800c3d6:	e841 2300 	strex	r3, r2, [r1]
 800c3da:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1e5      	bne.n	800c3ae <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e000      	b.n	800c3e8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c3e6:	2302      	movs	r3, #2
  }
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3728      	adds	r7, #40	; 0x28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	0800df1d 	.word	0x0800df1d
 800c3f4:	0800dfb3 	.word	0x0800dfb3
 800c3f8:	0800e129 	.word	0x0800e129

0800c3fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	; 0x28
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c410:	2b20      	cmp	r3, #32
 800c412:	d142      	bne.n	800c49a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d002      	beq.n	800c420 <HAL_UART_Receive_DMA+0x24>
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e03b      	b.n	800c49c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d101      	bne.n	800c432 <HAL_UART_Receive_DMA+0x36>
 800c42e:	2302      	movs	r3, #2
 800c430:	e034      	b.n	800c49c <HAL_UART_Receive_DMA+0xa0>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a17      	ldr	r2, [pc, #92]	; (800c4a4 <HAL_UART_Receive_DMA+0xa8>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d01f      	beq.n	800c48a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d018      	beq.n	800c48a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	613b      	str	r3, [r7, #16]
   return(result);
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	623b      	str	r3, [r7, #32]
 800c478:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	69f9      	ldr	r1, [r7, #28]
 800c47c:	6a3a      	ldr	r2, [r7, #32]
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	61bb      	str	r3, [r7, #24]
   return(result);
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e6      	bne.n	800c458 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f001 fbf3 	bl	800dc7c <UART_Start_Receive_DMA>
 800c496:	4603      	mov	r3, r0
 800c498:	e000      	b.n	800c49c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c49a:	2302      	movs	r3, #2
  }
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3728      	adds	r7, #40	; 0x28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	58000c00 	.word	0x58000c00

0800c4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b0ba      	sub	sp, #232	; 0xe8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c4d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d11b      	bne.n	800c51c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e8:	f003 0320 	and.w	r3, r3, #32
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d015      	beq.n	800c51c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f4:	f003 0320 	and.w	r3, r3, #32
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d105      	bne.n	800c508 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d009      	beq.n	800c51c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 835a 	beq.w	800cbc6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
      }
      return;
 800c51a:	e354      	b.n	800cbc6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c51c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 811f 	beq.w	800c764 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c526:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c52a:	4b8b      	ldr	r3, [pc, #556]	; (800c758 <HAL_UART_IRQHandler+0x2b0>)
 800c52c:	4013      	ands	r3, r2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c536:	4b89      	ldr	r3, [pc, #548]	; (800c75c <HAL_UART_IRQHandler+0x2b4>)
 800c538:	4013      	ands	r3, r2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8112 	beq.w	800c764 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d011      	beq.n	800c570 <HAL_UART_IRQHandler+0xc8>
 800c54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2201      	movs	r2, #1
 800c55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c566:	f043 0201 	orr.w	r2, r3, #1
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c574:	f003 0302 	and.w	r3, r3, #2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d011      	beq.n	800c5a0 <HAL_UART_IRQHandler+0xf8>
 800c57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00b      	beq.n	800c5a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2202      	movs	r2, #2
 800c58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c596:	f043 0204 	orr.w	r2, r3, #4
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d011      	beq.n	800c5d0 <HAL_UART_IRQHandler+0x128>
 800c5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00b      	beq.n	800c5d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2204      	movs	r2, #4
 800c5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5c6:	f043 0202 	orr.w	r2, r3, #2
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d4:	f003 0308 	and.w	r3, r3, #8
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d017      	beq.n	800c60c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e0:	f003 0320 	and.w	r3, r3, #32
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d105      	bne.n	800c5f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c5e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c5ec:	4b5a      	ldr	r3, [pc, #360]	; (800c758 <HAL_UART_IRQHandler+0x2b0>)
 800c5ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2208      	movs	r2, #8
 800c5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c602:	f043 0208 	orr.w	r2, r3, #8
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c614:	2b00      	cmp	r3, #0
 800c616:	d012      	beq.n	800c63e <HAL_UART_IRQHandler+0x196>
 800c618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c61c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00c      	beq.n	800c63e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c62c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c634:	f043 0220 	orr.w	r2, r3, #32
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 82c0 	beq.w	800cbca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d013      	beq.n	800c67e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c65a:	f003 0320 	and.w	r3, r3, #32
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d007      	beq.n	800c67e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c692:	2b40      	cmp	r3, #64	; 0x40
 800c694:	d005      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c69a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d04f      	beq.n	800c742 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 fbd4 	bl	800de50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b2:	2b40      	cmp	r3, #64	; 0x40
 800c6b4:	d141      	bne.n	800c73a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3308      	adds	r3, #8
 800c6de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c6e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c6ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c6f2:	e841 2300 	strex	r3, r2, [r1]
 800c6f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c6fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1d9      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c706:	2b00      	cmp	r3, #0
 800c708:	d013      	beq.n	800c732 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c70e:	4a14      	ldr	r2, [pc, #80]	; (800c760 <HAL_UART_IRQHandler+0x2b8>)
 800c710:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c716:	4618      	mov	r0, r3
 800c718:	f7f9 fe0e 	bl	8006338 <HAL_DMA_Abort_IT>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d017      	beq.n	800c752 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c730:	e00f      	b.n	800c752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7f6 fe68 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c738:	e00b      	b.n	800c752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7f6 fe64 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c740:	e007      	b.n	800c752 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7f6 fe60 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c750:	e23b      	b.n	800cbca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c752:	bf00      	nop
    return;
 800c754:	e239      	b.n	800cbca <HAL_UART_IRQHandler+0x722>
 800c756:	bf00      	nop
 800c758:	10000001 	.word	0x10000001
 800c75c:	04000120 	.word	0x04000120
 800c760:	0800e1a9 	.word	0x0800e1a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	f040 81ce 	bne.w	800cb0a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c772:	f003 0310 	and.w	r3, r3, #16
 800c776:	2b00      	cmp	r3, #0
 800c778:	f000 81c7 	beq.w	800cb0a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 81c0 	beq.w	800cb0a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2210      	movs	r2, #16
 800c790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79c:	2b40      	cmp	r3, #64	; 0x40
 800c79e:	f040 813b 	bne.w	800ca18 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a8b      	ldr	r2, [pc, #556]	; (800c9d8 <HAL_UART_IRQHandler+0x530>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d059      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a89      	ldr	r2, [pc, #548]	; (800c9dc <HAL_UART_IRQHandler+0x534>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d053      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a87      	ldr	r2, [pc, #540]	; (800c9e0 <HAL_UART_IRQHandler+0x538>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d04d      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a85      	ldr	r2, [pc, #532]	; (800c9e4 <HAL_UART_IRQHandler+0x53c>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d047      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a83      	ldr	r2, [pc, #524]	; (800c9e8 <HAL_UART_IRQHandler+0x540>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d041      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a81      	ldr	r2, [pc, #516]	; (800c9ec <HAL_UART_IRQHandler+0x544>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d03b      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a7f      	ldr	r2, [pc, #508]	; (800c9f0 <HAL_UART_IRQHandler+0x548>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d035      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a7d      	ldr	r2, [pc, #500]	; (800c9f4 <HAL_UART_IRQHandler+0x54c>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d02f      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a7b      	ldr	r2, [pc, #492]	; (800c9f8 <HAL_UART_IRQHandler+0x550>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d029      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a79      	ldr	r2, [pc, #484]	; (800c9fc <HAL_UART_IRQHandler+0x554>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d023      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a77      	ldr	r2, [pc, #476]	; (800ca00 <HAL_UART_IRQHandler+0x558>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d01d      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a75      	ldr	r2, [pc, #468]	; (800ca04 <HAL_UART_IRQHandler+0x55c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d017      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a73      	ldr	r2, [pc, #460]	; (800ca08 <HAL_UART_IRQHandler+0x560>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d011      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a71      	ldr	r2, [pc, #452]	; (800ca0c <HAL_UART_IRQHandler+0x564>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d00b      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a6f      	ldr	r2, [pc, #444]	; (800ca10 <HAL_UART_IRQHandler+0x568>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d005      	beq.n	800c862 <HAL_UART_IRQHandler+0x3ba>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a6d      	ldr	r2, [pc, #436]	; (800ca14 <HAL_UART_IRQHandler+0x56c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d105      	bne.n	800c86e <HAL_UART_IRQHandler+0x3c6>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	e004      	b.n	800c878 <HAL_UART_IRQHandler+0x3d0>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	b29b      	uxth	r3, r3
 800c878:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c87c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 81a4 	beq.w	800cbce <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c88c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c890:	429a      	cmp	r2, r3
 800c892:	f080 819c 	bcs.w	800cbce <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c89c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8aa:	f000 8086 	beq.w	800c9ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8ba:	e853 3f00 	ldrex	r3, [r3]
 800c8be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c8c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c8dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c8e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c8f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1da      	bne.n	800c8ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3308      	adds	r3, #8
 800c8fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c902:	e853 3f00 	ldrex	r3, [r3]
 800c906:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c90a:	f023 0301 	bic.w	r3, r3, #1
 800c90e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3308      	adds	r3, #8
 800c918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c91c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c920:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c922:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c92e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e1      	bne.n	800c8f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c94a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3308      	adds	r3, #8
 800c954:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c958:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c95a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c95e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c960:	e841 2300 	strex	r3, r2, [r1]
 800c964:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e3      	bne.n	800c934 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2220      	movs	r2, #32
 800c970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c982:	e853 3f00 	ldrex	r3, [r3]
 800c986:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c98a:	f023 0310 	bic.w	r3, r3, #16
 800c98e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c99c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c99e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e4      	bne.n	800c97a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f9 f9a1 	bl	8005cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f926 	bl	800cc20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9d4:	e0fb      	b.n	800cbce <HAL_UART_IRQHandler+0x726>
 800c9d6:	bf00      	nop
 800c9d8:	40020010 	.word	0x40020010
 800c9dc:	40020028 	.word	0x40020028
 800c9e0:	40020040 	.word	0x40020040
 800c9e4:	40020058 	.word	0x40020058
 800c9e8:	40020070 	.word	0x40020070
 800c9ec:	40020088 	.word	0x40020088
 800c9f0:	400200a0 	.word	0x400200a0
 800c9f4:	400200b8 	.word	0x400200b8
 800c9f8:	40020410 	.word	0x40020410
 800c9fc:	40020428 	.word	0x40020428
 800ca00:	40020440 	.word	0x40020440
 800ca04:	40020458 	.word	0x40020458
 800ca08:	40020470 	.word	0x40020470
 800ca0c:	40020488 	.word	0x40020488
 800ca10:	400204a0 	.word	0x400204a0
 800ca14:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 80cc 	beq.w	800cbd2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ca3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80c7 	beq.w	800cbd2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	e853 3f00 	ldrex	r3, [r3]
 800ca50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca66:	647b      	str	r3, [r7, #68]	; 0x44
 800ca68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca6e:	e841 2300 	strex	r3, r2, [r1]
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e4      	bne.n	800ca44 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	623b      	str	r3, [r7, #32]
   return(result);
 800ca8a:	6a3a      	ldr	r2, [r7, #32]
 800ca8c:	4b54      	ldr	r3, [pc, #336]	; (800cbe0 <HAL_UART_IRQHandler+0x738>)
 800ca8e:	4013      	ands	r3, r2
 800ca90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3308      	adds	r3, #8
 800ca9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca9e:	633a      	str	r2, [r7, #48]	; 0x30
 800caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e3      	bne.n	800ca7a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2220      	movs	r2, #32
 800cab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 0310 	bic.w	r3, r3, #16
 800cada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caec:	69b9      	ldr	r1, [r7, #24]
 800caee:	69fa      	ldr	r2, [r7, #28]
 800caf0:	e841 2300 	strex	r3, r2, [r1]
 800caf4:	617b      	str	r3, [r7, #20]
   return(result);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1e4      	bne.n	800cac6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cafc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f88c 	bl	800cc20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb08:	e063      	b.n	800cbd2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00e      	beq.n	800cb34 <HAL_UART_IRQHandler+0x68c>
 800cb16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d008      	beq.n	800cb34 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cb2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f001 fb7c 	bl	800e22a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb32:	e051      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d014      	beq.n	800cb6a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d105      	bne.n	800cb58 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d008      	beq.n	800cb6a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d03a      	beq.n	800cbd6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	4798      	blx	r3
    }
    return;
 800cb68:	e035      	b.n	800cbd6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <HAL_UART_IRQHandler+0x6e2>
 800cb76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 fb26 	bl	800e1d4 <UART_EndTransmit_IT>
    return;
 800cb88:	e026      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d009      	beq.n	800cbaa <HAL_UART_IRQHandler+0x702>
 800cb96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 fb55 	bl	800e252 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cba8:	e016      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d010      	beq.n	800cbd8 <HAL_UART_IRQHandler+0x730>
 800cbb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	da0c      	bge.n	800cbd8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f001 fb3d 	bl	800e23e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbc4:	e008      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
      return;
 800cbc6:	bf00      	nop
 800cbc8:	e006      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
    return;
 800cbca:	bf00      	nop
 800cbcc:	e004      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
      return;
 800cbce:	bf00      	nop
 800cbd0:	e002      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
      return;
 800cbd2:	bf00      	nop
 800cbd4:	e000      	b.n	800cbd8 <HAL_UART_IRQHandler+0x730>
    return;
 800cbd6:	bf00      	nop
  }
}
 800cbd8:	37e8      	adds	r7, #232	; 0xe8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	effffffe 	.word	0xeffffffe

0800cbe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc3c:	b092      	sub	sp, #72	; 0x48
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	689a      	ldr	r2, [r3, #8]
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	431a      	orrs	r2, r3
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	431a      	orrs	r2, r3
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	69db      	ldr	r3, [r3, #28]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	4bbe      	ldr	r3, [pc, #760]	; (800cf60 <UART_SetConfig+0x328>)
 800cc68:	4013      	ands	r3, r2
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	6812      	ldr	r2, [r2, #0]
 800cc6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc70:	430b      	orrs	r3, r1
 800cc72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	430a      	orrs	r2, r1
 800cc88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4ab3      	ldr	r2, [pc, #716]	; (800cf64 <UART_SetConfig+0x32c>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d004      	beq.n	800cca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cca0:	4313      	orrs	r3, r2
 800cca2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	689a      	ldr	r2, [r3, #8]
 800ccaa:	4baf      	ldr	r3, [pc, #700]	; (800cf68 <UART_SetConfig+0x330>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccb4:	430b      	orrs	r3, r1
 800ccb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	f023 010f 	bic.w	r1, r3, #15
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	430a      	orrs	r2, r1
 800cccc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4aa6      	ldr	r2, [pc, #664]	; (800cf6c <UART_SetConfig+0x334>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d177      	bne.n	800cdc8 <UART_SetConfig+0x190>
 800ccd8:	4ba5      	ldr	r3, [pc, #660]	; (800cf70 <UART_SetConfig+0x338>)
 800ccda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cce0:	2b28      	cmp	r3, #40	; 0x28
 800cce2:	d86d      	bhi.n	800cdc0 <UART_SetConfig+0x188>
 800cce4:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <UART_SetConfig+0xb4>)
 800cce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccea:	bf00      	nop
 800ccec:	0800cd91 	.word	0x0800cd91
 800ccf0:	0800cdc1 	.word	0x0800cdc1
 800ccf4:	0800cdc1 	.word	0x0800cdc1
 800ccf8:	0800cdc1 	.word	0x0800cdc1
 800ccfc:	0800cdc1 	.word	0x0800cdc1
 800cd00:	0800cdc1 	.word	0x0800cdc1
 800cd04:	0800cdc1 	.word	0x0800cdc1
 800cd08:	0800cdc1 	.word	0x0800cdc1
 800cd0c:	0800cd99 	.word	0x0800cd99
 800cd10:	0800cdc1 	.word	0x0800cdc1
 800cd14:	0800cdc1 	.word	0x0800cdc1
 800cd18:	0800cdc1 	.word	0x0800cdc1
 800cd1c:	0800cdc1 	.word	0x0800cdc1
 800cd20:	0800cdc1 	.word	0x0800cdc1
 800cd24:	0800cdc1 	.word	0x0800cdc1
 800cd28:	0800cdc1 	.word	0x0800cdc1
 800cd2c:	0800cda1 	.word	0x0800cda1
 800cd30:	0800cdc1 	.word	0x0800cdc1
 800cd34:	0800cdc1 	.word	0x0800cdc1
 800cd38:	0800cdc1 	.word	0x0800cdc1
 800cd3c:	0800cdc1 	.word	0x0800cdc1
 800cd40:	0800cdc1 	.word	0x0800cdc1
 800cd44:	0800cdc1 	.word	0x0800cdc1
 800cd48:	0800cdc1 	.word	0x0800cdc1
 800cd4c:	0800cda9 	.word	0x0800cda9
 800cd50:	0800cdc1 	.word	0x0800cdc1
 800cd54:	0800cdc1 	.word	0x0800cdc1
 800cd58:	0800cdc1 	.word	0x0800cdc1
 800cd5c:	0800cdc1 	.word	0x0800cdc1
 800cd60:	0800cdc1 	.word	0x0800cdc1
 800cd64:	0800cdc1 	.word	0x0800cdc1
 800cd68:	0800cdc1 	.word	0x0800cdc1
 800cd6c:	0800cdb1 	.word	0x0800cdb1
 800cd70:	0800cdc1 	.word	0x0800cdc1
 800cd74:	0800cdc1 	.word	0x0800cdc1
 800cd78:	0800cdc1 	.word	0x0800cdc1
 800cd7c:	0800cdc1 	.word	0x0800cdc1
 800cd80:	0800cdc1 	.word	0x0800cdc1
 800cd84:	0800cdc1 	.word	0x0800cdc1
 800cd88:	0800cdc1 	.word	0x0800cdc1
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	2301      	movs	r3, #1
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e326      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cd98:	2304      	movs	r3, #4
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e322      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cda0:	2308      	movs	r3, #8
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e31e      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cda8:	2310      	movs	r3, #16
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdae:	e31a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cdb0:	2320      	movs	r3, #32
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb6:	e316      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cdb8:	2340      	movs	r3, #64	; 0x40
 800cdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdbe:	e312      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cdc0:	2380      	movs	r3, #128	; 0x80
 800cdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc6:	e30e      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a69      	ldr	r2, [pc, #420]	; (800cf74 <UART_SetConfig+0x33c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d130      	bne.n	800ce34 <UART_SetConfig+0x1fc>
 800cdd2:	4b67      	ldr	r3, [pc, #412]	; (800cf70 <UART_SetConfig+0x338>)
 800cdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd6:	f003 0307 	and.w	r3, r3, #7
 800cdda:	2b05      	cmp	r3, #5
 800cddc:	d826      	bhi.n	800ce2c <UART_SetConfig+0x1f4>
 800cdde:	a201      	add	r2, pc, #4	; (adr r2, 800cde4 <UART_SetConfig+0x1ac>)
 800cde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde4:	0800cdfd 	.word	0x0800cdfd
 800cde8:	0800ce05 	.word	0x0800ce05
 800cdec:	0800ce0d 	.word	0x0800ce0d
 800cdf0:	0800ce15 	.word	0x0800ce15
 800cdf4:	0800ce1d 	.word	0x0800ce1d
 800cdf8:	0800ce25 	.word	0x0800ce25
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce02:	e2f0      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce04:	2304      	movs	r3, #4
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0a:	e2ec      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce12:	e2e8      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce14:	2310      	movs	r3, #16
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1a:	e2e4      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce22:	e2e0      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce24:	2340      	movs	r3, #64	; 0x40
 800ce26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2a:	e2dc      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce2c:	2380      	movs	r3, #128	; 0x80
 800ce2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce32:	e2d8      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a4f      	ldr	r2, [pc, #316]	; (800cf78 <UART_SetConfig+0x340>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d130      	bne.n	800cea0 <UART_SetConfig+0x268>
 800ce3e:	4b4c      	ldr	r3, [pc, #304]	; (800cf70 <UART_SetConfig+0x338>)
 800ce40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d826      	bhi.n	800ce98 <UART_SetConfig+0x260>
 800ce4a:	a201      	add	r2, pc, #4	; (adr r2, 800ce50 <UART_SetConfig+0x218>)
 800ce4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce50:	0800ce69 	.word	0x0800ce69
 800ce54:	0800ce71 	.word	0x0800ce71
 800ce58:	0800ce79 	.word	0x0800ce79
 800ce5c:	0800ce81 	.word	0x0800ce81
 800ce60:	0800ce89 	.word	0x0800ce89
 800ce64:	0800ce91 	.word	0x0800ce91
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e2ba      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce70:	2304      	movs	r3, #4
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e2b6      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce78:	2308      	movs	r3, #8
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e2b2      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce80:	2310      	movs	r3, #16
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e2ae      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce88:	2320      	movs	r3, #32
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8e:	e2aa      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce96:	e2a6      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ce98:	2380      	movs	r3, #128	; 0x80
 800ce9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9e:	e2a2      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a35      	ldr	r2, [pc, #212]	; (800cf7c <UART_SetConfig+0x344>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d130      	bne.n	800cf0c <UART_SetConfig+0x2d4>
 800ceaa:	4b31      	ldr	r3, [pc, #196]	; (800cf70 <UART_SetConfig+0x338>)
 800ceac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceae:	f003 0307 	and.w	r3, r3, #7
 800ceb2:	2b05      	cmp	r3, #5
 800ceb4:	d826      	bhi.n	800cf04 <UART_SetConfig+0x2cc>
 800ceb6:	a201      	add	r2, pc, #4	; (adr r2, 800cebc <UART_SetConfig+0x284>)
 800ceb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cebc:	0800ced5 	.word	0x0800ced5
 800cec0:	0800cedd 	.word	0x0800cedd
 800cec4:	0800cee5 	.word	0x0800cee5
 800cec8:	0800ceed 	.word	0x0800ceed
 800cecc:	0800cef5 	.word	0x0800cef5
 800ced0:	0800cefd 	.word	0x0800cefd
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e284      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cedc:	2304      	movs	r3, #4
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee2:	e280      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cee4:	2308      	movs	r3, #8
 800cee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceea:	e27c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800ceec:	2310      	movs	r3, #16
 800ceee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef2:	e278      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cef4:	2320      	movs	r3, #32
 800cef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefa:	e274      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf02:	e270      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf04:	2380      	movs	r3, #128	; 0x80
 800cf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0a:	e26c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a1b      	ldr	r2, [pc, #108]	; (800cf80 <UART_SetConfig+0x348>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d142      	bne.n	800cf9c <UART_SetConfig+0x364>
 800cf16:	4b16      	ldr	r3, [pc, #88]	; (800cf70 <UART_SetConfig+0x338>)
 800cf18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf1a:	f003 0307 	and.w	r3, r3, #7
 800cf1e:	2b05      	cmp	r3, #5
 800cf20:	d838      	bhi.n	800cf94 <UART_SetConfig+0x35c>
 800cf22:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <UART_SetConfig+0x2f0>)
 800cf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf28:	0800cf41 	.word	0x0800cf41
 800cf2c:	0800cf49 	.word	0x0800cf49
 800cf30:	0800cf51 	.word	0x0800cf51
 800cf34:	0800cf59 	.word	0x0800cf59
 800cf38:	0800cf85 	.word	0x0800cf85
 800cf3c:	0800cf8d 	.word	0x0800cf8d
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf46:	e24e      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf48:	2304      	movs	r3, #4
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e24a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf50:	2308      	movs	r3, #8
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf56:	e246      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf58:	2310      	movs	r3, #16
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5e:	e242      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf60:	cfff69f3 	.word	0xcfff69f3
 800cf64:	58000c00 	.word	0x58000c00
 800cf68:	11fff4ff 	.word	0x11fff4ff
 800cf6c:	40011000 	.word	0x40011000
 800cf70:	58024400 	.word	0x58024400
 800cf74:	40004400 	.word	0x40004400
 800cf78:	40004800 	.word	0x40004800
 800cf7c:	40004c00 	.word	0x40004c00
 800cf80:	40005000 	.word	0x40005000
 800cf84:	2320      	movs	r3, #32
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf8a:	e22c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf8c:	2340      	movs	r3, #64	; 0x40
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf92:	e228      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf94:	2380      	movs	r3, #128	; 0x80
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf9a:	e224      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4ab1      	ldr	r2, [pc, #708]	; (800d268 <UART_SetConfig+0x630>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d176      	bne.n	800d094 <UART_SetConfig+0x45c>
 800cfa6:	4bb1      	ldr	r3, [pc, #708]	; (800d26c <UART_SetConfig+0x634>)
 800cfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfae:	2b28      	cmp	r3, #40	; 0x28
 800cfb0:	d86c      	bhi.n	800d08c <UART_SetConfig+0x454>
 800cfb2:	a201      	add	r2, pc, #4	; (adr r2, 800cfb8 <UART_SetConfig+0x380>)
 800cfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb8:	0800d05d 	.word	0x0800d05d
 800cfbc:	0800d08d 	.word	0x0800d08d
 800cfc0:	0800d08d 	.word	0x0800d08d
 800cfc4:	0800d08d 	.word	0x0800d08d
 800cfc8:	0800d08d 	.word	0x0800d08d
 800cfcc:	0800d08d 	.word	0x0800d08d
 800cfd0:	0800d08d 	.word	0x0800d08d
 800cfd4:	0800d08d 	.word	0x0800d08d
 800cfd8:	0800d065 	.word	0x0800d065
 800cfdc:	0800d08d 	.word	0x0800d08d
 800cfe0:	0800d08d 	.word	0x0800d08d
 800cfe4:	0800d08d 	.word	0x0800d08d
 800cfe8:	0800d08d 	.word	0x0800d08d
 800cfec:	0800d08d 	.word	0x0800d08d
 800cff0:	0800d08d 	.word	0x0800d08d
 800cff4:	0800d08d 	.word	0x0800d08d
 800cff8:	0800d06d 	.word	0x0800d06d
 800cffc:	0800d08d 	.word	0x0800d08d
 800d000:	0800d08d 	.word	0x0800d08d
 800d004:	0800d08d 	.word	0x0800d08d
 800d008:	0800d08d 	.word	0x0800d08d
 800d00c:	0800d08d 	.word	0x0800d08d
 800d010:	0800d08d 	.word	0x0800d08d
 800d014:	0800d08d 	.word	0x0800d08d
 800d018:	0800d075 	.word	0x0800d075
 800d01c:	0800d08d 	.word	0x0800d08d
 800d020:	0800d08d 	.word	0x0800d08d
 800d024:	0800d08d 	.word	0x0800d08d
 800d028:	0800d08d 	.word	0x0800d08d
 800d02c:	0800d08d 	.word	0x0800d08d
 800d030:	0800d08d 	.word	0x0800d08d
 800d034:	0800d08d 	.word	0x0800d08d
 800d038:	0800d07d 	.word	0x0800d07d
 800d03c:	0800d08d 	.word	0x0800d08d
 800d040:	0800d08d 	.word	0x0800d08d
 800d044:	0800d08d 	.word	0x0800d08d
 800d048:	0800d08d 	.word	0x0800d08d
 800d04c:	0800d08d 	.word	0x0800d08d
 800d050:	0800d08d 	.word	0x0800d08d
 800d054:	0800d08d 	.word	0x0800d08d
 800d058:	0800d085 	.word	0x0800d085
 800d05c:	2301      	movs	r3, #1
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d062:	e1c0      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d064:	2304      	movs	r3, #4
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06a:	e1bc      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d06c:	2308      	movs	r3, #8
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d072:	e1b8      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d074:	2310      	movs	r3, #16
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07a:	e1b4      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d07c:	2320      	movs	r3, #32
 800d07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d082:	e1b0      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d084:	2340      	movs	r3, #64	; 0x40
 800d086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08a:	e1ac      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d08c:	2380      	movs	r3, #128	; 0x80
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d092:	e1a8      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a75      	ldr	r2, [pc, #468]	; (800d270 <UART_SetConfig+0x638>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d130      	bne.n	800d100 <UART_SetConfig+0x4c8>
 800d09e:	4b73      	ldr	r3, [pc, #460]	; (800d26c <UART_SetConfig+0x634>)
 800d0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	2b05      	cmp	r3, #5
 800d0a8:	d826      	bhi.n	800d0f8 <UART_SetConfig+0x4c0>
 800d0aa:	a201      	add	r2, pc, #4	; (adr r2, 800d0b0 <UART_SetConfig+0x478>)
 800d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b0:	0800d0c9 	.word	0x0800d0c9
 800d0b4:	0800d0d1 	.word	0x0800d0d1
 800d0b8:	0800d0d9 	.word	0x0800d0d9
 800d0bc:	0800d0e1 	.word	0x0800d0e1
 800d0c0:	0800d0e9 	.word	0x0800d0e9
 800d0c4:	0800d0f1 	.word	0x0800d0f1
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ce:	e18a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0d0:	2304      	movs	r3, #4
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	e186      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0d8:	2308      	movs	r3, #8
 800d0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0de:	e182      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0e0:	2310      	movs	r3, #16
 800d0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e6:	e17e      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0e8:	2320      	movs	r3, #32
 800d0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ee:	e17a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0f0:	2340      	movs	r3, #64	; 0x40
 800d0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0f6:	e176      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d0f8:	2380      	movs	r3, #128	; 0x80
 800d0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fe:	e172      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a5b      	ldr	r2, [pc, #364]	; (800d274 <UART_SetConfig+0x63c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d130      	bne.n	800d16c <UART_SetConfig+0x534>
 800d10a:	4b58      	ldr	r3, [pc, #352]	; (800d26c <UART_SetConfig+0x634>)
 800d10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d10e:	f003 0307 	and.w	r3, r3, #7
 800d112:	2b05      	cmp	r3, #5
 800d114:	d826      	bhi.n	800d164 <UART_SetConfig+0x52c>
 800d116:	a201      	add	r2, pc, #4	; (adr r2, 800d11c <UART_SetConfig+0x4e4>)
 800d118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11c:	0800d135 	.word	0x0800d135
 800d120:	0800d13d 	.word	0x0800d13d
 800d124:	0800d145 	.word	0x0800d145
 800d128:	0800d14d 	.word	0x0800d14d
 800d12c:	0800d155 	.word	0x0800d155
 800d130:	0800d15d 	.word	0x0800d15d
 800d134:	2300      	movs	r3, #0
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e154      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d13c:	2304      	movs	r3, #4
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e150      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d144:	2308      	movs	r3, #8
 800d146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14a:	e14c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d14c:	2310      	movs	r3, #16
 800d14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d152:	e148      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d154:	2320      	movs	r3, #32
 800d156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15a:	e144      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d15c:	2340      	movs	r3, #64	; 0x40
 800d15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d162:	e140      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d164:	2380      	movs	r3, #128	; 0x80
 800d166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16a:	e13c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a41      	ldr	r2, [pc, #260]	; (800d278 <UART_SetConfig+0x640>)
 800d172:	4293      	cmp	r3, r2
 800d174:	f040 8082 	bne.w	800d27c <UART_SetConfig+0x644>
 800d178:	4b3c      	ldr	r3, [pc, #240]	; (800d26c <UART_SetConfig+0x634>)
 800d17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d17c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d180:	2b28      	cmp	r3, #40	; 0x28
 800d182:	d86d      	bhi.n	800d260 <UART_SetConfig+0x628>
 800d184:	a201      	add	r2, pc, #4	; (adr r2, 800d18c <UART_SetConfig+0x554>)
 800d186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18a:	bf00      	nop
 800d18c:	0800d231 	.word	0x0800d231
 800d190:	0800d261 	.word	0x0800d261
 800d194:	0800d261 	.word	0x0800d261
 800d198:	0800d261 	.word	0x0800d261
 800d19c:	0800d261 	.word	0x0800d261
 800d1a0:	0800d261 	.word	0x0800d261
 800d1a4:	0800d261 	.word	0x0800d261
 800d1a8:	0800d261 	.word	0x0800d261
 800d1ac:	0800d239 	.word	0x0800d239
 800d1b0:	0800d261 	.word	0x0800d261
 800d1b4:	0800d261 	.word	0x0800d261
 800d1b8:	0800d261 	.word	0x0800d261
 800d1bc:	0800d261 	.word	0x0800d261
 800d1c0:	0800d261 	.word	0x0800d261
 800d1c4:	0800d261 	.word	0x0800d261
 800d1c8:	0800d261 	.word	0x0800d261
 800d1cc:	0800d241 	.word	0x0800d241
 800d1d0:	0800d261 	.word	0x0800d261
 800d1d4:	0800d261 	.word	0x0800d261
 800d1d8:	0800d261 	.word	0x0800d261
 800d1dc:	0800d261 	.word	0x0800d261
 800d1e0:	0800d261 	.word	0x0800d261
 800d1e4:	0800d261 	.word	0x0800d261
 800d1e8:	0800d261 	.word	0x0800d261
 800d1ec:	0800d249 	.word	0x0800d249
 800d1f0:	0800d261 	.word	0x0800d261
 800d1f4:	0800d261 	.word	0x0800d261
 800d1f8:	0800d261 	.word	0x0800d261
 800d1fc:	0800d261 	.word	0x0800d261
 800d200:	0800d261 	.word	0x0800d261
 800d204:	0800d261 	.word	0x0800d261
 800d208:	0800d261 	.word	0x0800d261
 800d20c:	0800d251 	.word	0x0800d251
 800d210:	0800d261 	.word	0x0800d261
 800d214:	0800d261 	.word	0x0800d261
 800d218:	0800d261 	.word	0x0800d261
 800d21c:	0800d261 	.word	0x0800d261
 800d220:	0800d261 	.word	0x0800d261
 800d224:	0800d261 	.word	0x0800d261
 800d228:	0800d261 	.word	0x0800d261
 800d22c:	0800d259 	.word	0x0800d259
 800d230:	2301      	movs	r3, #1
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e0d6      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d238:	2304      	movs	r3, #4
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23e:	e0d2      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d240:	2308      	movs	r3, #8
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d246:	e0ce      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d248:	2310      	movs	r3, #16
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e0ca      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d250:	2320      	movs	r3, #32
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e0c6      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d258:	2340      	movs	r3, #64	; 0x40
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e0c2      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d260:	2380      	movs	r3, #128	; 0x80
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e0be      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d268:	40011400 	.word	0x40011400
 800d26c:	58024400 	.word	0x58024400
 800d270:	40007800 	.word	0x40007800
 800d274:	40007c00 	.word	0x40007c00
 800d278:	40011800 	.word	0x40011800
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4aad      	ldr	r2, [pc, #692]	; (800d538 <UART_SetConfig+0x900>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d176      	bne.n	800d374 <UART_SetConfig+0x73c>
 800d286:	4bad      	ldr	r3, [pc, #692]	; (800d53c <UART_SetConfig+0x904>)
 800d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d28e:	2b28      	cmp	r3, #40	; 0x28
 800d290:	d86c      	bhi.n	800d36c <UART_SetConfig+0x734>
 800d292:	a201      	add	r2, pc, #4	; (adr r2, 800d298 <UART_SetConfig+0x660>)
 800d294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d298:	0800d33d 	.word	0x0800d33d
 800d29c:	0800d36d 	.word	0x0800d36d
 800d2a0:	0800d36d 	.word	0x0800d36d
 800d2a4:	0800d36d 	.word	0x0800d36d
 800d2a8:	0800d36d 	.word	0x0800d36d
 800d2ac:	0800d36d 	.word	0x0800d36d
 800d2b0:	0800d36d 	.word	0x0800d36d
 800d2b4:	0800d36d 	.word	0x0800d36d
 800d2b8:	0800d345 	.word	0x0800d345
 800d2bc:	0800d36d 	.word	0x0800d36d
 800d2c0:	0800d36d 	.word	0x0800d36d
 800d2c4:	0800d36d 	.word	0x0800d36d
 800d2c8:	0800d36d 	.word	0x0800d36d
 800d2cc:	0800d36d 	.word	0x0800d36d
 800d2d0:	0800d36d 	.word	0x0800d36d
 800d2d4:	0800d36d 	.word	0x0800d36d
 800d2d8:	0800d34d 	.word	0x0800d34d
 800d2dc:	0800d36d 	.word	0x0800d36d
 800d2e0:	0800d36d 	.word	0x0800d36d
 800d2e4:	0800d36d 	.word	0x0800d36d
 800d2e8:	0800d36d 	.word	0x0800d36d
 800d2ec:	0800d36d 	.word	0x0800d36d
 800d2f0:	0800d36d 	.word	0x0800d36d
 800d2f4:	0800d36d 	.word	0x0800d36d
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d36d 	.word	0x0800d36d
 800d300:	0800d36d 	.word	0x0800d36d
 800d304:	0800d36d 	.word	0x0800d36d
 800d308:	0800d36d 	.word	0x0800d36d
 800d30c:	0800d36d 	.word	0x0800d36d
 800d310:	0800d36d 	.word	0x0800d36d
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d35d 	.word	0x0800d35d
 800d31c:	0800d36d 	.word	0x0800d36d
 800d320:	0800d36d 	.word	0x0800d36d
 800d324:	0800d36d 	.word	0x0800d36d
 800d328:	0800d36d 	.word	0x0800d36d
 800d32c:	0800d36d 	.word	0x0800d36d
 800d330:	0800d36d 	.word	0x0800d36d
 800d334:	0800d36d 	.word	0x0800d36d
 800d338:	0800d365 	.word	0x0800d365
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e050      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d344:	2304      	movs	r3, #4
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e04c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d34c:	2308      	movs	r3, #8
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e048      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d354:	2310      	movs	r3, #16
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35a:	e044      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d35c:	2320      	movs	r3, #32
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d362:	e040      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d364:	2340      	movs	r3, #64	; 0x40
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36a:	e03c      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d36c:	2380      	movs	r3, #128	; 0x80
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d372:	e038      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a71      	ldr	r2, [pc, #452]	; (800d540 <UART_SetConfig+0x908>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d130      	bne.n	800d3e0 <UART_SetConfig+0x7a8>
 800d37e:	4b6f      	ldr	r3, [pc, #444]	; (800d53c <UART_SetConfig+0x904>)
 800d380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d382:	f003 0307 	and.w	r3, r3, #7
 800d386:	2b05      	cmp	r3, #5
 800d388:	d826      	bhi.n	800d3d8 <UART_SetConfig+0x7a0>
 800d38a:	a201      	add	r2, pc, #4	; (adr r2, 800d390 <UART_SetConfig+0x758>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d3a9 	.word	0x0800d3a9
 800d394:	0800d3b1 	.word	0x0800d3b1
 800d398:	0800d3b9 	.word	0x0800d3b9
 800d39c:	0800d3c1 	.word	0x0800d3c1
 800d3a0:	0800d3c9 	.word	0x0800d3c9
 800d3a4:	0800d3d1 	.word	0x0800d3d1
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e01a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e016      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3b8:	2308      	movs	r3, #8
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e012      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3c0:	2310      	movs	r3, #16
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e00e      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e00a      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3d0:	2340      	movs	r3, #64	; 0x40
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e006      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3d8:	2380      	movs	r3, #128	; 0x80
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e002      	b.n	800d3e6 <UART_SetConfig+0x7ae>
 800d3e0:	2380      	movs	r3, #128	; 0x80
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a55      	ldr	r2, [pc, #340]	; (800d540 <UART_SetConfig+0x908>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	f040 80f8 	bne.w	800d5e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d3f6:	2b20      	cmp	r3, #32
 800d3f8:	dc46      	bgt.n	800d488 <UART_SetConfig+0x850>
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	db75      	blt.n	800d4ea <UART_SetConfig+0x8b2>
 800d3fe:	3b02      	subs	r3, #2
 800d400:	2b1e      	cmp	r3, #30
 800d402:	d872      	bhi.n	800d4ea <UART_SetConfig+0x8b2>
 800d404:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <UART_SetConfig+0x7d4>)
 800d406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40a:	bf00      	nop
 800d40c:	0800d48f 	.word	0x0800d48f
 800d410:	0800d4eb 	.word	0x0800d4eb
 800d414:	0800d497 	.word	0x0800d497
 800d418:	0800d4eb 	.word	0x0800d4eb
 800d41c:	0800d4eb 	.word	0x0800d4eb
 800d420:	0800d4eb 	.word	0x0800d4eb
 800d424:	0800d4a7 	.word	0x0800d4a7
 800d428:	0800d4eb 	.word	0x0800d4eb
 800d42c:	0800d4eb 	.word	0x0800d4eb
 800d430:	0800d4eb 	.word	0x0800d4eb
 800d434:	0800d4eb 	.word	0x0800d4eb
 800d438:	0800d4eb 	.word	0x0800d4eb
 800d43c:	0800d4eb 	.word	0x0800d4eb
 800d440:	0800d4eb 	.word	0x0800d4eb
 800d444:	0800d4b7 	.word	0x0800d4b7
 800d448:	0800d4eb 	.word	0x0800d4eb
 800d44c:	0800d4eb 	.word	0x0800d4eb
 800d450:	0800d4eb 	.word	0x0800d4eb
 800d454:	0800d4eb 	.word	0x0800d4eb
 800d458:	0800d4eb 	.word	0x0800d4eb
 800d45c:	0800d4eb 	.word	0x0800d4eb
 800d460:	0800d4eb 	.word	0x0800d4eb
 800d464:	0800d4eb 	.word	0x0800d4eb
 800d468:	0800d4eb 	.word	0x0800d4eb
 800d46c:	0800d4eb 	.word	0x0800d4eb
 800d470:	0800d4eb 	.word	0x0800d4eb
 800d474:	0800d4eb 	.word	0x0800d4eb
 800d478:	0800d4eb 	.word	0x0800d4eb
 800d47c:	0800d4eb 	.word	0x0800d4eb
 800d480:	0800d4eb 	.word	0x0800d4eb
 800d484:	0800d4dd 	.word	0x0800d4dd
 800d488:	2b40      	cmp	r3, #64	; 0x40
 800d48a:	d02a      	beq.n	800d4e2 <UART_SetConfig+0x8aa>
 800d48c:	e02d      	b.n	800d4ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d48e:	f7fc fe01 	bl	800a094 <HAL_RCCEx_GetD3PCLK1Freq>
 800d492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d494:	e02f      	b.n	800d4f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fc fe10 	bl	800a0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4a4:	e027      	b.n	800d4f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4a6:	f107 0318 	add.w	r3, r7, #24
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc ff5c 	bl	800a368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4b4:	e01f      	b.n	800d4f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4b6:	4b21      	ldr	r3, [pc, #132]	; (800d53c <UART_SetConfig+0x904>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 0320 	and.w	r3, r3, #32
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d009      	beq.n	800d4d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d4c2:	4b1e      	ldr	r3, [pc, #120]	; (800d53c <UART_SetConfig+0x904>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	08db      	lsrs	r3, r3, #3
 800d4c8:	f003 0303 	and.w	r3, r3, #3
 800d4cc:	4a1d      	ldr	r2, [pc, #116]	; (800d544 <UART_SetConfig+0x90c>)
 800d4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4d4:	e00f      	b.n	800d4f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d4d6:	4b1b      	ldr	r3, [pc, #108]	; (800d544 <UART_SetConfig+0x90c>)
 800d4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4da:	e00c      	b.n	800d4f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4dc:	4b1a      	ldr	r3, [pc, #104]	; (800d548 <UART_SetConfig+0x910>)
 800d4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4e0:	e009      	b.n	800d4f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4e8:	e005      	b.n	800d4f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d4f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 81ee 	beq.w	800d8da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	4a12      	ldr	r2, [pc, #72]	; (800d54c <UART_SetConfig+0x914>)
 800d504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d508:	461a      	mov	r2, r3
 800d50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d510:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d51e:	429a      	cmp	r2, r3
 800d520:	d305      	bcc.n	800d52e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d910      	bls.n	800d550 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d534:	e1d1      	b.n	800d8da <UART_SetConfig+0xca2>
 800d536:	bf00      	nop
 800d538:	40011c00 	.word	0x40011c00
 800d53c:	58024400 	.word	0x58024400
 800d540:	58000c00 	.word	0x58000c00
 800d544:	03d09000 	.word	0x03d09000
 800d548:	003d0900 	.word	0x003d0900
 800d54c:	0800eb10 	.word	0x0800eb10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d552:	2200      	movs	r2, #0
 800d554:	60bb      	str	r3, [r7, #8]
 800d556:	60fa      	str	r2, [r7, #12]
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55c:	4ac0      	ldr	r2, [pc, #768]	; (800d860 <UART_SetConfig+0xc28>)
 800d55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d562:	b29b      	uxth	r3, r3
 800d564:	2200      	movs	r2, #0
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d56e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d572:	f7f2 fed5 	bl	8000320 <__aeabi_uldivmod>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	4610      	mov	r0, r2
 800d57c:	4619      	mov	r1, r3
 800d57e:	f04f 0200 	mov.w	r2, #0
 800d582:	f04f 0300 	mov.w	r3, #0
 800d586:	020b      	lsls	r3, r1, #8
 800d588:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d58c:	0202      	lsls	r2, r0, #8
 800d58e:	6979      	ldr	r1, [r7, #20]
 800d590:	6849      	ldr	r1, [r1, #4]
 800d592:	0849      	lsrs	r1, r1, #1
 800d594:	2000      	movs	r0, #0
 800d596:	460c      	mov	r4, r1
 800d598:	4605      	mov	r5, r0
 800d59a:	eb12 0804 	adds.w	r8, r2, r4
 800d59e:	eb43 0905 	adc.w	r9, r3, r5
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	469a      	mov	sl, r3
 800d5aa:	4693      	mov	fp, r2
 800d5ac:	4652      	mov	r2, sl
 800d5ae:	465b      	mov	r3, fp
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	4649      	mov	r1, r9
 800d5b4:	f7f2 feb4 	bl	8000320 <__aeabi_uldivmod>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4613      	mov	r3, r2
 800d5be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5c6:	d308      	bcc.n	800d5da <UART_SetConfig+0x9a2>
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5ce:	d204      	bcs.n	800d5da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d6:	60da      	str	r2, [r3, #12]
 800d5d8:	e17f      	b.n	800d8da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d5e0:	e17b      	b.n	800d8da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5ea:	f040 80bd 	bne.w	800d768 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d5ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d5f2:	2b20      	cmp	r3, #32
 800d5f4:	dc48      	bgt.n	800d688 <UART_SetConfig+0xa50>
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	db7b      	blt.n	800d6f2 <UART_SetConfig+0xaba>
 800d5fa:	2b20      	cmp	r3, #32
 800d5fc:	d879      	bhi.n	800d6f2 <UART_SetConfig+0xaba>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <UART_SetConfig+0x9cc>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d68f 	.word	0x0800d68f
 800d608:	0800d697 	.word	0x0800d697
 800d60c:	0800d6f3 	.word	0x0800d6f3
 800d610:	0800d6f3 	.word	0x0800d6f3
 800d614:	0800d69f 	.word	0x0800d69f
 800d618:	0800d6f3 	.word	0x0800d6f3
 800d61c:	0800d6f3 	.word	0x0800d6f3
 800d620:	0800d6f3 	.word	0x0800d6f3
 800d624:	0800d6af 	.word	0x0800d6af
 800d628:	0800d6f3 	.word	0x0800d6f3
 800d62c:	0800d6f3 	.word	0x0800d6f3
 800d630:	0800d6f3 	.word	0x0800d6f3
 800d634:	0800d6f3 	.word	0x0800d6f3
 800d638:	0800d6f3 	.word	0x0800d6f3
 800d63c:	0800d6f3 	.word	0x0800d6f3
 800d640:	0800d6f3 	.word	0x0800d6f3
 800d644:	0800d6bf 	.word	0x0800d6bf
 800d648:	0800d6f3 	.word	0x0800d6f3
 800d64c:	0800d6f3 	.word	0x0800d6f3
 800d650:	0800d6f3 	.word	0x0800d6f3
 800d654:	0800d6f3 	.word	0x0800d6f3
 800d658:	0800d6f3 	.word	0x0800d6f3
 800d65c:	0800d6f3 	.word	0x0800d6f3
 800d660:	0800d6f3 	.word	0x0800d6f3
 800d664:	0800d6f3 	.word	0x0800d6f3
 800d668:	0800d6f3 	.word	0x0800d6f3
 800d66c:	0800d6f3 	.word	0x0800d6f3
 800d670:	0800d6f3 	.word	0x0800d6f3
 800d674:	0800d6f3 	.word	0x0800d6f3
 800d678:	0800d6f3 	.word	0x0800d6f3
 800d67c:	0800d6f3 	.word	0x0800d6f3
 800d680:	0800d6f3 	.word	0x0800d6f3
 800d684:	0800d6e5 	.word	0x0800d6e5
 800d688:	2b40      	cmp	r3, #64	; 0x40
 800d68a:	d02e      	beq.n	800d6ea <UART_SetConfig+0xab2>
 800d68c:	e031      	b.n	800d6f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d68e:	f7fb fddb 	bl	8009248 <HAL_RCC_GetPCLK1Freq>
 800d692:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d694:	e033      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d696:	f7fb fded 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 800d69a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d69c:	e02f      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fc fd0c 	bl	800a0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6ac:	e027      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6ae:	f107 0318 	add.w	r3, r7, #24
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fc fe58 	bl	800a368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6bc:	e01f      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6be:	4b69      	ldr	r3, [pc, #420]	; (800d864 <UART_SetConfig+0xc2c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0320 	and.w	r3, r3, #32
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d009      	beq.n	800d6de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6ca:	4b66      	ldr	r3, [pc, #408]	; (800d864 <UART_SetConfig+0xc2c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	08db      	lsrs	r3, r3, #3
 800d6d0:	f003 0303 	and.w	r3, r3, #3
 800d6d4:	4a64      	ldr	r2, [pc, #400]	; (800d868 <UART_SetConfig+0xc30>)
 800d6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d6dc:	e00f      	b.n	800d6fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d6de:	4b62      	ldr	r3, [pc, #392]	; (800d868 <UART_SetConfig+0xc30>)
 800d6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6e2:	e00c      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6e4:	4b61      	ldr	r3, [pc, #388]	; (800d86c <UART_SetConfig+0xc34>)
 800d6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6e8:	e009      	b.n	800d6fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6f0:	e005      	b.n	800d6fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d6fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80ea 	beq.w	800d8da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	4a55      	ldr	r2, [pc, #340]	; (800d860 <UART_SetConfig+0xc28>)
 800d70c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d710:	461a      	mov	r2, r3
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	fbb3 f3f2 	udiv	r3, r3, r2
 800d718:	005a      	lsls	r2, r3, #1
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	085b      	lsrs	r3, r3, #1
 800d720:	441a      	add	r2, r3
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	fbb2 f3f3 	udiv	r3, r2, r3
 800d72a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	2b0f      	cmp	r3, #15
 800d730:	d916      	bls.n	800d760 <UART_SetConfig+0xb28>
 800d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d738:	d212      	bcs.n	800d760 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	f023 030f 	bic.w	r3, r3, #15
 800d742:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	085b      	lsrs	r3, r3, #1
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f003 0307 	and.w	r3, r3, #7
 800d74e:	b29a      	uxth	r2, r3
 800d750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d752:	4313      	orrs	r3, r2
 800d754:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d75c:	60da      	str	r2, [r3, #12]
 800d75e:	e0bc      	b.n	800d8da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d766:	e0b8      	b.n	800d8da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d768:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d76c:	2b20      	cmp	r3, #32
 800d76e:	dc4b      	bgt.n	800d808 <UART_SetConfig+0xbd0>
 800d770:	2b00      	cmp	r3, #0
 800d772:	f2c0 8087 	blt.w	800d884 <UART_SetConfig+0xc4c>
 800d776:	2b20      	cmp	r3, #32
 800d778:	f200 8084 	bhi.w	800d884 <UART_SetConfig+0xc4c>
 800d77c:	a201      	add	r2, pc, #4	; (adr r2, 800d784 <UART_SetConfig+0xb4c>)
 800d77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d782:	bf00      	nop
 800d784:	0800d80f 	.word	0x0800d80f
 800d788:	0800d817 	.word	0x0800d817
 800d78c:	0800d885 	.word	0x0800d885
 800d790:	0800d885 	.word	0x0800d885
 800d794:	0800d81f 	.word	0x0800d81f
 800d798:	0800d885 	.word	0x0800d885
 800d79c:	0800d885 	.word	0x0800d885
 800d7a0:	0800d885 	.word	0x0800d885
 800d7a4:	0800d82f 	.word	0x0800d82f
 800d7a8:	0800d885 	.word	0x0800d885
 800d7ac:	0800d885 	.word	0x0800d885
 800d7b0:	0800d885 	.word	0x0800d885
 800d7b4:	0800d885 	.word	0x0800d885
 800d7b8:	0800d885 	.word	0x0800d885
 800d7bc:	0800d885 	.word	0x0800d885
 800d7c0:	0800d885 	.word	0x0800d885
 800d7c4:	0800d83f 	.word	0x0800d83f
 800d7c8:	0800d885 	.word	0x0800d885
 800d7cc:	0800d885 	.word	0x0800d885
 800d7d0:	0800d885 	.word	0x0800d885
 800d7d4:	0800d885 	.word	0x0800d885
 800d7d8:	0800d885 	.word	0x0800d885
 800d7dc:	0800d885 	.word	0x0800d885
 800d7e0:	0800d885 	.word	0x0800d885
 800d7e4:	0800d885 	.word	0x0800d885
 800d7e8:	0800d885 	.word	0x0800d885
 800d7ec:	0800d885 	.word	0x0800d885
 800d7f0:	0800d885 	.word	0x0800d885
 800d7f4:	0800d885 	.word	0x0800d885
 800d7f8:	0800d885 	.word	0x0800d885
 800d7fc:	0800d885 	.word	0x0800d885
 800d800:	0800d885 	.word	0x0800d885
 800d804:	0800d877 	.word	0x0800d877
 800d808:	2b40      	cmp	r3, #64	; 0x40
 800d80a:	d037      	beq.n	800d87c <UART_SetConfig+0xc44>
 800d80c:	e03a      	b.n	800d884 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d80e:	f7fb fd1b 	bl	8009248 <HAL_RCC_GetPCLK1Freq>
 800d812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d814:	e03c      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d816:	f7fb fd2d 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 800d81a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d81c:	e038      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d81e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d822:	4618      	mov	r0, r3
 800d824:	f7fc fc4c 	bl	800a0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d82c:	e030      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d82e:	f107 0318 	add.w	r3, r7, #24
 800d832:	4618      	mov	r0, r3
 800d834:	f7fc fd98 	bl	800a368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d83c:	e028      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d83e:	4b09      	ldr	r3, [pc, #36]	; (800d864 <UART_SetConfig+0xc2c>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d012      	beq.n	800d870 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d84a:	4b06      	ldr	r3, [pc, #24]	; (800d864 <UART_SetConfig+0xc2c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	08db      	lsrs	r3, r3, #3
 800d850:	f003 0303 	and.w	r3, r3, #3
 800d854:	4a04      	ldr	r2, [pc, #16]	; (800d868 <UART_SetConfig+0xc30>)
 800d856:	fa22 f303 	lsr.w	r3, r2, r3
 800d85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d85c:	e018      	b.n	800d890 <UART_SetConfig+0xc58>
 800d85e:	bf00      	nop
 800d860:	0800eb10 	.word	0x0800eb10
 800d864:	58024400 	.word	0x58024400
 800d868:	03d09000 	.word	0x03d09000
 800d86c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d870:	4b24      	ldr	r3, [pc, #144]	; (800d904 <UART_SetConfig+0xccc>)
 800d872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d874:	e00c      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d876:	4b24      	ldr	r3, [pc, #144]	; (800d908 <UART_SetConfig+0xcd0>)
 800d878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d87a:	e009      	b.n	800d890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d87c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d882:	e005      	b.n	800d890 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d884:	2300      	movs	r3, #0
 800d886:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d88e:	bf00      	nop
    }

    if (pclk != 0U)
 800d890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d021      	beq.n	800d8da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	4a1c      	ldr	r2, [pc, #112]	; (800d90c <UART_SetConfig+0xcd4>)
 800d89c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	085b      	lsrs	r3, r3, #1
 800d8ae:	441a      	add	r2, r3
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	2b0f      	cmp	r3, #15
 800d8be:	d909      	bls.n	800d8d4 <UART_SetConfig+0xc9c>
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c6:	d205      	bcs.n	800d8d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	60da      	str	r2, [r3, #12]
 800d8d2:	e002      	b.n	800d8da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d8f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3748      	adds	r7, #72	; 0x48
 800d8fe:	46bd      	mov	sp, r7
 800d900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d904:	03d09000 	.word	0x03d09000
 800d908:	003d0900 	.word	0x003d0900
 800d90c:	0800eb10 	.word	0x0800eb10

0800d910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00a      	beq.n	800d93a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93e:	f003 0302 	and.w	r3, r3, #2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00a      	beq.n	800d97e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	430a      	orrs	r2, r1
 800d97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	430a      	orrs	r2, r1
 800d99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a4:	f003 0310 	and.w	r3, r3, #16
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00a      	beq.n	800d9c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c6:	f003 0320 	and.w	r3, r3, #32
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d01a      	beq.n	800da26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	430a      	orrs	r2, r1
 800da04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da0e:	d10a      	bne.n	800da26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00a      	beq.n	800da48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	605a      	str	r2, [r3, #4]
  }
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af02      	add	r7, sp, #8
 800da5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da64:	f7f7 f882 	bl	8004b6c <HAL_GetTick>
 800da68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b08      	cmp	r3, #8
 800da76:	d10e      	bne.n	800da96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f82f 	bl	800daea <UART_WaitOnFlagUntilTimeout>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	e025      	b.n	800dae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b04      	cmp	r3, #4
 800daa2:	d10e      	bne.n	800dac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f819 	bl	800daea <UART_WaitOnFlagUntilTimeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e00f      	b.n	800dae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2220      	movs	r2, #32
 800dac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2220      	movs	r2, #32
 800dace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b09c      	sub	sp, #112	; 0x70
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	60b9      	str	r1, [r7, #8]
 800daf4:	603b      	str	r3, [r7, #0]
 800daf6:	4613      	mov	r3, r2
 800daf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dafa:	e0a9      	b.n	800dc50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	f000 80a5 	beq.w	800dc50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db06:	f7f7 f831 	bl	8004b6c <HAL_GetTick>
 800db0a:	4602      	mov	r2, r0
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800db12:	429a      	cmp	r2, r3
 800db14:	d302      	bcc.n	800db1c <UART_WaitOnFlagUntilTimeout+0x32>
 800db16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d140      	bne.n	800db9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db24:	e853 3f00 	ldrex	r3, [r3]
 800db28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800db2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800db30:	667b      	str	r3, [r7, #100]	; 0x64
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800db40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db42:	e841 2300 	strex	r3, r2, [r1]
 800db46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800db48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1e6      	bne.n	800db1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	3308      	adds	r3, #8
 800db54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db58:	e853 3f00 	ldrex	r3, [r3]
 800db5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db60:	f023 0301 	bic.w	r3, r3, #1
 800db64:	663b      	str	r3, [r7, #96]	; 0x60
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3308      	adds	r3, #8
 800db6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db6e:	64ba      	str	r2, [r7, #72]	; 0x48
 800db70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db76:	e841 2300 	strex	r3, r2, [r1]
 800db7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800db7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e5      	bne.n	800db4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2220      	movs	r2, #32
 800db86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2220      	movs	r2, #32
 800db8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e069      	b.n	800dc72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 0304 	and.w	r3, r3, #4
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d051      	beq.n	800dc50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	69db      	ldr	r3, [r3, #28]
 800dbb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbba:	d149      	bne.n	800dc50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	e853 3f00 	ldrex	r3, [r3]
 800dbd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbda:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbec:	e841 2300 	strex	r3, r2, [r1]
 800dbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1e6      	bne.n	800dbc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	e853 3f00 	ldrex	r3, [r3]
 800dc06:	613b      	str	r3, [r7, #16]
   return(result);
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	f023 0301 	bic.w	r3, r3, #1
 800dc0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3308      	adds	r3, #8
 800dc16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc18:	623a      	str	r2, [r7, #32]
 800dc1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1c:	69f9      	ldr	r1, [r7, #28]
 800dc1e:	6a3a      	ldr	r2, [r7, #32]
 800dc20:	e841 2300 	strex	r3, r2, [r1]
 800dc24:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1e5      	bne.n	800dbf8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2220      	movs	r2, #32
 800dc38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2220      	movs	r2, #32
 800dc40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e010      	b.n	800dc72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69da      	ldr	r2, [r3, #28]
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	bf0c      	ite	eq
 800dc60:	2301      	moveq	r3, #1
 800dc62:	2300      	movne	r3, #0
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	461a      	mov	r2, r3
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	f43f af46 	beq.w	800dafc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3770      	adds	r7, #112	; 0x70
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
	...

0800dc7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b096      	sub	sp, #88	; 0x58
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	4613      	mov	r3, r2
 800dc88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	88fa      	ldrh	r2, [r7, #6]
 800dc94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2222      	movs	r2, #34	; 0x22
 800dca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d02c      	beq.n	800dd0a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb4:	4a42      	ldr	r2, [pc, #264]	; (800ddc0 <UART_Start_Receive_DMA+0x144>)
 800dcb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcbc:	4a41      	ldr	r2, [pc, #260]	; (800ddc4 <UART_Start_Receive_DMA+0x148>)
 800dcbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc4:	4a40      	ldr	r2, [pc, #256]	; (800ddc8 <UART_Start_Receive_DMA+0x14c>)
 800dcc6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dccc:	2200      	movs	r2, #0
 800dcce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3324      	adds	r3, #36	; 0x24
 800dcda:	4619      	mov	r1, r3
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce0:	461a      	mov	r2, r3
 800dce2:	88fb      	ldrh	r3, [r7, #6]
 800dce4:	f7f7 fda0 	bl	8005828 <HAL_DMA_Start_IT>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00d      	beq.n	800dd0a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2210      	movs	r2, #16
 800dcf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2220      	movs	r2, #32
 800dd02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e055      	b.n	800ddb6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d018      	beq.n	800dd4c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd22:	e853 3f00 	ldrex	r3, [r3]
 800dd26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd2e:	657b      	str	r3, [r7, #84]	; 0x54
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	461a      	mov	r2, r3
 800dd36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd38:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd40:	e841 2300 	strex	r3, r2, [r1]
 800dd44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e6      	bne.n	800dd1a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3308      	adds	r3, #8
 800dd52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	e853 3f00 	ldrex	r3, [r3]
 800dd5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5e:	f043 0301 	orr.w	r3, r3, #1
 800dd62:	653b      	str	r3, [r7, #80]	; 0x50
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd6c:	637a      	str	r2, [r7, #52]	; 0x34
 800dd6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd74:	e841 2300 	strex	r3, r2, [r1]
 800dd78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e5      	bne.n	800dd4c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3308      	adds	r3, #8
 800dd86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	e853 3f00 	ldrex	r3, [r3]
 800dd8e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dda0:	623a      	str	r2, [r7, #32]
 800dda2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda4:	69f9      	ldr	r1, [r7, #28]
 800dda6:	6a3a      	ldr	r2, [r7, #32]
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e5      	bne.n	800dd80 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3758      	adds	r7, #88	; 0x58
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0800dfcf 	.word	0x0800dfcf
 800ddc4:	0800e0f1 	.word	0x0800e0f1
 800ddc8:	0800e129 	.word	0x0800e129

0800ddcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b08f      	sub	sp, #60	; 0x3c
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	e853 3f00 	ldrex	r3, [r3]
 800dde0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dde8:	637b      	str	r3, [r7, #52]	; 0x34
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddf4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddfa:	e841 2300 	strex	r3, r2, [r1]
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1e6      	bne.n	800ddd4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3308      	adds	r3, #8
 800de0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	e853 3f00 	ldrex	r3, [r3]
 800de14:	60bb      	str	r3, [r7, #8]
   return(result);
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800de1c:	633b      	str	r3, [r7, #48]	; 0x30
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3308      	adds	r3, #8
 800de24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de26:	61ba      	str	r2, [r7, #24]
 800de28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2a:	6979      	ldr	r1, [r7, #20]
 800de2c:	69ba      	ldr	r2, [r7, #24]
 800de2e:	e841 2300 	strex	r3, r2, [r1]
 800de32:	613b      	str	r3, [r7, #16]
   return(result);
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e5      	bne.n	800de06 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2220      	movs	r2, #32
 800de3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800de42:	bf00      	nop
 800de44:	373c      	adds	r7, #60	; 0x3c
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
	...

0800de50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de50:	b480      	push	{r7}
 800de52:	b095      	sub	sp, #84	; 0x54
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de60:	e853 3f00 	ldrex	r3, [r3]
 800de64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de76:	643b      	str	r3, [r7, #64]	; 0x40
 800de78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de7e:	e841 2300 	strex	r3, r2, [r1]
 800de82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e6      	bne.n	800de58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3308      	adds	r3, #8
 800de90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	e853 3f00 	ldrex	r3, [r3]
 800de98:	61fb      	str	r3, [r7, #28]
   return(result);
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	4b1e      	ldr	r3, [pc, #120]	; (800df18 <UART_EndRxTransfer+0xc8>)
 800de9e:	4013      	ands	r3, r2
 800dea0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3308      	adds	r3, #8
 800dea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800deac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e5      	bne.n	800de8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d118      	bne.n	800def8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	e853 3f00 	ldrex	r3, [r3]
 800ded2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	f023 0310 	bic.w	r3, r3, #16
 800deda:	647b      	str	r3, [r7, #68]	; 0x44
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	461a      	mov	r2, r3
 800dee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	69ba      	ldr	r2, [r7, #24]
 800deec:	e841 2300 	strex	r3, r2, [r1]
 800def0:	613b      	str	r3, [r7, #16]
   return(result);
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e6      	bne.n	800dec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2220      	movs	r2, #32
 800defc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800df0c:	bf00      	nop
 800df0e:	3754      	adds	r7, #84	; 0x54
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	effffffe 	.word	0xeffffffe

0800df1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b090      	sub	sp, #64	; 0x40
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df32:	d037      	beq.n	800dfa4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800df34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df36:	2200      	movs	r2, #0
 800df38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800df3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	3308      	adds	r3, #8
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	e853 3f00 	ldrex	r3, [r3]
 800df4a:	623b      	str	r3, [r7, #32]
   return(result);
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df52:	63bb      	str	r3, [r7, #56]	; 0x38
 800df54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3308      	adds	r3, #8
 800df5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5c:	633a      	str	r2, [r7, #48]	; 0x30
 800df5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df64:	e841 2300 	strex	r3, r2, [r1]
 800df68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1e5      	bne.n	800df3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	e853 3f00 	ldrex	r3, [r3]
 800df7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df84:	637b      	str	r3, [r7, #52]	; 0x34
 800df86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	461a      	mov	r2, r3
 800df8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df92:	69b9      	ldr	r1, [r7, #24]
 800df94:	69fa      	ldr	r2, [r7, #28]
 800df96:	e841 2300 	strex	r3, r2, [r1]
 800df9a:	617b      	str	r3, [r7, #20]
   return(result);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1e6      	bne.n	800df70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfa2:	e002      	b.n	800dfaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800dfa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfa6:	f7fe fe1d 	bl	800cbe4 <HAL_UART_TxCpltCallback>
}
 800dfaa:	bf00      	nop
 800dfac:	3740      	adds	r7, #64	; 0x40
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b084      	sub	sp, #16
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7fe fe19 	bl	800cbf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfc6:	bf00      	nop
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b09c      	sub	sp, #112	; 0x70
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfe4:	d071      	beq.n	800e0ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dfe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff6:	e853 3f00 	ldrex	r3, [r3]
 800dffa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e002:	66bb      	str	r3, [r7, #104]	; 0x68
 800e004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	461a      	mov	r2, r3
 800e00a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e00c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e00e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e014:	e841 2300 	strex	r3, r2, [r1]
 800e018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e6      	bne.n	800dfee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3308      	adds	r3, #8
 800e026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02a:	e853 3f00 	ldrex	r3, [r3]
 800e02e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e032:	f023 0301 	bic.w	r3, r3, #1
 800e036:	667b      	str	r3, [r7, #100]	; 0x64
 800e038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3308      	adds	r3, #8
 800e03e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e040:	647a      	str	r2, [r7, #68]	; 0x44
 800e042:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e048:	e841 2300 	strex	r3, r2, [r1]
 800e04c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1e5      	bne.n	800e020 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3308      	adds	r3, #8
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	e853 3f00 	ldrex	r3, [r3]
 800e062:	623b      	str	r3, [r7, #32]
   return(result);
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e06a:	663b      	str	r3, [r7, #96]	; 0x60
 800e06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3308      	adds	r3, #8
 800e072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e074:	633a      	str	r2, [r7, #48]	; 0x30
 800e076:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e07a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e07c:	e841 2300 	strex	r3, r2, [r1]
 800e080:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1e5      	bne.n	800e054 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e08a:	2220      	movs	r2, #32
 800e08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e094:	2b01      	cmp	r3, #1
 800e096:	d118      	bne.n	800e0ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	e853 3f00 	ldrex	r3, [r3]
 800e0a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f023 0310 	bic.w	r3, r3, #16
 800e0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b6:	61fb      	str	r3, [r7, #28]
 800e0b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ba:	69b9      	ldr	r1, [r7, #24]
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	e841 2300 	strex	r3, r2, [r1]
 800e0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e6      	bne.n	800e098 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d107      	bne.n	800e0e2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e0dc:	f7fe fda0 	bl	800cc20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0e0:	e002      	b.n	800e0e8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e0e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e0e4:	f7f5 f9c8 	bl	8003478 <HAL_UART_RxCpltCallback>
}
 800e0e8:	bf00      	nop
 800e0ea:	3770      	adds	r7, #112	; 0x70
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e102:	2b01      	cmp	r3, #1
 800e104:	d109      	bne.n	800e11a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e10c:	085b      	lsrs	r3, r3, #1
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4619      	mov	r1, r3
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7fe fd84 	bl	800cc20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e118:	e002      	b.n	800e120 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7fe fd76 	bl	800cc0c <HAL_UART_RxHalfCpltCallback>
}
 800e120:	bf00      	nop
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e134:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e13c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e144:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e150:	2b80      	cmp	r3, #128	; 0x80
 800e152:	d109      	bne.n	800e168 <UART_DMAError+0x40>
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b21      	cmp	r3, #33	; 0x21
 800e158:	d106      	bne.n	800e168 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e162:	6978      	ldr	r0, [r7, #20]
 800e164:	f7ff fe32 	bl	800ddcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e172:	2b40      	cmp	r3, #64	; 0x40
 800e174:	d109      	bne.n	800e18a <UART_DMAError+0x62>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b22      	cmp	r3, #34	; 0x22
 800e17a:	d106      	bne.n	800e18a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e184:	6978      	ldr	r0, [r7, #20]
 800e186:	f7ff fe63 	bl	800de50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e190:	f043 0210 	orr.w	r2, r3, #16
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e19a:	6978      	ldr	r0, [r7, #20]
 800e19c:	f7f5 f934 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1a0:	bf00      	nop
 800e1a2:	3718      	adds	r7, #24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7f5 f91e 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	e853 3f00 	ldrex	r3, [r3]
 800e1e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1f0:	61fb      	str	r3, [r7, #28]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	61bb      	str	r3, [r7, #24]
 800e1fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fe:	6979      	ldr	r1, [r7, #20]
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	e841 2300 	strex	r3, r2, [r1]
 800e206:	613b      	str	r3, [r7, #16]
   return(result);
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1e6      	bne.n	800e1dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2220      	movs	r2, #32
 800e212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7fe fce1 	bl	800cbe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e222:	bf00      	nop
 800e224:	3720      	adds	r7, #32
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e22a:	b480      	push	{r7}
 800e22c:	b083      	sub	sp, #12
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e232:	bf00      	nop
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e246:	bf00      	nop
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e252:	b480      	push	{r7}
 800e254:	b083      	sub	sp, #12
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e25a:	bf00      	nop
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e266:	b480      	push	{r7}
 800e268:	b085      	sub	sp, #20
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e274:	2b01      	cmp	r3, #1
 800e276:	d101      	bne.n	800e27c <HAL_UARTEx_DisableFifoMode+0x16>
 800e278:	2302      	movs	r3, #2
 800e27a:	e027      	b.n	800e2cc <HAL_UARTEx_DisableFifoMode+0x66>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2224      	movs	r2, #36	; 0x24
 800e288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f022 0201 	bic.w	r2, r2, #1
 800e2a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e2aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2220      	movs	r2, #32
 800e2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d101      	bne.n	800e2f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e02d      	b.n	800e34c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2224      	movs	r2, #36	; 0x24
 800e2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f022 0201 	bic.w	r2, r2, #1
 800e316:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	430a      	orrs	r2, r1
 800e32a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f84f 	bl	800e3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2220      	movs	r2, #32
 800e33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e364:	2b01      	cmp	r3, #1
 800e366:	d101      	bne.n	800e36c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e368:	2302      	movs	r3, #2
 800e36a:	e02d      	b.n	800e3c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2224      	movs	r2, #36	; 0x24
 800e378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f022 0201 	bic.w	r2, r2, #1
 800e392:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	430a      	orrs	r2, r1
 800e3a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f811 	bl	800e3d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d108      	bne.n	800e3f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e3f0:	e031      	b.n	800e456 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e3f2:	2310      	movs	r3, #16
 800e3f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e3f6:	2310      	movs	r3, #16
 800e3f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	0e5b      	lsrs	r3, r3, #25
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0307 	and.w	r3, r3, #7
 800e408:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	0f5b      	lsrs	r3, r3, #29
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f003 0307 	and.w	r3, r3, #7
 800e418:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e41a:	7bbb      	ldrb	r3, [r7, #14]
 800e41c:	7b3a      	ldrb	r2, [r7, #12]
 800e41e:	4911      	ldr	r1, [pc, #68]	; (800e464 <UARTEx_SetNbDataToProcess+0x94>)
 800e420:	5c8a      	ldrb	r2, [r1, r2]
 800e422:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e426:	7b3a      	ldrb	r2, [r7, #12]
 800e428:	490f      	ldr	r1, [pc, #60]	; (800e468 <UARTEx_SetNbDataToProcess+0x98>)
 800e42a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e42c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e430:	b29a      	uxth	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	7b7a      	ldrb	r2, [r7, #13]
 800e43c:	4909      	ldr	r1, [pc, #36]	; (800e464 <UARTEx_SetNbDataToProcess+0x94>)
 800e43e:	5c8a      	ldrb	r2, [r1, r2]
 800e440:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e444:	7b7a      	ldrb	r2, [r7, #13]
 800e446:	4908      	ldr	r1, [pc, #32]	; (800e468 <UARTEx_SetNbDataToProcess+0x98>)
 800e448:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e44a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e44e:	b29a      	uxth	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e456:	bf00      	nop
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	0800eb28 	.word	0x0800eb28
 800e468:	0800eb30 	.word	0x0800eb30

0800e46c <__cxa_pure_virtual>:
 800e46c:	b508      	push	{r3, lr}
 800e46e:	f000 f80d 	bl	800e48c <_ZSt9terminatev>

0800e472 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e472:	b508      	push	{r3, lr}
 800e474:	4780      	blx	r0
 800e476:	f000 f80e 	bl	800e496 <abort>
	...

0800e47c <_ZSt13get_terminatev>:
 800e47c:	4b02      	ldr	r3, [pc, #8]	; (800e488 <_ZSt13get_terminatev+0xc>)
 800e47e:	6818      	ldr	r0, [r3, #0]
 800e480:	f3bf 8f5b 	dmb	ish
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	240001b0 	.word	0x240001b0

0800e48c <_ZSt9terminatev>:
 800e48c:	b508      	push	{r3, lr}
 800e48e:	f7ff fff5 	bl	800e47c <_ZSt13get_terminatev>
 800e492:	f7ff ffee 	bl	800e472 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e496 <abort>:
 800e496:	b508      	push	{r3, lr}
 800e498:	2006      	movs	r0, #6
 800e49a:	f000 f873 	bl	800e584 <raise>
 800e49e:	2001      	movs	r0, #1
 800e4a0:	f7f6 f9fc 	bl	800489c <_exit>

0800e4a4 <__errno>:
 800e4a4:	4b01      	ldr	r3, [pc, #4]	; (800e4ac <__errno+0x8>)
 800e4a6:	6818      	ldr	r0, [r3, #0]
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	240001b4 	.word	0x240001b4

0800e4b0 <__libc_init_array>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	4d0d      	ldr	r5, [pc, #52]	; (800e4e8 <__libc_init_array+0x38>)
 800e4b4:	4c0d      	ldr	r4, [pc, #52]	; (800e4ec <__libc_init_array+0x3c>)
 800e4b6:	1b64      	subs	r4, r4, r5
 800e4b8:	10a4      	asrs	r4, r4, #2
 800e4ba:	2600      	movs	r6, #0
 800e4bc:	42a6      	cmp	r6, r4
 800e4be:	d109      	bne.n	800e4d4 <__libc_init_array+0x24>
 800e4c0:	4d0b      	ldr	r5, [pc, #44]	; (800e4f0 <__libc_init_array+0x40>)
 800e4c2:	4c0c      	ldr	r4, [pc, #48]	; (800e4f4 <__libc_init_array+0x44>)
 800e4c4:	f000 f9b0 	bl	800e828 <_init>
 800e4c8:	1b64      	subs	r4, r4, r5
 800e4ca:	10a4      	asrs	r4, r4, #2
 800e4cc:	2600      	movs	r6, #0
 800e4ce:	42a6      	cmp	r6, r4
 800e4d0:	d105      	bne.n	800e4de <__libc_init_array+0x2e>
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}
 800e4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4d8:	4798      	blx	r3
 800e4da:	3601      	adds	r6, #1
 800e4dc:	e7ee      	b.n	800e4bc <__libc_init_array+0xc>
 800e4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4e2:	4798      	blx	r3
 800e4e4:	3601      	adds	r6, #1
 800e4e6:	e7f2      	b.n	800e4ce <__libc_init_array+0x1e>
 800e4e8:	0800eb40 	.word	0x0800eb40
 800e4ec:	0800eb40 	.word	0x0800eb40
 800e4f0:	0800eb40 	.word	0x0800eb40
 800e4f4:	0800eb48 	.word	0x0800eb48

0800e4f8 <memcpy>:
 800e4f8:	440a      	add	r2, r1
 800e4fa:	4291      	cmp	r1, r2
 800e4fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e500:	d100      	bne.n	800e504 <memcpy+0xc>
 800e502:	4770      	bx	lr
 800e504:	b510      	push	{r4, lr}
 800e506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e50e:	4291      	cmp	r1, r2
 800e510:	d1f9      	bne.n	800e506 <memcpy+0xe>
 800e512:	bd10      	pop	{r4, pc}

0800e514 <memset>:
 800e514:	4402      	add	r2, r0
 800e516:	4603      	mov	r3, r0
 800e518:	4293      	cmp	r3, r2
 800e51a:	d100      	bne.n	800e51e <memset+0xa>
 800e51c:	4770      	bx	lr
 800e51e:	f803 1b01 	strb.w	r1, [r3], #1
 800e522:	e7f9      	b.n	800e518 <memset+0x4>

0800e524 <realloc>:
 800e524:	4b02      	ldr	r3, [pc, #8]	; (800e530 <realloc+0xc>)
 800e526:	460a      	mov	r2, r1
 800e528:	4601      	mov	r1, r0
 800e52a:	6818      	ldr	r0, [r3, #0]
 800e52c:	f000 b8da 	b.w	800e6e4 <_realloc_r>
 800e530:	240001b4 	.word	0x240001b4

0800e534 <_raise_r>:
 800e534:	291f      	cmp	r1, #31
 800e536:	b538      	push	{r3, r4, r5, lr}
 800e538:	4604      	mov	r4, r0
 800e53a:	460d      	mov	r5, r1
 800e53c:	d904      	bls.n	800e548 <_raise_r+0x14>
 800e53e:	2316      	movs	r3, #22
 800e540:	6003      	str	r3, [r0, #0]
 800e542:	f04f 30ff 	mov.w	r0, #4294967295
 800e546:	bd38      	pop	{r3, r4, r5, pc}
 800e548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e54a:	b112      	cbz	r2, 800e552 <_raise_r+0x1e>
 800e54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e550:	b94b      	cbnz	r3, 800e566 <_raise_r+0x32>
 800e552:	4620      	mov	r0, r4
 800e554:	f000 f830 	bl	800e5b8 <_getpid_r>
 800e558:	462a      	mov	r2, r5
 800e55a:	4601      	mov	r1, r0
 800e55c:	4620      	mov	r0, r4
 800e55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e562:	f000 b817 	b.w	800e594 <_kill_r>
 800e566:	2b01      	cmp	r3, #1
 800e568:	d00a      	beq.n	800e580 <_raise_r+0x4c>
 800e56a:	1c59      	adds	r1, r3, #1
 800e56c:	d103      	bne.n	800e576 <_raise_r+0x42>
 800e56e:	2316      	movs	r3, #22
 800e570:	6003      	str	r3, [r0, #0]
 800e572:	2001      	movs	r0, #1
 800e574:	e7e7      	b.n	800e546 <_raise_r+0x12>
 800e576:	2400      	movs	r4, #0
 800e578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e57c:	4628      	mov	r0, r5
 800e57e:	4798      	blx	r3
 800e580:	2000      	movs	r0, #0
 800e582:	e7e0      	b.n	800e546 <_raise_r+0x12>

0800e584 <raise>:
 800e584:	4b02      	ldr	r3, [pc, #8]	; (800e590 <raise+0xc>)
 800e586:	4601      	mov	r1, r0
 800e588:	6818      	ldr	r0, [r3, #0]
 800e58a:	f7ff bfd3 	b.w	800e534 <_raise_r>
 800e58e:	bf00      	nop
 800e590:	240001b4 	.word	0x240001b4

0800e594 <_kill_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4d07      	ldr	r5, [pc, #28]	; (800e5b4 <_kill_r+0x20>)
 800e598:	2300      	movs	r3, #0
 800e59a:	4604      	mov	r4, r0
 800e59c:	4608      	mov	r0, r1
 800e59e:	4611      	mov	r1, r2
 800e5a0:	602b      	str	r3, [r5, #0]
 800e5a2:	f7f6 f96b 	bl	800487c <_kill>
 800e5a6:	1c43      	adds	r3, r0, #1
 800e5a8:	d102      	bne.n	800e5b0 <_kill_r+0x1c>
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	b103      	cbz	r3, 800e5b0 <_kill_r+0x1c>
 800e5ae:	6023      	str	r3, [r4, #0]
 800e5b0:	bd38      	pop	{r3, r4, r5, pc}
 800e5b2:	bf00      	nop
 800e5b4:	24001054 	.word	0x24001054

0800e5b8 <_getpid_r>:
 800e5b8:	f7f6 b958 	b.w	800486c <_getpid>

0800e5bc <sbrk_aligned>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	4e0e      	ldr	r6, [pc, #56]	; (800e5f8 <sbrk_aligned+0x3c>)
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	6831      	ldr	r1, [r6, #0]
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	b911      	cbnz	r1, 800e5ce <sbrk_aligned+0x12>
 800e5c8:	f000 f8bc 	bl	800e744 <_sbrk_r>
 800e5cc:	6030      	str	r0, [r6, #0]
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f000 f8b7 	bl	800e744 <_sbrk_r>
 800e5d6:	1c43      	adds	r3, r0, #1
 800e5d8:	d00a      	beq.n	800e5f0 <sbrk_aligned+0x34>
 800e5da:	1cc4      	adds	r4, r0, #3
 800e5dc:	f024 0403 	bic.w	r4, r4, #3
 800e5e0:	42a0      	cmp	r0, r4
 800e5e2:	d007      	beq.n	800e5f4 <sbrk_aligned+0x38>
 800e5e4:	1a21      	subs	r1, r4, r0
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f000 f8ac 	bl	800e744 <_sbrk_r>
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d101      	bne.n	800e5f4 <sbrk_aligned+0x38>
 800e5f0:	f04f 34ff 	mov.w	r4, #4294967295
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	24001050 	.word	0x24001050

0800e5fc <_malloc_r>:
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e600:	1ccd      	adds	r5, r1, #3
 800e602:	f025 0503 	bic.w	r5, r5, #3
 800e606:	3508      	adds	r5, #8
 800e608:	2d0c      	cmp	r5, #12
 800e60a:	bf38      	it	cc
 800e60c:	250c      	movcc	r5, #12
 800e60e:	2d00      	cmp	r5, #0
 800e610:	4607      	mov	r7, r0
 800e612:	db01      	blt.n	800e618 <_malloc_r+0x1c>
 800e614:	42a9      	cmp	r1, r5
 800e616:	d905      	bls.n	800e624 <_malloc_r+0x28>
 800e618:	230c      	movs	r3, #12
 800e61a:	603b      	str	r3, [r7, #0]
 800e61c:	2600      	movs	r6, #0
 800e61e:	4630      	mov	r0, r6
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	4e2e      	ldr	r6, [pc, #184]	; (800e6e0 <_malloc_r+0xe4>)
 800e626:	f000 f89d 	bl	800e764 <__malloc_lock>
 800e62a:	6833      	ldr	r3, [r6, #0]
 800e62c:	461c      	mov	r4, r3
 800e62e:	bb34      	cbnz	r4, 800e67e <_malloc_r+0x82>
 800e630:	4629      	mov	r1, r5
 800e632:	4638      	mov	r0, r7
 800e634:	f7ff ffc2 	bl	800e5bc <sbrk_aligned>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	4604      	mov	r4, r0
 800e63c:	d14d      	bne.n	800e6da <_malloc_r+0xde>
 800e63e:	6834      	ldr	r4, [r6, #0]
 800e640:	4626      	mov	r6, r4
 800e642:	2e00      	cmp	r6, #0
 800e644:	d140      	bne.n	800e6c8 <_malloc_r+0xcc>
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	4631      	mov	r1, r6
 800e64a:	4638      	mov	r0, r7
 800e64c:	eb04 0803 	add.w	r8, r4, r3
 800e650:	f000 f878 	bl	800e744 <_sbrk_r>
 800e654:	4580      	cmp	r8, r0
 800e656:	d13a      	bne.n	800e6ce <_malloc_r+0xd2>
 800e658:	6821      	ldr	r1, [r4, #0]
 800e65a:	3503      	adds	r5, #3
 800e65c:	1a6d      	subs	r5, r5, r1
 800e65e:	f025 0503 	bic.w	r5, r5, #3
 800e662:	3508      	adds	r5, #8
 800e664:	2d0c      	cmp	r5, #12
 800e666:	bf38      	it	cc
 800e668:	250c      	movcc	r5, #12
 800e66a:	4629      	mov	r1, r5
 800e66c:	4638      	mov	r0, r7
 800e66e:	f7ff ffa5 	bl	800e5bc <sbrk_aligned>
 800e672:	3001      	adds	r0, #1
 800e674:	d02b      	beq.n	800e6ce <_malloc_r+0xd2>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	442b      	add	r3, r5
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	e00e      	b.n	800e69c <_malloc_r+0xa0>
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	1b52      	subs	r2, r2, r5
 800e682:	d41e      	bmi.n	800e6c2 <_malloc_r+0xc6>
 800e684:	2a0b      	cmp	r2, #11
 800e686:	d916      	bls.n	800e6b6 <_malloc_r+0xba>
 800e688:	1961      	adds	r1, r4, r5
 800e68a:	42a3      	cmp	r3, r4
 800e68c:	6025      	str	r5, [r4, #0]
 800e68e:	bf18      	it	ne
 800e690:	6059      	strne	r1, [r3, #4]
 800e692:	6863      	ldr	r3, [r4, #4]
 800e694:	bf08      	it	eq
 800e696:	6031      	streq	r1, [r6, #0]
 800e698:	5162      	str	r2, [r4, r5]
 800e69a:	604b      	str	r3, [r1, #4]
 800e69c:	4638      	mov	r0, r7
 800e69e:	f104 060b 	add.w	r6, r4, #11
 800e6a2:	f000 f865 	bl	800e770 <__malloc_unlock>
 800e6a6:	f026 0607 	bic.w	r6, r6, #7
 800e6aa:	1d23      	adds	r3, r4, #4
 800e6ac:	1af2      	subs	r2, r6, r3
 800e6ae:	d0b6      	beq.n	800e61e <_malloc_r+0x22>
 800e6b0:	1b9b      	subs	r3, r3, r6
 800e6b2:	50a3      	str	r3, [r4, r2]
 800e6b4:	e7b3      	b.n	800e61e <_malloc_r+0x22>
 800e6b6:	6862      	ldr	r2, [r4, #4]
 800e6b8:	42a3      	cmp	r3, r4
 800e6ba:	bf0c      	ite	eq
 800e6bc:	6032      	streq	r2, [r6, #0]
 800e6be:	605a      	strne	r2, [r3, #4]
 800e6c0:	e7ec      	b.n	800e69c <_malloc_r+0xa0>
 800e6c2:	4623      	mov	r3, r4
 800e6c4:	6864      	ldr	r4, [r4, #4]
 800e6c6:	e7b2      	b.n	800e62e <_malloc_r+0x32>
 800e6c8:	4634      	mov	r4, r6
 800e6ca:	6876      	ldr	r6, [r6, #4]
 800e6cc:	e7b9      	b.n	800e642 <_malloc_r+0x46>
 800e6ce:	230c      	movs	r3, #12
 800e6d0:	603b      	str	r3, [r7, #0]
 800e6d2:	4638      	mov	r0, r7
 800e6d4:	f000 f84c 	bl	800e770 <__malloc_unlock>
 800e6d8:	e7a1      	b.n	800e61e <_malloc_r+0x22>
 800e6da:	6025      	str	r5, [r4, #0]
 800e6dc:	e7de      	b.n	800e69c <_malloc_r+0xa0>
 800e6de:	bf00      	nop
 800e6e0:	2400104c 	.word	0x2400104c

0800e6e4 <_realloc_r>:
 800e6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	b921      	cbnz	r1, 800e6fa <_realloc_r+0x16>
 800e6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	f7ff bf81 	b.w	800e5fc <_malloc_r>
 800e6fa:	b92a      	cbnz	r2, 800e708 <_realloc_r+0x24>
 800e6fc:	f000 f83e 	bl	800e77c <_free_r>
 800e700:	4625      	mov	r5, r4
 800e702:	4628      	mov	r0, r5
 800e704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e708:	f000 f884 	bl	800e814 <_malloc_usable_size_r>
 800e70c:	4284      	cmp	r4, r0
 800e70e:	4607      	mov	r7, r0
 800e710:	d802      	bhi.n	800e718 <_realloc_r+0x34>
 800e712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e716:	d812      	bhi.n	800e73e <_realloc_r+0x5a>
 800e718:	4621      	mov	r1, r4
 800e71a:	4640      	mov	r0, r8
 800e71c:	f7ff ff6e 	bl	800e5fc <_malloc_r>
 800e720:	4605      	mov	r5, r0
 800e722:	2800      	cmp	r0, #0
 800e724:	d0ed      	beq.n	800e702 <_realloc_r+0x1e>
 800e726:	42bc      	cmp	r4, r7
 800e728:	4622      	mov	r2, r4
 800e72a:	4631      	mov	r1, r6
 800e72c:	bf28      	it	cs
 800e72e:	463a      	movcs	r2, r7
 800e730:	f7ff fee2 	bl	800e4f8 <memcpy>
 800e734:	4631      	mov	r1, r6
 800e736:	4640      	mov	r0, r8
 800e738:	f000 f820 	bl	800e77c <_free_r>
 800e73c:	e7e1      	b.n	800e702 <_realloc_r+0x1e>
 800e73e:	4635      	mov	r5, r6
 800e740:	e7df      	b.n	800e702 <_realloc_r+0x1e>
	...

0800e744 <_sbrk_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d06      	ldr	r5, [pc, #24]	; (800e760 <_sbrk_r+0x1c>)
 800e748:	2300      	movs	r3, #0
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	602b      	str	r3, [r5, #0]
 800e750:	f7f6 f8ae 	bl	80048b0 <_sbrk>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d102      	bne.n	800e75e <_sbrk_r+0x1a>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	b103      	cbz	r3, 800e75e <_sbrk_r+0x1a>
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	24001054 	.word	0x24001054

0800e764 <__malloc_lock>:
 800e764:	4801      	ldr	r0, [pc, #4]	; (800e76c <__malloc_lock+0x8>)
 800e766:	f000 b85d 	b.w	800e824 <__retarget_lock_acquire_recursive>
 800e76a:	bf00      	nop
 800e76c:	24001058 	.word	0x24001058

0800e770 <__malloc_unlock>:
 800e770:	4801      	ldr	r0, [pc, #4]	; (800e778 <__malloc_unlock+0x8>)
 800e772:	f000 b858 	b.w	800e826 <__retarget_lock_release_recursive>
 800e776:	bf00      	nop
 800e778:	24001058 	.word	0x24001058

0800e77c <_free_r>:
 800e77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77e:	2900      	cmp	r1, #0
 800e780:	d044      	beq.n	800e80c <_free_r+0x90>
 800e782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e786:	9001      	str	r0, [sp, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f1a1 0404 	sub.w	r4, r1, #4
 800e78e:	bfb8      	it	lt
 800e790:	18e4      	addlt	r4, r4, r3
 800e792:	f7ff ffe7 	bl	800e764 <__malloc_lock>
 800e796:	4a1e      	ldr	r2, [pc, #120]	; (800e810 <_free_r+0x94>)
 800e798:	9801      	ldr	r0, [sp, #4]
 800e79a:	6813      	ldr	r3, [r2, #0]
 800e79c:	b933      	cbnz	r3, 800e7ac <_free_r+0x30>
 800e79e:	6063      	str	r3, [r4, #4]
 800e7a0:	6014      	str	r4, [r2, #0]
 800e7a2:	b003      	add	sp, #12
 800e7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7a8:	f7ff bfe2 	b.w	800e770 <__malloc_unlock>
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	d908      	bls.n	800e7c2 <_free_r+0x46>
 800e7b0:	6825      	ldr	r5, [r4, #0]
 800e7b2:	1961      	adds	r1, r4, r5
 800e7b4:	428b      	cmp	r3, r1
 800e7b6:	bf01      	itttt	eq
 800e7b8:	6819      	ldreq	r1, [r3, #0]
 800e7ba:	685b      	ldreq	r3, [r3, #4]
 800e7bc:	1949      	addeq	r1, r1, r5
 800e7be:	6021      	streq	r1, [r4, #0]
 800e7c0:	e7ed      	b.n	800e79e <_free_r+0x22>
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	b10b      	cbz	r3, 800e7cc <_free_r+0x50>
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d9fa      	bls.n	800e7c2 <_free_r+0x46>
 800e7cc:	6811      	ldr	r1, [r2, #0]
 800e7ce:	1855      	adds	r5, r2, r1
 800e7d0:	42a5      	cmp	r5, r4
 800e7d2:	d10b      	bne.n	800e7ec <_free_r+0x70>
 800e7d4:	6824      	ldr	r4, [r4, #0]
 800e7d6:	4421      	add	r1, r4
 800e7d8:	1854      	adds	r4, r2, r1
 800e7da:	42a3      	cmp	r3, r4
 800e7dc:	6011      	str	r1, [r2, #0]
 800e7de:	d1e0      	bne.n	800e7a2 <_free_r+0x26>
 800e7e0:	681c      	ldr	r4, [r3, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	6053      	str	r3, [r2, #4]
 800e7e6:	4421      	add	r1, r4
 800e7e8:	6011      	str	r1, [r2, #0]
 800e7ea:	e7da      	b.n	800e7a2 <_free_r+0x26>
 800e7ec:	d902      	bls.n	800e7f4 <_free_r+0x78>
 800e7ee:	230c      	movs	r3, #12
 800e7f0:	6003      	str	r3, [r0, #0]
 800e7f2:	e7d6      	b.n	800e7a2 <_free_r+0x26>
 800e7f4:	6825      	ldr	r5, [r4, #0]
 800e7f6:	1961      	adds	r1, r4, r5
 800e7f8:	428b      	cmp	r3, r1
 800e7fa:	bf04      	itt	eq
 800e7fc:	6819      	ldreq	r1, [r3, #0]
 800e7fe:	685b      	ldreq	r3, [r3, #4]
 800e800:	6063      	str	r3, [r4, #4]
 800e802:	bf04      	itt	eq
 800e804:	1949      	addeq	r1, r1, r5
 800e806:	6021      	streq	r1, [r4, #0]
 800e808:	6054      	str	r4, [r2, #4]
 800e80a:	e7ca      	b.n	800e7a2 <_free_r+0x26>
 800e80c:	b003      	add	sp, #12
 800e80e:	bd30      	pop	{r4, r5, pc}
 800e810:	2400104c 	.word	0x2400104c

0800e814 <_malloc_usable_size_r>:
 800e814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e818:	1f18      	subs	r0, r3, #4
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bfbc      	itt	lt
 800e81e:	580b      	ldrlt	r3, [r1, r0]
 800e820:	18c0      	addlt	r0, r0, r3
 800e822:	4770      	bx	lr

0800e824 <__retarget_lock_acquire_recursive>:
 800e824:	4770      	bx	lr

0800e826 <__retarget_lock_release_recursive>:
 800e826:	4770      	bx	lr

0800e828 <_init>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	bf00      	nop
 800e82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82e:	bc08      	pop	{r3}
 800e830:	469e      	mov	lr, r3
 800e832:	4770      	bx	lr

0800e834 <_fini>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	bf00      	nop
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr
